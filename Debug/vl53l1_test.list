
vl53l1_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a00c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0800a19c  0800a19c  0000b19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2f0  0800a2f0  0000c088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2f0  0800a2f0  0000b2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2f8  0800a2f8  0000c088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2f8  0800a2f8  0000b2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a2fc  0800a2fc  0000b2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800a300  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c088  2**0
                  CONTENTS
 10 .bss          0000034c  20000088  20000088  0000c088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003d4  200003d4  0000c088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023dcd  00000000  00000000  0000c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e97  00000000  00000000  0002fe85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a8  00000000  00000000  00032d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e62  00000000  00000000  00033fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000215d3  00000000  00000000  00034e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000182f4  00000000  00000000  000563fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bdee1  00000000  00000000  0006e6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012c5d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056e4  00000000  00000000  0012c618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  00131cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a184 	.word	0x0800a184

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800a184 	.word	0x0800a184

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	b29a      	uxth	r2, r3
 8000280:	230a      	movs	r3, #10
 8000282:	68b9      	ldr	r1, [r7, #8]
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <_write+0x24>)
 8000286:	f002 ff67 	bl	8003158 <HAL_UART_Transmit>
  return len;
 800028a:	687b      	ldr	r3, [r7, #4]
}
 800028c:	4618      	mov	r0, r3
 800028e:	3710      	adds	r7, #16
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	200000f8 	.word	0x200000f8

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 800029e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  setbuf(stdout, NULL);
 80002a0:	4b29      	ldr	r3, [pc, #164]	@ (8000348 <main+0xb0>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	689b      	ldr	r3, [r3, #8]
 80002a6:	2100      	movs	r1, #0
 80002a8:	4618      	mov	r0, r3
 80002aa:	f009 f82b 	bl	8009304 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ae:	f000 fae3 	bl	8000878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b2:	f000 f84d 	bl	8000350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b6:	f000 f90b 	bl	80004d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002ba:	f000 f8d9 	bl	8000470 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80002be:	f000 f899 	bl	80003f4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  //sensor initialize
  VL53L1_software_reset(&Dev);
 80002c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002c6:	4618      	mov	r0, r3
 80002c8:	f004 fbed 	bl	8004aa6 <VL53L1_software_reset>
  VL53L1_WaitDeviceBooted(&Dev);
 80002cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002d0:	4618      	mov	r0, r3
 80002d2:	f003 fb92 	bl	80039fa <VL53L1_WaitDeviceBooted>
  VL53L1_DataInit(&Dev);
 80002d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002da:	4618      	mov	r0, r3
 80002dc:	f003 fb11 	bl	8003902 <VL53L1_DataInit>
  VL53L1_StaticInit(&Dev);
 80002e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002e4:	4618      	mov	r0, r3
 80002e6:	f003 fb61 	bl	80039ac <VL53L1_StaticInit>
  VL53L1_SetPresetMode(&Dev, VL53L1_PRESETMODE_AUTONOMOUS);
 80002ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002ee:	2103      	movs	r1, #3
 80002f0:	4618      	mov	r0, r3
 80002f2:	f003 fc64 	bl	8003bbe <VL53L1_SetPresetMode>

  //start
  VL53L1_StartMeasurement(&Dev);
 80002f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002fa:	4618      	mov	r0, r3
 80002fc:	f003 ff9e 	bl	800423c <VL53L1_StartMeasurement>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	VL53L1_GetMeasurementDataReady(&Dev, &st);
 8000300:	f107 0223 	add.w	r2, r7, #35	@ 0x23
 8000304:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000308:	4611      	mov	r1, r2
 800030a:	4618      	mov	r0, r3
 800030c:	f004 f8b6 	bl	800447c <VL53L1_GetMeasurementDataReady>
	VL53L1_GetRangingMeasurementData(&Dev,&data);
 8000310:	1d3a      	adds	r2, r7, #4
 8000312:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000316:	4611      	mov	r1, r2
 8000318:	4618      	mov	r0, r3
 800031a:	f004 fa6b 	bl	80047f4 <VL53L1_GetRangingMeasurementData>
	VL53L1_ClearInterruptAndStartMeasurement(&Dev);
 800031e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000322:	4618      	mov	r0, r3
 8000324:	f004 f882 	bl	800442c <VL53L1_ClearInterruptAndStartMeasurement>
	printf("VL53L1X: %d\n\r", data.RangeMilliMeter);
 8000328:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 800032c:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 8000330:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000334:	4619      	mov	r1, r3
 8000336:	4805      	ldr	r0, [pc, #20]	@ (800034c <main+0xb4>)
 8000338:	f008 ffd2 	bl	80092e0 <iprintf>
	HAL_Delay(1000);
 800033c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000340:	f000 fb00 	bl	8000944 <HAL_Delay>
	VL53L1_GetMeasurementDataReady(&Dev, &st);
 8000344:	bf00      	nop
 8000346:	e7db      	b.n	8000300 <main+0x68>
 8000348:	20000038 	.word	0x20000038
 800034c:	0800a238 	.word	0x0800a238

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b096      	sub	sp, #88	@ 0x58
 8000354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800035a:	2228      	movs	r2, #40	@ 0x28
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f009 f8cf 	bl	8009502 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000364:	f107 031c 	add.w	r3, r7, #28
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]
 8000370:	60da      	str	r2, [r3, #12]
 8000372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
 8000380:	611a      	str	r2, [r3, #16]
 8000382:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000384:	2302      	movs	r3, #2
 8000386:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000388:	2301      	movs	r3, #1
 800038a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800038c:	2310      	movs	r3, #16
 800038e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000390:	2300      	movs	r3, #0
 8000392:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000394:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000398:	4618      	mov	r0, r3
 800039a:	f001 faf3 	bl	8001984 <HAL_RCC_OscConfig>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003a4:	f000 f8c4 	bl	8000530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a8:	230f      	movs	r3, #15
 80003aa:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003ac:	2300      	movs	r3, #0
 80003ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003bc:	f107 031c 	add.w	r3, r7, #28
 80003c0:	2100      	movs	r1, #0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f002 fb1c 	bl	8002a00 <HAL_RCC_ClockConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003ce:	f000 f8af 	bl	8000530 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80003d2:	2320      	movs	r3, #32
 80003d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003d6:	2300      	movs	r3, #0
 80003d8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	4618      	mov	r0, r3
 80003de:	f002 fd47 	bl	8002e70 <HAL_RCCEx_PeriphCLKConfig>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80003e8:	f000 f8a2 	bl	8000530 <Error_Handler>
  }
}
 80003ec:	bf00      	nop
 80003ee:	3758      	adds	r7, #88	@ 0x58
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000468 <MX_I2C1_Init+0x74>)
 80003fa:	4a1c      	ldr	r2, [pc, #112]	@ (800046c <MX_I2C1_Init+0x78>)
 80003fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80003fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000468 <MX_I2C1_Init+0x74>)
 8000400:	f240 220b 	movw	r2, #523	@ 0x20b
 8000404:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000406:	4b18      	ldr	r3, [pc, #96]	@ (8000468 <MX_I2C1_Init+0x74>)
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800040c:	4b16      	ldr	r3, [pc, #88]	@ (8000468 <MX_I2C1_Init+0x74>)
 800040e:	2201      	movs	r2, #1
 8000410:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000412:	4b15      	ldr	r3, [pc, #84]	@ (8000468 <MX_I2C1_Init+0x74>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000418:	4b13      	ldr	r3, [pc, #76]	@ (8000468 <MX_I2C1_Init+0x74>)
 800041a:	2200      	movs	r2, #0
 800041c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800041e:	4b12      	ldr	r3, [pc, #72]	@ (8000468 <MX_I2C1_Init+0x74>)
 8000420:	2200      	movs	r2, #0
 8000422:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000424:	4b10      	ldr	r3, [pc, #64]	@ (8000468 <MX_I2C1_Init+0x74>)
 8000426:	2200      	movs	r2, #0
 8000428:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800042a:	4b0f      	ldr	r3, [pc, #60]	@ (8000468 <MX_I2C1_Init+0x74>)
 800042c:	2200      	movs	r2, #0
 800042e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000430:	480d      	ldr	r0, [pc, #52]	@ (8000468 <MX_I2C1_Init+0x74>)
 8000432:	f000 fd03 	bl	8000e3c <HAL_I2C_Init>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800043c:	f000 f878 	bl	8000530 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000440:	2100      	movs	r1, #0
 8000442:	4809      	ldr	r0, [pc, #36]	@ (8000468 <MX_I2C1_Init+0x74>)
 8000444:	f001 fa06 	bl	8001854 <HAL_I2CEx_ConfigAnalogFilter>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800044e:	f000 f86f 	bl	8000530 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000452:	2100      	movs	r1, #0
 8000454:	4804      	ldr	r0, [pc, #16]	@ (8000468 <MX_I2C1_Init+0x74>)
 8000456:	f001 fa48 	bl	80018ea <HAL_I2CEx_ConfigDigitalFilter>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000460:	f000 f866 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}
 8000468:	200000a4 	.word	0x200000a4
 800046c:	40005400 	.word	0x40005400

08000470 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000474:	4b14      	ldr	r3, [pc, #80]	@ (80004c8 <MX_USART2_UART_Init+0x58>)
 8000476:	4a15      	ldr	r2, [pc, #84]	@ (80004cc <MX_USART2_UART_Init+0x5c>)
 8000478:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800047a:	4b13      	ldr	r3, [pc, #76]	@ (80004c8 <MX_USART2_UART_Init+0x58>)
 800047c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000480:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000482:	4b11      	ldr	r3, [pc, #68]	@ (80004c8 <MX_USART2_UART_Init+0x58>)
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000488:	4b0f      	ldr	r3, [pc, #60]	@ (80004c8 <MX_USART2_UART_Init+0x58>)
 800048a:	2200      	movs	r2, #0
 800048c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800048e:	4b0e      	ldr	r3, [pc, #56]	@ (80004c8 <MX_USART2_UART_Init+0x58>)
 8000490:	2200      	movs	r2, #0
 8000492:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000494:	4b0c      	ldr	r3, [pc, #48]	@ (80004c8 <MX_USART2_UART_Init+0x58>)
 8000496:	220c      	movs	r2, #12
 8000498:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800049a:	4b0b      	ldr	r3, [pc, #44]	@ (80004c8 <MX_USART2_UART_Init+0x58>)
 800049c:	2200      	movs	r2, #0
 800049e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a0:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <MX_USART2_UART_Init+0x58>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004a6:	4b08      	ldr	r3, [pc, #32]	@ (80004c8 <MX_USART2_UART_Init+0x58>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004ac:	4b06      	ldr	r3, [pc, #24]	@ (80004c8 <MX_USART2_UART_Init+0x58>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004b2:	4805      	ldr	r0, [pc, #20]	@ (80004c8 <MX_USART2_UART_Init+0x58>)
 80004b4:	f002 fe02 	bl	80030bc <HAL_UART_Init>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004be:	f000 f837 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	200000f8 	.word	0x200000f8
 80004cc:	40004400 	.word	0x40004400

080004d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004d6:	4b15      	ldr	r3, [pc, #84]	@ (800052c <MX_GPIO_Init+0x5c>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	4a14      	ldr	r2, [pc, #80]	@ (800052c <MX_GPIO_Init+0x5c>)
 80004dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004e0:	6153      	str	r3, [r2, #20]
 80004e2:	4b12      	ldr	r3, [pc, #72]	@ (800052c <MX_GPIO_Init+0x5c>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	4b0f      	ldr	r3, [pc, #60]	@ (800052c <MX_GPIO_Init+0x5c>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a0e      	ldr	r2, [pc, #56]	@ (800052c <MX_GPIO_Init+0x5c>)
 80004f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b0c      	ldr	r3, [pc, #48]	@ (800052c <MX_GPIO_Init+0x5c>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000506:	4b09      	ldr	r3, [pc, #36]	@ (800052c <MX_GPIO_Init+0x5c>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a08      	ldr	r2, [pc, #32]	@ (800052c <MX_GPIO_Init+0x5c>)
 800050c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000510:	6153      	str	r3, [r2, #20]
 8000512:	4b06      	ldr	r3, [pc, #24]	@ (800052c <MX_GPIO_Init+0x5c>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000

08000530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000534:	b672      	cpsid	i
}
 8000536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <Error_Handler+0x8>

0800053c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000542:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <HAL_MspInit+0x44>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	4a0e      	ldr	r2, [pc, #56]	@ (8000580 <HAL_MspInit+0x44>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6193      	str	r3, [r2, #24]
 800054e:	4b0c      	ldr	r3, [pc, #48]	@ (8000580 <HAL_MspInit+0x44>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055a:	4b09      	ldr	r3, [pc, #36]	@ (8000580 <HAL_MspInit+0x44>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	4a08      	ldr	r2, [pc, #32]	@ (8000580 <HAL_MspInit+0x44>)
 8000560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000564:	61d3      	str	r3, [r2, #28]
 8000566:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <HAL_MspInit+0x44>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000

08000584 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	@ 0x28
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a17      	ldr	r2, [pc, #92]	@ (8000600 <HAL_I2C_MspInit+0x7c>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d127      	bne.n	80005f6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a6:	4b17      	ldr	r3, [pc, #92]	@ (8000604 <HAL_I2C_MspInit+0x80>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a16      	ldr	r2, [pc, #88]	@ (8000604 <HAL_I2C_MspInit+0x80>)
 80005ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b14      	ldr	r3, [pc, #80]	@ (8000604 <HAL_I2C_MspInit+0x80>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005be:	23c0      	movs	r3, #192	@ 0xc0
 80005c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005c2:	2312      	movs	r3, #18
 80005c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ca:	2303      	movs	r3, #3
 80005cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005ce:	2304      	movs	r3, #4
 80005d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	480b      	ldr	r0, [pc, #44]	@ (8000608 <HAL_I2C_MspInit+0x84>)
 80005da:	f000 fabd 	bl	8000b58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005de:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <HAL_I2C_MspInit+0x80>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	4a08      	ldr	r2, [pc, #32]	@ (8000604 <HAL_I2C_MspInit+0x80>)
 80005e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005e8:	61d3      	str	r3, [r2, #28]
 80005ea:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <HAL_I2C_MspInit+0x80>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005f6:	bf00      	nop
 80005f8:	3728      	adds	r7, #40	@ 0x28
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40005400 	.word	0x40005400
 8000604:	40021000 	.word	0x40021000
 8000608:	48000400 	.word	0x48000400

0800060c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	@ 0x28
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a18      	ldr	r2, [pc, #96]	@ (800068c <HAL_UART_MspInit+0x80>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d129      	bne.n	8000682 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800062e:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <HAL_UART_MspInit+0x84>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	4a17      	ldr	r2, [pc, #92]	@ (8000690 <HAL_UART_MspInit+0x84>)
 8000634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000638:	61d3      	str	r3, [r2, #28]
 800063a:	4b15      	ldr	r3, [pc, #84]	@ (8000690 <HAL_UART_MspInit+0x84>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <HAL_UART_MspInit+0x84>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	4a11      	ldr	r2, [pc, #68]	@ (8000690 <HAL_UART_MspInit+0x84>)
 800064c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000650:	6153      	str	r3, [r2, #20]
 8000652:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <HAL_UART_MspInit+0x84>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800065e:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000664:	2302      	movs	r3, #2
 8000666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800066c:	2303      	movs	r3, #3
 800066e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000670:	2307      	movs	r3, #7
 8000672:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4619      	mov	r1, r3
 800067a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800067e:	f000 fa6b 	bl	8000b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000682:	bf00      	nop
 8000684:	3728      	adds	r7, #40	@ 0x28
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40004400 	.word	0x40004400
 8000690:	40021000 	.word	0x40021000

08000694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <NMI_Handler+0x4>

0800069c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <HardFault_Handler+0x4>

080006a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <MemManage_Handler+0x4>

080006ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <BusFault_Handler+0x4>

080006b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <UsageFault_Handler+0x4>

080006bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ea:	f000 f90b 	bl	8000904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b086      	sub	sp, #24
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	60f8      	str	r0, [r7, #12]
 80006fa:	60b9      	str	r1, [r7, #8]
 80006fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
 8000702:	e00a      	b.n	800071a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000704:	f3af 8000 	nop.w
 8000708:	4601      	mov	r1, r0
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	1c5a      	adds	r2, r3, #1
 800070e:	60ba      	str	r2, [r7, #8]
 8000710:	b2ca      	uxtb	r2, r1
 8000712:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	3301      	adds	r3, #1
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	697a      	ldr	r2, [r7, #20]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	429a      	cmp	r2, r3
 8000720:	dbf0      	blt.n	8000704 <_read+0x12>
  }

  return len;
 8000722:	687b      	ldr	r3, [r7, #4]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <_close>:
  }
  return len;
}

int _close(int file)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000734:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000738:	4618      	mov	r0, r3
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000754:	605a      	str	r2, [r3, #4]
  return 0;
 8000756:	2300      	movs	r3, #0
}
 8000758:	4618      	mov	r0, r3
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <_isatty>:

int _isatty(int file)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800076c:	2301      	movs	r3, #1
}
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800077a:	b480      	push	{r7}
 800077c:	b085      	sub	sp, #20
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000786:	2300      	movs	r3, #0
}
 8000788:	4618      	mov	r0, r3
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800079c:	4a14      	ldr	r2, [pc, #80]	@ (80007f0 <_sbrk+0x5c>)
 800079e:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <_sbrk+0x60>)
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007a8:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <_sbrk+0x64>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d102      	bne.n	80007b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007b0:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <_sbrk+0x64>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	@ (80007fc <_sbrk+0x68>)
 80007b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007b6:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <_sbrk+0x64>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4413      	add	r3, r2
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d207      	bcs.n	80007d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007c4:	f008 fefe 	bl	80095c4 <__errno>
 80007c8:	4603      	mov	r3, r0
 80007ca:	220c      	movs	r2, #12
 80007cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007d2:	e009      	b.n	80007e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007d4:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <_sbrk+0x64>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007da:	4b07      	ldr	r3, [pc, #28]	@ (80007f8 <_sbrk+0x64>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4413      	add	r3, r2
 80007e2:	4a05      	ldr	r2, [pc, #20]	@ (80007f8 <_sbrk+0x64>)
 80007e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007e6:	68fb      	ldr	r3, [r7, #12]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3718      	adds	r7, #24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20003000 	.word	0x20003000
 80007f4:	00000400 	.word	0x00000400
 80007f8:	20000180 	.word	0x20000180
 80007fc:	200003d8 	.word	0x200003d8

08000800 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000804:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <SystemInit+0x20>)
 8000806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800080a:	4a05      	ldr	r2, [pc, #20]	@ (8000820 <SystemInit+0x20>)
 800080c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000810:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000824:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800085c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000828:	f7ff ffea 	bl	8000800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800082c:	480c      	ldr	r0, [pc, #48]	@ (8000860 <LoopForever+0x6>)
  ldr r1, =_edata
 800082e:	490d      	ldr	r1, [pc, #52]	@ (8000864 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000830:	4a0d      	ldr	r2, [pc, #52]	@ (8000868 <LoopForever+0xe>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000834:	e002      	b.n	800083c <LoopCopyDataInit>

08000836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083a:	3304      	adds	r3, #4

0800083c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800083c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000840:	d3f9      	bcc.n	8000836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000842:	4a0a      	ldr	r2, [pc, #40]	@ (800086c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000844:	4c0a      	ldr	r4, [pc, #40]	@ (8000870 <LoopForever+0x16>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000848:	e001      	b.n	800084e <LoopFillZerobss>

0800084a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800084c:	3204      	adds	r2, #4

0800084e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000850:	d3fb      	bcc.n	800084a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000852:	f008 febd 	bl	80095d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000856:	f7ff fd1f 	bl	8000298 <main>

0800085a <LoopForever>:

LoopForever:
    b LoopForever
 800085a:	e7fe      	b.n	800085a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800085c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000864:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000868:	0800a300 	.word	0x0800a300
  ldr r2, =_sbss
 800086c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000870:	200003d4 	.word	0x200003d4

08000874 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000874:	e7fe      	b.n	8000874 <ADC1_2_IRQHandler>
	...

08000878 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800087c:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <HAL_Init+0x28>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a07      	ldr	r2, [pc, #28]	@ (80008a0 <HAL_Init+0x28>)
 8000882:	f043 0310 	orr.w	r3, r3, #16
 8000886:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000888:	2003      	movs	r0, #3
 800088a:	f000 f931 	bl	8000af0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088e:	2000      	movs	r0, #0
 8000890:	f000 f808 	bl	80008a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000894:	f7ff fe52 	bl	800053c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40022000 	.word	0x40022000

080008a4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <HAL_InitTick+0x54>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <HAL_InitTick+0x58>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4619      	mov	r1, r3
 80008b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80008be:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f93b 	bl	8000b3e <HAL_SYSTICK_Config>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00e      	b.n	80008f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d80a      	bhi.n	80008ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d8:	2200      	movs	r2, #0
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008e0:	f000 f911 	bl	8000b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e4:	4a06      	ldr	r2, [pc, #24]	@ (8000900 <HAL_InitTick+0x5c>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008ea:	2300      	movs	r3, #0
 80008ec:	e000      	b.n	80008f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000000 	.word	0x20000000
 80008fc:	20000008 	.word	0x20000008
 8000900:	20000004 	.word	0x20000004

08000904 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_IncTick+0x20>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <HAL_IncTick+0x24>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4413      	add	r3, r2
 8000914:	4a04      	ldr	r2, [pc, #16]	@ (8000928 <HAL_IncTick+0x24>)
 8000916:	6013      	str	r3, [r2, #0]
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	20000008 	.word	0x20000008
 8000928:	20000184 	.word	0x20000184

0800092c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000930:	4b03      	ldr	r3, [pc, #12]	@ (8000940 <HAL_GetTick+0x14>)
 8000932:	681b      	ldr	r3, [r3, #0]
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000184 	.word	0x20000184

08000944 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800094c:	f7ff ffee 	bl	800092c <HAL_GetTick>
 8000950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800095c:	d005      	beq.n	800096a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800095e:	4b0a      	ldr	r3, [pc, #40]	@ (8000988 <HAL_Delay+0x44>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	461a      	mov	r2, r3
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	4413      	add	r3, r2
 8000968:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800096a:	bf00      	nop
 800096c:	f7ff ffde 	bl	800092c <HAL_GetTick>
 8000970:	4602      	mov	r2, r0
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	429a      	cmp	r2, r3
 800097a:	d8f7      	bhi.n	800096c <HAL_Delay+0x28>
  {
  }
}
 800097c:	bf00      	nop
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000008 	.word	0x20000008

0800098c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800099c:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <__NVIC_SetPriorityGrouping+0x44>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009a8:	4013      	ands	r3, r2
 80009aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009be:	4a04      	ldr	r2, [pc, #16]	@ (80009d0 <__NVIC_SetPriorityGrouping+0x44>)
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	60d3      	str	r3, [r2, #12]
}
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d8:	4b04      	ldr	r3, [pc, #16]	@ (80009ec <__NVIC_GetPriorityGrouping+0x18>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	0a1b      	lsrs	r3, r3, #8
 80009de:	f003 0307 	and.w	r3, r3, #7
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	6039      	str	r1, [r7, #0]
 80009fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	db0a      	blt.n	8000a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	490c      	ldr	r1, [pc, #48]	@ (8000a3c <__NVIC_SetPriority+0x4c>)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	0112      	lsls	r2, r2, #4
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	440b      	add	r3, r1
 8000a14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a18:	e00a      	b.n	8000a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4908      	ldr	r1, [pc, #32]	@ (8000a40 <__NVIC_SetPriority+0x50>)
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	f003 030f 	and.w	r3, r3, #15
 8000a26:	3b04      	subs	r3, #4
 8000a28:	0112      	lsls	r2, r2, #4
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	440b      	add	r3, r1
 8000a2e:	761a      	strb	r2, [r3, #24]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000e100 	.word	0xe000e100
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b089      	sub	sp, #36	@ 0x24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	f1c3 0307 	rsb	r3, r3, #7
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	bf28      	it	cs
 8000a62:	2304      	movcs	r3, #4
 8000a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	2b06      	cmp	r3, #6
 8000a6c:	d902      	bls.n	8000a74 <NVIC_EncodePriority+0x30>
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3b03      	subs	r3, #3
 8000a72:	e000      	b.n	8000a76 <NVIC_EncodePriority+0x32>
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	43da      	mvns	r2, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	401a      	ands	r2, r3
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a8c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	fa01 f303 	lsl.w	r3, r1, r3
 8000a96:	43d9      	mvns	r1, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	4313      	orrs	r3, r2
         );
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3724      	adds	r7, #36	@ 0x24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
	...

08000aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000abc:	d301      	bcc.n	8000ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e00f      	b.n	8000ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <SysTick_Config+0x40>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aca:	210f      	movs	r1, #15
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ad0:	f7ff ff8e 	bl	80009f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad4:	4b05      	ldr	r3, [pc, #20]	@ (8000aec <SysTick_Config+0x40>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ada:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <SysTick_Config+0x40>)
 8000adc:	2207      	movs	r2, #7
 8000ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	e000e010 	.word	0xe000e010

08000af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff ff47 	bl	800098c <__NVIC_SetPriorityGrouping>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b086      	sub	sp, #24
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b18:	f7ff ff5c 	bl	80009d4 <__NVIC_GetPriorityGrouping>
 8000b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	68b9      	ldr	r1, [r7, #8]
 8000b22:	6978      	ldr	r0, [r7, #20]
 8000b24:	f7ff ff8e 	bl	8000a44 <NVIC_EncodePriority>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff5d 	bl	80009f0 <__NVIC_SetPriority>
}
 8000b36:	bf00      	nop
 8000b38:	3718      	adds	r7, #24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ffb0 	bl	8000aac <SysTick_Config>
 8000b4c:	4603      	mov	r3, r0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b087      	sub	sp, #28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b66:	e14e      	b.n	8000e06 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	fa01 f303 	lsl.w	r3, r1, r3
 8000b74:	4013      	ands	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 8140 	beq.w	8000e00 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 0303 	and.w	r3, r3, #3
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d005      	beq.n	8000b98 <HAL_GPIO_Init+0x40>
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f003 0303 	and.w	r3, r3, #3
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d130      	bne.n	8000bfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	68da      	ldr	r2, [r3, #12]
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bce:	2201      	movs	r2, #1
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	091b      	lsrs	r3, r3, #4
 8000be4:	f003 0201 	and.w	r2, r3, #1
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 0303 	and.w	r3, r3, #3
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	d017      	beq.n	8000c36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	2203      	movs	r2, #3
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43db      	mvns	r3, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	689a      	ldr	r2, [r3, #8]
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f003 0303 	and.w	r3, r3, #3
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d123      	bne.n	8000c8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	08da      	lsrs	r2, r3, #3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3208      	adds	r2, #8
 8000c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	220f      	movs	r2, #15
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	691a      	ldr	r2, [r3, #16]
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	f003 0307 	and.w	r3, r3, #7
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	08da      	lsrs	r2, r3, #3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3208      	adds	r2, #8
 8000c84:	6939      	ldr	r1, [r7, #16]
 8000c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	2203      	movs	r2, #3
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 0203 	and.w	r2, r3, #3
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f000 809a 	beq.w	8000e00 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ccc:	4b55      	ldr	r3, [pc, #340]	@ (8000e24 <HAL_GPIO_Init+0x2cc>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a54      	ldr	r2, [pc, #336]	@ (8000e24 <HAL_GPIO_Init+0x2cc>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b52      	ldr	r3, [pc, #328]	@ (8000e24 <HAL_GPIO_Init+0x2cc>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ce4:	4a50      	ldr	r2, [pc, #320]	@ (8000e28 <HAL_GPIO_Init+0x2d0>)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	089b      	lsrs	r3, r3, #2
 8000cea:	3302      	adds	r3, #2
 8000cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	220f      	movs	r2, #15
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d0e:	d013      	beq.n	8000d38 <HAL_GPIO_Init+0x1e0>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a46      	ldr	r2, [pc, #280]	@ (8000e2c <HAL_GPIO_Init+0x2d4>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d00d      	beq.n	8000d34 <HAL_GPIO_Init+0x1dc>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a45      	ldr	r2, [pc, #276]	@ (8000e30 <HAL_GPIO_Init+0x2d8>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d007      	beq.n	8000d30 <HAL_GPIO_Init+0x1d8>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a44      	ldr	r2, [pc, #272]	@ (8000e34 <HAL_GPIO_Init+0x2dc>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d101      	bne.n	8000d2c <HAL_GPIO_Init+0x1d4>
 8000d28:	2303      	movs	r3, #3
 8000d2a:	e006      	b.n	8000d3a <HAL_GPIO_Init+0x1e2>
 8000d2c:	2305      	movs	r3, #5
 8000d2e:	e004      	b.n	8000d3a <HAL_GPIO_Init+0x1e2>
 8000d30:	2302      	movs	r3, #2
 8000d32:	e002      	b.n	8000d3a <HAL_GPIO_Init+0x1e2>
 8000d34:	2301      	movs	r3, #1
 8000d36:	e000      	b.n	8000d3a <HAL_GPIO_Init+0x1e2>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	f002 0203 	and.w	r2, r2, #3
 8000d40:	0092      	lsls	r2, r2, #2
 8000d42:	4093      	lsls	r3, r2
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d4a:	4937      	ldr	r1, [pc, #220]	@ (8000e28 <HAL_GPIO_Init+0x2d0>)
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	3302      	adds	r3, #2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d58:	4b37      	ldr	r3, [pc, #220]	@ (8000e38 <HAL_GPIO_Init+0x2e0>)
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d003      	beq.n	8000d7c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d7c:	4a2e      	ldr	r2, [pc, #184]	@ (8000e38 <HAL_GPIO_Init+0x2e0>)
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d82:	4b2d      	ldr	r3, [pc, #180]	@ (8000e38 <HAL_GPIO_Init+0x2e0>)
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000da6:	4a24      	ldr	r2, [pc, #144]	@ (8000e38 <HAL_GPIO_Init+0x2e0>)
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dac:	4b22      	ldr	r3, [pc, #136]	@ (8000e38 <HAL_GPIO_Init+0x2e0>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d003      	beq.n	8000dd0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dd0:	4a19      	ldr	r2, [pc, #100]	@ (8000e38 <HAL_GPIO_Init+0x2e0>)
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dd6:	4b18      	ldr	r3, [pc, #96]	@ (8000e38 <HAL_GPIO_Init+0x2e0>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dfa:	4a0f      	ldr	r2, [pc, #60]	@ (8000e38 <HAL_GPIO_Init+0x2e0>)
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	3301      	adds	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f47f aea9 	bne.w	8000b68 <HAL_GPIO_Init+0x10>
  }
}
 8000e16:	bf00      	nop
 8000e18:	bf00      	nop
 8000e1a:	371c      	adds	r7, #28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010000 	.word	0x40010000
 8000e2c:	48000400 	.word	0x48000400
 8000e30:	48000800 	.word	0x48000800
 8000e34:	48000c00 	.word	0x48000c00
 8000e38:	40010400 	.word	0x40010400

08000e3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e081      	b.n	8000f52 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d106      	bne.n	8000e68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff fb8e 	bl	8000584 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2224      	movs	r2, #36	@ 0x24
 8000e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 0201 	bic.w	r2, r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000e8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000e9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d107      	bne.n	8000eb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	e006      	b.n	8000ec4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000ec2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d104      	bne.n	8000ed6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ed4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	6812      	ldr	r2, [r2, #0]
 8000ee0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ee4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ee8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	68da      	ldr	r2, [r3, #12]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000ef8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	691a      	ldr	r2, [r3, #16]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	430a      	orrs	r2, r1
 8000f12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69d9      	ldr	r1, [r3, #28]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a1a      	ldr	r2, [r3, #32]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	430a      	orrs	r2, r1
 8000f22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f042 0201 	orr.w	r2, r2, #1
 8000f32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2220      	movs	r2, #32
 8000f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af02      	add	r7, sp, #8
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	461a      	mov	r2, r3
 8000f68:	460b      	mov	r3, r1
 8000f6a:	817b      	strh	r3, [r7, #10]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b20      	cmp	r3, #32
 8000f7a:	f040 80da 	bne.w	8001132 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d101      	bne.n	8000f8c <HAL_I2C_Master_Transmit+0x30>
 8000f88:	2302      	movs	r3, #2
 8000f8a:	e0d3      	b.n	8001134 <HAL_I2C_Master_Transmit+0x1d8>
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000f94:	f7ff fcca 	bl	800092c <HAL_GetTick>
 8000f98:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2319      	movs	r3, #25
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f000 f9e6 	bl	8001378 <I2C_WaitOnFlagUntilTimeout>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e0be      	b.n	8001134 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2221      	movs	r2, #33	@ 0x21
 8000fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2210      	movs	r2, #16
 8000fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	893a      	ldrh	r2, [r7, #8]
 8000fd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d90e      	bls.n	8001006 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	22ff      	movs	r2, #255	@ 0xff
 8000fec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	8979      	ldrh	r1, [r7, #10]
 8000ff6:	4b51      	ldr	r3, [pc, #324]	@ (800113c <HAL_I2C_Master_Transmit+0x1e0>)
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	f000 fbf6 	bl	80017f0 <I2C_TransferConfig>
 8001004:	e06c      	b.n	80010e0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800100a:	b29a      	uxth	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001014:	b2da      	uxtb	r2, r3
 8001016:	8979      	ldrh	r1, [r7, #10]
 8001018:	4b48      	ldr	r3, [pc, #288]	@ (800113c <HAL_I2C_Master_Transmit+0x1e0>)
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f000 fbe5 	bl	80017f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001026:	e05b      	b.n	80010e0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	6a39      	ldr	r1, [r7, #32]
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f000 f9f2 	bl	8001416 <I2C_WaitOnTXISFlagUntilTimeout>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e07b      	b.n	8001134 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001040:	781a      	ldrb	r2, [r3, #0]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001056:	b29b      	uxth	r3, r3
 8001058:	3b01      	subs	r3, #1
 800105a:	b29a      	uxth	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001064:	3b01      	subs	r3, #1
 8001066:	b29a      	uxth	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001070:	b29b      	uxth	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d034      	beq.n	80010e0 <HAL_I2C_Master_Transmit+0x184>
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800107a:	2b00      	cmp	r3, #0
 800107c:	d130      	bne.n	80010e0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	2200      	movs	r2, #0
 8001086:	2180      	movs	r1, #128	@ 0x80
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f000 f975 	bl	8001378 <I2C_WaitOnFlagUntilTimeout>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e04d      	b.n	8001134 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800109c:	b29b      	uxth	r3, r3
 800109e:	2bff      	cmp	r3, #255	@ 0xff
 80010a0:	d90e      	bls.n	80010c0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	22ff      	movs	r2, #255	@ 0xff
 80010a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	8979      	ldrh	r1, [r7, #10]
 80010b0:	2300      	movs	r3, #0
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f000 fb99 	bl	80017f0 <I2C_TransferConfig>
 80010be:	e00f      	b.n	80010e0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	8979      	ldrh	r1, [r7, #10]
 80010d2:	2300      	movs	r3, #0
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f000 fb88 	bl	80017f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d19e      	bne.n	8001028 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	6a39      	ldr	r1, [r7, #32]
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f000 f9d8 	bl	80014a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e01a      	b.n	8001134 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2220      	movs	r2, #32
 8001104:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6859      	ldr	r1, [r3, #4]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <HAL_I2C_Master_Transmit+0x1e4>)
 8001112:	400b      	ands	r3, r1
 8001114:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2220      	movs	r2, #32
 800111a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	e000      	b.n	8001134 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001132:	2302      	movs	r3, #2
  }
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	80002000 	.word	0x80002000
 8001140:	fe00e800 	.word	0xfe00e800

08001144 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af02      	add	r7, sp, #8
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	461a      	mov	r2, r3
 8001150:	460b      	mov	r3, r1
 8001152:	817b      	strh	r3, [r7, #10]
 8001154:	4613      	mov	r3, r2
 8001156:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b20      	cmp	r3, #32
 8001162:	f040 80db 	bne.w	800131c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800116c:	2b01      	cmp	r3, #1
 800116e:	d101      	bne.n	8001174 <HAL_I2C_Master_Receive+0x30>
 8001170:	2302      	movs	r3, #2
 8001172:	e0d4      	b.n	800131e <HAL_I2C_Master_Receive+0x1da>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2201      	movs	r2, #1
 8001178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800117c:	f7ff fbd6 	bl	800092c <HAL_GetTick>
 8001180:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2319      	movs	r3, #25
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f000 f8f2 	bl	8001378 <I2C_WaitOnFlagUntilTimeout>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e0bf      	b.n	800131e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2222      	movs	r2, #34	@ 0x22
 80011a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2210      	movs	r2, #16
 80011aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2200      	movs	r2, #0
 80011b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	893a      	ldrh	r2, [r7, #8]
 80011be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2200      	movs	r2, #0
 80011c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	2bff      	cmp	r3, #255	@ 0xff
 80011ce:	d90e      	bls.n	80011ee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	22ff      	movs	r2, #255	@ 0xff
 80011d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	8979      	ldrh	r1, [r7, #10]
 80011de:	4b52      	ldr	r3, [pc, #328]	@ (8001328 <HAL_I2C_Master_Receive+0x1e4>)
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f000 fb02 	bl	80017f0 <I2C_TransferConfig>
 80011ec:	e06d      	b.n	80012ca <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	8979      	ldrh	r1, [r7, #10]
 8001200:	4b49      	ldr	r3, [pc, #292]	@ (8001328 <HAL_I2C_Master_Receive+0x1e4>)
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f000 faf1 	bl	80017f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800120e:	e05c      	b.n	80012ca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	6a39      	ldr	r1, [r7, #32]
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f000 f989 	bl	800152c <I2C_WaitOnRXNEFlagUntilTimeout>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e07c      	b.n	800131e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001240:	3b01      	subs	r3, #1
 8001242:	b29a      	uxth	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800124c:	b29b      	uxth	r3, r3
 800124e:	3b01      	subs	r3, #1
 8001250:	b29a      	uxth	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800125a:	b29b      	uxth	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d034      	beq.n	80012ca <HAL_I2C_Master_Receive+0x186>
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001264:	2b00      	cmp	r3, #0
 8001266:	d130      	bne.n	80012ca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	6a3b      	ldr	r3, [r7, #32]
 800126e:	2200      	movs	r2, #0
 8001270:	2180      	movs	r1, #128	@ 0x80
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f000 f880 	bl	8001378 <I2C_WaitOnFlagUntilTimeout>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e04d      	b.n	800131e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001286:	b29b      	uxth	r3, r3
 8001288:	2bff      	cmp	r3, #255	@ 0xff
 800128a:	d90e      	bls.n	80012aa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	22ff      	movs	r2, #255	@ 0xff
 8001290:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001296:	b2da      	uxtb	r2, r3
 8001298:	8979      	ldrh	r1, [r7, #10]
 800129a:	2300      	movs	r3, #0
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f000 faa4 	bl	80017f0 <I2C_TransferConfig>
 80012a8:	e00f      	b.n	80012ca <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	8979      	ldrh	r1, [r7, #10]
 80012bc:	2300      	movs	r3, #0
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f000 fa93 	bl	80017f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d19d      	bne.n	8001210 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	6a39      	ldr	r1, [r7, #32]
 80012d8:	68f8      	ldr	r0, [r7, #12]
 80012da:	f000 f8e3 	bl	80014a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e01a      	b.n	800131e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2220      	movs	r2, #32
 80012ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6859      	ldr	r1, [r3, #4]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <HAL_I2C_Master_Receive+0x1e8>)
 80012fc:	400b      	ands	r3, r1
 80012fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2220      	movs	r2, #32
 8001304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001318:	2300      	movs	r3, #0
 800131a:	e000      	b.n	800131e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800131c:	2302      	movs	r3, #2
  }
}
 800131e:	4618      	mov	r0, r3
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	80002400 	.word	0x80002400
 800132c:	fe00e800 	.word	0xfe00e800

08001330 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b02      	cmp	r3, #2
 8001344:	d103      	bne.n	800134e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2200      	movs	r2, #0
 800134c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	2b01      	cmp	r3, #1
 800135a:	d007      	beq.n	800136c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	699a      	ldr	r2, [r3, #24]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f042 0201 	orr.w	r2, r2, #1
 800136a:	619a      	str	r2, [r3, #24]
  }
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	4613      	mov	r3, r2
 8001386:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001388:	e031      	b.n	80013ee <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001390:	d02d      	beq.n	80013ee <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001392:	f7ff facb 	bl	800092c <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d302      	bcc.n	80013a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d122      	bne.n	80013ee <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	699a      	ldr	r2, [r3, #24]
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	4013      	ands	r3, r2
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	bf0c      	ite	eq
 80013b8:	2301      	moveq	r3, #1
 80013ba:	2300      	movne	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d113      	bne.n	80013ee <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ca:	f043 0220 	orr.w	r2, r3, #32
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2220      	movs	r2, #32
 80013d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00f      	b.n	800140e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	699a      	ldr	r2, [r3, #24]
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	4013      	ands	r3, r2
 80013f8:	68ba      	ldr	r2, [r7, #8]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	bf0c      	ite	eq
 80013fe:	2301      	moveq	r3, #1
 8001400:	2300      	movne	r3, #0
 8001402:	b2db      	uxtb	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	429a      	cmp	r2, r3
 800140a:	d0be      	beq.n	800138a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b084      	sub	sp, #16
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001422:	e033      	b.n	800148c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	68b9      	ldr	r1, [r7, #8]
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f000 f901 	bl	8001630 <I2C_IsErrorOccurred>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e031      	b.n	800149c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800143e:	d025      	beq.n	800148c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001440:	f7ff fa74 	bl	800092c <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	429a      	cmp	r2, r3
 800144e:	d302      	bcc.n	8001456 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d11a      	bne.n	800148c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b02      	cmp	r3, #2
 8001462:	d013      	beq.n	800148c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001468:	f043 0220 	orr.w	r2, r3, #32
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2220      	movs	r2, #32
 8001474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e007      	b.n	800149c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b02      	cmp	r3, #2
 8001498:	d1c4      	bne.n	8001424 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014b0:	e02f      	b.n	8001512 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f000 f8ba 	bl	8001630 <I2C_IsErrorOccurred>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e02d      	b.n	8001522 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014c6:	f7ff fa31 	bl	800092c <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d302      	bcc.n	80014dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d11a      	bne.n	8001512 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	f003 0320 	and.w	r3, r3, #32
 80014e6:	2b20      	cmp	r3, #32
 80014e8:	d013      	beq.n	8001512 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ee:	f043 0220 	orr.w	r2, r3, #32
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2220      	movs	r2, #32
 80014fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e007      	b.n	8001522 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0320 	and.w	r3, r3, #32
 800151c:	2b20      	cmp	r3, #32
 800151e:	d1c8      	bne.n	80014b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001538:	e06b      	b.n	8001612 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 f876 	bl	8001630 <I2C_IsErrorOccurred>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e069      	b.n	8001622 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f003 0320 	and.w	r3, r3, #32
 8001558:	2b20      	cmp	r3, #32
 800155a:	d138      	bne.n	80015ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	2b04      	cmp	r3, #4
 8001568:	d105      	bne.n	8001576 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	e055      	b.n	8001622 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0310 	and.w	r3, r3, #16
 8001580:	2b10      	cmp	r3, #16
 8001582:	d107      	bne.n	8001594 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2210      	movs	r2, #16
 800158a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2204      	movs	r2, #4
 8001590:	645a      	str	r2, [r3, #68]	@ 0x44
 8001592:	e002      	b.n	800159a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2200      	movs	r2, #0
 8001598:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2220      	movs	r2, #32
 80015a0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6859      	ldr	r1, [r3, #4]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b1f      	ldr	r3, [pc, #124]	@ (800162c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80015ae:	400b      	ands	r3, r1
 80015b0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2220      	movs	r2, #32
 80015b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e029      	b.n	8001622 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015ce:	f7ff f9ad 	bl	800092c <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d302      	bcc.n	80015e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d116      	bne.n	8001612 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d00f      	beq.n	8001612 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f6:	f043 0220 	orr.w	r2, r3, #32
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2220      	movs	r2, #32
 8001602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e007      	b.n	8001622 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b04      	cmp	r3, #4
 800161e:	d18c      	bne.n	800153a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	fe00e800 	.word	0xfe00e800

08001630 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	@ 0x28
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800163c:	2300      	movs	r3, #0
 800163e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	f003 0310 	and.w	r3, r3, #16
 8001658:	2b00      	cmp	r3, #0
 800165a:	d068      	beq.n	800172e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2210      	movs	r2, #16
 8001662:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001664:	e049      	b.n	80016fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800166c:	d045      	beq.n	80016fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800166e:	f7ff f95d 	bl	800092c <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	429a      	cmp	r2, r3
 800167c:	d302      	bcc.n	8001684 <I2C_IsErrorOccurred+0x54>
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d13a      	bne.n	80016fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800168e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001696:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80016a6:	d121      	bne.n	80016ec <I2C_IsErrorOccurred+0xbc>
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80016ae:	d01d      	beq.n	80016ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80016b0:	7cfb      	ldrb	r3, [r7, #19]
 80016b2:	2b20      	cmp	r3, #32
 80016b4:	d01a      	beq.n	80016ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80016c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80016c6:	f7ff f931 	bl	800092c <HAL_GetTick>
 80016ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016cc:	e00e      	b.n	80016ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80016ce:	f7ff f92d 	bl	800092c <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b19      	cmp	r3, #25
 80016da:	d907      	bls.n	80016ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80016dc:	6a3b      	ldr	r3, [r7, #32]
 80016de:	f043 0320 	orr.w	r3, r3, #32
 80016e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80016ea:	e006      	b.n	80016fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f003 0320 	and.w	r3, r3, #32
 80016f6:	2b20      	cmp	r3, #32
 80016f8:	d1e9      	bne.n	80016ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0320 	and.w	r3, r3, #32
 8001704:	2b20      	cmp	r3, #32
 8001706:	d003      	beq.n	8001710 <I2C_IsErrorOccurred+0xe0>
 8001708:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0aa      	beq.n	8001666 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001710:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001714:	2b00      	cmp	r3, #0
 8001716:	d103      	bne.n	8001720 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2220      	movs	r2, #32
 800171e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001720:	6a3b      	ldr	r3, [r7, #32]
 8001722:	f043 0304 	orr.w	r3, r3, #4
 8001726:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00b      	beq.n	8001758 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001750:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00b      	beq.n	800177a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	f043 0308 	orr.w	r3, r3, #8
 8001768:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001772:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00b      	beq.n	800179c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	f043 0302 	orr.w	r3, r3, #2
 800178a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001794:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800179c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d01c      	beq.n	80017de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f7ff fdc3 	bl	8001330 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6859      	ldr	r1, [r3, #4]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b0d      	ldr	r3, [pc, #52]	@ (80017ec <I2C_IsErrorOccurred+0x1bc>)
 80017b6:	400b      	ands	r3, r1
 80017b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	431a      	orrs	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2220      	movs	r2, #32
 80017ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80017de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3728      	adds	r7, #40	@ 0x28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	fe00e800 	.word	0xfe00e800

080017f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	460b      	mov	r3, r1
 80017fc:	817b      	strh	r3, [r7, #10]
 80017fe:	4613      	mov	r3, r2
 8001800:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001802:	897b      	ldrh	r3, [r7, #10]
 8001804:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001808:	7a7b      	ldrb	r3, [r7, #9]
 800180a:	041b      	lsls	r3, r3, #16
 800180c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001810:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	4313      	orrs	r3, r2
 800181a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800181e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	0d5b      	lsrs	r3, r3, #21
 800182a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800182e:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <I2C_TransferConfig+0x60>)
 8001830:	430b      	orrs	r3, r1
 8001832:	43db      	mvns	r3, r3
 8001834:	ea02 0103 	and.w	r1, r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	430a      	orrs	r2, r1
 8001840:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001842:	bf00      	nop
 8001844:	371c      	adds	r7, #28
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	03ff63ff 	.word	0x03ff63ff

08001854 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b20      	cmp	r3, #32
 8001868:	d138      	bne.n	80018dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001870:	2b01      	cmp	r3, #1
 8001872:	d101      	bne.n	8001878 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001874:	2302      	movs	r3, #2
 8001876:	e032      	b.n	80018de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2224      	movs	r2, #36	@ 0x24
 8001884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0201 	bic.w	r2, r2, #1
 8001896:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80018a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6819      	ldr	r1, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 0201 	orr.w	r2, r2, #1
 80018c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2220      	movs	r2, #32
 80018cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	e000      	b.n	80018de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018dc:	2302      	movs	r3, #2
  }
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b085      	sub	sp, #20
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b20      	cmp	r3, #32
 80018fe:	d139      	bne.n	8001974 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800190a:	2302      	movs	r3, #2
 800190c:	e033      	b.n	8001976 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2224      	movs	r2, #36	@ 0x24
 800191a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0201 	bic.w	r2, r2, #1
 800192c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800193c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	4313      	orrs	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0201 	orr.w	r2, r2, #1
 800195e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2220      	movs	r2, #32
 8001964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001970:	2300      	movs	r3, #0
 8001972:	e000      	b.n	8001976 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001974:	2302      	movs	r3, #2
  }
}
 8001976:	4618      	mov	r0, r3
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800198a:	af00      	add	r7, sp, #0
 800198c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001990:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001994:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800199a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	f001 b823 	b.w	80029f0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 817d 	beq.w	8001cba <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019c0:	4bbc      	ldr	r3, [pc, #752]	@ (8001cb4 <HAL_RCC_OscConfig+0x330>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 030c 	and.w	r3, r3, #12
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d00c      	beq.n	80019e6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019cc:	4bb9      	ldr	r3, [pc, #740]	@ (8001cb4 <HAL_RCC_OscConfig+0x330>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d15c      	bne.n	8001a92 <HAL_RCC_OscConfig+0x10e>
 80019d8:	4bb6      	ldr	r3, [pc, #728]	@ (8001cb4 <HAL_RCC_OscConfig+0x330>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019e4:	d155      	bne.n	8001a92 <HAL_RCC_OscConfig+0x10e>
 80019e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019ea:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80019f2:	fa93 f3a3 	rbit	r3, r3
 80019f6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fe:	fab3 f383 	clz	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	095b      	lsrs	r3, r3, #5
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d102      	bne.n	8001a18 <HAL_RCC_OscConfig+0x94>
 8001a12:	4ba8      	ldr	r3, [pc, #672]	@ (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	e015      	b.n	8001a44 <HAL_RCC_OscConfig+0xc0>
 8001a18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a1c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a20:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001a24:	fa93 f3a3 	rbit	r3, r3
 8001a28:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001a2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a30:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001a34:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001a40:	4b9c      	ldr	r3, [pc, #624]	@ (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a44:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a48:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001a4c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001a50:	fa92 f2a2 	rbit	r2, r2
 8001a54:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001a58:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001a5c:	fab2 f282 	clz	r2, r2
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	f042 0220 	orr.w	r2, r2, #32
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	f002 021f 	and.w	r2, r2, #31
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 811f 	beq.w	8001cb8 <HAL_RCC_OscConfig+0x334>
 8001a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f040 8116 	bne.w	8001cb8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	f000 bfaf 	b.w	80029f0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aa2:	d106      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x12e>
 8001aa4:	4b83      	ldr	r3, [pc, #524]	@ (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a82      	ldr	r2, [pc, #520]	@ (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001aaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	e036      	b.n	8001b20 <HAL_RCC_OscConfig+0x19c>
 8001ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0x158>
 8001ac2:	4b7c      	ldr	r3, [pc, #496]	@ (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a7b      	ldr	r2, [pc, #492]	@ (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001ac8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b79      	ldr	r3, [pc, #484]	@ (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a78      	ldr	r2, [pc, #480]	@ (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001ad4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e021      	b.n	8001b20 <HAL_RCC_OscConfig+0x19c>
 8001adc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001aec:	d10c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x184>
 8001aee:	4b71      	ldr	r3, [pc, #452]	@ (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a70      	ldr	r2, [pc, #448]	@ (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001af4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b6e      	ldr	r3, [pc, #440]	@ (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a6d      	ldr	r2, [pc, #436]	@ (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	e00b      	b.n	8001b20 <HAL_RCC_OscConfig+0x19c>
 8001b08:	4b6a      	ldr	r3, [pc, #424]	@ (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a69      	ldr	r2, [pc, #420]	@ (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001b0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b67      	ldr	r3, [pc, #412]	@ (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a66      	ldr	r2, [pc, #408]	@ (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001b1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b1e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b20:	4b64      	ldr	r3, [pc, #400]	@ (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b24:	f023 020f 	bic.w	r2, r3, #15
 8001b28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	495f      	ldr	r1, [pc, #380]	@ (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d059      	beq.n	8001bfe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4a:	f7fe feef 	bl	800092c <HAL_GetTick>
 8001b4e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b52:	e00a      	b.n	8001b6a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b54:	f7fe feea 	bl	800092c <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b64      	cmp	r3, #100	@ 0x64
 8001b62:	d902      	bls.n	8001b6a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	f000 bf43 	b.w	80029f0 <HAL_RCC_OscConfig+0x106c>
 8001b6a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b6e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b72:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001b76:	fa93 f3a3 	rbit	r3, r3
 8001b7a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001b7e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b82:	fab3 f383 	clz	r3, r3
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	095b      	lsrs	r3, r3, #5
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d102      	bne.n	8001b9c <HAL_RCC_OscConfig+0x218>
 8001b96:	4b47      	ldr	r3, [pc, #284]	@ (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	e015      	b.n	8001bc8 <HAL_RCC_OscConfig+0x244>
 8001b9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ba0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001ba8:	fa93 f3a3 	rbit	r3, r3
 8001bac:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001bb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bb4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001bb8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001bc4:	4b3b      	ldr	r3, [pc, #236]	@ (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001bcc:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001bd0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001bd4:	fa92 f2a2 	rbit	r2, r2
 8001bd8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001bdc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001be0:	fab2 f282 	clz	r2, r2
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	f042 0220 	orr.w	r2, r2, #32
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	f002 021f 	and.w	r2, r2, #31
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0ab      	beq.n	8001b54 <HAL_RCC_OscConfig+0x1d0>
 8001bfc:	e05d      	b.n	8001cba <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7fe fe95 	bl	800092c <HAL_GetTick>
 8001c02:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c06:	e00a      	b.n	8001c1e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c08:	f7fe fe90 	bl	800092c <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b64      	cmp	r3, #100	@ 0x64
 8001c16:	d902      	bls.n	8001c1e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	f000 bee9 	b.w	80029f0 <HAL_RCC_OscConfig+0x106c>
 8001c1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c22:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001c2a:	fa93 f3a3 	rbit	r3, r3
 8001c2e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001c32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	095b      	lsrs	r3, r3, #5
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d102      	bne.n	8001c50 <HAL_RCC_OscConfig+0x2cc>
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	e015      	b.n	8001c7c <HAL_RCC_OscConfig+0x2f8>
 8001c50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c54:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001c5c:	fa93 f3a3 	rbit	r3, r3
 8001c60:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001c64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c68:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001c6c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001c78:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c80:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001c84:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001c88:	fa92 f2a2 	rbit	r2, r2
 8001c8c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001c90:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001c94:	fab2 f282 	clz	r2, r2
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	f042 0220 	orr.w	r2, r2, #32
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	f002 021f 	and.w	r2, r2, #31
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1ab      	bne.n	8001c08 <HAL_RCC_OscConfig+0x284>
 8001cb0:	e003      	b.n	8001cba <HAL_RCC_OscConfig+0x336>
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cbe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 817d 	beq.w	8001fca <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cd0:	4ba6      	ldr	r3, [pc, #664]	@ (8001f6c <HAL_RCC_OscConfig+0x5e8>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 030c 	and.w	r3, r3, #12
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00b      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cdc:	4ba3      	ldr	r3, [pc, #652]	@ (8001f6c <HAL_RCC_OscConfig+0x5e8>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 030c 	and.w	r3, r3, #12
 8001ce4:	2b08      	cmp	r3, #8
 8001ce6:	d172      	bne.n	8001dce <HAL_RCC_OscConfig+0x44a>
 8001ce8:	4ba0      	ldr	r3, [pc, #640]	@ (8001f6c <HAL_RCC_OscConfig+0x5e8>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d16c      	bne.n	8001dce <HAL_RCC_OscConfig+0x44a>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfa:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001cfe:	fa93 f3a3 	rbit	r3, r3
 8001d02:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001d06:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0a:	fab3 f383 	clz	r3, r3
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	095b      	lsrs	r3, r3, #5
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d102      	bne.n	8001d24 <HAL_RCC_OscConfig+0x3a0>
 8001d1e:	4b93      	ldr	r3, [pc, #588]	@ (8001f6c <HAL_RCC_OscConfig+0x5e8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	e013      	b.n	8001d4c <HAL_RCC_OscConfig+0x3c8>
 8001d24:	2302      	movs	r3, #2
 8001d26:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001d2e:	fa93 f3a3 	rbit	r3, r3
 8001d32:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001d36:	2302      	movs	r3, #2
 8001d38:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001d3c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001d40:	fa93 f3a3 	rbit	r3, r3
 8001d44:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001d48:	4b88      	ldr	r3, [pc, #544]	@ (8001f6c <HAL_RCC_OscConfig+0x5e8>)
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001d52:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001d56:	fa92 f2a2 	rbit	r2, r2
 8001d5a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001d5e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001d62:	fab2 f282 	clz	r2, r2
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	f042 0220 	orr.w	r2, r2, #32
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	f002 021f 	and.w	r2, r2, #31
 8001d72:	2101      	movs	r1, #1
 8001d74:	fa01 f202 	lsl.w	r2, r1, r2
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00a      	beq.n	8001d94 <HAL_RCC_OscConfig+0x410>
 8001d7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d002      	beq.n	8001d94 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	f000 be2e 	b.w	80029f0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d94:	4b75      	ldr	r3, [pc, #468]	@ (8001f6c <HAL_RCC_OscConfig+0x5e8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	21f8      	movs	r1, #248	@ 0xf8
 8001daa:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dae:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001db2:	fa91 f1a1 	rbit	r1, r1
 8001db6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001dba:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001dbe:	fab1 f181 	clz	r1, r1
 8001dc2:	b2c9      	uxtb	r1, r1
 8001dc4:	408b      	lsls	r3, r1
 8001dc6:	4969      	ldr	r1, [pc, #420]	@ (8001f6c <HAL_RCC_OscConfig+0x5e8>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dcc:	e0fd      	b.n	8001fca <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 8088 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x56c>
 8001de0:	2301      	movs	r3, #1
 8001de2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001df2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e00:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	461a      	mov	r2, r3
 8001e08:	2301      	movs	r3, #1
 8001e0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0c:	f7fe fd8e 	bl	800092c <HAL_GetTick>
 8001e10:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e16:	f7fe fd89 	bl	800092c <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d902      	bls.n	8001e2c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	f000 bde2 	b.w	80029f0 <HAL_RCC_OscConfig+0x106c>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001e36:	fa93 f3a3 	rbit	r3, r3
 8001e3a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001e3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e42:	fab3 f383 	clz	r3, r3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	095b      	lsrs	r3, r3, #5
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d102      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4d8>
 8001e56:	4b45      	ldr	r3, [pc, #276]	@ (8001f6c <HAL_RCC_OscConfig+0x5e8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	e013      	b.n	8001e84 <HAL_RCC_OscConfig+0x500>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001e6e:	2302      	movs	r3, #2
 8001e70:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001e74:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001e78:	fa93 f3a3 	rbit	r3, r3
 8001e7c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001e80:	4b3a      	ldr	r3, [pc, #232]	@ (8001f6c <HAL_RCC_OscConfig+0x5e8>)
 8001e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e84:	2202      	movs	r2, #2
 8001e86:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001e8a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001e8e:	fa92 f2a2 	rbit	r2, r2
 8001e92:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001e96:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001e9a:	fab2 f282 	clz	r2, r2
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	f042 0220 	orr.w	r2, r2, #32
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	f002 021f 	and.w	r2, r2, #31
 8001eaa:	2101      	movs	r1, #1
 8001eac:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0af      	beq.n	8001e16 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f6c <HAL_RCC_OscConfig+0x5e8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	21f8      	movs	r1, #248	@ 0xf8
 8001ecc:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001ed4:	fa91 f1a1 	rbit	r1, r1
 8001ed8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001edc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001ee0:	fab1 f181 	clz	r1, r1
 8001ee4:	b2c9      	uxtb	r1, r1
 8001ee6:	408b      	lsls	r3, r1
 8001ee8:	4920      	ldr	r1, [pc, #128]	@ (8001f6c <HAL_RCC_OscConfig+0x5e8>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]
 8001eee:	e06c      	b.n	8001fca <HAL_RCC_OscConfig+0x646>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001f02:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f06:	fab3 f383 	clz	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f10:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	461a      	mov	r2, r3
 8001f18:	2300      	movs	r3, #0
 8001f1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7fe fd06 	bl	800092c <HAL_GetTick>
 8001f20:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f24:	e00a      	b.n	8001f3c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f26:	f7fe fd01 	bl	800092c <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d902      	bls.n	8001f3c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	f000 bd5a 	b.w	80029f0 <HAL_RCC_OscConfig+0x106c>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001f46:	fa93 f3a3 	rbit	r3, r3
 8001f4a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	095b      	lsrs	r3, r3, #5
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d104      	bne.n	8001f70 <HAL_RCC_OscConfig+0x5ec>
 8001f66:	4b01      	ldr	r3, [pc, #4]	@ (8001f6c <HAL_RCC_OscConfig+0x5e8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	e015      	b.n	8001f98 <HAL_RCC_OscConfig+0x614>
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	2302      	movs	r3, #2
 8001f72:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001f82:	2302      	movs	r3, #2
 8001f84:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001f88:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001f8c:	fa93 f3a3 	rbit	r3, r3
 8001f90:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001f94:	4bc8      	ldr	r3, [pc, #800]	@ (80022b8 <HAL_RCC_OscConfig+0x934>)
 8001f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f98:	2202      	movs	r2, #2
 8001f9a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001f9e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001fa2:	fa92 f2a2 	rbit	r2, r2
 8001fa6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001faa:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001fae:	fab2 f282 	clz	r2, r2
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	f042 0220 	orr.w	r2, r2, #32
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	f002 021f 	and.w	r2, r2, #31
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1ad      	bne.n	8001f26 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 8110 	beq.w	8002200 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d079      	beq.n	80020e4 <HAL_RCC_OscConfig+0x760>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002002:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	4bab      	ldr	r3, [pc, #684]	@ (80022bc <HAL_RCC_OscConfig+0x938>)
 8002010:	4413      	add	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	461a      	mov	r2, r3
 8002016:	2301      	movs	r3, #1
 8002018:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201a:	f7fe fc87 	bl	800092c <HAL_GetTick>
 800201e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002022:	e00a      	b.n	800203a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002024:	f7fe fc82 	bl	800092c <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d902      	bls.n	800203a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	f000 bcdb 	b.w	80029f0 <HAL_RCC_OscConfig+0x106c>
 800203a:	2302      	movs	r3, #2
 800203c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002044:	fa93 f3a3 	rbit	r3, r3
 8002048:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800204c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002050:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002054:	2202      	movs	r2, #2
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	fa93 f2a3 	rbit	r2, r3
 8002066:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800206a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002078:	2202      	movs	r2, #2
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	fa93 f2a3 	rbit	r2, r3
 800208a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800208e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002092:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002094:	4b88      	ldr	r3, [pc, #544]	@ (80022b8 <HAL_RCC_OscConfig+0x934>)
 8002096:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800209c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80020a0:	2102      	movs	r1, #2
 80020a2:	6019      	str	r1, [r3, #0]
 80020a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	fa93 f1a3 	rbit	r1, r3
 80020b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80020ba:	6019      	str	r1, [r3, #0]
  return result;
 80020bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	f003 031f 	and.w	r3, r3, #31
 80020d6:	2101      	movs	r1, #1
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0a0      	beq.n	8002024 <HAL_RCC_OscConfig+0x6a0>
 80020e2:	e08d      	b.n	8002200 <HAL_RCC_OscConfig+0x87c>
 80020e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80020ec:	2201      	movs	r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	fa93 f2a3 	rbit	r2, r3
 80020fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002102:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002106:	601a      	str	r2, [r3, #0]
  return result;
 8002108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002110:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002112:	fab3 f383 	clz	r3, r3
 8002116:	b2db      	uxtb	r3, r3
 8002118:	461a      	mov	r2, r3
 800211a:	4b68      	ldr	r3, [pc, #416]	@ (80022bc <HAL_RCC_OscConfig+0x938>)
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	461a      	mov	r2, r3
 8002122:	2300      	movs	r3, #0
 8002124:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002126:	f7fe fc01 	bl	800092c <HAL_GetTick>
 800212a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212e:	e00a      	b.n	8002146 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002130:	f7fe fbfc 	bl	800092c <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d902      	bls.n	8002146 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	f000 bc55 	b.w	80029f0 <HAL_RCC_OscConfig+0x106c>
 8002146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800214e:	2202      	movs	r2, #2
 8002150:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002156:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	fa93 f2a3 	rbit	r2, r3
 8002160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002164:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002172:	2202      	movs	r2, #2
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	fa93 f2a3 	rbit	r2, r3
 8002184:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002188:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002192:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002196:	2202      	movs	r2, #2
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800219e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	fa93 f2a3 	rbit	r2, r3
 80021a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80021b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b2:	4b41      	ldr	r3, [pc, #260]	@ (80022b8 <HAL_RCC_OscConfig+0x934>)
 80021b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ba:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80021be:	2102      	movs	r1, #2
 80021c0:	6019      	str	r1, [r3, #0]
 80021c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	fa93 f1a3 	rbit	r1, r3
 80021d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80021d8:	6019      	str	r1, [r3, #0]
  return result;
 80021da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021de:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	fab3 f383 	clz	r3, r3
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	2101      	movs	r1, #1
 80021f6:	fa01 f303 	lsl.w	r3, r1, r3
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d197      	bne.n	8002130 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002200:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002204:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 81a1 	beq.w	8002558 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800221c:	4b26      	ldr	r3, [pc, #152]	@ (80022b8 <HAL_RCC_OscConfig+0x934>)
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d116      	bne.n	8002256 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002228:	4b23      	ldr	r3, [pc, #140]	@ (80022b8 <HAL_RCC_OscConfig+0x934>)
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	4a22      	ldr	r2, [pc, #136]	@ (80022b8 <HAL_RCC_OscConfig+0x934>)
 800222e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002232:	61d3      	str	r3, [r2, #28]
 8002234:	4b20      	ldr	r3, [pc, #128]	@ (80022b8 <HAL_RCC_OscConfig+0x934>)
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800223c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002240:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800224e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002250:	2301      	movs	r3, #1
 8002252:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002256:	4b1a      	ldr	r3, [pc, #104]	@ (80022c0 <HAL_RCC_OscConfig+0x93c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d11a      	bne.n	8002298 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002262:	4b17      	ldr	r3, [pc, #92]	@ (80022c0 <HAL_RCC_OscConfig+0x93c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a16      	ldr	r2, [pc, #88]	@ (80022c0 <HAL_RCC_OscConfig+0x93c>)
 8002268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800226c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226e:	f7fe fb5d 	bl	800092c <HAL_GetTick>
 8002272:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002276:	e009      	b.n	800228c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002278:	f7fe fb58 	bl	800092c <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b64      	cmp	r3, #100	@ 0x64
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e3b1      	b.n	80029f0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228c:	4b0c      	ldr	r3, [pc, #48]	@ (80022c0 <HAL_RCC_OscConfig+0x93c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0ef      	beq.n	8002278 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800229c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d10d      	bne.n	80022c4 <HAL_RCC_OscConfig+0x940>
 80022a8:	4b03      	ldr	r3, [pc, #12]	@ (80022b8 <HAL_RCC_OscConfig+0x934>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	4a02      	ldr	r2, [pc, #8]	@ (80022b8 <HAL_RCC_OscConfig+0x934>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6213      	str	r3, [r2, #32]
 80022b4:	e03c      	b.n	8002330 <HAL_RCC_OscConfig+0x9ac>
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000
 80022bc:	10908120 	.word	0x10908120
 80022c0:	40007000 	.word	0x40007000
 80022c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10c      	bne.n	80022ee <HAL_RCC_OscConfig+0x96a>
 80022d4:	4bc1      	ldr	r3, [pc, #772]	@ (80025dc <HAL_RCC_OscConfig+0xc58>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	4ac0      	ldr	r2, [pc, #768]	@ (80025dc <HAL_RCC_OscConfig+0xc58>)
 80022da:	f023 0301 	bic.w	r3, r3, #1
 80022de:	6213      	str	r3, [r2, #32]
 80022e0:	4bbe      	ldr	r3, [pc, #760]	@ (80025dc <HAL_RCC_OscConfig+0xc58>)
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	4abd      	ldr	r2, [pc, #756]	@ (80025dc <HAL_RCC_OscConfig+0xc58>)
 80022e6:	f023 0304 	bic.w	r3, r3, #4
 80022ea:	6213      	str	r3, [r2, #32]
 80022ec:	e020      	b.n	8002330 <HAL_RCC_OscConfig+0x9ac>
 80022ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2b05      	cmp	r3, #5
 80022fc:	d10c      	bne.n	8002318 <HAL_RCC_OscConfig+0x994>
 80022fe:	4bb7      	ldr	r3, [pc, #732]	@ (80025dc <HAL_RCC_OscConfig+0xc58>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	4ab6      	ldr	r2, [pc, #728]	@ (80025dc <HAL_RCC_OscConfig+0xc58>)
 8002304:	f043 0304 	orr.w	r3, r3, #4
 8002308:	6213      	str	r3, [r2, #32]
 800230a:	4bb4      	ldr	r3, [pc, #720]	@ (80025dc <HAL_RCC_OscConfig+0xc58>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4ab3      	ldr	r2, [pc, #716]	@ (80025dc <HAL_RCC_OscConfig+0xc58>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6213      	str	r3, [r2, #32]
 8002316:	e00b      	b.n	8002330 <HAL_RCC_OscConfig+0x9ac>
 8002318:	4bb0      	ldr	r3, [pc, #704]	@ (80025dc <HAL_RCC_OscConfig+0xc58>)
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	4aaf      	ldr	r2, [pc, #700]	@ (80025dc <HAL_RCC_OscConfig+0xc58>)
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	6213      	str	r3, [r2, #32]
 8002324:	4bad      	ldr	r3, [pc, #692]	@ (80025dc <HAL_RCC_OscConfig+0xc58>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	4aac      	ldr	r2, [pc, #688]	@ (80025dc <HAL_RCC_OscConfig+0xc58>)
 800232a:	f023 0304 	bic.w	r3, r3, #4
 800232e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002334:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 8081 	beq.w	8002444 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002342:	f7fe faf3 	bl	800092c <HAL_GetTick>
 8002346:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234a:	e00b      	b.n	8002364 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800234c:	f7fe faee 	bl	800092c <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f241 3288 	movw	r2, #5000	@ 0x1388
 800235c:	4293      	cmp	r3, r2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e345      	b.n	80029f0 <HAL_RCC_OscConfig+0x106c>
 8002364:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002368:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800236c:	2202      	movs	r2, #2
 800236e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002374:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	fa93 f2a3 	rbit	r2, r3
 800237e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002382:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800238c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002390:	2202      	movs	r2, #2
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002398:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	fa93 f2a3 	rbit	r2, r3
 80023a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80023aa:	601a      	str	r2, [r3, #0]
  return result;
 80023ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80023b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	095b      	lsrs	r3, r3, #5
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f043 0302 	orr.w	r3, r3, #2
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d102      	bne.n	80023d0 <HAL_RCC_OscConfig+0xa4c>
 80023ca:	4b84      	ldr	r3, [pc, #528]	@ (80025dc <HAL_RCC_OscConfig+0xc58>)
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	e013      	b.n	80023f8 <HAL_RCC_OscConfig+0xa74>
 80023d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80023d8:	2202      	movs	r2, #2
 80023da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	fa93 f2a3 	rbit	r2, r3
 80023ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ee:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	4b79      	ldr	r3, [pc, #484]	@ (80025dc <HAL_RCC_OscConfig+0xc58>)
 80023f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023fc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002400:	2102      	movs	r1, #2
 8002402:	6011      	str	r1, [r2, #0]
 8002404:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002408:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	fa92 f1a2 	rbit	r1, r2
 8002412:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002416:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800241a:	6011      	str	r1, [r2, #0]
  return result;
 800241c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002420:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	fab2 f282 	clz	r2, r2
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	f002 021f 	and.w	r2, r2, #31
 8002436:	2101      	movs	r1, #1
 8002438:	fa01 f202 	lsl.w	r2, r1, r2
 800243c:	4013      	ands	r3, r2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d084      	beq.n	800234c <HAL_RCC_OscConfig+0x9c8>
 8002442:	e07f      	b.n	8002544 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002444:	f7fe fa72 	bl	800092c <HAL_GetTick>
 8002448:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800244c:	e00b      	b.n	8002466 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7fe fa6d 	bl	800092c <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e2c4      	b.n	80029f0 <HAL_RCC_OscConfig+0x106c>
 8002466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800246e:	2202      	movs	r2, #2
 8002470:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002476:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	fa93 f2a3 	rbit	r2, r3
 8002480:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002484:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002492:	2202      	movs	r2, #2
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	fa93 f2a3 	rbit	r2, r3
 80024a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80024ac:	601a      	str	r2, [r3, #0]
  return result;
 80024ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80024b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f043 0302 	orr.w	r3, r3, #2
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d102      	bne.n	80024d2 <HAL_RCC_OscConfig+0xb4e>
 80024cc:	4b43      	ldr	r3, [pc, #268]	@ (80025dc <HAL_RCC_OscConfig+0xc58>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	e013      	b.n	80024fa <HAL_RCC_OscConfig+0xb76>
 80024d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80024da:	2202      	movs	r2, #2
 80024dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	fa93 f2a3 	rbit	r2, r3
 80024ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	4b39      	ldr	r3, [pc, #228]	@ (80025dc <HAL_RCC_OscConfig+0xc58>)
 80024f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024fe:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002502:	2102      	movs	r1, #2
 8002504:	6011      	str	r1, [r2, #0]
 8002506:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800250a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	fa92 f1a2 	rbit	r1, r2
 8002514:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002518:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800251c:	6011      	str	r1, [r2, #0]
  return result;
 800251e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002522:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	fab2 f282 	clz	r2, r2
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	f002 021f 	and.w	r2, r2, #31
 8002538:	2101      	movs	r1, #1
 800253a:	fa01 f202 	lsl.w	r2, r1, r2
 800253e:	4013      	ands	r3, r2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d184      	bne.n	800244e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002544:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002548:	2b01      	cmp	r3, #1
 800254a:	d105      	bne.n	8002558 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800254c:	4b23      	ldr	r3, [pc, #140]	@ (80025dc <HAL_RCC_OscConfig+0xc58>)
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	4a22      	ldr	r2, [pc, #136]	@ (80025dc <HAL_RCC_OscConfig+0xc58>)
 8002552:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002556:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002558:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 8242 	beq.w	80029ee <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800256a:	4b1c      	ldr	r3, [pc, #112]	@ (80025dc <HAL_RCC_OscConfig+0xc58>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b08      	cmp	r3, #8
 8002574:	f000 8213 	beq.w	800299e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	2b02      	cmp	r3, #2
 8002586:	f040 8162 	bne.w	800284e <HAL_RCC_OscConfig+0xeca>
 800258a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002592:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002596:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800259c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	fa93 f2a3 	rbit	r2, r3
 80025a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025aa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80025ae:	601a      	str	r2, [r3, #0]
  return result;
 80025b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80025b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025c4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	461a      	mov	r2, r3
 80025cc:	2300      	movs	r3, #0
 80025ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7fe f9ac 	bl	800092c <HAL_GetTick>
 80025d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d8:	e00c      	b.n	80025f4 <HAL_RCC_OscConfig+0xc70>
 80025da:	bf00      	nop
 80025dc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e0:	f7fe f9a4 	bl	800092c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e1fd      	b.n	80029f0 <HAL_RCC_OscConfig+0x106c>
 80025f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80025fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002600:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002606:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	fa93 f2a3 	rbit	r2, r3
 8002610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002614:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002618:	601a      	str	r2, [r3, #0]
  return result;
 800261a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002622:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002624:	fab3 f383 	clz	r3, r3
 8002628:	b2db      	uxtb	r3, r3
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	b2db      	uxtb	r3, r3
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	d102      	bne.n	800263e <HAL_RCC_OscConfig+0xcba>
 8002638:	4bb0      	ldr	r3, [pc, #704]	@ (80028fc <HAL_RCC_OscConfig+0xf78>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	e027      	b.n	800268e <HAL_RCC_OscConfig+0xd0a>
 800263e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002642:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002646:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800264a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002650:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	fa93 f2a3 	rbit	r2, r3
 800265a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800265e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002668:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800266c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002676:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	fa93 f2a3 	rbit	r2, r3
 8002680:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002684:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	4b9c      	ldr	r3, [pc, #624]	@ (80028fc <HAL_RCC_OscConfig+0xf78>)
 800268c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002692:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002696:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800269a:	6011      	str	r1, [r2, #0]
 800269c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026a0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	fa92 f1a2 	rbit	r1, r2
 80026aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026ae:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80026b2:	6011      	str	r1, [r2, #0]
  return result;
 80026b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026b8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80026bc:	6812      	ldr	r2, [r2, #0]
 80026be:	fab2 f282 	clz	r2, r2
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	f042 0220 	orr.w	r2, r2, #32
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	f002 021f 	and.w	r2, r2, #31
 80026ce:	2101      	movs	r1, #1
 80026d0:	fa01 f202 	lsl.w	r2, r1, r2
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d182      	bne.n	80025e0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026da:	4b88      	ldr	r3, [pc, #544]	@ (80028fc <HAL_RCC_OscConfig+0xf78>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80026e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80026ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	430b      	orrs	r3, r1
 80026fc:	497f      	ldr	r1, [pc, #508]	@ (80028fc <HAL_RCC_OscConfig+0xf78>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	604b      	str	r3, [r1, #4]
 8002702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002706:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800270a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800270e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002714:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	fa93 f2a3 	rbit	r2, r3
 800271e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002722:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002726:	601a      	str	r2, [r3, #0]
  return result;
 8002728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800272c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002730:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800273c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	461a      	mov	r2, r3
 8002744:	2301      	movs	r3, #1
 8002746:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002748:	f7fe f8f0 	bl	800092c <HAL_GetTick>
 800274c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002750:	e009      	b.n	8002766 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe f8eb 	bl	800092c <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e144      	b.n	80029f0 <HAL_RCC_OscConfig+0x106c>
 8002766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800276e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002772:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002778:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	fa93 f2a3 	rbit	r2, r3
 8002782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002786:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800278a:	601a      	str	r2, [r3, #0]
  return result;
 800278c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002790:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002794:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	095b      	lsrs	r3, r3, #5
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d102      	bne.n	80027b0 <HAL_RCC_OscConfig+0xe2c>
 80027aa:	4b54      	ldr	r3, [pc, #336]	@ (80028fc <HAL_RCC_OscConfig+0xf78>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	e027      	b.n	8002800 <HAL_RCC_OscConfig+0xe7c>
 80027b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80027b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	fa93 f2a3 	rbit	r2, r3
 80027cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027da:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80027de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	fa93 f2a3 	rbit	r2, r3
 80027f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	4b3f      	ldr	r3, [pc, #252]	@ (80028fc <HAL_RCC_OscConfig+0xf78>)
 80027fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002800:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002804:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002808:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800280c:	6011      	str	r1, [r2, #0]
 800280e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002812:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	fa92 f1a2 	rbit	r1, r2
 800281c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002820:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002824:	6011      	str	r1, [r2, #0]
  return result;
 8002826:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800282a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	fab2 f282 	clz	r2, r2
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	f042 0220 	orr.w	r2, r2, #32
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	f002 021f 	and.w	r2, r2, #31
 8002840:	2101      	movs	r1, #1
 8002842:	fa01 f202 	lsl.w	r2, r1, r2
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d082      	beq.n	8002752 <HAL_RCC_OscConfig+0xdce>
 800284c:	e0cf      	b.n	80029ee <HAL_RCC_OscConfig+0x106a>
 800284e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002852:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002856:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800285a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002860:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	fa93 f2a3 	rbit	r2, r3
 800286a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002872:	601a      	str	r2, [r3, #0]
  return result;
 8002874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002878:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800287c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002888:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	461a      	mov	r2, r3
 8002890:	2300      	movs	r3, #0
 8002892:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7fe f84a 	bl	800092c <HAL_GetTick>
 8002898:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800289c:	e009      	b.n	80028b2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800289e:	f7fe f845 	bl	800092c <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e09e      	b.n	80029f0 <HAL_RCC_OscConfig+0x106c>
 80028b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80028ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	fa93 f2a3 	rbit	r2, r3
 80028ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80028d6:	601a      	str	r2, [r3, #0]
  return result;
 80028d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028dc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80028e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e2:	fab3 f383 	clz	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	095b      	lsrs	r3, r3, #5
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d104      	bne.n	8002900 <HAL_RCC_OscConfig+0xf7c>
 80028f6:	4b01      	ldr	r3, [pc, #4]	@ (80028fc <HAL_RCC_OscConfig+0xf78>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	e029      	b.n	8002950 <HAL_RCC_OscConfig+0xfcc>
 80028fc:	40021000 	.word	0x40021000
 8002900:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002904:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002908:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800290c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002912:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	fa93 f2a3 	rbit	r2, r3
 800291c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002920:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800292e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002938:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	fa93 f2a3 	rbit	r2, r3
 8002942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002946:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	4b2b      	ldr	r3, [pc, #172]	@ (80029fc <HAL_RCC_OscConfig+0x1078>)
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002954:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002958:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800295c:	6011      	str	r1, [r2, #0]
 800295e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002962:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	fa92 f1a2 	rbit	r1, r2
 800296c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002970:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002974:	6011      	str	r1, [r2, #0]
  return result;
 8002976:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800297a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	fab2 f282 	clz	r2, r2
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	f042 0220 	orr.w	r2, r2, #32
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	f002 021f 	and.w	r2, r2, #31
 8002990:	2101      	movs	r1, #1
 8002992:	fa01 f202 	lsl.w	r2, r1, r2
 8002996:	4013      	ands	r3, r2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d180      	bne.n	800289e <HAL_RCC_OscConfig+0xf1a>
 800299c:	e027      	b.n	80029ee <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800299e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e01e      	b.n	80029f0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029b2:	4b12      	ldr	r3, [pc, #72]	@ (80029fc <HAL_RCC_OscConfig+0x1078>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80029be:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d10b      	bne.n	80029ea <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80029d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80029d6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80029da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d001      	beq.n	80029ee <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40021000 	.word	0x40021000

08002a00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b09e      	sub	sp, #120	@ 0x78
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e162      	b.n	8002cde <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a18:	4b90      	ldr	r3, [pc, #576]	@ (8002c5c <HAL_RCC_ClockConfig+0x25c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d910      	bls.n	8002a48 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	4b8d      	ldr	r3, [pc, #564]	@ (8002c5c <HAL_RCC_ClockConfig+0x25c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 0207 	bic.w	r2, r3, #7
 8002a2e:	498b      	ldr	r1, [pc, #556]	@ (8002c5c <HAL_RCC_ClockConfig+0x25c>)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a36:	4b89      	ldr	r3, [pc, #548]	@ (8002c5c <HAL_RCC_ClockConfig+0x25c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e14a      	b.n	8002cde <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a54:	4b82      	ldr	r3, [pc, #520]	@ (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	497f      	ldr	r1, [pc, #508]	@ (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 80dc 	beq.w	8002c2c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d13c      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xf6>
 8002a7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a80:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a84:	fa93 f3a3 	rbit	r3, r3
 8002a88:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002a8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8c:	fab3 f383 	clz	r3, r3
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d102      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xa6>
 8002aa0:	4b6f      	ldr	r3, [pc, #444]	@ (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	e00f      	b.n	8002ac6 <HAL_RCC_ClockConfig+0xc6>
 8002aa6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002aaa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ab4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ab8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002aba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ac2:	4b67      	ldr	r3, [pc, #412]	@ (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002aca:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002acc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ace:	fa92 f2a2 	rbit	r2, r2
 8002ad2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002ad4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002ad6:	fab2 f282 	clz	r2, r2
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	f042 0220 	orr.w	r2, r2, #32
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	f002 021f 	and.w	r2, r2, #31
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d17b      	bne.n	8002bea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e0f3      	b.n	8002cde <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d13c      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x178>
 8002afe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b02:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0e:	fab3 f383 	clz	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d102      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x128>
 8002b22:	4b4f      	ldr	r3, [pc, #316]	@ (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	e00f      	b.n	8002b48 <HAL_RCC_ClockConfig+0x148>
 8002b28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b30:	fa93 f3a3 	rbit	r3, r3
 8002b34:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b3e:	fa93 f3a3 	rbit	r3, r3
 8002b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b44:	4b46      	ldr	r3, [pc, #280]	@ (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b4c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002b4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b50:	fa92 f2a2 	rbit	r2, r2
 8002b54:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002b56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b58:	fab2 f282 	clz	r2, r2
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	f042 0220 	orr.w	r2, r2, #32
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	f002 021f 	and.w	r2, r2, #31
 8002b68:	2101      	movs	r1, #1
 8002b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d13a      	bne.n	8002bea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0b2      	b.n	8002cde <HAL_RCC_ClockConfig+0x2de>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7e:	fa93 f3a3 	rbit	r3, r3
 8002b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b86:	fab3 f383 	clz	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d102      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0x1a0>
 8002b9a:	4b31      	ldr	r3, [pc, #196]	@ (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	e00d      	b.n	8002bbc <HAL_RCC_ClockConfig+0x1bc>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bac:	2302      	movs	r3, #2
 8002bae:	623b      	str	r3, [r7, #32]
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	61fb      	str	r3, [r7, #28]
 8002bb8:	4b29      	ldr	r3, [pc, #164]	@ (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	61ba      	str	r2, [r7, #24]
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	fa92 f2a2 	rbit	r2, r2
 8002bc6:	617a      	str	r2, [r7, #20]
  return result;
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	fab2 f282 	clz	r2, r2
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	f042 0220 	orr.w	r2, r2, #32
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	f002 021f 	and.w	r2, r2, #31
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e079      	b.n	8002cde <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bea:	4b1d      	ldr	r3, [pc, #116]	@ (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f023 0203 	bic.w	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	491a      	ldr	r1, [pc, #104]	@ (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bfc:	f7fd fe96 	bl	800092c <HAL_GetTick>
 8002c00:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c02:	e00a      	b.n	8002c1a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c04:	f7fd fe92 	bl	800092c <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e061      	b.n	8002cde <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1a:	4b11      	ldr	r3, [pc, #68]	@ (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f003 020c 	and.w	r2, r3, #12
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d1eb      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c5c <HAL_RCC_ClockConfig+0x25c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d214      	bcs.n	8002c64 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b08      	ldr	r3, [pc, #32]	@ (8002c5c <HAL_RCC_ClockConfig+0x25c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 0207 	bic.w	r2, r3, #7
 8002c42:	4906      	ldr	r1, [pc, #24]	@ (8002c5c <HAL_RCC_ClockConfig+0x25c>)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4a:	4b04      	ldr	r3, [pc, #16]	@ (8002c5c <HAL_RCC_ClockConfig+0x25c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e040      	b.n	8002cde <HAL_RCC_ClockConfig+0x2de>
 8002c5c:	40022000 	.word	0x40022000
 8002c60:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c70:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	491a      	ldr	r1, [pc, #104]	@ (8002ce8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c8e:	4b16      	ldr	r3, [pc, #88]	@ (8002ce8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4912      	ldr	r1, [pc, #72]	@ (8002ce8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ca2:	f000 f829 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
 8002ca6:	4601      	mov	r1, r0
 8002ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce8 <HAL_RCC_ClockConfig+0x2e8>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cb0:	22f0      	movs	r2, #240	@ 0xf0
 8002cb2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	fa92 f2a2 	rbit	r2, r2
 8002cba:	60fa      	str	r2, [r7, #12]
  return result;
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	fab2 f282 	clz	r2, r2
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	40d3      	lsrs	r3, r2
 8002cc6:	4a09      	ldr	r2, [pc, #36]	@ (8002cec <HAL_RCC_ClockConfig+0x2ec>)
 8002cc8:	5cd3      	ldrb	r3, [r2, r3]
 8002cca:	fa21 f303 	lsr.w	r3, r1, r3
 8002cce:	4a08      	ldr	r2, [pc, #32]	@ (8002cf0 <HAL_RCC_ClockConfig+0x2f0>)
 8002cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002cd2:	4b08      	ldr	r3, [pc, #32]	@ (8002cf4 <HAL_RCC_ClockConfig+0x2f4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fd fde4 	bl	80008a4 <HAL_InitTick>
  
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3778      	adds	r7, #120	@ 0x78
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	0800a284 	.word	0x0800a284
 8002cf0:	20000000 	.word	0x20000000
 8002cf4:	20000004 	.word	0x20000004

08002cf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b08b      	sub	sp, #44	@ 0x2c
 8002cfc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
 8002d02:	2300      	movs	r3, #0
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	2300      	movs	r3, #0
 8002d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002d12:	4b29      	ldr	r3, [pc, #164]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d002      	beq.n	8002d28 <HAL_RCC_GetSysClockFreq+0x30>
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d003      	beq.n	8002d2e <HAL_RCC_GetSysClockFreq+0x36>
 8002d26:	e03c      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d28:	4b24      	ldr	r3, [pc, #144]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d2a:	623b      	str	r3, [r7, #32]
      break;
 8002d2c:	e03c      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002d34:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002d38:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	fa92 f2a2 	rbit	r2, r2
 8002d40:	607a      	str	r2, [r7, #4]
  return result;
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	fab2 f282 	clz	r2, r2
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	40d3      	lsrs	r3, r2
 8002d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d4e:	5cd3      	ldrb	r3, [r2, r3]
 8002d50:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002d52:	4b19      	ldr	r3, [pc, #100]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	220f      	movs	r2, #15
 8002d5c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	fa92 f2a2 	rbit	r2, r2
 8002d64:	60fa      	str	r2, [r7, #12]
  return result;
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	fab2 f282 	clz	r2, r2
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	40d3      	lsrs	r3, r2
 8002d70:	4a14      	ldr	r2, [pc, #80]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d72:	5cd3      	ldrb	r3, [r2, r3]
 8002d74:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d008      	beq.n	8002d92 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d80:	4a0e      	ldr	r2, [pc, #56]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	fb02 f303 	mul.w	r3, r2, r3
 8002d8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d90:	e004      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	4a0c      	ldr	r2, [pc, #48]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d96:	fb02 f303 	mul.w	r3, r2, r3
 8002d9a:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9e:	623b      	str	r3, [r7, #32]
      break;
 8002da0:	e002      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002da2:	4b0a      	ldr	r3, [pc, #40]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002da4:	623b      	str	r3, [r7, #32]
      break;
 8002da6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002da8:	6a3b      	ldr	r3, [r7, #32]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	372c      	adds	r7, #44	@ 0x2c
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	01e84800 	.word	0x01e84800
 8002dc0:	0800a29c 	.word	0x0800a29c
 8002dc4:	0800a2ac 	.word	0x0800a2ac
 8002dc8:	003d0900 	.word	0x003d0900
 8002dcc:	007a1200 	.word	0x007a1200

08002dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd4:	4b03      	ldr	r3, [pc, #12]	@ (8002de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	20000000 	.word	0x20000000

08002de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002dee:	f7ff ffef 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002df2:	4601      	mov	r1, r0
 8002df4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e24 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002dfc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002e00:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	fa92 f2a2 	rbit	r2, r2
 8002e08:	603a      	str	r2, [r7, #0]
  return result;
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	fab2 f282 	clz	r2, r2
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	40d3      	lsrs	r3, r2
 8002e14:	4a04      	ldr	r2, [pc, #16]	@ (8002e28 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002e16:	5cd3      	ldrb	r3, [r2, r3]
 8002e18:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40021000 	.word	0x40021000
 8002e28:	0800a294 	.word	0x0800a294

08002e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002e32:	f7ff ffcd 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002e36:	4601      	mov	r1, r0
 8002e38:	4b0b      	ldr	r3, [pc, #44]	@ (8002e68 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002e40:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002e44:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	fa92 f2a2 	rbit	r2, r2
 8002e4c:	603a      	str	r2, [r7, #0]
  return result;
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	fab2 f282 	clz	r2, r2
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	40d3      	lsrs	r3, r2
 8002e58:	4a04      	ldr	r2, [pc, #16]	@ (8002e6c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002e5a:	5cd3      	ldrb	r3, [r2, r3]
 8002e5c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002e60:	4618      	mov	r0, r3
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	0800a294 	.word	0x0800a294

08002e70 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b092      	sub	sp, #72	@ 0x48
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002e80:	2300      	movs	r3, #0
 8002e82:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 80cd 	beq.w	800302e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e94:	4b86      	ldr	r3, [pc, #536]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10e      	bne.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea0:	4b83      	ldr	r3, [pc, #524]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	4a82      	ldr	r2, [pc, #520]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ea6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eaa:	61d3      	str	r3, [r2, #28]
 8002eac:	4b80      	ldr	r3, [pc, #512]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ebe:	4b7d      	ldr	r3, [pc, #500]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d118      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eca:	4b7a      	ldr	r3, [pc, #488]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a79      	ldr	r2, [pc, #484]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ed6:	f7fd fd29 	bl	800092c <HAL_GetTick>
 8002eda:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002edc:	e008      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ede:	f7fd fd25 	bl	800092c <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b64      	cmp	r3, #100	@ 0x64
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e0db      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef0:	4b70      	ldr	r3, [pc, #448]	@ (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0f0      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002efc:	4b6c      	ldr	r3, [pc, #432]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d07d      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d076      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f1a:	4b65      	ldr	r3, [pc, #404]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f28:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f34:	fab3 f383 	clz	r3, r3
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4b5e      	ldr	r3, [pc, #376]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	461a      	mov	r2, r3
 8002f44:	2301      	movs	r3, #1
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f50:	fa93 f3a3 	rbit	r3, r3
 8002f54:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f58:	fab3 f383 	clz	r3, r3
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b55      	ldr	r3, [pc, #340]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f62:	4413      	add	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	461a      	mov	r2, r3
 8002f68:	2300      	movs	r3, #0
 8002f6a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f6c:	4a50      	ldr	r2, [pc, #320]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f70:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d045      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7c:	f7fd fcd6 	bl	800092c <HAL_GetTick>
 8002f80:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f82:	e00a      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f84:	f7fd fcd2 	bl	800092c <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e086      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa0:	fa93 f3a3 	rbit	r3, r3
 8002fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	623b      	str	r3, [r7, #32]
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	fa93 f3a3 	rbit	r3, r3
 8002fb0:	61fb      	str	r3, [r7, #28]
  return result;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb4:	fab3 f383 	clz	r3, r3
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	f043 0302 	orr.w	r3, r3, #2
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d102      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002fc8:	4b39      	ldr	r3, [pc, #228]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	e007      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	fa93 f3a3 	rbit	r3, r3
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	4b35      	ldr	r3, [pc, #212]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fde:	2202      	movs	r2, #2
 8002fe0:	613a      	str	r2, [r7, #16]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	fa92 f2a2 	rbit	r2, r2
 8002fe8:	60fa      	str	r2, [r7, #12]
  return result;
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	fab2 f282 	clz	r2, r2
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	f002 021f 	and.w	r2, r2, #31
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8003002:	4013      	ands	r3, r2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0bd      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003008:	4b29      	ldr	r3, [pc, #164]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	4926      	ldr	r1, [pc, #152]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003016:	4313      	orrs	r3, r2
 8003018:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800301a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800301e:	2b01      	cmp	r3, #1
 8003020:	d105      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003022:	4b23      	ldr	r3, [pc, #140]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	4a22      	ldr	r2, [pc, #136]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003028:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800302c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d008      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800303a:	4b1d      	ldr	r3, [pc, #116]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303e:	f023 0203 	bic.w	r2, r3, #3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	491a      	ldr	r1, [pc, #104]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003048:	4313      	orrs	r3, r2
 800304a:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0320 	and.w	r3, r3, #32
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003058:	4b15      	ldr	r3, [pc, #84]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800305a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305c:	f023 0210 	bic.w	r2, r3, #16
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4912      	ldr	r1, [pc, #72]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003066:	4313      	orrs	r3, r2
 8003068:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003072:	2b00      	cmp	r3, #0
 8003074:	d008      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003076:	4b0e      	ldr	r3, [pc, #56]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	490b      	ldr	r1, [pc, #44]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003084:	4313      	orrs	r3, r2
 8003086:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003094:	4b06      	ldr	r3, [pc, #24]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003098:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	4903      	ldr	r1, [pc, #12]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3748      	adds	r7, #72	@ 0x48
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40007000 	.word	0x40007000
 80030b8:	10908100 	.word	0x10908100

080030bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e040      	b.n	8003150 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d106      	bne.n	80030e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fd fa94 	bl	800060c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2224      	movs	r2, #36	@ 0x24
 80030e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0201 	bic.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f8b6 	bl	800326c <UART_SetConfig>
 8003100:	4603      	mov	r3, r0
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e022      	b.n	8003150 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f9e0 	bl	80034d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003126:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003136:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 fa67 	bl	800361c <UART_CheckIdleState>
 800314e:	4603      	mov	r3, r0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08a      	sub	sp, #40	@ 0x28
 800315c:	af02      	add	r7, sp, #8
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	603b      	str	r3, [r7, #0]
 8003164:	4613      	mov	r3, r2
 8003166:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800316c:	2b20      	cmp	r3, #32
 800316e:	d177      	bne.n	8003260 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <HAL_UART_Transmit+0x24>
 8003176:	88fb      	ldrh	r3, [r7, #6]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e070      	b.n	8003262 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2221      	movs	r2, #33	@ 0x21
 800318c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800318e:	f7fd fbcd 	bl	800092c <HAL_GetTick>
 8003192:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	88fa      	ldrh	r2, [r7, #6]
 8003198:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	88fa      	ldrh	r2, [r7, #6]
 80031a0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ac:	d108      	bne.n	80031c0 <HAL_UART_Transmit+0x68>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d104      	bne.n	80031c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	61bb      	str	r3, [r7, #24]
 80031be:	e003      	b.n	80031c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031c8:	e02f      	b.n	800322a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2200      	movs	r2, #0
 80031d2:	2180      	movs	r1, #128	@ 0x80
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 fac9 	bl	800376c <UART_WaitOnFlagUntilTimeout>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d004      	beq.n	80031ea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e03b      	b.n	8003262 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10b      	bne.n	8003208 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	881a      	ldrh	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031fc:	b292      	uxth	r2, r2
 80031fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	3302      	adds	r3, #2
 8003204:	61bb      	str	r3, [r7, #24]
 8003206:	e007      	b.n	8003218 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	781a      	ldrb	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3301      	adds	r3, #1
 8003216:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800321e:	b29b      	uxth	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1c9      	bne.n	80031ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2200      	movs	r2, #0
 800323e:	2140      	movs	r1, #64	@ 0x40
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 fa93 	bl	800376c <UART_WaitOnFlagUntilTimeout>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d004      	beq.n	8003256 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2220      	movs	r2, #32
 8003250:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e005      	b.n	8003262 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	e000      	b.n	8003262 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003260:	2302      	movs	r3, #2
  }
}
 8003262:	4618      	mov	r0, r3
 8003264:	3720      	adds	r7, #32
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b088      	sub	sp, #32
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	4313      	orrs	r3, r2
 800328e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	4b8a      	ldr	r3, [pc, #552]	@ (80034c0 <UART_SetConfig+0x254>)
 8003298:	4013      	ands	r3, r2
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6812      	ldr	r2, [r2, #0]
 800329e:	6979      	ldr	r1, [r7, #20]
 80032a0:	430b      	orrs	r3, r1
 80032a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	430a      	orrs	r2, r1
 80032dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a78      	ldr	r2, [pc, #480]	@ (80034c4 <UART_SetConfig+0x258>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d120      	bne.n	800332a <UART_SetConfig+0xbe>
 80032e8:	4b77      	ldr	r3, [pc, #476]	@ (80034c8 <UART_SetConfig+0x25c>)
 80032ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	2b03      	cmp	r3, #3
 80032f2:	d817      	bhi.n	8003324 <UART_SetConfig+0xb8>
 80032f4:	a201      	add	r2, pc, #4	@ (adr r2, 80032fc <UART_SetConfig+0x90>)
 80032f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fa:	bf00      	nop
 80032fc:	0800330d 	.word	0x0800330d
 8003300:	08003319 	.word	0x08003319
 8003304:	0800331f 	.word	0x0800331f
 8003308:	08003313 	.word	0x08003313
 800330c:	2300      	movs	r3, #0
 800330e:	77fb      	strb	r3, [r7, #31]
 8003310:	e01d      	b.n	800334e <UART_SetConfig+0xe2>
 8003312:	2302      	movs	r3, #2
 8003314:	77fb      	strb	r3, [r7, #31]
 8003316:	e01a      	b.n	800334e <UART_SetConfig+0xe2>
 8003318:	2304      	movs	r3, #4
 800331a:	77fb      	strb	r3, [r7, #31]
 800331c:	e017      	b.n	800334e <UART_SetConfig+0xe2>
 800331e:	2308      	movs	r3, #8
 8003320:	77fb      	strb	r3, [r7, #31]
 8003322:	e014      	b.n	800334e <UART_SetConfig+0xe2>
 8003324:	2310      	movs	r3, #16
 8003326:	77fb      	strb	r3, [r7, #31]
 8003328:	e011      	b.n	800334e <UART_SetConfig+0xe2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a67      	ldr	r2, [pc, #412]	@ (80034cc <UART_SetConfig+0x260>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d102      	bne.n	800333a <UART_SetConfig+0xce>
 8003334:	2300      	movs	r3, #0
 8003336:	77fb      	strb	r3, [r7, #31]
 8003338:	e009      	b.n	800334e <UART_SetConfig+0xe2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a64      	ldr	r2, [pc, #400]	@ (80034d0 <UART_SetConfig+0x264>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d102      	bne.n	800334a <UART_SetConfig+0xde>
 8003344:	2300      	movs	r3, #0
 8003346:	77fb      	strb	r3, [r7, #31]
 8003348:	e001      	b.n	800334e <UART_SetConfig+0xe2>
 800334a:	2310      	movs	r3, #16
 800334c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003356:	d15a      	bne.n	800340e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003358:	7ffb      	ldrb	r3, [r7, #31]
 800335a:	2b08      	cmp	r3, #8
 800335c:	d827      	bhi.n	80033ae <UART_SetConfig+0x142>
 800335e:	a201      	add	r2, pc, #4	@ (adr r2, 8003364 <UART_SetConfig+0xf8>)
 8003360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003364:	08003389 	.word	0x08003389
 8003368:	08003391 	.word	0x08003391
 800336c:	08003399 	.word	0x08003399
 8003370:	080033af 	.word	0x080033af
 8003374:	0800339f 	.word	0x0800339f
 8003378:	080033af 	.word	0x080033af
 800337c:	080033af 	.word	0x080033af
 8003380:	080033af 	.word	0x080033af
 8003384:	080033a7 	.word	0x080033a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003388:	f7ff fd2e 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 800338c:	61b8      	str	r0, [r7, #24]
        break;
 800338e:	e013      	b.n	80033b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003390:	f7ff fd4c 	bl	8002e2c <HAL_RCC_GetPCLK2Freq>
 8003394:	61b8      	str	r0, [r7, #24]
        break;
 8003396:	e00f      	b.n	80033b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003398:	4b4e      	ldr	r3, [pc, #312]	@ (80034d4 <UART_SetConfig+0x268>)
 800339a:	61bb      	str	r3, [r7, #24]
        break;
 800339c:	e00c      	b.n	80033b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800339e:	f7ff fcab 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
 80033a2:	61b8      	str	r0, [r7, #24]
        break;
 80033a4:	e008      	b.n	80033b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033aa:	61bb      	str	r3, [r7, #24]
        break;
 80033ac:	e004      	b.n	80033b8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	77bb      	strb	r3, [r7, #30]
        break;
 80033b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d074      	beq.n	80034a8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	005a      	lsls	r2, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	085b      	lsrs	r3, r3, #1
 80033c8:	441a      	add	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	2b0f      	cmp	r3, #15
 80033d8:	d916      	bls.n	8003408 <UART_SetConfig+0x19c>
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e0:	d212      	bcs.n	8003408 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	f023 030f 	bic.w	r3, r3, #15
 80033ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	085b      	lsrs	r3, r3, #1
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	89fb      	ldrh	r3, [r7, #14]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	89fa      	ldrh	r2, [r7, #14]
 8003404:	60da      	str	r2, [r3, #12]
 8003406:	e04f      	b.n	80034a8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	77bb      	strb	r3, [r7, #30]
 800340c:	e04c      	b.n	80034a8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800340e:	7ffb      	ldrb	r3, [r7, #31]
 8003410:	2b08      	cmp	r3, #8
 8003412:	d828      	bhi.n	8003466 <UART_SetConfig+0x1fa>
 8003414:	a201      	add	r2, pc, #4	@ (adr r2, 800341c <UART_SetConfig+0x1b0>)
 8003416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341a:	bf00      	nop
 800341c:	08003441 	.word	0x08003441
 8003420:	08003449 	.word	0x08003449
 8003424:	08003451 	.word	0x08003451
 8003428:	08003467 	.word	0x08003467
 800342c:	08003457 	.word	0x08003457
 8003430:	08003467 	.word	0x08003467
 8003434:	08003467 	.word	0x08003467
 8003438:	08003467 	.word	0x08003467
 800343c:	0800345f 	.word	0x0800345f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003440:	f7ff fcd2 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 8003444:	61b8      	str	r0, [r7, #24]
        break;
 8003446:	e013      	b.n	8003470 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003448:	f7ff fcf0 	bl	8002e2c <HAL_RCC_GetPCLK2Freq>
 800344c:	61b8      	str	r0, [r7, #24]
        break;
 800344e:	e00f      	b.n	8003470 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003450:	4b20      	ldr	r3, [pc, #128]	@ (80034d4 <UART_SetConfig+0x268>)
 8003452:	61bb      	str	r3, [r7, #24]
        break;
 8003454:	e00c      	b.n	8003470 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003456:	f7ff fc4f 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
 800345a:	61b8      	str	r0, [r7, #24]
        break;
 800345c:	e008      	b.n	8003470 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800345e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003462:	61bb      	str	r3, [r7, #24]
        break;
 8003464:	e004      	b.n	8003470 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	77bb      	strb	r3, [r7, #30]
        break;
 800346e:	bf00      	nop
    }

    if (pclk != 0U)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d018      	beq.n	80034a8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	085a      	lsrs	r2, r3, #1
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	441a      	add	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	fbb2 f3f3 	udiv	r3, r2, r3
 8003488:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2b0f      	cmp	r3, #15
 800348e:	d909      	bls.n	80034a4 <UART_SetConfig+0x238>
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003496:	d205      	bcs.n	80034a4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	b29a      	uxth	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	60da      	str	r2, [r3, #12]
 80034a2:	e001      	b.n	80034a8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80034b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3720      	adds	r7, #32
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	efff69f3 	.word	0xefff69f3
 80034c4:	40013800 	.word	0x40013800
 80034c8:	40021000 	.word	0x40021000
 80034cc:	40004400 	.word	0x40004400
 80034d0:	40004800 	.word	0x40004800
 80034d4:	007a1200 	.word	0x007a1200

080034d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356c:	f003 0310 	and.w	r3, r3, #16
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358e:	f003 0320 	and.w	r3, r3, #32
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d01a      	beq.n	80035ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035d6:	d10a      	bne.n	80035ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	605a      	str	r2, [r3, #4]
  }
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b098      	sub	sp, #96	@ 0x60
 8003620:	af02      	add	r7, sp, #8
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800362c:	f7fd f97e 	bl	800092c <HAL_GetTick>
 8003630:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b08      	cmp	r3, #8
 800363e:	d12e      	bne.n	800369e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003640:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003648:	2200      	movs	r2, #0
 800364a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f88c 	bl	800376c <UART_WaitOnFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d021      	beq.n	800369e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003662:	e853 3f00 	ldrex	r3, [r3]
 8003666:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800366a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800366e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	461a      	mov	r2, r3
 8003676:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003678:	647b      	str	r3, [r7, #68]	@ 0x44
 800367a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800367e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003680:	e841 2300 	strex	r3, r2, [r1]
 8003684:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1e6      	bne.n	800365a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e062      	b.n	8003764 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d149      	bne.n	8003740 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036b4:	2200      	movs	r2, #0
 80036b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f856 	bl	800376c <UART_WaitOnFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d03c      	beq.n	8003740 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ce:	e853 3f00 	ldrex	r3, [r3]
 80036d2:	623b      	str	r3, [r7, #32]
   return(result);
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	461a      	mov	r2, r3
 80036e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80036e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036ec:	e841 2300 	strex	r3, r2, [r1]
 80036f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1e6      	bne.n	80036c6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3308      	adds	r3, #8
 80036fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	e853 3f00 	ldrex	r3, [r3]
 8003706:	60fb      	str	r3, [r7, #12]
   return(result);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0301 	bic.w	r3, r3, #1
 800370e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3308      	adds	r3, #8
 8003716:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003718:	61fa      	str	r2, [r7, #28]
 800371a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371c:	69b9      	ldr	r1, [r7, #24]
 800371e:	69fa      	ldr	r2, [r7, #28]
 8003720:	e841 2300 	strex	r3, r2, [r1]
 8003724:	617b      	str	r3, [r7, #20]
   return(result);
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1e5      	bne.n	80036f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e011      	b.n	8003764 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2220      	movs	r2, #32
 8003744:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2220      	movs	r2, #32
 800374a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3758      	adds	r7, #88	@ 0x58
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	4613      	mov	r3, r2
 800377a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800377c:	e049      	b.n	8003812 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003784:	d045      	beq.n	8003812 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003786:	f7fd f8d1 	bl	800092c <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	429a      	cmp	r2, r3
 8003794:	d302      	bcc.n	800379c <UART_WaitOnFlagUntilTimeout+0x30>
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e048      	b.n	8003832 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d031      	beq.n	8003812 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d110      	bne.n	80037de <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2208      	movs	r2, #8
 80037c2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 f838 	bl	800383a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2208      	movs	r2, #8
 80037ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e029      	b.n	8003832 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037ec:	d111      	bne.n	8003812 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 f81e 	bl	800383a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2220      	movs	r2, #32
 8003802:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e00f      	b.n	8003832 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69da      	ldr	r2, [r3, #28]
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4013      	ands	r3, r2
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	429a      	cmp	r2, r3
 8003820:	bf0c      	ite	eq
 8003822:	2301      	moveq	r3, #1
 8003824:	2300      	movne	r3, #0
 8003826:	b2db      	uxtb	r3, r3
 8003828:	461a      	mov	r2, r3
 800382a:	79fb      	ldrb	r3, [r7, #7]
 800382c:	429a      	cmp	r2, r3
 800382e:	d0a6      	beq.n	800377e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800383a:	b480      	push	{r7}
 800383c:	b095      	sub	sp, #84	@ 0x54
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800384a:	e853 3f00 	ldrex	r3, [r3]
 800384e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003852:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003856:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	461a      	mov	r2, r3
 800385e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003860:	643b      	str	r3, [r7, #64]	@ 0x40
 8003862:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003864:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003866:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003868:	e841 2300 	strex	r3, r2, [r1]
 800386c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800386e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1e6      	bne.n	8003842 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3308      	adds	r3, #8
 800387a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	e853 3f00 	ldrex	r3, [r3]
 8003882:	61fb      	str	r3, [r7, #28]
   return(result);
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f023 0301 	bic.w	r3, r3, #1
 800388a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3308      	adds	r3, #8
 8003892:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003894:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003896:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003898:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800389a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800389c:	e841 2300 	strex	r3, r2, [r1]
 80038a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1e5      	bne.n	8003874 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d118      	bne.n	80038e2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	e853 3f00 	ldrex	r3, [r3]
 80038bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f023 0310 	bic.w	r3, r3, #16
 80038c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038ce:	61bb      	str	r3, [r7, #24]
 80038d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d2:	6979      	ldr	r1, [r7, #20]
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	e841 2300 	strex	r3, r2, [r1]
 80038da:	613b      	str	r3, [r7, #16]
   return(result);
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1e6      	bne.n	80038b0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80038f6:	bf00      	nop
 80038f8:	3754      	adds	r7, #84	@ 0x54
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800390a:	2300      	movs	r3, #0
 800390c:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 800390e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d105      	bne.n	8003922 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 8003916:	2101      	movs	r1, #1
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 ffa7 	bl	800486c <VL53L1_data_init>
 800391e:	4603      	mov	r3, r0
 8003920:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 8003922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d107      	bne.n	800393a <VL53L1_DataInit+0x38>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2208      	movs	r2, #8
 8003936:	f883 237c 	strb.w	r2, [r3, #892]	@ 0x37c
				VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	}

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800393a:	2300      	movs	r3, #0
 800393c:	73bb      	strb	r3, [r7, #14]
 800393e:	e012      	b.n	8003966 <VL53L1_DataInit+0x64>
		if (Status == VL53L1_ERROR_NONE)
 8003940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d112      	bne.n	800396e <VL53L1_DataInit+0x6c>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8003948:	7bbb      	ldrb	r3, [r7, #14]
 800394a:	b29b      	uxth	r3, r3
 800394c:	2201      	movs	r2, #1
 800394e:	4619      	mov	r1, r3
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 fb6a 	bl	800402a <VL53L1_SetLimitCheckEnable>
 8003956:	4603      	mov	r3, r0
 8003958:	461a      	mov	r2, r3
 800395a:	7bfb      	ldrb	r3, [r7, #15]
 800395c:	4313      	orrs	r3, r2
 800395e:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003960:	7bbb      	ldrb	r3, [r7, #14]
 8003962:	3301      	adds	r3, #1
 8003964:	73bb      	strb	r3, [r7, #14]
 8003966:	7bbb      	ldrb	r3, [r7, #14]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d9e9      	bls.n	8003940 <VL53L1_DataInit+0x3e>
 800396c:	e000      	b.n	8003970 <VL53L1_DataInit+0x6e>
		else
			break;
 800396e:	bf00      	nop

	}

	/* Limit default values */
	if (Status == VL53L1_ERROR_NONE) {
 8003970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d107      	bne.n	8003988 <VL53L1_DataInit+0x86>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8003978:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 800397c:	2100      	movs	r1, #0
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fbb4 	bl	80040ec <VL53L1_SetLimitCheckValue>
 8003984:	4603      	mov	r3, r0
 8003986:	73fb      	strb	r3, [r7, #15]
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L1_ERROR_NONE) {
 8003988:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d107      	bne.n	80039a0 <VL53L1_DataInit+0x9e>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8003990:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003994:	2101      	movs	r1, #1
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fba8 	bl	80040ec <VL53L1_SetLimitCheckValue>
 800399c:	4603      	mov	r3, r0
 800399e:	73fb      	strb	r3, [r7, #15]
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80039a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80039b4:	2300      	movs	r3, #0
 80039b6:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2203      	movs	r2, #3
 80039bc:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80039c0:	2320      	movs	r3, #32
 80039c2:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	7bba      	ldrb	r2, [r7, #14]
 80039c8:	709a      	strb	r2, [r3, #2]

	VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2203      	movs	r2, #3
 80039ce:	f883 237f 	strb.w	r2, [r3, #895]	@ 0x37f
			VL53L1_DISTANCEMODE_LONG);

	VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2203      	movs	r2, #3
 80039d6:	f883 237e 	strb.w	r2, [r3, #894]	@ 0x37e
			VL53L1_DISTANCEMODE_LONG);

	VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2203      	movs	r2, #3
 80039de:	f883 237d 	strb.w	r2, [r3, #893]	@ 0x37d
			VL53L1_DISTANCEMODE_LONG);

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 80039e2:	2108      	movs	r1, #8
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f8ea 	bl	8003bbe <VL53L1_SetPresetMode>
 80039ea:	4603      	mov	r3, r0
 80039ec:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */
	LOG_FUNCTION_END(Status);
	return Status;
 80039ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b084      	sub	sp, #16
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003a02:	2300      	movs	r3, #0
 8003a04:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8003a06:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f005 f951 	bl	8008cb2 <VL53L1_poll_for_boot_completion>
 8003a10:	4603      	mov	r3, r0
 8003a12:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8003a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	603a      	str	r2, [r7, #0]
 8003a2a:	71fb      	strb	r3, [r7, #7]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8003a34:	4a2b      	ldr	r2, [pc, #172]	@ (8003ae4 <ComputeDevicePresetMode+0xc4>)
 8003a36:	f107 0310 	add.w	r3, r7, #16
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	4611      	mov	r1, r2
 8003a3e:	8019      	strh	r1, [r3, #0]
 8003a40:	3302      	adds	r3, #2
 8003a42:	0c12      	lsrs	r2, r2, #16
 8003a44:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 8003a46:	4a28      	ldr	r2, [pc, #160]	@ (8003ae8 <ComputeDevicePresetMode+0xc8>)
 8003a48:	f107 030c 	add.w	r3, r7, #12
 8003a4c:	6812      	ldr	r2, [r2, #0]
 8003a4e:	4611      	mov	r1, r2
 8003a50:	8019      	strh	r1, [r3, #0]
 8003a52:	3302      	adds	r3, #2
 8003a54:	0c12      	lsrs	r2, r2, #16
 8003a56:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8003a58:	4a24      	ldr	r2, [pc, #144]	@ (8003aec <ComputeDevicePresetMode+0xcc>)
 8003a5a:	f107 0308 	add.w	r3, r7, #8
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	4611      	mov	r1, r2
 8003a62:	8019      	strh	r1, [r3, #0]
 8003a64:	3302      	adds	r3, #2
 8003a66:	0c12      	lsrs	r2, r2, #16
 8003a68:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8003a70:	79bb      	ldrb	r3, [r7, #6]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d002      	beq.n	8003a7c <ComputeDevicePresetMode+0x5c>
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d003      	beq.n	8003a82 <ComputeDevicePresetMode+0x62>
 8003a7a:	e005      	b.n	8003a88 <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	75bb      	strb	r3, [r7, #22]
		break;
 8003a80:	e004      	b.n	8003a8c <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8003a82:	2301      	movs	r3, #1
 8003a84:	75bb      	strb	r3, [r7, #22]
		break;
 8003a86:	e001      	b.n	8003a8c <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 8003a88:	2302      	movs	r3, #2
 8003a8a:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 8003a8c:	79fb      	ldrb	r3, [r7, #7]
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d015      	beq.n	8003abe <ComputeDevicePresetMode+0x9e>
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	dc1b      	bgt.n	8003ace <ComputeDevicePresetMode+0xae>
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d009      	beq.n	8003aae <ComputeDevicePresetMode+0x8e>
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d117      	bne.n	8003ace <ComputeDevicePresetMode+0xae>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8003a9e:	7dbb      	ldrb	r3, [r7, #22]
 8003aa0:	3318      	adds	r3, #24
 8003aa2:	443b      	add	r3, r7
 8003aa4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	701a      	strb	r2, [r3, #0]
		break;
 8003aac:	e011      	b.n	8003ad2 <ComputeDevicePresetMode+0xb2>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8003aae:	7dbb      	ldrb	r3, [r7, #22]
 8003ab0:	3318      	adds	r3, #24
 8003ab2:	443b      	add	r3, r7
 8003ab4:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	701a      	strb	r2, [r3, #0]
		break;
 8003abc:	e009      	b.n	8003ad2 <ComputeDevicePresetMode+0xb2>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8003abe:	7dbb      	ldrb	r3, [r7, #22]
 8003ac0:	3318      	adds	r3, #24
 8003ac2:	443b      	add	r3, r7
 8003ac4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	701a      	strb	r2, [r3, #0]
		break;
 8003acc:	e001      	b.n	8003ad2 <ComputeDevicePresetMode+0xb2>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8003ace:	23f8      	movs	r3, #248	@ 0xf8
 8003ad0:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 8003ad2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	371c      	adds	r7, #28
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	0800a274 	.word	0x0800a274
 8003ae8:	0800a278 	.word	0x0800a278
 8003aec:	0800a27c 	.word	0x0800a27c

08003af0 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8003af0:	b5b0      	push	{r4, r5, r7, lr}
 8003af2:	b08e      	sub	sp, #56	@ 0x38
 8003af4:	af04      	add	r7, sp, #16
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	607b      	str	r3, [r7, #4]
 8003afa:	460b      	mov	r3, r1
 8003afc:	72fb      	strb	r3, [r7, #11]
 8003afe:	4613      	mov	r3, r2
 8003b00:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint32_t mm_config_timeout_us;
	uint32_t lld_range_config_timeout_us;

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8003b08:	7afb      	ldrb	r3, [r7, #11]
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	d002      	beq.n	8003b14 <SetPresetMode+0x24>
 8003b0e:	7afb      	ldrb	r3, [r7, #11]
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d103      	bne.n	8003b1c <SetPresetMode+0x2c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8003b14:	2340      	movs	r3, #64	@ 0x40
 8003b16:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003b1a:	e002      	b.n	8003b22 <SetPresetMode+0x32>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8003b1c:	2320      	movs	r3, #32
 8003b1e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8003b22:	f107 0225 	add.w	r2, r7, #37	@ 0x25
 8003b26:	7ab9      	ldrb	r1, [r7, #10]
 8003b28:	7afb      	ldrb	r3, [r7, #11]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff ff78 	bl	8003a20 <ComputeDevicePresetMode>
 8003b30:	4603      	mov	r3, r0
 8003b32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8003b36:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d112      	bne.n	8003b64 <SetPresetMode+0x74>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8003b3e:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8003b42:	f107 001c 	add.w	r0, r7, #28
 8003b46:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 8003b4a:	f107 0314 	add.w	r3, r7, #20
 8003b4e:	9301      	str	r3, [sp, #4]
 8003b50:	f107 0318 	add.w	r3, r7, #24
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	4603      	mov	r3, r0
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f001 f979 	bl	8004e50 <VL53L1_get_preset_mode_timing_cfg>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8003b64:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d112      	bne.n	8003b92 <SetPresetMode+0xa2>
		Status = VL53L1_set_preset_mode(
 8003b6c:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
 8003b70:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 8003b72:	69fd      	ldr	r5, [r7, #28]
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	9102      	str	r1, [sp, #8]
 8003b7c:	9201      	str	r2, [sp, #4]
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	462b      	mov	r3, r5
 8003b82:	4622      	mov	r2, r4
 8003b84:	4601      	mov	r1, r0
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f001 fa0c 	bl	8004fa4 <VL53L1_set_preset_mode>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8003b92:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d103      	bne.n	8003ba2 <SetPresetMode+0xb2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003ba0:	709a      	strb	r2, [r3, #2]

	if (Status == VL53L1_ERROR_NONE)
 8003ba2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d103      	bne.n	8003bb2 <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	7afa      	ldrb	r2, [r7, #11]
 8003bae:	f883 237c 	strb.w	r2, [r3, #892]	@ 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 8003bb2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3728      	adds	r7, #40	@ 0x28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bdb0      	pop	{r4, r5, r7, pc}

08003bbe <VL53L1_SetPresetMode>:

VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b084      	sub	sp, #16
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	Status = SetPresetMode(Dev,
 8003bd2:	7bba      	ldrb	r2, [r7, #14]
 8003bd4:	78f9      	ldrb	r1, [r7, #3]
 8003bd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7ff ff88 	bl	8003af0 <SetPresetMode>
 8003be0:	4603      	mov	r3, r0
 8003be2:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8003be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d11f      	bne.n	8003c2c <VL53L1_SetPresetMode+0x6e>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	7bba      	ldrb	r2, [r7, #14]
 8003bf0:	f883 237e 	strb.w	r2, [r3, #894]	@ 0x37e
				DistanceMode);

		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	7bba      	ldrb	r2, [r7, #14]
 8003bf8:	f883 237f 	strb.w	r2, [r3, #895]	@ 0x37f
				DistanceMode);

		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d005      	beq.n	8003c0e <VL53L1_SetPresetMode+0x50>
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d002      	beq.n	8003c0e <VL53L1_SetPresetMode+0x50>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d107      	bne.n	8003c1e <VL53L1_SetPresetMode+0x60>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8003c0e:	f24a 0128 	movw	r1, #41000	@ 0xa028
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f81c 	bl	8003c50 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	73fb      	strb	r3, [r7, #15]
 8003c1c:	e006      	b.n	8003c2c <VL53L1_SetPresetMode+0x6e>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8003c1e:	f248 2135 	movw	r1, #33333	@ 0x8235
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f814 	bl	8003c50 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d106      	bne.n	8003c42 <VL53L1_SetPresetMode+0x84>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8003c34:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f989 	bl	8003f50 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08c      	sub	sp, #48	@ 0x30
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t MmTimeoutUs;
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs;
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8003c60:	4b64      	ldr	r3, [pc, #400]	@ (8003df4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a4>)
 8003c62:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	4a64      	ldr	r2, [pc, #400]	@ (8003df8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d902      	bls.n	8003c72 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x22>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003c6c:	23fc      	movs	r3, #252	@ 0xfc
 8003c6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 8003c72:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d109      	bne.n	8003c8e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x3e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8003c7a:	f107 031a 	add.w	r3, r7, #26
 8003c7e:	461a      	mov	r2, r3
 8003c80:	2105      	movs	r1, #5
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 fac2 	bl	800420c <VL53L1_GetSequenceStepEnable>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003c8e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d109      	bne.n	8003caa <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x5a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8003c96:	f107 0319 	add.w	r3, r7, #25
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	2106      	movs	r1, #6
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 fab4 	bl	800420c <VL53L1_GetSequenceStepEnable>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 8003caa:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10b      	bne.n	8003cca <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7a>
		Status = VL53L1_get_timeouts_us(Dev,
 8003cb2:	f107 0314 	add.w	r3, r7, #20
 8003cb6:	f107 0210 	add.w	r2, r7, #16
 8003cba:	f107 010c 	add.w	r1, r7, #12
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 ffad 	bl	8004c1e <VL53L1_get_timeouts_us>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 8003cca:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f040 8081 	bne.w	8003dd6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x186>
		PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 8003cda:	76fb      	strb	r3, [r7, #27]

		TimingGuard = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	62bb      	str	r3, [r7, #40]	@ 0x28
		divisor = 1;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	627b      	str	r3, [r7, #36]	@ 0x24
		switch (PresetMode) {
 8003ce4:	7efb      	ldrb	r3, [r7, #27]
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d026      	beq.n	8003d38 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	dc43      	bgt.n	8003d76 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x126>
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	d00f      	beq.n	8003d12 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc2>
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d13f      	bne.n	8003d76 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x126>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8003cf6:	7ebb      	ldrb	r3, [r7, #26]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d002      	beq.n	8003d02 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xb2>
 8003cfc:	7e7b      	ldrb	r3, [r7, #25]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d103      	bne.n	8003d0a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xba>
				TimingGuard = 5000;
 8003d02:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003d06:	62bb      	str	r3, [r7, #40]	@ 0x28
			else
				TimingGuard = 1000;
		break;
 8003d08:	e038      	b.n	8003d7c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				TimingGuard = 1000;
 8003d0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
		break;
 8003d10:	e034      	b.n	8003d7c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8003d18:	7ebb      	ldrb	r3, [r7, #26]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d002      	beq.n	8003d24 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd4>
 8003d1e:	7e7b      	ldrb	r3, [r7, #25]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d103      	bne.n	8003d2c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xdc>
				TimingGuard = 26600;
 8003d24:	f246 73e8 	movw	r3, #26600	@ 0x67e8
 8003d28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d2a:	e002      	b.n	8003d32 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe2>
			else
				TimingGuard = 21600;
 8003d2c:	f245 4360 	movw	r3, #21600	@ 0x5460
 8003d30:	62bb      	str	r3, [r7, #40]	@ 0x28
			divisor = 2;
 8003d32:	2302      	movs	r3, #2
 8003d34:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 8003d36:	e021      	b.n	8003d7c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8003d3e:	23f5      	movs	r3, #245	@ 0xf5
 8003d40:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 8003d42:	f107 0308 	add.w	r3, r7, #8
 8003d46:	461a      	mov	r2, r3
 8003d48:	f248 0136 	movw	r1, #32822	@ 0x8036
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f002 f821 	bl	8005d94 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	dd07      	ble.n	8003d68 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x118>
				vhv += vhv_loops *
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	22f5      	movs	r2, #245	@ 0xf5
 8003d5c:	fb02 f303 	mul.w	r3, r2, r3
 8003d60:	461a      	mov	r2, r3
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	4413      	add	r3, r2
 8003d66:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	f603 53dc 	addw	r3, r3, #3548	@ 0xddc
 8003d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 8003d70:	2302      	movs	r3, #2
 8003d72:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 8003d74:	e002      	b.n	8003d7c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8003d76:	23f8      	movs	r3, #248	@ 0xf8
 8003d78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d803      	bhi.n	8003d8c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13c>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8003d84:	23fc      	movs	r3, #252	@ 0xfc
 8003d86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003d8a:	e003      	b.n	8003d94 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x144>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d90:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8003d92:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8003d94:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d11c      	bne.n	8003dd6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x186>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	69fa      	ldr	r2, [r7, #28]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d203      	bcs.n	8003dac <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x15c>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8003da4:	23fc      	movs	r3, #252	@ 0xfc
 8003da6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003daa:	e00d      	b.n	8003dc8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x178>
			else {
				TimingBudget /= divisor;
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8003db6:	68f9      	ldr	r1, [r7, #12]
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fef6 	bl	8004bae <VL53L1_set_timeouts_us>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8003dc8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d102      	bne.n	8003dd6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x186>
				VL53L1DevDataSet(Dev,
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8003dd6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d103      	bne.n	8003de6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x196>
		VL53L1DevDataSet(Dev,
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003de6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3730      	adds	r7, #48	@ 0x30
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	00086470 	.word	0x00086470
 8003df8:	00989680 	.word	0x00989680

08003dfc <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08c      	sub	sp, #48	@ 0x30
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003e06:	2300      	movs	r3, #0
 8003e08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t Mm1Enabled = 0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 8003e2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d109      	bne.n	8003e46 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8003e32:	f107 031b 	add.w	r3, r7, #27
 8003e36:	461a      	mov	r2, r3
 8003e38:	2105      	movs	r1, #5
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f9e6 	bl	800420c <VL53L1_GetSequenceStepEnable>
 8003e40:	4603      	mov	r3, r0
 8003e42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8003e46:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8003e4e:	f107 031a 	add.w	r3, r7, #26
 8003e52:	461a      	mov	r2, r3
 8003e54:	2106      	movs	r1, #6
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f9d8 	bl	800420c <VL53L1_GetSequenceStepEnable>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8003e62:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10b      	bne.n	8003e82 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 8003e6a:	f107 0310 	add.w	r3, r7, #16
 8003e6e:	f107 0214 	add.w	r2, r7, #20
 8003e72:	f107 010c 	add.w	r1, r7, #12
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fed1 	bl	8004c1e <VL53L1_get_timeouts_us>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 8003e82:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d155      	bne.n	8003f36 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>
		PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 8003e90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		switch (PresetMode) {
 8003e94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d02a      	beq.n	8003ef2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf6>
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	dc47      	bgt.n	8003f30 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	d012      	beq.n	8003eca <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d143      	bne.n	8003f30 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8003ea8:	7efb      	ldrb	r3, [r7, #27]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d002      	beq.n	8003eb4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb8>
 8003eae:	7ebb      	ldrb	r3, [r7, #26]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d105      	bne.n	8003ec0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8003eba:	3308      	adds	r3, #8
 8003ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 8003ebe:	e03a      	b.n	8003f36 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8003ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
		break;
 8003ec8:	e035      	b.n	8003f36 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8003eca:	7efb      	ldrb	r3, [r7, #27]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d002      	beq.n	8003ed6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
 8003ed0:	7ebb      	ldrb	r3, [r7, #26]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d106      	bne.n	8003ee4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f503 534f 	add.w	r3, r3, #13248	@ 0x33c0
 8003edc:	3334      	adds	r3, #52	@ 0x34
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 8003ee2:	e028      	b.n	8003f36 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f503 5328 	add.w	r3, r3, #10752	@ 0x2a00
 8003eea:	3330      	adds	r3, #48	@ 0x30
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	62bb      	str	r3, [r7, #40]	@ 0x28
		break;
 8003ef0:	e021      	b.n	8003f36 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8003ef2:	23f5      	movs	r3, #245	@ 0xf5
 8003ef4:	627b      	str	r3, [r7, #36]	@ 0x24
			VL53L1_get_tuning_parm(Dev,
 8003ef6:	f107 0308 	add.w	r3, r7, #8
 8003efa:	461a      	mov	r2, r3
 8003efc:	f248 0136 	movw	r1, #32822	@ 0x8036
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f001 ff47 	bl	8005d94 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	dd07      	ble.n	8003f1c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x120>
				vhv += vhv_loops *
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	22f5      	movs	r2, #245	@ 0xf5
 8003f10:	fb02 f303 	mul.w	r3, r2, r3
 8003f14:	461a      	mov	r2, r3
 8003f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f18:	4413      	add	r3, r2
 8003f1a:	627b      	str	r3, [r7, #36]	@ 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1e:	f603 53dc 	addw	r3, r3, #3548	@ 0xddc
 8003f22:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	69fa      	ldr	r2, [r7, #28]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
		break;
 8003f2e:	e002      	b.n	8003f36 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8003f30:	23f8      	movs	r3, #248	@ 0xf8
 8003f32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
	}
	if (Status == VL53L1_ERROR_NONE)
 8003f36:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d102      	bne.n	8003f44 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x148>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f42:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003f44:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3730      	adds	r7, #48	@ 0x30
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	019b      	lsls	r3, r3, #6
 8003f66:	4a09      	ldr	r2, [pc, #36]	@ (8003f8c <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 8003f68:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6c:	099b      	lsrs	r3, r3, #6
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	4413      	add	r3, r2
 8003f72:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8003f74:	68b9      	ldr	r1, [r7, #8]
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fdca 	bl	8004b10 <VL53L1_set_inter_measurement_period_ms>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 8003f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	10624dd3 	.word	0x10624dd3

08003f90 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8003f9e:	f107 0308 	add.w	r3, r7, #8
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 fddc 	bl	8004b62 <VL53L1_get_inter_measurement_period_ms>
 8003faa:	4603      	mov	r3, r0
 8003fac:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	019b      	lsls	r3, r3, #6
 8003fb4:	4907      	ldr	r1, [pc, #28]	@ (8003fd4 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 8003fb6:	fba1 1303 	umull	r1, r3, r1, r3
 8003fba:	099b      	lsrs	r3, r3, #6
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 8003fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	10624dd3 	.word	0x10624dd3

08003fd8 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8003fea:	897b      	ldrh	r3, [r7, #10]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <SetLimitValue+0x1e>
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d009      	beq.n	8004008 <SetLimitValue+0x30>
 8003ff4:	e011      	b.n	800401a <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	0b9b      	lsrs	r3, r3, #14
 8003ffa:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8003ffc:	8abb      	ldrh	r3, [r7, #20]
 8003ffe:	4619      	mov	r1, r3
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f001 f95b 	bl	80052bc <VL53L1_set_lite_sigma_threshold>
		break;
 8004006:	e00a      	b.n	800401e <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	0a5b      	lsrs	r3, r3, #9
 800400c:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 800400e:	8abb      	ldrh	r3, [r7, #20]
 8004010:	4619      	mov	r1, r3
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f001 f97e 	bl	8005314 <VL53L1_set_lite_min_count_rate>
		break;
 8004018:	e001      	b.n	800401e <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800401a:	23fc      	movs	r3, #252	@ 0xfc
 800401c:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800401e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b084      	sub	sp, #16
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	460b      	mov	r3, r1
 8004034:	807b      	strh	r3, [r7, #2]
 8004036:	4613      	mov	r3, r2
 8004038:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800403a:	2300      	movs	r3, #0
 800403c:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 800403e:	2300      	movs	r3, #0
 8004040:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004042:	887b      	ldrh	r3, [r7, #2]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d902      	bls.n	800404e <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004048:	23fc      	movs	r3, #252	@ 0xfc
 800404a:	73fb      	strb	r3, [r7, #15]
 800404c:	e014      	b.n	8004078 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 800404e:	787b      	ldrb	r3, [r7, #1]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d102      	bne.n	800405a <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 8004054:	2300      	movs	r3, #0
 8004056:	60bb      	str	r3, [r7, #8]
 8004058:	e006      	b.n	8004068 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800405a:	887b      	ldrh	r3, [r7, #2]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	33e0      	adds	r3, #224	@ 0xe0
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8004068:	887b      	ldrh	r3, [r7, #2]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	4619      	mov	r1, r3
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7ff ffb2 	bl	8003fd8 <SetLimitValue>
 8004074:	4603      	mov	r3, r0
 8004076:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 8004078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10c      	bne.n	800409a <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004080:	787b      	ldrb	r3, [r7, #1]
 8004082:	2b00      	cmp	r3, #0
 8004084:	bf14      	ite	ne
 8004086:	2301      	movne	r3, #1
 8004088:	2300      	moveq	r3, #0
 800408a:	b2da      	uxtb	r2, r3
 800408c:	887b      	ldrh	r3, [r7, #2]
 800408e:	4611      	mov	r1, r2
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	4413      	add	r3, r2
 8004094:	460a      	mov	r2, r1
 8004096:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 800409a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b087      	sub	sp, #28
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	460b      	mov	r3, r1
 80040b0:	607a      	str	r2, [r7, #4]
 80040b2:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80040b4:	2300      	movs	r3, #0
 80040b6:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80040b8:	897b      	ldrh	r3, [r7, #10]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d905      	bls.n	80040ca <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80040be:	23fc      	movs	r3, #252	@ 0xfc
 80040c0:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	701a      	strb	r2, [r3, #0]
 80040c8:	e008      	b.n	80040dc <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80040ca:	897b      	ldrh	r3, [r7, #10]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	4413      	add	r3, r2
 80040d0:	f893 3384 	ldrb.w	r3, [r3, #900]	@ 0x384
 80040d4:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	7dba      	ldrb	r2, [r7, #22]
 80040da:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80040dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	371c      	adds	r7, #28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <VL53L1_SetLimitCheckValue>:

VL53L1_Error VL53L1_SetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	460b      	mov	r3, r1
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80040fa:	2300      	movs	r3, #0
 80040fc:	75fb      	strb	r3, [r7, #23]
	uint8_t LimitChecksEnable;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80040fe:	897b      	ldrh	r3, [r7, #10]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d902      	bls.n	800410a <VL53L1_SetLimitCheckValue+0x1e>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004104:	23fc      	movs	r3, #252	@ 0xfc
 8004106:	75fb      	strb	r3, [r7, #23]
 8004108:	e023      	b.n	8004152 <VL53L1_SetLimitCheckValue+0x66>
	} else {

		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800410a:	897b      	ldrh	r3, [r7, #10]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	4413      	add	r3, r2
 8004110:	f893 3384 	ldrb.w	r3, [r3, #900]	@ 0x384
 8004114:	75bb      	strb	r3, [r7, #22]
				LimitCheckId,
				LimitChecksEnable);

		if (LimitChecksEnable == 0) {
 8004116:	7dbb      	ldrb	r3, [r7, #22]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d107      	bne.n	800412c <VL53L1_SetLimitCheckValue+0x40>
			/* disabled write only internal value */
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800411c:	897b      	ldrh	r3, [r7, #10]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	33e0      	adds	r3, #224	@ 0xe0
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	609a      	str	r2, [r3, #8]
 800412a:	e012      	b.n	8004152 <VL53L1_SetLimitCheckValue+0x66>
				LimitCheckId, LimitCheckValue);
		} else {

			Status = SetLimitValue(Dev, LimitCheckId,
 800412c:	897b      	ldrh	r3, [r7, #10]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	4619      	mov	r1, r3
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f7ff ff50 	bl	8003fd8 <SetLimitValue>
 8004138:	4603      	mov	r3, r0
 800413a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue);

			if (Status == VL53L1_ERROR_NONE) {
 800413c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d106      	bne.n	8004152 <VL53L1_SetLimitCheckValue+0x66>
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004144:	897b      	ldrh	r3, [r7, #10]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	33e0      	adds	r3, #224	@ 0xe0
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	609a      	str	r2, [r3, #8]
			}
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004152:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <VL53L1_GetLimitCheckValue>:

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b088      	sub	sp, #32
 8004162:	af00      	add	r7, sp, #0
 8004164:	60f8      	str	r0, [r7, #12]
 8004166:	460b      	mov	r3, r1
 8004168:	607a      	str	r2, [r7, #4]
 800416a:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800416c:	2300      	movs	r3, #0
 800416e:	77fb      	strb	r3, [r7, #31]
	FixPoint1616_t TempFix1616;
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8004170:	897b      	ldrh	r3, [r7, #10]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <VL53L1_GetLimitCheckValue+0x1e>
 8004176:	2b01      	cmp	r3, #1
 8004178:	d00c      	beq.n	8004194 <VL53L1_GetLimitCheckValue+0x36>
 800417a:	e017      	b.n	80041ac <VL53L1_GetLimitCheckValue+0x4e>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 800417c:	f107 0314 	add.w	r3, r7, #20
 8004180:	4619      	mov	r1, r3
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f001 f884 	bl	8005290 <VL53L1_get_lite_sigma_threshold>
 8004188:	4603      	mov	r3, r0
 800418a:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 800418c:	8abb      	ldrh	r3, [r7, #20]
 800418e:	039b      	lsls	r3, r3, #14
 8004190:	61bb      	str	r3, [r7, #24]
		break;
 8004192:	e00d      	b.n	80041b0 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8004194:	f107 0316 	add.w	r3, r7, #22
 8004198:	4619      	mov	r1, r3
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f001 f8a4 	bl	80052e8 <VL53L1_get_lite_min_count_rate>
 80041a0:	4603      	mov	r3, r0
 80041a2:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 80041a4:	8afb      	ldrh	r3, [r7, #22]
 80041a6:	025b      	lsls	r3, r3, #9
 80041a8:	61bb      	str	r3, [r7, #24]
		break;
 80041aa:	e001      	b.n	80041b0 <VL53L1_GetLimitCheckValue+0x52>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80041ac:	23fc      	movs	r3, #252	@ 0xfc
 80041ae:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 80041b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d123      	bne.n	8004200 <VL53L1_GetLimitCheckValue+0xa2>

		if (TempFix1616 == 0) {
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d110      	bne.n	80041e0 <VL53L1_GetLimitCheckValue+0x82>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 80041be:	897b      	ldrh	r3, [r7, #10]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	33e0      	adds	r3, #224	@ 0xe0
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80041d2:	897b      	ldrh	r3, [r7, #10]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	4413      	add	r3, r2
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
 80041de:	e00f      	b.n	8004200 <VL53L1_GetLimitCheckValue+0xa2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80041e6:	897b      	ldrh	r3, [r7, #10]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	33e0      	adds	r3, #224	@ 0xe0
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80041f4:	897b      	ldrh	r3, [r7, #10]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4413      	add	r3, r2
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 8004200:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8004204:	4618      	mov	r0, r3
 8004206:	3720      	adds	r7, #32
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	460b      	mov	r3, r1
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800421a:	2300      	movs	r3, #0
 800421c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 800421e:	7afb      	ldrb	r3, [r7, #11]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	4619      	mov	r1, r3
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 fd63 	bl	8004cf0 <VL53L1_get_sequence_config_bit>
 800422a:	4603      	mov	r3, r0
 800422c:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 800422e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004244:	2300      	movs	r3, #0
 8004246:	75fb      	strb	r3, [r7, #23]
	VL53L1_Error lStatus;
	uint32_t MTBus, IMPms;

	LOG_FUNCTION_START("");

	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3378 	ldrb.w	r3, [r3, #888]	@ 0x378
 800424e:	75bb      	strb	r3, [r7, #22]
	switch (CurrPalState) {
 8004250:	7dbb      	ldrb	r3, [r7, #22]
 8004252:	2b63      	cmp	r3, #99	@ 0x63
 8004254:	dc12      	bgt.n	800427c <VL53L1_StartMeasurement+0x40>
 8004256:	2b62      	cmp	r3, #98	@ 0x62
 8004258:	da0d      	bge.n	8004276 <VL53L1_StartMeasurement+0x3a>
 800425a:	2b05      	cmp	r3, #5
 800425c:	dc0e      	bgt.n	800427c <VL53L1_StartMeasurement+0x40>
 800425e:	2b04      	cmp	r3, #4
 8004260:	da09      	bge.n	8004276 <VL53L1_StartMeasurement+0x3a>
 8004262:	2b02      	cmp	r3, #2
 8004264:	dc02      	bgt.n	800426c <VL53L1_StartMeasurement+0x30>
 8004266:	2b00      	cmp	r3, #0
 8004268:	da05      	bge.n	8004276 <VL53L1_StartMeasurement+0x3a>
 800426a:	e007      	b.n	800427c <VL53L1_StartMeasurement+0x40>
 800426c:	2b03      	cmp	r3, #3
 800426e:	d105      	bne.n	800427c <VL53L1_StartMeasurement+0x40>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 8004270:	2300      	movs	r3, #0
 8004272:	75fb      	strb	r3, [r7, #23]
		break;
 8004274:	e004      	b.n	8004280 <VL53L1_StartMeasurement+0x44>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8004276:	23f2      	movs	r3, #242	@ 0xf2
 8004278:	75fb      	strb	r3, [r7, #23]
		break;
 800427a:	e001      	b.n	8004280 <VL53L1_StartMeasurement+0x44>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 800427c:	23fd      	movs	r3, #253	@ 0xfd
 800427e:	75fb      	strb	r3, [r7, #23]
	}

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	789b      	ldrb	r3, [r3, #2]
 8004284:	757b      	strb	r3, [r7, #21]

	/* Check timing configuration between timing budget and
	* inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 8004286:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d11f      	bne.n	80042ce <VL53L1_StartMeasurement+0x92>
 800428e:	7d7b      	ldrb	r3, [r7, #21]
 8004290:	2b40      	cmp	r3, #64	@ 0x40
 8004292:	d11c      	bne.n	80042ce <VL53L1_StartMeasurement+0x92>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8004294:	f107 0310 	add.w	r3, r7, #16
 8004298:	4619      	mov	r1, r3
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff fdae 	bl	8003dfc <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 80042a0:	4603      	mov	r3, r0
 80042a2:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	4a17      	ldr	r2, [pc, #92]	@ (8004304 <VL53L1_StartMeasurement+0xc8>)
 80042a8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ac:	099b      	lsrs	r3, r3, #6
 80042ae:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 80042b0:	f107 030c 	add.w	r3, r7, #12
 80042b4:	4619      	mov	r1, r3
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7ff fe6a 	bl	8003f90 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 80042bc:	4603      	mov	r3, r0
 80042be:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1d1a      	adds	r2, r3, #4
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d901      	bls.n	80042ce <VL53L1_StartMeasurement+0x92>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80042ca:	23fc      	movs	r3, #252	@ 0xfc
 80042cc:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 80042ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d107      	bne.n	80042e6 <VL53L1_StartMeasurement+0xaa>
		Status = VL53L1_init_and_start_range(
 80042d6:	7d7b      	ldrb	r3, [r7, #21]
 80042d8:	2206      	movs	r2, #6
 80042da:	4619      	mov	r1, r3
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f001 f84f 	bl	8005380 <VL53L1_init_and_start_range>
 80042e2:	4603      	mov	r3, r0
 80042e4:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 80042e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d103      	bne.n	80042f6 <VL53L1_StartMeasurement+0xba>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2204      	movs	r2, #4
 80042f2:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 80042f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	10624dd3 	.word	0x10624dd3

08004308 <ChangePresetMode>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static VL53L1_Error ChangePresetMode(VL53L1_DEV Dev)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08a      	sub	sp, #40	@ 0x28
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004310:	2300      	movs	r3, #0
 8004312:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t DeviceMeasurementMode;
	uint32_t inter_measurement_period_ms;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_user_zone(Dev, &user_zone);
 8004316:	f107 0318 	add.w	r3, r7, #24
 800431a:	4619      	mov	r1, r3
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 fd41 	bl	8004da4 <VL53L1_get_user_zone>
 8004322:	4603      	mov	r3, r0
 8004324:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	/*  Initialize variables fix ticket EwokP #475395 */
	PresetMode = VL53L1DevDataGet(Dev,
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 800432e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			CurrentParameters.PresetMode);
	NewDistanceMode = VL53L1DevDataGet(Dev,
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 337f 	ldrb.w	r3, [r3, #895]	@ 0x37f
 8004338:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			CurrentParameters.NewDistanceMode);
	/*  End of Initialize variables fix ticket EwokP #475395 */
	if (Status == VL53L1_ERROR_NONE)
 800433c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10b      	bne.n	800435c <ChangePresetMode+0x54>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8004344:	f107 0314 	add.w	r3, r7, #20
 8004348:	f107 0210 	add.w	r2, r7, #16
 800434c:	f107 010c 	add.w	r1, r7, #12
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 fc64 	bl	8004c1e <VL53L1_get_timeouts_us>
 8004356:	4603      	mov	r3, r0
 8004358:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 800435c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004360:	2b00      	cmp	r3, #0
 8004362:	d105      	bne.n	8004370 <ChangePresetMode+0x68>
		Status = VL53L1_stop_range(Dev);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f001 fa6d 	bl	8005844 <VL53L1_stop_range>
 800436a:	4603      	mov	r3, r0
 800436c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (Status == VL53L1_ERROR_NONE)
 8004370:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004374:	2b00      	cmp	r3, #0
 8004376:	d107      	bne.n	8004388 <ChangePresetMode+0x80>
		Status = VL53L1_WaitUs(Dev, 500);
 8004378:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f004 fe2d 	bl	8008fdc <VL53L1_WaitUs>
 8004382:	4603      	mov	r3, r0
 8004384:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (Status == VL53L1_ERROR_NONE) {
 8004388:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10d      	bne.n	80043ac <ChangePresetMode+0xa4>
		inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	623b      	str	r3, [r7, #32]
					LLData.inter_measurement_period_ms);

		Status = SetPresetMode(Dev,
 8004396:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800439a:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff fba5 	bl	8003af0 <SetPresetMode>
 80043a6:	4603      	mov	r3, r0
 80043a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				PresetMode,
				NewDistanceMode,
				inter_measurement_period_ms);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80043ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10f      	bne.n	80043d4 <ChangePresetMode+0xcc>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 80043b4:	68f9      	ldr	r1, [r7, #12]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fbf7 	bl	8004bae <VL53L1_set_timeouts_us>
 80043c0:	4603      	mov	r3, r0
 80043c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 80043c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d102      	bne.n	80043d4 <ChangePresetMode+0xcc>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 80043d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d108      	bne.n	80043ee <ChangePresetMode+0xe6>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 80043dc:	f107 0318 	add.w	r3, r7, #24
 80043e0:	4619      	mov	r1, r3
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 fcbb 	bl	8004d5e <VL53L1_set_user_zone>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (Status == VL53L1_ERROR_NONE) {
 80043ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10b      	bne.n	800440e <ChangePresetMode+0x106>
		DeviceMeasurementMode = VL53L1DevDataGet(Dev,
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	789b      	ldrb	r3, [r3, #2]
 80043fa:	77fb      	strb	r3, [r7, #31]
				LLData.measurement_mode);

		Status = VL53L1_init_and_start_range(
 80043fc:	7ffb      	ldrb	r3, [r7, #31]
 80043fe:	2206      	movs	r2, #6
 8004400:	4619      	mov	r1, r3
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 ffbc 	bl	8005380 <VL53L1_init_and_start_range>
 8004408:	4603      	mov	r3, r0
 800440a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);
	}

	if (Status == VL53L1_ERROR_NONE)
 800440e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004412:	2b00      	cmp	r3, #0
 8004414:	d104      	bne.n	8004420 <ChangePresetMode+0x118>
		VL53L1DevDataSet(Dev,
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800441c:	f883 237e 	strb.w	r2, [r3, #894]	@ 0x37e
			CurrentParameters.InternalDistanceMode,
			NewDistanceMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8004420:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8004424:	4618      	mov	r0, r3
 8004426:	3728      	adds	r7, #40	@ 0x28
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004434:	2300      	movs	r3, #0
 8004436:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes InternalDistanceMode;
	VL53L1_DistanceModes NewDistanceMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	789b      	ldrb	r3, [r3, #2]
 800443c:	73bb      	strb	r3, [r7, #14]
	InternalDistanceMode = VL53L1DevDataGet(Dev,
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 337e 	ldrb.w	r3, [r3, #894]	@ 0x37e
 8004444:	737b      	strb	r3, [r7, #13]
			CurrentParameters.InternalDistanceMode);
	NewDistanceMode = VL53L1DevDataGet(Dev,
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 337f 	ldrb.w	r3, [r3, #895]	@ 0x37f
 800444c:	733b      	strb	r3, [r7, #12]
			CurrentParameters.NewDistanceMode);

	if (NewDistanceMode != InternalDistanceMode)
 800444e:	7b3a      	ldrb	r2, [r7, #12]
 8004450:	7b7b      	ldrb	r3, [r7, #13]
 8004452:	429a      	cmp	r2, r3
 8004454:	d005      	beq.n	8004462 <VL53L1_ClearInterruptAndStartMeasurement+0x36>
		Status = ChangePresetMode(Dev);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7ff ff56 	bl	8004308 <ChangePresetMode>
 800445c:	4603      	mov	r3, r0
 800445e:	73fb      	strb	r3, [r7, #15]
 8004460:	e006      	b.n	8004470 <VL53L1_ClearInterruptAndStartMeasurement+0x44>
	else
		Status = VL53L1_clear_interrupt_and_enable_next_range(
 8004462:	7bbb      	ldrb	r3, [r7, #14]
 8004464:	4619      	mov	r1, r3
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f001 fb60 	bl	8005b2c <VL53L1_clear_interrupt_and_enable_next_range>
 800446c:	4603      	mov	r3, r0
 800446e:	73fb      	strb	r3, [r7, #15]
						Dev,
						DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8004470:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <VL53L1_GetMeasurementDataReady>:


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004486:	2300      	movs	r3, #0
 8004488:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 800448a:	6839      	ldr	r1, [r7, #0]
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f004 fbd7 	bl	8008c40 <VL53L1_is_new_data_ready>
 8004492:	4603      	mov	r3, r0
 8004494:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004496:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b08d      	sub	sp, #52	@ 0x34
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	603a      	str	r2, [r7, #0]
 80044ae:	71fb      	strb	r3, [r7, #7]
 80044b0:	460b      	mov	r3, r1
 80044b2:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 80044b4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80044b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t SRAS = 30;
 80044ba:	231e      	movs	r3, #30
 80044bc:	847b      	strh	r3, [r7, #34]	@ 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 80044be:	4b33      	ldr	r3, [pc, #204]	@ (800458c <ComputeRQL+0xe8>)
 80044c0:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 80044c2:	4b33      	ldr	r3, [pc, #204]	@ (8004590 <ComputeRQL+0xec>)
 80044c4:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 80044c6:	f641 139a 	movw	r3, #6554	@ 0x199a
 80044ca:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d103      	bne.n	80044da <ComputeRQL+0x36>
		returnvalue = 0;
 80044d2:	2300      	movs	r3, #0
 80044d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80044d8:	e04f      	b.n	800457a <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 80044da:	79bb      	ldrb	r3, [r7, #6]
 80044dc:	2b07      	cmp	r3, #7
 80044de:	d103      	bne.n	80044e8 <ComputeRQL+0x44>
		returnvalue = 50;
 80044e0:	2332      	movs	r3, #50	@ 0x32
 80044e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80044e6:	e048      	b.n	800457a <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80044ee:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80044f2:	429a      	cmp	r2, r3
 80044f4:	dd03      	ble.n	80044fe <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 80044f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80044f8:	041b      	lsls	r3, r3, #16
 80044fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044fc:	e007      	b.n	800450e <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8004504:	461a      	mov	r2, r3
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	fb02 f303 	mul.w	r3, r2, r3
 800450c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 800450e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004510:	2b00      	cmp	r3, #0
 8004512:	d020      	beq.n	8004556 <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004518:	461a      	mov	r2, r3
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	fb02 f303 	mul.w	r3, r2, r3
 8004520:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 8004522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004524:	085b      	lsrs	r3, r3, #1
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4413      	add	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004530:	fbb2 f3f3 	udiv	r3, r2, r3
 8004534:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	041b      	lsls	r3, r3, #16
 800453a:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	429a      	cmp	r2, r3
 8004542:	d804      	bhi.n	800454e <ComputeRQL+0xaa>
				SRQL = GI - partial;
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800454c:	e006      	b.n	800455c <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 800454e:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 8004552:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004554:	e002      	b.n	800455c <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 8004556:	f44f 03c8 	mov.w	r3, #6553600	@ 0x640000
 800455a:	62bb      	str	r3, [r7, #40]	@ 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 800455c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455e:	0c1b      	lsrs	r3, r3, #16
 8004560:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	2b32      	cmp	r3, #50	@ 0x32
 8004566:	d905      	bls.n	8004574 <ComputeRQL+0xd0>
 8004568:	7bfb      	ldrb	r3, [r7, #15]
 800456a:	2b64      	cmp	r3, #100	@ 0x64
 800456c:	bf28      	it	cs
 800456e:	2364      	movcs	r3, #100	@ 0x64
 8004570:	b2db      	uxtb	r3, r3
 8004572:	e000      	b.n	8004576 <ComputeRQL+0xd2>
 8004574:	2332      	movs	r3, #50	@ 0x32
 8004576:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return returnvalue;
 800457a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800457e:	4618      	mov	r0, r3
 8004580:	3734      	adds	r7, #52	@ 0x34
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	0075b333 	.word	0x0075b333
 8004590:	0030cccd 	.word	0x0030cccd

08004594 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	4603      	mov	r3, r0
 800459c:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800459e:	79fb      	ldrb	r3, [r7, #7]
 80045a0:	3b04      	subs	r3, #4
 80045a2:	2b0f      	cmp	r3, #15
 80045a4:	d83d      	bhi.n	8004622 <ConvertStatusLite+0x8e>
 80045a6:	a201      	add	r2, pc, #4	@ (adr r2, 80045ac <ConvertStatusLite+0x18>)
 80045a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ac:	080045ff 	.word	0x080045ff
 80045b0:	080045f9 	.word	0x080045f9
 80045b4:	08004605 	.word	0x08004605
 80045b8:	0800460b 	.word	0x0800460b
 80045bc:	08004617 	.word	0x08004617
 80045c0:	0800461d 	.word	0x0800461d
 80045c4:	08004623 	.word	0x08004623
 80045c8:	08004623 	.word	0x08004623
 80045cc:	08004611 	.word	0x08004611
 80045d0:	08004623 	.word	0x08004623
 80045d4:	08004623 	.word	0x08004623
 80045d8:	08004623 	.word	0x08004623
 80045dc:	08004623 	.word	0x08004623
 80045e0:	08004623 	.word	0x08004623
 80045e4:	080045ed 	.word	0x080045ed
 80045e8:	080045f3 	.word	0x080045f3
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 80045ec:	230a      	movs	r3, #10
 80045ee:	73fb      	strb	r3, [r7, #15]
		break;
 80045f0:	e019      	b.n	8004626 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 80045f2:	2306      	movs	r3, #6
 80045f4:	73fb      	strb	r3, [r7, #15]
		break;
 80045f6:	e016      	b.n	8004626 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 80045f8:	2304      	movs	r3, #4
 80045fa:	73fb      	strb	r3, [r7, #15]
		break;
 80045fc:	e013      	b.n	8004626 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 80045fe:	2302      	movs	r3, #2
 8004600:	73fb      	strb	r3, [r7, #15]
		break;
 8004602:	e010      	b.n	8004626 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
		break;
 8004608:	e00d      	b.n	8004626 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 800460a:	2307      	movs	r3, #7
 800460c:	73fb      	strb	r3, [r7, #15]
		break;
 800460e:	e00a      	b.n	8004626 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8004610:	2309      	movs	r3, #9
 8004612:	73fb      	strb	r3, [r7, #15]
		break;
 8004614:	e007      	b.n	8004626 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8004616:	2303      	movs	r3, #3
 8004618:	73fb      	strb	r3, [r7, #15]
		break;
 800461a:	e004      	b.n	8004626 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800461c:	2300      	movs	r3, #0
 800461e:	73fb      	strb	r3, [r7, #15]
		break;
 8004620:	e001      	b.n	8004626 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8004622:	23ff      	movs	r3, #255	@ 0xff
 8004624:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8004626:	7bfb      	ldrb	r3, [r7, #15]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08c      	sub	sp, #48	@ 0x30
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	607b      	str	r3, [r7, #4]
 800463e:	460b      	mov	r3, r1
 8004640:	72fb      	strb	r3, [r7, #11]
 8004642:	4613      	mov	r3, r2
 8004644:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004646:	2300      	movs	r3, #0
 8004648:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004652:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800465a:	f003 031f 	and.w	r3, r3, #31
 800465e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8004662:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8004666:	7afb      	ldrb	r3, [r7, #11]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff ff1a 	bl	80044a4 <ComputeRQL>
 8004670:	4603      	mov	r3, r0
 8004672:	461a      	mov	r2, r3
 8004674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004676:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800467c:	025b      	lsls	r3, r3, #9
 800467e:	62bb      	str	r3, [r7, #40]	@ 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8004680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004682:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004684:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800468a:	025b      	lsls	r3, r3, #9
 800468c:	627b      	str	r3, [r7, #36]	@ 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 800468e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004692:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 8004698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800469a:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80046a0:	025b      	lsls	r3, r3, #9
 80046a2:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 80046a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a6:	6a3a      	ldr	r2, [r7, #32]
 80046a8:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	@ 0x3c
 80046b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b2:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 80046b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b6:	2200      	movs	r2, #0
 80046b8:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 80046ba:	7abb      	ldrb	r3, [r7, #10]
 80046bc:	2b11      	cmp	r3, #17
 80046be:	d009      	beq.n	80046d4 <SetSimpleData+0xa0>
 80046c0:	2b11      	cmp	r3, #17
 80046c2:	dc0f      	bgt.n	80046e4 <SetSimpleData+0xb0>
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	dc02      	bgt.n	80046ce <SetSimpleData+0x9a>
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	dc03      	bgt.n	80046d4 <SetSimpleData+0xa0>
 80046cc:	e00a      	b.n	80046e4 <SetSimpleData+0xb0>
 80046ce:	2b0d      	cmp	r3, #13
 80046d0:	d004      	beq.n	80046dc <SetSimpleData+0xa8>
 80046d2:	e007      	b.n	80046e4 <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 80046d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d6:	2205      	movs	r2, #5
 80046d8:	76da      	strb	r2, [r3, #27]
		break;
 80046da:	e006      	b.n	80046ea <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 80046dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046de:	220d      	movs	r2, #13
 80046e0:	76da      	strb	r2, [r3, #27]
		break;
 80046e2:	e002      	b.n	80046ea <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80046e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e6:	2200      	movs	r2, #0
 80046e8:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 80046ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ec:	7edb      	ldrb	r3, [r3, #27]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d108      	bne.n	8004704 <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 80046f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff ff4c 	bl	8004594 <ConvertStatusLite>
 80046fc:	4603      	mov	r3, r0
 80046fe:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8004700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004702:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004708:	025b      	lsls	r3, r3, #9
 800470a:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a3a      	ldr	r2, [r7, #32]
 8004710:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004718:	025b      	lsls	r3, r3, #9
 800471a:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a3a      	ldr	r2, [r7, #32]
 8004720:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 8004724:	f107 0314 	add.w	r3, r7, #20
 8004728:	461a      	mov	r2, r3
 800472a:	2100      	movs	r1, #0
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f7ff fd16 	bl	800415e <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8004732:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004736:	2b06      	cmp	r3, #6
 8004738:	bf0c      	ite	eq
 800473a:	2301      	moveq	r3, #1
 800473c:	2300      	movne	r3, #0
 800473e:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8004740:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 8004742:	f107 0319 	add.w	r3, r7, #25
 8004746:	461a      	mov	r2, r3
 8004748:	2100      	movs	r1, #0
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f7ff fcab 	bl	80040a6 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8004750:	7e7b      	ldrb	r3, [r7, #25]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d104      	bne.n	8004760 <SetSimpleData+0x12c>
 8004756:	7ffb      	ldrb	r3, [r7, #31]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <SetSimpleData+0x12c>
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <SetSimpleData+0x12e>
 8004760:	2300      	movs	r3, #0
 8004762:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	7fba      	ldrb	r2, [r7, #30]
 8004768:	f883 2386 	strb.w	r2, [r3, #902]	@ 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 800476c:	f107 0314 	add.w	r3, r7, #20
 8004770:	461a      	mov	r2, r3
 8004772:	2101      	movs	r1, #1
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f7ff fcf2 	bl	800415e <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 800477a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800477e:	2b04      	cmp	r3, #4
 8004780:	bf0c      	ite	eq
 8004782:	2301      	moveq	r3, #1
 8004784:	2300      	movne	r3, #0
 8004786:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8004788:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 800478a:	f107 0319 	add.w	r3, r7, #25
 800478e:	461a      	mov	r2, r3
 8004790:	2101      	movs	r1, #1
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f7ff fc87 	bl	80040a6 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8004798:	7e7b      	ldrb	r3, [r7, #25]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d104      	bne.n	80047a8 <SetSimpleData+0x174>
 800479e:	7f7b      	ldrb	r3, [r7, #29]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <SetSimpleData+0x174>
 80047a4:	2301      	movs	r3, #1
 80047a6:	e000      	b.n	80047aa <SetSimpleData+0x176>
 80047a8:	2300      	movs	r3, #0
 80047aa:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	7fba      	ldrb	r2, [r7, #30]
 80047b0:	f883 2387 	strb.w	r2, [r3, #903]	@ 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 80047b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b6:	8b1b      	ldrh	r3, [r3, #24]
 80047b8:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 80047ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047bc:	7edb      	ldrb	r3, [r3, #27]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d110      	bne.n	80047e4 <SetSimpleData+0x1b0>
 80047c2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	da0c      	bge.n	80047e4 <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 80047ca:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80047ce:	4b08      	ldr	r3, [pc, #32]	@ (80047f0 <SetSimpleData+0x1bc>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	da03      	bge.n	80047de <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 80047d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d8:	220e      	movs	r2, #14
 80047da:	76da      	strb	r2, [r3, #27]
 80047dc:	e002      	b.n	80047e4 <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 80047de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e0:	2200      	movs	r2, #0
 80047e2:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 80047e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3730      	adds	r7, #48	@ 0x30
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	2000000c 	.word	0x2000000c

080047f4 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b0a8      	sub	sp, #160	@ 0xa0
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80047fe:	2300      	movs	r3, #0
 8004800:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	VL53L1_range_results_t       results;
	VL53L1_range_results_t       *presults = &results;
 8004804:	f107 0308 	add.w	r3, r7, #8
 8004808:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 800480c:	221c      	movs	r2, #28
 800480e:	21ff      	movs	r1, #255	@ 0xff
 8004810:	6838      	ldr	r0, [r7, #0]
 8004812:	f004 fe76 	bl	8009502 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 8004816:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800481a:	2102      	movs	r1, #2
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f001 f907 	bl	8005a30 <VL53L1_get_device_results>
 8004822:	4603      	mov	r3, r0
 8004824:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 8004828:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 800482c:	2b00      	cmp	r3, #0
 800482e:	d117      	bne.n	8004860 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8004830:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004834:	789a      	ldrb	r2, [r3, #2]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 800483a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800483e:	3304      	adds	r3, #4
 8004840:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		Status = SetSimpleData(Dev, 1,
 8004844:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004848:	78da      	ldrb	r2, [r3, #3]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004852:	2101      	movs	r1, #1
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff feed 	bl	8004634 <SetSimpleData>
 800485a:	4603      	mov	r3, r0
 800485c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004860:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 8004864:	4618      	mov	r0, r3
 8004866:	3798      	adds	r7, #152	@ 0x98
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800486c:	b5b0      	push	{r4, r5, r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af04      	add	r7, sp, #16
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8004878:	2300      	movs	r3, #0
 800487a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 8004880:	2162      	movs	r1, #98	@ 0x62
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f002 f984 	bl	8006b90 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2200      	movs	r2, #0
 800488c:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2201      	movs	r2, #1
 8004892:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2200      	movs	r2, #0
 8004898:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2201      	movs	r2, #1
 800489e:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2201      	movs	r2, #1
 80048a4:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80048ac:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80048b4:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 80048bc:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2264      	movs	r2, #100	@ 0x64
 80048c2:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80048ca:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f240 72db 	movw	r2, #2011	@ 0x7db
 80048da:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f002 f93a 	bl	8006b58 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80048e4:	78fb      	ldrb	r3, [r7, #3]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d008      	beq.n	80048fc <VL53L1_data_init+0x90>
 80048ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d104      	bne.n	80048fc <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f857 	bl	80049a6 <VL53L1_read_p2p_data>
 80048f8:	4603      	mov	r3, r0
 80048fa:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004902:	4618      	mov	r0, r3
 8004904:	f001 fc6a 	bl	80061dc <VL53L1_init_refspadchar_config_struct>
 8004908:	4603      	mov	r3, r0
 800490a:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004912:	4618      	mov	r0, r3
 8004914:	f001 fc86 	bl	8006224 <VL53L1_init_ssc_config_struct>
 8004918:	4603      	mov	r3, r0
 800491a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f103 0242 	add.w	r2, r3, #66	@ 0x42
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8004928:	4619      	mov	r1, r3
 800492a:	4610      	mov	r0, r2
 800492c:	f001 fc9b 	bl	8006266 <VL53L1_init_xtalk_config_struct>
 8004930:	4603      	mov	r3, r0
 8004932:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800493a:	4618      	mov	r0, r3
 800493c:	f001 fcf5 	bl	800632a <VL53L1_init_offset_cal_config_struct>
 8004940:	4603      	mov	r3, r0
 8004942:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	33a4      	adds	r3, #164	@ 0xa4
 8004948:	4618      	mov	r0, r3
 800494a:	f001 fd15 	bl	8006378 <VL53L1_init_tuning_parm_storage_struct>
 800494e:	4603      	mov	r3, r0
 8004950:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 8004952:	2120      	movs	r1, #32
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 fcf3 	bl	8005340 <VL53L1_set_vhv_loopbound>
 800495a:	4603      	mov	r3, r0
 800495c:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 800495e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d116      	bne.n	8004994 <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	7858      	ldrb	r0, [r3, #1]
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	8b1c      	ldrh	r4, [r3, #24]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	689d      	ldr	r5, [r3, #8]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	6912      	ldr	r2, [r2, #16]
 800497a:	68b9      	ldr	r1, [r7, #8]
 800497c:	6949      	ldr	r1, [r1, #20]
 800497e:	9102      	str	r1, [sp, #8]
 8004980:	9201      	str	r2, [sp, #4]
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	462b      	mov	r3, r5
 8004986:	4622      	mov	r2, r4
 8004988:	4601      	mov	r1, r0
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fb0a 	bl	8004fa4 <VL53L1_set_preset_mode>
 8004990:	4603      	mov	r3, r0
 8004992:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f002 fe4b 	bl	8007630 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 800499a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bdb0      	pop	{r4, r5, r7, pc}

080049a6 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b084      	sub	sp, #16
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80049ae:	2300      	movs	r3, #0
 80049b0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80049b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d108      	bne.n	80049d0 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80049c4:	4619      	mov	r1, r3
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f003 f887 	bl	8007ada <VL53L1_get_static_nvm_managed>
 80049cc:	4603      	mov	r3, r0
 80049ce:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 80049d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d107      	bne.n	80049e8 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	3342      	adds	r3, #66	@ 0x42
 80049dc:	4619      	mov	r1, r3
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f003 f9b9 	bl	8007d56 <VL53L1_get_customer_nvm_managed>
 80049e4:	4603      	mov	r3, r0
 80049e6:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 80049e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d115      	bne.n	8004a1c <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f503 73fd 	add.w	r3, r3, #506	@ 0x1fa
 80049f6:	4619      	mov	r1, r3
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f004 f892 	bl	8008b22 <VL53L1_get_nvm_copy_data>
 80049fe:	4603      	mov	r3, r0
 8004a00:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 8004a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d108      	bne.n	8004a1c <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f503 72fd 	add.w	r2, r3, #506	@ 0x1fa
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	33f0      	adds	r3, #240	@ 0xf0
 8004a14:	4619      	mov	r1, r3
 8004a16:	4610      	mov	r0, r2
 8004a18:	f002 fa1d 	bl	8006e56 <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 8004a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d109      	bne.n	8004a38 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	21de      	movs	r1, #222	@ 0xde
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f004 fa76 	bl	8008f20 <VL53L1_RdWord>
 8004a34:	4603      	mov	r3, r0
 8004a36:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 8004a3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a42:	d204      	bcs.n	8004a4e <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f64b 42cc 	movw	r2, #48332	@ 0xbccc
 8004a4a:	f8a3 215e 	strh.w	r2, [r3, #350]	@ 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 8004a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d107      	bne.n	8004a66 <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	339e      	adds	r3, #158	@ 0x9e
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f9c3 	bl	8004de8 <VL53L1_get_mode_mitigation_roi>
 8004a62:	4603      	mov	r3, r0
 8004a64:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d114      	bne.n	8004a9a <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10f      	bne.n	8004a9a <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f893 309f 	ldrb.w	r3, [r3, #159]	@ 0x9f
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 8004a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <VL53L1_software_reset>:


VL53L1_Error VL53L1_software_reset(
	VL53L1_DEV    Dev)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b084      	sub	sp, #16
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
	/**
	 * Sets and clears the software reset register VL53L1_SOFT_RESET.
	 * and waits for the firmware to boot
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* apply reset - note despite the name soft reset is active low! */
	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8004ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d106      	bne.n	8004ac8 <VL53L1_software_reset+0x22>
		status = VL53L1_WrByte(
 8004aba:	2200      	movs	r2, #0
 8004abc:	2100      	movs	r1, #0
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f004 f9d0 	bl	8008e64 <VL53L1_WrByte>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	73fb      	strb	r3, [r7, #15]
						Dev,
						VL53L1_SOFT_RESET,
						0x00);

	/* wait for a while before releasing the reset */
	if (status == VL53L1_ERROR_NONE)
 8004ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d105      	bne.n	8004adc <VL53L1_software_reset+0x36>
		status =
			VL53L1_WaitUs(
 8004ad0:	2164      	movs	r1, #100	@ 0x64
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f004 fa82 	bl	8008fdc <VL53L1_WaitUs>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53L1_SOFTWARE_RESET_DURATION_US);

	/* release reset */
	if (status == VL53L1_ERROR_NONE)
 8004adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d106      	bne.n	8004af2 <VL53L1_software_reset+0x4c>
		status = VL53L1_WrByte(
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f004 f9bb 	bl	8008e64 <VL53L1_WrByte>
 8004aee:	4603      	mov	r3, r0
 8004af0:	73fb      	strb	r3, [r7, #15]
						Dev,
						VL53L1_SOFT_RESET,
						0x01);

	/* wait for firmware boot to complete */
	if (status == VL53L1_ERROR_NONE)
 8004af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d104      	bne.n	8004b04 <VL53L1_software_reset+0x5e>
		status = VL53L1_wait_for_boot_completion(Dev);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f004 f83c 	bl	8008b78 <VL53L1_wait_for_boot_completion>
 8004b00:	4603      	mov	r3, r0
 8004b02:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8004b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004b2c:	23f1      	movs	r3, #241	@ 0xf1
 8004b2e:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8004b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10c      	bne.n	8004b52 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 8004b44:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 8004b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b085      	sub	sp, #20
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004b7e:	23f1      	movs	r3, #241	@ 0xf1
 8004b80:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8004b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d109      	bne.n	8004b9e <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	@ 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 8004b96:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8004b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b088      	sub	sp, #32
 8004bb2:	af02      	add	r7, sp, #8
 8004bb4:	60f8      	str	r0, [r7, #12]
 8004bb6:	60b9      	str	r1, [r7, #8]
 8004bb8:	607a      	str	r2, [r7, #4]
 8004bba:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004bce:	23f1      	movs	r3, #241	@ 0xf1
 8004bd0:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8004bd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d11b      	bne.n	8004c12 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f8b3 115e 	ldrh.w	r1, [r3, #350]	@ 0x15e
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	f502 72ce 	add.w	r2, r2, #412	@ 0x19c
 8004bfe:	9201      	str	r2, [sp, #4]
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	460b      	mov	r3, r1
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	68b8      	ldr	r0, [r7, #8]
 8004c0a:	f002 fc43 	bl	8007494 <VL53L1_calc_timeout_register_values>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8004c12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b088      	sub	sp, #32
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	607a      	str	r2, [r7, #4]
 8004c2a:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004c46:	23f1      	movs	r3, #241	@ 0xf1
 8004c48:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8004c4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d148      	bne.n	8004ce4 <VL53L1_get_timeouts_us+0xc6>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	f8b3 215e 	ldrh.w	r2, [r3, #350]	@ 0x15e
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	f893 31a2 	ldrb.w	r3, [r3, #418]	@ 0x1a2
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4610      	mov	r0, r2
 8004c62:	f002 fabe 	bl	80071e2 <VL53L1_calc_macro_period_us>
 8004c66:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	f893 318b 	ldrb.w	r3, [r3, #395]	@ 0x18b
			VL53L1_calc_timeout_us(
 8004c6e:	6979      	ldr	r1, [r7, #20]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f002 fb76 	bl	8007362 <VL53L1_calc_timeout_us>
 8004c76:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
		timeout_encoded =
 8004c82:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004c84:	8a7b      	ldrh	r3, [r7, #18]
 8004c86:	021b      	lsls	r3, r3, #8
 8004c88:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	f892 219d 	ldrb.w	r2, [r2, #413]	@ 0x19d
		timeout_encoded = (timeout_encoded << 8) +
 8004c90:	4413      	add	r3, r2
 8004c92:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8004c94:	8a7b      	ldrh	r3, [r7, #18]
 8004c96:	6979      	ldr	r1, [r7, #20]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f002 fba2 	bl	80073e2 <VL53L1_calc_decoded_timeout_us>
 8004c9e:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
		timeout_encoded =
 8004caa:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004cac:	8a7b      	ldrh	r3, [r7, #18]
 8004cae:	021b      	lsls	r3, r3, #8
 8004cb0:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	f892 21a1 	ldrb.w	r2, [r2, #417]	@ 0x1a1
		timeout_encoded = (timeout_encoded << 8) +
 8004cb8:	4413      	add	r3, r2
 8004cba:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8004cbc:	8a7b      	ldrh	r3, [r7, #18]
 8004cbe:	6979      	ldr	r1, [r7, #20]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f002 fb8e 	bl	80073e2 <VL53L1_calc_decoded_timeout_us>
 8004cc6:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8004ce4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3720      	adds	r7, #32
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8004d06:	2301      	movs	r3, #1
 8004d08:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8004d0a:	7afb      	ldrb	r3, [r7, #11]
 8004d0c:	2b07      	cmp	r3, #7
 8004d0e:	d81c      	bhi.n	8004d4a <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 8004d10:	7afb      	ldrb	r3, [r7, #11]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d004      	beq.n	8004d20 <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 8004d16:	7afb      	ldrb	r3, [r7, #11]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1e:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f893 21c5 	ldrb.w	r2, [r3, #453]	@ 0x1c5
		*pvalue =
 8004d26:	7dbb      	ldrb	r3, [r7, #22]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 8004d30:	7afb      	ldrb	r3, [r7, #11]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00b      	beq.n	8004d4e <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	7afb      	ldrb	r3, [r7, #11]
 8004d3e:	fa42 f303 	asr.w	r3, r2, r3
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	701a      	strb	r2, [r3, #0]
 8004d48:	e001      	b.n	8004d4e <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004d4a:	23fc      	movs	r3, #252	@ 0xfc
 8004d4c:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8004d4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b084      	sub	sp, #16
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	7858      	ldrb	r0, [r3, #1]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	7819      	ldrb	r1, [r3, #0]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f203 13c3 	addw	r3, r3, #451	@ 0x1c3
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f002 fc01 	bl	8007586 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	7898      	ldrb	r0, [r3, #2]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	78d9      	ldrb	r1, [r3, #3]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8004d92:	461a      	mov	r2, r3
 8004d94:	f002 fc36 	bl	8007604 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 8004d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004dae:	2300      	movs	r3, #0
 8004db0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f893 01c3 	ldrb.w	r0, [r3, #451]	@ 0x1c3
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	f002 fda5 	bl	8007912 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f893 01c4 	ldrb.w	r0, [r3, #452]	@ 0x1c4
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	1c99      	adds	r1, r3, #2
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	3303      	adds	r3, #3
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f002 fbfc 	bl	80075d4 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 8004ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004df2:	2300      	movs	r3, #0
 8004df4:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8004e02:	2300      	movs	r3, #0
 8004e04:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f893 322a 	ldrb.w	r3, [r3, #554]	@ 0x22a
 8004e0c:	f107 020e 	add.w	r2, r7, #14
 8004e10:	f107 010d 	add.w	r1, r7, #13
 8004e14:	4618      	mov	r0, r3
 8004e16:	f002 fd7c 	bl	8007912 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8004e1a:	7bba      	ldrb	r2, [r7, #14]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8004e20:	7b7a      	ldrb	r2, [r7, #13]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f893 322b 	ldrb.w	r3, [r3, #555]	@ 0x22b
 8004e2c:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8004e2e:	7bfb      	ldrb	r3, [r7, #15]
 8004e30:	091b      	lsrs	r3, r3, #4
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8004e44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	607a      	str	r2, [r7, #4]
 8004e5a:	603b      	str	r3, [r7, #0]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004e60:	2300      	movs	r3, #0
 8004e62:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8004e68:	7afb      	ldrb	r3, [r7, #11]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	2b25      	cmp	r3, #37	@ 0x25
 8004e6e:	f200 808e 	bhi.w	8004f8e <VL53L1_get_preset_mode_timing_cfg+0x13e>
 8004e72:	a201      	add	r2, pc, #4	@ (adr r2, 8004e78 <VL53L1_get_preset_mode_timing_cfg+0x28>)
 8004e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e78:	08004f11 	.word	0x08004f11
 8004e7c:	08004f11 	.word	0x08004f11
 8004e80:	08004f11 	.word	0x08004f11
 8004e84:	08004f11 	.word	0x08004f11
 8004e88:	08004f11 	.word	0x08004f11
 8004e8c:	08004f3b 	.word	0x08004f3b
 8004e90:	08004f3b 	.word	0x08004f3b
 8004e94:	08004f3b 	.word	0x08004f3b
 8004e98:	08004f8f 	.word	0x08004f8f
 8004e9c:	08004f8f 	.word	0x08004f8f
 8004ea0:	08004f8f 	.word	0x08004f8f
 8004ea4:	08004f8f 	.word	0x08004f8f
 8004ea8:	08004f8f 	.word	0x08004f8f
 8004eac:	08004f8f 	.word	0x08004f8f
 8004eb0:	08004f8f 	.word	0x08004f8f
 8004eb4:	08004f8f 	.word	0x08004f8f
 8004eb8:	08004f11 	.word	0x08004f11
 8004ebc:	08004f3b 	.word	0x08004f3b
 8004ec0:	08004f8f 	.word	0x08004f8f
 8004ec4:	08004f8f 	.word	0x08004f8f
 8004ec8:	08004f8f 	.word	0x08004f8f
 8004ecc:	08004f8f 	.word	0x08004f8f
 8004ed0:	08004f8f 	.word	0x08004f8f
 8004ed4:	08004f8f 	.word	0x08004f8f
 8004ed8:	08004f8f 	.word	0x08004f8f
 8004edc:	08004f8f 	.word	0x08004f8f
 8004ee0:	08004f8f 	.word	0x08004f8f
 8004ee4:	08004f8f 	.word	0x08004f8f
 8004ee8:	08004f8f 	.word	0x08004f8f
 8004eec:	08004f8f 	.word	0x08004f8f
 8004ef0:	08004f8f 	.word	0x08004f8f
 8004ef4:	08004f8f 	.word	0x08004f8f
 8004ef8:	08004f8f 	.word	0x08004f8f
 8004efc:	08004f8f 	.word	0x08004f8f
 8004f00:	08004f8f 	.word	0x08004f8f
 8004f04:	08004f65 	.word	0x08004f65
 8004f08:	08004f65 	.word	0x08004f65
 8004f0c:	08004f65 	.word	0x08004f65
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	@ 0xca
		*pdss_config__target_total_rate_mcps =
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
		*pphasecal_config_timeout_us =
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
		*pmm_config_timeout_us =
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
		*prange_config_timeout_us =
 8004f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f36:	601a      	str	r2, [r3, #0]
	break;
 8004f38:	e02c      	b.n	8004f94 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
		*pdss_config__target_total_rate_mcps =
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
		*pphasecal_config_timeout_us =
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
		*pmm_config_timeout_us =
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
		*prange_config_timeout_us =
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f60:	601a      	str	r2, [r3, #0]
	break;
 8004f62:	e017      	b.n	8004f94 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
		*pdss_config__target_total_rate_mcps =
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
		*pphasecal_config_timeout_us =
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
		*pmm_config_timeout_us =
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
		*prange_config_timeout_us =
 8004f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8a:	601a      	str	r2, [r3, #0]
	break;
 8004f8c:	e002      	b.n	8004f94 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004f8e:	23fc      	movs	r3, #252	@ 0xfc
 8004f90:	75fb      	strb	r3, [r7, #23]
		break;
 8004f92:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8004f94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	371c      	adds	r7, #28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b092      	sub	sp, #72	@ 0x48
 8004fa8:	af04      	add	r7, sp, #16
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	607b      	str	r3, [r7, #4]
 8004fae:	460b      	mov	r3, r1
 8004fb0:	72fb      	strb	r3, [r7, #11]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53L1_LLDriverData_t *pdev =
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	633b      	str	r3, [r7, #48]	@ 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fca:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8004fce:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8004fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8004fd6:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fda:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8004fde:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe2:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8004fe6:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fea:	33a4      	adds	r3, #164	@ 0xa4
 8004fec:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8004fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff0:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8004ff4:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff8:	7afa      	ldrb	r2, [r7, #11]
 8004ffa:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005000:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8005002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005004:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005006:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8005008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800500c:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 800500e:	2103      	movs	r1, #3
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f001 fdbd 	bl	8006b90 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 8005016:	7afb      	ldrb	r3, [r7, #11]
 8005018:	3b01      	subs	r3, #1
 800501a:	2b25      	cmp	r3, #37	@ 0x25
 800501c:	f200 810c 	bhi.w	8005238 <VL53L1_set_preset_mode+0x294>
 8005020:	a201      	add	r2, pc, #4	@ (adr r2, 8005028 <VL53L1_set_preset_mode+0x84>)
 8005022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005026:	bf00      	nop
 8005028:	080050c1 	.word	0x080050c1
 800502c:	080050dd 	.word	0x080050dd
 8005030:	080050f9 	.word	0x080050f9
 8005034:	08005115 	.word	0x08005115
 8005038:	08005131 	.word	0x08005131
 800503c:	0800514d 	.word	0x0800514d
 8005040:	08005169 	.word	0x08005169
 8005044:	08005185 	.word	0x08005185
 8005048:	08005239 	.word	0x08005239
 800504c:	08005239 	.word	0x08005239
 8005050:	08005239 	.word	0x08005239
 8005054:	08005239 	.word	0x08005239
 8005058:	08005239 	.word	0x08005239
 800505c:	08005239 	.word	0x08005239
 8005060:	08005239 	.word	0x08005239
 8005064:	08005239 	.word	0x08005239
 8005068:	080051a1 	.word	0x080051a1
 800506c:	080051bd 	.word	0x080051bd
 8005070:	08005239 	.word	0x08005239
 8005074:	08005239 	.word	0x08005239
 8005078:	08005239 	.word	0x08005239
 800507c:	08005239 	.word	0x08005239
 8005080:	08005239 	.word	0x08005239
 8005084:	08005239 	.word	0x08005239
 8005088:	08005239 	.word	0x08005239
 800508c:	08005239 	.word	0x08005239
 8005090:	08005239 	.word	0x08005239
 8005094:	08005239 	.word	0x08005239
 8005098:	08005239 	.word	0x08005239
 800509c:	08005239 	.word	0x08005239
 80050a0:	08005239 	.word	0x08005239
 80050a4:	08005239 	.word	0x08005239
 80050a8:	08005239 	.word	0x08005239
 80050ac:	08005239 	.word	0x08005239
 80050b0:	08005239 	.word	0x08005239
 80050b4:	080051d9 	.word	0x080051d9
 80050b8:	080051f9 	.word	0x080051f9
 80050bc:	08005219 	.word	0x08005219

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	9301      	str	r3, [sp, #4]
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80050d0:	f001 f9e0 	bl	8006494 <VL53L1_preset_mode_standard_ranging>
 80050d4:	4603      	mov	r3, r0
 80050d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80050da:	e0b1      	b.n	8005240 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	9301      	str	r3, [sp, #4]
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80050ec:	f001 faf0 	bl	80066d0 <VL53L1_preset_mode_standard_ranging_short_range>
 80050f0:	4603      	mov	r3, r0
 80050f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80050f6:	e0a3      	b.n	8005240 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	9301      	str	r3, [sp, #4]
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005104:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005106:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005108:	f001 fb23 	bl	8006752 <VL53L1_preset_mode_standard_ranging_long_range>
 800510c:	4603      	mov	r3, r0
 800510e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005112:	e095      	b.n	8005240 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	9301      	str	r3, [sp, #4]
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005120:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005122:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005124:	f001 fb56 	bl	80067d4 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8005128:	4603      	mov	r3, r0
 800512a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800512e:	e087      	b.n	8005240 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	9301      	str	r3, [sp, #4]
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800513c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800513e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005140:	f001 fb6d 	bl	800681e <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8005144:	4603      	mov	r3, r0
 8005146:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800514a:	e079      	b.n	8005240 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	9301      	str	r3, [sp, #4]
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005158:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800515a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800515c:	f001 fb84 	bl	8006868 <VL53L1_preset_mode_timed_ranging>
 8005160:	4603      	mov	r3, r0
 8005162:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005166:	e06b      	b.n	8005240 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	9301      	str	r3, [sp, #4]
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005174:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005176:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005178:	f001 fbb0 	bl	80068dc <VL53L1_preset_mode_timed_ranging_short_range>
 800517c:	4603      	mov	r3, r0
 800517e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005182:	e05d      	b.n	8005240 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	9301      	str	r3, [sp, #4]
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005190:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005192:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005194:	f001 fbdc 	bl	8006950 <VL53L1_preset_mode_timed_ranging_long_range>
 8005198:	4603      	mov	r3, r0
 800519a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800519e:	e04f      	b.n	8005240 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	9301      	str	r3, [sp, #4]
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80051b0:	f001 fcb0 	bl	8006b14 <VL53L1_preset_mode_olt>
 80051b4:	4603      	mov	r3, r0
 80051b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80051ba:	e041      	b.n	8005240 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	9301      	str	r3, [sp, #4]
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80051cc:	f001 fc6c 	bl	8006aa8 <VL53L1_preset_mode_singleshot_ranging>
 80051d0:	4603      	mov	r3, r0
 80051d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80051d6:	e033      	b.n	8005240 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	9302      	str	r3, [sp, #8]
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	9301      	str	r3, [sp, #4]
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80051ec:	f001 fc10 	bl	8006a10 <VL53L1_preset_mode_low_power_auto_short_ranging>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 80051f6:	e023      	b.n	8005240 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	9302      	str	r3, [sp, #8]
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	9301      	str	r3, [sp, #4]
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005208:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800520a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800520c:	f001 fbda 	bl	80069c4 <VL53L1_preset_mode_low_power_auto_ranging>
 8005210:	4603      	mov	r3, r0
 8005212:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8005216:	e013      	b.n	8005240 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	9302      	str	r3, [sp, #8]
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	9301      	str	r3, [sp, #4]
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005228:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800522a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800522c:	f001 fc16 	bl	8006a5c <VL53L1_preset_mode_low_power_auto_long_ranging>
 8005230:	4603      	mov	r3, r0
 8005232:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8005236:	e003      	b.n	8005240 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005238:	23fc      	movs	r3, #252	@ 0xfc
 800523a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		break;
 800523e:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 8005240:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8005244:	2b00      	cmp	r3, #0
 8005246:	d105      	bne.n	8005254 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 8005248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800524a:	893a      	ldrh	r2, [r7, #8]
 800524c:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800524e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005250:	893a      	ldrh	r2, [r7, #8]
 8005252:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 8005254:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8005258:	2b00      	cmp	r3, #0
 800525a:	d108      	bne.n	800526e <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 800525c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800525e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005260:	6879      	ldr	r1, [r7, #4]
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f7ff fca3 	bl	8004bae <VL53L1_set_timeouts_us>
 8005268:	4603      	mov	r3, r0
 800526a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800526e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8005272:	2b00      	cmp	r3, #0
 8005274:	d106      	bne.n	8005284 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 8005276:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f7ff fc49 	bl	8004b10 <VL53L1_set_inter_measurement_period_ms>
 800527e:	4603      	mov	r3, r0
 8005280:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 8005284:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8005288:	4618      	mov	r0, r3
 800528a:	3738      	adds	r7, #56	@ 0x38
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800529a:	2300      	movs	r3, #0
 800529c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	@ 0x1a6
	*plite_sigma =
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80052ac:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80052c8:	2300      	movs	r3, #0
 80052ca:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	887a      	ldrh	r2, [r7, #2]
 80052d4:	f8a3 21a6 	strh.w	r2, [r3, #422]	@ 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 80052d8:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80052dc:	4618      	mov	r0, r3
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80052f2:	2300      	movs	r3, #0
 80052f4:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	@ 0x1a8
	*plite_mincountrate =
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8005304:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005320:	2300      	movs	r3, #0
 8005322:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	887a      	ldrh	r2, [r7, #2]
 800532c:	f8a3 21a8 	strh.w	r2, [r3, #424]	@ 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 8005330:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	460b      	mov	r3, r1
 800534a:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800534c:	2300      	movs	r3, #0
 800534e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800535a:	f003 0303 	and.w	r3, r3, #3
 800535e:	b2da      	uxtb	r2, r3
 8005360:	78fb      	ldrb	r3, [r7, #3]
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	b2db      	uxtb	r3, r3
 8005366:	4413      	add	r3, r2
 8005368:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 8005370:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005374:	4618      	mov	r0, r3
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b0d0      	sub	sp, #320	@ 0x140
 8005384:	af00      	add	r7, sp, #0
 8005386:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800538a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800538e:	6018      	str	r0, [r3, #0]
 8005390:	4608      	mov	r0, r1
 8005392:	4611      	mov	r1, r2
 8005394:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005398:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800539c:	4602      	mov	r2, r0
 800539e:	701a      	strb	r2, [r3, #0]
 80053a0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80053a4:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80053a8:	460a      	mov	r2, r1
 80053aa:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80053ac:	2300      	movs	r3, #0
 80053ae:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80053b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80053b6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 80053c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80053c4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80053c8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 80053cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80053d0:	3342      	adds	r3, #66	@ 0x42
 80053d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80053d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80053da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80053de:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80053e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80053e6:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80053ea:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80053ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80053f2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80053f6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80053fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80053fe:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8005402:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8005406:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800540a:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800540e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8005412:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005416:	332c      	adds	r3, #44	@ 0x2c
 8005418:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 800541c:	f107 030c 	add.w	r3, r7, #12
 8005420:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	uint16_t i                          = 0;
 8005424:	2300      	movs	r3, #0
 8005426:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
	uint16_t i2c_index                  = 0;
 800542a:	2300      	movs	r3, #0
 800542c:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 8005430:	2300      	movs	r3, #0
 8005432:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8005436:	2300      	movs	r3, #0
 8005438:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 800543c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005440:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005444:	f2a2 123d 	subw	r2, r2, #317	@ 0x13d
 8005448:	7812      	ldrb	r2, [r2, #0]
 800544a:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 800544c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005450:	791b      	ldrb	r3, [r3, #4]
 8005452:	b25b      	sxtb	r3, r3
 8005454:	f003 030f 	and.w	r3, r3, #15
 8005458:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800545a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800545e:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8005462:	f993 3000 	ldrsb.w	r3, [r3]
 8005466:	4313      	orrs	r3, r2
 8005468:	b25b      	sxtb	r3, r3
 800546a:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800546c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005470:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8005472:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005476:	f8b3 2142 	ldrh.w	r2, [r3, #322]	@ 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800547a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800547e:	f8a3 217c 	strh.w	r2, [r3, #380]	@ 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8005482:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005486:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 800548a:	2bff      	cmp	r3, #255	@ 0xff
 800548c:	d104      	bne.n	8005498 <VL53L1_init_and_start_range+0x118>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800548e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005492:	2200      	movs	r2, #0
 8005494:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005498:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800549c:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d139      	bne.n	8005518 <VL53L1_init_and_start_range+0x198>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 80054a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80054a8:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d133      	bne.n	8005518 <VL53L1_init_and_start_range+0x198>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 80054b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80054b4:	f893 2186 	ldrb.w	r2, [r3, #390]	@ 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 80054b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80054bc:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 80054c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 80054ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80054ce:	f893 31c5 	ldrb.w	r3, [r3, #453]	@ 0x1c5
 80054d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10c      	bne.n	80054f4 <VL53L1_init_and_start_range+0x174>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 80054da:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80054de:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	@ 0x58
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 80054ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80054ee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 80054f2:	e004      	b.n	80054fe <VL53L1_init_and_start_range+0x17e>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 80054f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80054f8:	2200      	movs	r2, #0
 80054fa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 80054fe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005502:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b04      	cmp	r3, #4
 800550a:	d805      	bhi.n	8005518 <VL53L1_init_and_start_range+0x198>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800550c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005510:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8005514:	2205      	movs	r2, #5
 8005516:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005518:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800551c:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8005520:	2b01      	cmp	r3, #1
 8005522:	d113      	bne.n	800554c <VL53L1_init_and_start_range+0x1cc>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8005524:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005528:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800552c:	2b01      	cmp	r3, #1
 800552e:	d10d      	bne.n	800554c <VL53L1_init_and_start_range+0x1cc>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8005530:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005534:	f893 22e7 	ldrb.w	r2, [r3, #743]	@ 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 8005538:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800553c:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8005540:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005544:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8005548:	2206      	movs	r2, #6
 800554a:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 800554c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005550:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	3b01      	subs	r3, #1
 8005558:	2b05      	cmp	r3, #5
 800555a:	d827      	bhi.n	80055ac <VL53L1_init_and_start_range+0x22c>
 800555c:	a201      	add	r2, pc, #4	@ (adr r2, 8005564 <VL53L1_init_and_start_range+0x1e4>)
 800555e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005562:	bf00      	nop
 8005564:	080055a5 	.word	0x080055a5
 8005568:	0800559d 	.word	0x0800559d
 800556c:	08005595 	.word	0x08005595
 8005570:	0800558d 	.word	0x0800558d
 8005574:	08005585 	.word	0x08005585
 8005578:	0800557d 	.word	0x0800557d
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 800557c:	2301      	movs	r3, #1
 800557e:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8005582:	e017      	b.n	80055b4 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8005584:	230d      	movs	r3, #13
 8005586:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 800558a:	e013      	b.n	80055b4 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800558c:	2324      	movs	r3, #36	@ 0x24
 800558e:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8005592:	e00f      	b.n	80055b4 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8005594:	2344      	movs	r3, #68	@ 0x44
 8005596:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 800559a:	e00b      	b.n	80055b4 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 800559c:	235a      	movs	r3, #90	@ 0x5a
 800559e:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80055a2:	e007      	b.n	80055b4 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 80055a4:	2371      	movs	r3, #113	@ 0x71
 80055a6:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80055aa:	e003      	b.n	80055b4 <VL53L1_init_and_start_range+0x234>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 80055ac:	2383      	movs	r3, #131	@ 0x83
 80055ae:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80055b2:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 80055b4:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80055b8:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
 80055bc:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 80055c0:	f107 030c 	add.w	r3, r7, #12
 80055c4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 80055c8:	2300      	movs	r3, #0
 80055ca:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 80055ce:	e00b      	b.n	80055e8 <VL53L1_init_and_start_range+0x268>
		*pbuffer++ = 0;
 80055d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	f8c7 2138 	str.w	r2, [r7, #312]	@ 0x138
 80055da:	2200      	movs	r2, #0
 80055dc:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 80055de:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80055e2:	3301      	adds	r3, #1
 80055e4:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 80055e8:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 80055ec:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d3ed      	bcc.n	80055d0 <VL53L1_init_and_start_range+0x250>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 80055f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80055f8:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	2b05      	cmp	r3, #5
 8005600:	d917      	bls.n	8005632 <VL53L1_init_and_start_range+0x2b2>
 8005602:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8005606:	2b00      	cmp	r3, #0
 8005608:	d113      	bne.n	8005632 <VL53L1_init_and_start_range+0x2b2>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800560a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 800560e:	f1c3 0301 	rsb	r3, r3, #1
 8005612:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005616:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 800561a:	f107 020c 	add.w	r2, r7, #12
 800561e:	4413      	add	r3, r2
 8005620:	461a      	mov	r2, r3
 8005622:	210b      	movs	r1, #11
 8005624:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8005628:	f002 f9a2 	bl	8007970 <VL53L1_i2c_encode_static_nvm_managed>
 800562c:	4603      	mov	r3, r0
 800562e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8005632:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005636:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b04      	cmp	r3, #4
 800563e:	d917      	bls.n	8005670 <VL53L1_init_and_start_range+0x2f0>
 8005640:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8005644:	2b00      	cmp	r3, #0
 8005646:	d113      	bne.n	8005670 <VL53L1_init_and_start_range+0x2f0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8005648:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 800564c:	f1c3 030d 	rsb	r3, r3, #13
 8005650:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005654:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 8005658:	f107 020c 	add.w	r2, r7, #12
 800565c:	4413      	add	r3, r2
 800565e:	461a      	mov	r2, r3
 8005660:	2117      	movs	r1, #23
 8005662:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8005666:	f002 fa5f 	bl	8007b28 <VL53L1_i2c_encode_customer_nvm_managed>
 800566a:	4603      	mov	r3, r0
 800566c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8005670:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005674:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	2b03      	cmp	r3, #3
 800567c:	d917      	bls.n	80056ae <VL53L1_init_and_start_range+0x32e>
 800567e:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8005682:	2b00      	cmp	r3, #0
 8005684:	d113      	bne.n	80056ae <VL53L1_init_and_start_range+0x32e>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8005686:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 800568a:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 800568e:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005692:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_config(
 8005696:	f107 020c 	add.w	r2, r7, #12
 800569a:	4413      	add	r3, r2
 800569c:	461a      	mov	r2, r3
 800569e:	2120      	movs	r1, #32
 80056a0:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 80056a4:	f002 fb7e 	bl	8007da4 <VL53L1_i2c_encode_static_config>
 80056a8:	4603      	mov	r3, r0
 80056aa:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 80056ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80056b2:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d917      	bls.n	80056ec <VL53L1_init_and_start_range+0x36c>
 80056bc:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d113      	bne.n	80056ec <VL53L1_init_and_start_range+0x36c>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80056c4:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80056c8:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 80056cc:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80056d0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_general_config(
 80056d4:	f107 020c 	add.w	r2, r7, #12
 80056d8:	4413      	add	r3, r2
 80056da:	461a      	mov	r2, r3
 80056dc:	2116      	movs	r1, #22
 80056de:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80056e2:	f002 fc42 	bl	8007f6a <VL53L1_i2c_encode_general_config>
 80056e6:	4603      	mov	r3, r0
 80056e8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 80056ec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80056f0:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d917      	bls.n	800572a <VL53L1_init_and_start_range+0x3aa>
 80056fa:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d113      	bne.n	800572a <VL53L1_init_and_start_range+0x3aa>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8005702:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8005706:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 800570a:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800570e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_timing_config(
 8005712:	f107 020c 	add.w	r2, r7, #12
 8005716:	4413      	add	r3, r2
 8005718:	461a      	mov	r2, r3
 800571a:	2117      	movs	r1, #23
 800571c:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8005720:	f002 fca7 	bl	8008072 <VL53L1_i2c_encode_timing_config>
 8005724:	4603      	mov	r3, r0
 8005726:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800572a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800572e:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d036      	beq.n	80057a6 <VL53L1_init_and_start_range+0x426>
 8005738:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 800573c:	2b00      	cmp	r3, #0
 800573e:	d132      	bne.n	80057a6 <VL53L1_init_and_start_range+0x426>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8005740:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8005744:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 8005748:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 800574c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005750:	791b      	ldrb	r3, [r3, #4]
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d017      	beq.n	800578a <VL53L1_init_and_start_range+0x40a>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800575a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800575e:	789b      	ldrb	r3, [r3, #2]
 8005760:	f043 0301 	orr.w	r3, r3, #1
 8005764:	b2da      	uxtb	r2, r3
 8005766:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800576a:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800576c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005770:	789b      	ldrb	r3, [r3, #2]
 8005772:	f043 0301 	orr.w	r3, r3, #1
 8005776:	b2da      	uxtb	r2, r3
 8005778:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800577c:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800577e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005782:	789a      	ldrb	r2, [r3, #2]
 8005784:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005788:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800578a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800578e:	f107 020c 	add.w	r2, r7, #12
 8005792:	4413      	add	r3, r2
 8005794:	461a      	mov	r2, r3
 8005796:	2112      	movs	r1, #18
 8005798:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 800579c:	f002 fceb 	bl	8008176 <VL53L1_i2c_encode_dynamic_config>
 80057a0:	4603      	mov	r3, r0
 80057a2:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 80057a6:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d113      	bne.n	80057d6 <VL53L1_init_and_start_range+0x456>

		i2c_buffer_offset_bytes = \
 80057ae:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80057b2:	f1c3 0383 	rsb	r3, r3, #131	@ 0x83
 80057b6:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80057ba:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_system_control(
 80057be:	f107 020c 	add.w	r2, r7, #12
 80057c2:	4413      	add	r3, r2
 80057c4:	461a      	mov	r2, r3
 80057c6:	2105      	movs	r1, #5
 80057c8:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80057cc:	f002 fd58 	bl	8008280 <VL53L1_i2c_encode_system_control>
 80057d0:	4603      	mov	r3, r0
 80057d2:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 80057d6:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10f      	bne.n	80057fe <VL53L1_init_and_start_range+0x47e>
		status =
			VL53L1_WriteMulti(
 80057de:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 80057e2:	f107 020c 	add.w	r2, r7, #12
 80057e6:	f8b7 1134 	ldrh.w	r1, [r7, #308]	@ 0x134
 80057ea:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 80057ee:	f5a0 709e 	sub.w	r0, r0, #316	@ 0x13c
 80057f2:	6800      	ldr	r0, [r0, #0]
 80057f4:	f003 faca 	bl	8008d8c <VL53L1_WriteMulti>
 80057f8:	4603      	mov	r3, r0
 80057fa:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 80057fe:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8005802:	2b00      	cmp	r3, #0
 8005804:	d109      	bne.n	800581a <VL53L1_init_and_start_range+0x49a>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8005806:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800580a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800580e:	6818      	ldr	r0, [r3, #0]
 8005810:	f001 f9e8 	bl	8006be4 <VL53L1_update_ll_driver_rd_state>
 8005814:	4603      	mov	r3, r0
 8005816:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	if (status == VL53L1_ERROR_NONE)
 800581a:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <VL53L1_init_and_start_range+0x4b6>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8005822:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005826:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800582a:	6818      	ldr	r0, [r3, #0]
 800582c:	f001 faad 	bl	8006d8a <VL53L1_update_ll_driver_cfg_state>
 8005830:	4603      	mov	r3, r0
 8005832:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	LOG_FUNCTION_END(status);

	return status;
 8005836:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
}
 800583a:	4618      	mov	r0, r3
 800583c:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
	/*
	 * Stops any in process range using the ABORT command
	 * Also clears all of the measurement mode bits
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800584c:	2300      	movs	r3, #0
 800584e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev =
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	/* Merge ABORT mode with mode_start */

	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 800585a:	b25b      	sxtb	r3, r3
 800585c:	f003 030f 	and.w	r3, r3, #15
 8005860:	b25b      	sxtb	r3, r3
 8005862:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005866:	b25b      	sxtb	r3, r3
 8005868:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f883 21cc 	strb.w	r2, [r3, #460]	@ 0x1cc
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8005876:	4619      	mov	r1, r3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f002 fd3c 	bl	80082f6 <VL53L1_set_system_control>
 800587e:	4603      	mov	r3, r0
 8005880:	73fb      	strb	r3, [r7, #15]
				Dev,
				&pdev->sys_ctrl);

	/* Abort bit is auto clear so clear register group structure to match */
	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8005888:	f003 030f 	and.w	r3, r3, #15
 800588c:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	f883 21cc 	strb.w	r2, [r3, #460]	@ 0x1cc

	/* reset zone dynamic info */
	VL53L1_init_ll_driver_state(
 8005894:	2103      	movs	r1, #3
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f001 f97a 	bl	8006b90 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* reset low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d102      	bne.n	80058ac <VL53L1_stop_range+0x68>
		VL53L1_low_power_auto_data_stop_range(Dev);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f001 fef6 	bl	8007698 <VL53L1_low_power_auto_data_stop_range>

	return status;
 80058ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b0c8      	sub	sp, #288	@ 0x120
 80058bc:	af00      	add	r7, sp, #0
 80058be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80058c2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80058c6:	6018      	str	r0, [r3, #0]
 80058c8:	460a      	mov	r2, r1
 80058ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80058ce:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80058d2:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80058d4:	2300      	movs	r3, #0
 80058d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80058da:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80058de:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 80058e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80058ec:	f503 73e7 	add.w	r3, r3, #462	@ 0x1ce
 80058f0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 80058f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80058f8:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80058fc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8005900:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005904:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8005908:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800590c:	2388      	movs	r3, #136	@ 0x88
 800590e:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8005912:	2300      	movs	r3, #0
 8005914:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 800591e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005922:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d008      	beq.n	800593e <VL53L1_get_measurement_results+0x86>
 800592c:	2b02      	cmp	r3, #2
 800592e:	d10d      	bne.n	800594c <VL53L1_get_measurement_results+0x94>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8005930:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8005934:	f5c3 7387 	rsb	r3, r3, #270	@ 0x10e
 8005938:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800593c:	e00a      	b.n	8005954 <VL53L1_get_measurement_results+0x9c>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800593e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8005942:	f1c3 03d5 	rsb	r3, r3, #213	@ 0xd5
 8005946:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800594a:	e003      	b.n	8005954 <VL53L1_get_measurement_results+0x9c>
	default:
		i2c_buffer_size_bytes =
 800594c:	232c      	movs	r3, #44	@ 0x2c
 800594e:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8005952:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8005954:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10f      	bne.n	800597c <VL53L1_get_measurement_results+0xc4>
		status =
			VL53L1_ReadMulti(
 800595c:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8005960:	f107 0208 	add.w	r2, r7, #8
 8005964:	f8b7 110a 	ldrh.w	r1, [r7, #266]	@ 0x10a
 8005968:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 800596c:	f5a0 708e 	sub.w	r0, r0, #284	@ 0x11c
 8005970:	6800      	ldr	r0, [r0, #0]
 8005972:	f003 fa41 	bl	8008df8 <VL53L1_ReadMulti>
 8005976:	4603      	mov	r3, r0
 8005978:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800597c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005980:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d917      	bls.n	80059ba <VL53L1_get_measurement_results+0x102>
 800598a:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 800598e:	2b00      	cmp	r3, #0
 8005990:	d113      	bne.n	80059ba <VL53L1_get_measurement_results+0x102>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005992:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8005996:	f1c3 03d6 	rsb	r3, r3, #214	@ 0xd6
 800599a:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800599e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_debug_results(
 80059a2:	f107 0208 	add.w	r2, r7, #8
 80059a6:	4413      	add	r3, r2
 80059a8:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80059ac:	4619      	mov	r1, r3
 80059ae:	2038      	movs	r0, #56	@ 0x38
 80059b0:	f002 fe1f 	bl	80085f2 <VL53L1_i2c_decode_debug_results>
 80059b4:	4603      	mov	r3, r0
 80059b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 80059ba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80059be:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d017      	beq.n	80059f8 <VL53L1_get_measurement_results+0x140>
 80059c8:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d113      	bne.n	80059f8 <VL53L1_get_measurement_results+0x140>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80059d0:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80059d4:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 80059d8:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80059dc:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_core_results(
 80059e0:	f107 0208 	add.w	r2, r7, #8
 80059e4:	4413      	add	r3, r2
 80059e6:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80059ea:	4619      	mov	r1, r3
 80059ec:	2021      	movs	r0, #33	@ 0x21
 80059ee:	f002 fd9f 	bl	8008530 <VL53L1_i2c_decode_core_results>
 80059f2:	4603      	mov	r3, r0
 80059f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 80059f8:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d110      	bne.n	8005a22 <VL53L1_get_measurement_results+0x16a>

		i2c_buffer_offset_bytes = 0;
 8005a00:	2300      	movs	r3, #0
 8005a02:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8005a06:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_system_results(
 8005a0a:	f107 0208 	add.w	r2, r7, #8
 8005a0e:	4413      	add	r3, r2
 8005a10:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8005a14:	4619      	mov	r1, r3
 8005a16:	202c      	movs	r0, #44	@ 0x2c
 8005a18:	f002 fc94 	bl	8008344 <VL53L1_i2c_decode_system_results>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8005a22:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	607a      	str	r2, [r7, #4]
 8005a3c:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8005a4c:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8005a52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d106      	bne.n	8005a68 <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 8005a5a:	7afb      	ldrb	r3, [r7, #11]
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f7ff ff2a 	bl	80058b8 <VL53L1_get_measurement_results>
 8005a64:	4603      	mov	r3, r0
 8005a66:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 8005a68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10c      	bne.n	8005a8a <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 8005a76:	4618      	mov	r0, r3
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	f503 71e7 	add.w	r1, r3, #462	@ 0x1ce
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	f503 7222 	add.w	r2, r3, #648	@ 0x288
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f000 f86b 	bl	8005b60 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d12d      	bne.n	8005af0 <VL53L1_get_device_results+0xc0>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 8005a94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10e      	bne.n	8005aba <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d109      	bne.n	8005aba <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f001 fe50 	bl	800774c <VL53L1_low_power_auto_setup_manual_calibration>
 8005aac:	4603      	mov	r3, r0
 8005aae:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
 8005ab8:	e00c      	b.n	8005ad4 <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 8005aba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d108      	bne.n	8005ad4 <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d103      	bne.n	8005ad4 <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
		}

		/* perform DSS calculation. This can be performed every range */
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 8005ada:	2bff      	cmp	r3, #255	@ 0xff
 8005adc:	d008      	beq.n	8005af0 <VL53L1_get_device_results+0xc0>
 8005ade:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d104      	bne.n	8005af0 <VL53L1_get_device_results+0xc0>
			(status == VL53L1_ERROR_NONE)) {
			status = VL53L1_low_power_auto_update_DSS(
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f001 fe75 	bl	80077d6 <VL53L1_low_power_auto_update_DSS>
 8005aec:	4603      	mov	r3, r0
 8005aee:	77fb      	strb	r3, [r7, #31]
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 8005b04:	2284      	movs	r2, #132	@ 0x84
 8005b06:	6939      	ldr	r1, [r7, #16]
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f003 fd88 	bl	800961e <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 8005b0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d104      	bne.n	8005b20 <VL53L1_get_device_results+0xf0>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f001 f8ec 	bl	8006cf4 <VL53L1_check_ll_driver_rd_state>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8005b20:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3720      	adds	r7, #32
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	460b      	mov	r3, r1
 8005b36:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8005b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d107      	bne.n	8005b54 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 8005b44:	78fb      	ldrb	r3, [r7, #3]
 8005b46:	2203      	movs	r2, #3
 8005b48:	4619      	mov	r1, r3
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7ff fc18 	bl	8005380 <VL53L1_init_and_start_range>
 8005b50:	4603      	mov	r3, r0
 8005b52:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8005b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b089      	sub	sp, #36	@ 0x24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
 8005b6c:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 8005b72:	2300      	movs	r3, #0
 8005b74:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 8005b76:	2300      	movs	r3, #0
 8005b78:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	78da      	ldrb	r2, [r3, #3]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	3304      	adds	r3, #4
 8005b86:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 8005b88:	2300      	movs	r3, #0
 8005b8a:	77fb      	strb	r3, [r7, #31]
 8005b8c:	e0d0      	b.n	8005d30 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	7ffa      	ldrb	r2, [r7, #31]
 8005b92:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	2200      	movs	r2, #0
 8005b98:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	78db      	ldrb	r3, [r3, #3]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10a      	bne.n	8005bb8 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	785b      	ldrb	r3, [r3, #1]
 8005ba6:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8005baa:	2b09      	cmp	r3, #9
 8005bac:	d104      	bne.n	8005bb8 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	2213      	movs	r2, #19
 8005bb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bb6:	e007      	b.n	8005bc8 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	785b      	ldrb	r3, [r3, #1]
 8005bbc:	f003 031f 	and.w	r3, r3, #31
 8005bc0:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		}

		switch (i) {
 8005bc8:	7ffb      	ldrb	r3, [r7, #31]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d05d      	beq.n	8005c8e <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 8005bd2:	e0a7      	b.n	8005d24 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	789b      	ldrb	r3, [r3, #2]
 8005bd8:	2b07      	cmp	r3, #7
 8005bda:	d104      	bne.n	8005be6 <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	821a      	strh	r2, [r3, #16]
 8005be4:	e00c      	b.n	8005c00 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	789b      	ldrb	r3, [r3, #2]
 8005bea:	2b08      	cmp	r3, #8
 8005bec:	d104      	bne.n	8005bf8 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	821a      	strh	r2, [r3, #16]
 8005bf6:	e003      	b.n	8005c00 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	859a      	strh	r2, [r3, #44]	@ 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	85da      	strh	r2, [r3, #46]	@ 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	861a      	strh	r2, [r3, #48]	@ 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	895b      	ldrh	r3, [r3, #10]
 8005c1c:	015b      	lsls	r3, r3, #5
 8005c1e:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c26:	d302      	bcc.n	8005c2e <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 8005c28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005c2c:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	871a      	strh	r2, [r3, #56]	@ 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	875a      	strh	r2, [r3, #58]	@ 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 8005c42:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	fb02 f303 	mul.w	r3, r2, r3
 8005c4c:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c54:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	da01      	bge.n	8005c60 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 8005c5c:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8005c60:	12db      	asrs	r3, r3, #11
 8005c62:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	b21a      	sxth	r2, r3
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	879a      	strh	r2, [r3, #60]	@ 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	621a      	str	r2, [r3, #32]

			break;
 8005c8c:	e04a      	b.n	8005d24 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	859a      	strh	r2, [r3, #44]	@ 0x2c
			pdata->avg_signal_count_rate_mcps =
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ca4:	85da      	strh	r2, [r3, #46]	@ 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	861a      	strh	r2, [r3, #48]	@ 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	8bdb      	ldrh	r3, [r3, #30]
 8005cb2:	015b      	lsls	r3, r3, #5
 8005cb4:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cbc:	d302      	bcc.n	8005cc4 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 8005cbe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005cc2:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	871a      	strh	r2, [r3, #56]	@ 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	875a      	strh	r2, [r3, #58]	@ 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
			range_mm =
 8005cd8:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	fb02 f303 	mul.w	r3, r2, r3
 8005ce2:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cea:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	da01      	bge.n	8005cf6 <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 8005cf2:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8005cf6:	12db      	asrs	r3, r3, #11
 8005cf8:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	b21a      	sxth	r2, r3
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	879a      	strh	r2, [r3, #60]	@ 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	621a      	str	r2, [r3, #32]

			break;
 8005d22:	bf00      	nop
		}

		pdata++;
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	3340      	adds	r3, #64	@ 0x40
 8005d28:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 8005d2a:	7ffb      	ldrb	r3, [r7, #31]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	77fb      	strb	r3, [r7, #31]
 8005d30:	7ffb      	ldrb	r3, [r7, #31]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	f67f af2b 	bls.w	8005b8e <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	785b      	ldrb	r3, [r3, #1]
 8005d42:	f003 031f 	and.w	r3, r3, #31
 8005d46:	2b11      	cmp	r3, #17
 8005d48:	bf8c      	ite	hi
 8005d4a:	2201      	movhi	r2, #1
 8005d4c:	2200      	movls	r2, #0
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	2a00      	cmp	r2, #0
 8005d52:	d117      	bne.n	8005d84 <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
 8005d54:	4a0e      	ldr	r2, [pc, #56]	@ (8005d90 <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 8005d56:	fa22 f303 	lsr.w	r3, r2, r3
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	bf14      	ite	ne
 8005d62:	2301      	movne	r3, #1
 8005d64:	2300      	moveq	r3, #0
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00b      	beq.n	8005d84 <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	785b      	ldrb	r3, [r3, #1]
 8005d70:	f003 031f 	and.w	r3, r3, #31
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	break;
 8005d82:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8005d84:	bf00      	nop
 8005d86:	3724      	adds	r7, #36	@ 0x24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	0002200e 	.word	0x0002200e

08005d94 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	607a      	str	r2, [r7, #4]
 8005da0:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005da2:	2300      	movs	r3, #0
 8005da4:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8005daa:	897b      	ldrh	r3, [r7, #10]
 8005dac:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8005db0:	2b38      	cmp	r3, #56	@ 0x38
 8005db2:	f200 8204 	bhi.w	80061be <VL53L1_get_tuning_parm+0x42a>
 8005db6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dbc <VL53L1_get_tuning_parm+0x28>)
 8005db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dbc:	08005ea1 	.word	0x08005ea1
 8005dc0:	08005eaf 	.word	0x08005eaf
 8005dc4:	08005ebd 	.word	0x08005ebd
 8005dc8:	08005ecb 	.word	0x08005ecb
 8005dcc:	08005ed9 	.word	0x08005ed9
 8005dd0:	08005ee7 	.word	0x08005ee7
 8005dd4:	08005ef5 	.word	0x08005ef5
 8005dd8:	08005f03 	.word	0x08005f03
 8005ddc:	08005f11 	.word	0x08005f11
 8005de0:	08005f1f 	.word	0x08005f1f
 8005de4:	08005f2d 	.word	0x08005f2d
 8005de8:	08005f3b 	.word	0x08005f3b
 8005dec:	08005f49 	.word	0x08005f49
 8005df0:	08005f57 	.word	0x08005f57
 8005df4:	08005f65 	.word	0x08005f65
 8005df8:	08005f73 	.word	0x08005f73
 8005dfc:	08005f81 	.word	0x08005f81
 8005e00:	08005f8f 	.word	0x08005f8f
 8005e04:	08005f9d 	.word	0x08005f9d
 8005e08:	08005fab 	.word	0x08005fab
 8005e0c:	08005fb9 	.word	0x08005fb9
 8005e10:	08005fc7 	.word	0x08005fc7
 8005e14:	08005fd5 	.word	0x08005fd5
 8005e18:	08005fe3 	.word	0x08005fe3
 8005e1c:	08005ff1 	.word	0x08005ff1
 8005e20:	08005fff 	.word	0x08005fff
 8005e24:	0800600d 	.word	0x0800600d
 8005e28:	0800601b 	.word	0x0800601b
 8005e2c:	08006029 	.word	0x08006029
 8005e30:	08006037 	.word	0x08006037
 8005e34:	08006045 	.word	0x08006045
 8005e38:	08006053 	.word	0x08006053
 8005e3c:	08006061 	.word	0x08006061
 8005e40:	0800606f 	.word	0x0800606f
 8005e44:	0800607d 	.word	0x0800607d
 8005e48:	0800608b 	.word	0x0800608b
 8005e4c:	08006099 	.word	0x08006099
 8005e50:	080060a7 	.word	0x080060a7
 8005e54:	080060b5 	.word	0x080060b5
 8005e58:	080060c3 	.word	0x080060c3
 8005e5c:	080060d1 	.word	0x080060d1
 8005e60:	080060df 	.word	0x080060df
 8005e64:	080060ed 	.word	0x080060ed
 8005e68:	080060fb 	.word	0x080060fb
 8005e6c:	08006109 	.word	0x08006109
 8005e70:	08006117 	.word	0x08006117
 8005e74:	08006125 	.word	0x08006125
 8005e78:	08006133 	.word	0x08006133
 8005e7c:	08006141 	.word	0x08006141
 8005e80:	0800614f 	.word	0x0800614f
 8005e84:	0800615d 	.word	0x0800615d
 8005e88:	0800616b 	.word	0x0800616b
 8005e8c:	08006179 	.word	0x08006179
 8005e90:	08006187 	.word	0x08006187
 8005e94:	08006195 	.word	0x08006195
 8005e98:	080061a3 	.word	0x080061a3
 8005e9c:	080061b1 	.word	0x080061b1

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8005ea6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	601a      	str	r2, [r3, #0]
	break;
 8005eac:	e18e      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8005eb4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	601a      	str	r2, [r3, #0]
	break;
 8005eba:	e187      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 8005ec2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	601a      	str	r2, [r3, #0]
	break;
 8005ec8:	e180      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8005ed0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	601a      	str	r2, [r3, #0]
	break;
 8005ed6:	e179      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8005ede:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	601a      	str	r2, [r3, #0]
	break;
 8005ee4:	e172      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 8005eec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	601a      	str	r2, [r3, #0]
	break;
 8005ef2:	e16b      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8005efa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	601a      	str	r2, [r3, #0]
	break;
 8005f00:	e164      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8005f08:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	601a      	str	r2, [r3, #0]
	break;
 8005f0e:	e15d      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	@ 0xb6
 8005f16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	601a      	str	r2, [r3, #0]
	break;
 8005f1c:	e156      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8005f24:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	601a      	str	r2, [r3, #0]
	break;
 8005f2a:	e14f      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8005f32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	601a      	str	r2, [r3, #0]
	break;
 8005f38:	e148      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8005f40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	601a      	str	r2, [r3, #0]
	break;
 8005f46:	e141      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 8005f4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	601a      	str	r2, [r3, #0]
	break;
 8005f54:	e13a      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 8005f5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	601a      	str	r2, [r3, #0]
	break;
 8005f62:	e133      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8005f6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	601a      	str	r2, [r3, #0]
	break;
 8005f70:	e12c      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8005f78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	601a      	str	r2, [r3, #0]
	break;
 8005f7e:	e125      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f893 30c4 	ldrb.w	r3, [r3, #196]	@ 0xc4
 8005f86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	601a      	str	r2, [r3, #0]
	break;
 8005f8c:	e11e      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f893 3140 	ldrb.w	r3, [r3, #320]	@ 0x140
 8005f94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	601a      	str	r2, [r3, #0]
	break;
 8005f9a:	e117      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 8005fa2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	601a      	str	r2, [r3, #0]
	break;
 8005fa8:	e110      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 8005fb0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	601a      	str	r2, [r3, #0]
	break;
 8005fb6:	e109      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8005fbe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	601a      	str	r2, [r3, #0]
	break;
 8005fc4:	e102      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	@ 0x13e
 8005fcc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	601a      	str	r2, [r3, #0]
	break;
 8005fd2:	e0fb      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 8005fda:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	601a      	str	r2, [r3, #0]
	break;
 8005fe0:	e0f4      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f893 30ab 	ldrb.w	r3, [r3, #171]	@ 0xab
 8005fe8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	601a      	str	r2, [r3, #0]
	break;
 8005fee:	e0ed      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8005ff6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	601a      	str	r2, [r3, #0]
	break;
 8005ffc:	e0e6      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8006004:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	601a      	str	r2, [r3, #0]
	break;
 800600a:	e0df      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 8006012:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	601a      	str	r2, [r3, #0]
	break;
 8006018:	e0d8      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 8006020:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	601a      	str	r2, [r3, #0]
	break;
 8006026:	e0d1      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f893 30c6 	ldrb.w	r3, [r3, #198]	@ 0xc6
 800602e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	601a      	str	r2, [r3, #0]
	break;
 8006034:	e0ca      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800603c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	601a      	str	r2, [r3, #0]
	break;
 8006042:	e0c3      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800604a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	601a      	str	r2, [r3, #0]
	break;
 8006050:	e0bc      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8006058:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	601a      	str	r2, [r3, #0]
	break;
 800605e:	e0b5      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006066:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	601a      	str	r2, [r3, #0]
	break;
 800606c:	e0ae      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f8b3 3118 	ldrh.w	r3, [r3, #280]	@ 0x118
 8006074:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	601a      	str	r2, [r3, #0]
	break;
 800607a:	e0a7      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 8006082:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	601a      	str	r2, [r3, #0]
	break;
 8006088:	e0a0      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 8006090:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	601a      	str	r2, [r3, #0]
	break;
 8006096:	e099      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 800609e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	601a      	str	r2, [r3, #0]
	break;
 80060a4:	e092      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80060ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	601a      	str	r2, [r3, #0]
	break;
 80060b2:	e08b      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80060ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	601a      	str	r2, [r3, #0]
	break;
 80060c0:	e084      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80060c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	601a      	str	r2, [r3, #0]
	break;
 80060ce:	e07d      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 80060d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	601a      	str	r2, [r3, #0]
	break;
 80060dc:	e076      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 80060e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	601a      	str	r2, [r3, #0]
	break;
 80060ea:	e06f      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	f893 3156 	ldrb.w	r3, [r3, #342]	@ 0x156
 80060f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	601a      	str	r2, [r3, #0]
	break;
 80060f8:	e068      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f893 3121 	ldrb.w	r3, [r3, #289]	@ 0x121
 8006100:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	601a      	str	r2, [r3, #0]
	break;
 8006106:	e061      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 800610e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	601a      	str	r2, [r3, #0]
	break;
 8006114:	e05a      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f8b3 3128 	ldrh.w	r3, [r3, #296]	@ 0x128
 800611c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	601a      	str	r2, [r3, #0]
	break;
 8006122:	e053      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	@ 0xca
 800612a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	601a      	str	r2, [r3, #0]
	break;
 8006130:	e04c      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 8006138:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	601a      	str	r2, [r3, #0]
	break;
 800613e:	e045      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006146:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	601a      	str	r2, [r3, #0]
	break;
 800614c:	e03e      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006154:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	601a      	str	r2, [r3, #0]
	break;
 800615a:	e037      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006162:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	601a      	str	r2, [r3, #0]
	break;
 8006168:	e030      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006170:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	601a      	str	r2, [r3, #0]
	break;
 8006176:	e029      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800617e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	601a      	str	r2, [r3, #0]
	break;
 8006184:	e022      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800618c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	601a      	str	r2, [r3, #0]
	break;
 8006192:	e01b      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 800619a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	601a      	str	r2, [r3, #0]
	break;
 80061a0:	e014      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	601a      	str	r2, [r3, #0]
	break;
 80061ae:	e00d      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80061b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	601a      	str	r2, [r3, #0]
	break;
 80061bc:	e006      	b.n	80061cc <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80061c4:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 80061c6:	23fc      	movs	r3, #252	@ 0xfc
 80061c8:	75fb      	strb	r3, [r7, #23]
	break;
 80061ca:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80061cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	371c      	adds	r7, #28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80061e4:	2300      	movs	r3, #0
 80061e6:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2208      	movs	r2, #8
 80061ec:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	220b      	movs	r2, #11
 80061f2:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80061fa:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006202:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800620a:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8006212:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006214:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800622c:	2300      	movs	r3, #0
 800622e:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2212      	movs	r2, #18
 800623a:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	220f      	movs	r2, #15
 8006240:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2202      	movs	r2, #2
 8006246:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 800624e:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	220c      	movs	r2, #12
 8006254:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006256:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b084      	sub	sp, #16
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
 800626e:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006270:	2300      	movs	r3, #0
 8006272:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	895b      	ldrh	r3, [r3, #10]
 8006278:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	895b      	ldrh	r3, [r3, #10]
 8006296:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	2200      	movs	r2, #0
 80062b4:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2240      	movs	r2, #64	@ 0x40
 80062ba:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10d      	bne.n	80062e0 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d108      	bne.n	80062e0 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d103      	bne.n	80062e0 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	2200      	movs	r2, #0
 80062dc:	741a      	strb	r2, [r3, #16]
 80062de:	e002      	b.n	80062e6 <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2201      	movs	r2, #1
 80062e4:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 80062e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d114      	bne.n	8006318 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d110      	bne.n	8006318 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	6818      	ldr	r0, [r3, #0]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	7d1b      	ldrb	r3, [r3, #20]
 800630a:	f000 ff99 	bl	8007240 <VL53L1_calc_range_ignore_threshold>
 800630e:	4603      	mov	r3, r0
 8006310:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	82da      	strh	r2, [r3, #22]
 8006316:	e002      	b.n	800631e <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	2200      	movs	r2, #0
 800631c:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800631e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800632a:	b480      	push	{r7}
 800632c:	b085      	sub	sp, #20
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006332:	2300      	movs	r3, #0
 8006334:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 800633c:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006344:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 800634c:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8006354:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2208      	movs	r2, #8
 800635a:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2228      	movs	r2, #40	@ 0x28
 8006360:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2209      	movs	r2, #9
 8006366:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006368:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006380:	2300      	movs	r3, #0
 8006382:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f248 0203 	movw	r2, #32771	@ 0x8003
 800638a:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f248 0201 	movw	r2, #32769	@ 0x8001
 8006392:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f248 0241 	movw	r2, #32833	@ 0x8041
 800639a:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	220e      	movs	r2, #14
 80063a0:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	220a      	movs	r2, #10
 80063a6:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2206      	movs	r2, #6
 80063ac:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	220e      	movs	r2, #14
 80063b2:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	220a      	movs	r2, #10
 80063b8:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2206      	movs	r2, #6
 80063be:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2202      	movs	r2, #2
 80063c4:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2221      	movs	r2, #33	@ 0x21
 80063ca:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80063de:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80063e6:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80063ee:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	22c0      	movs	r2, #192	@ 0xc0
 80063f4:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	22c0      	movs	r2, #192	@ 0xc0
 80063fa:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	22c0      	movs	r2, #192	@ 0xc0
 8006400:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2208      	movs	r2, #8
 8006406:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2210      	movs	r2, #16
 800640c:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2202      	movs	r2, #2
 800641a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2202      	movs	r2, #2
 800642a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 800643c:	84da      	strh	r2, [r3, #38]	@ 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006444:	851a      	strh	r2, [r3, #40]	@ 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f248 0230 	movw	r2, #32816	@ 0x8030
 800644c:	62da      	str	r2, [r3, #44]	@ 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006454:	631a      	str	r2, [r3, #48]	@ 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800645c:	635a      	str	r2, [r3, #52]	@ 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006464:	639a      	str	r2, [r3, #56]	@ 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f24f 6218 	movw	r2, #63000	@ 0xf618
 800646c:	641a      	str	r2, [r3, #64]	@ 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8006474:	645a      	str	r2, [r3, #68]	@ 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	63da      	str	r2, [r3, #60]	@ 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8006482:	649a      	str	r2, [r3, #72]	@ 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8006484:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
 80064a0:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80064a2:	2300      	movs	r3, #0
 80064a4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80064ac:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2211      	movs	r2, #17
 80064ee:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2202      	movs	r2, #2
 80064f4:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2202      	movs	r2, #2
 8006500:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2208      	movs	r2, #8
 8006506:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800650e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006510:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8006516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006518:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800651e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006520:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2201      	movs	r2, #1
 800652c:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	22ff      	movs	r2, #255	@ 0xff
 8006544:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8006546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006548:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800654e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006550:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2200      	movs	r2, #0
 800656c:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2200      	movs	r2, #0
 8006572:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2220      	movs	r2, #32
 8006578:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	220b      	movs	r2, #11
 800657e:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8006580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006582:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2202      	movs	r2, #2
 800658c:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	220d      	movs	r2, #13
 8006592:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8006594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006596:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2200      	movs	r2, #0
 80065a0:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	2201      	movs	r2, #1
 80065a6:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2200      	movs	r2, #0
 80065ac:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2200      	movs	r2, #0
 80065b2:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	f44f 420c 	mov.w	r2, #35840	@ 0x8c00
 80065ba:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	2200      	movs	r2, #0
 80065c0:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2238      	movs	r2, #56	@ 0x38
 80065c6:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	22ff      	movs	r2, #255	@ 0xff
 80065cc:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	2201      	movs	r2, #1
 80065d2:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	221a      	movs	r2, #26
 80065de:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2220      	movs	r2, #32
 80065ea:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	22cc      	movs	r2, #204	@ 0xcc
 80065f6:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	220b      	movs	r2, #11
 80065fc:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	22f5      	movs	r2, #245	@ 0xf5
 8006608:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2209      	movs	r2, #9
 800660e:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8006610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006612:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8006618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661a:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2208      	movs	r2, #8
 8006624:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2278      	movs	r2, #120	@ 0x78
 800662a:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2201      	movs	r2, #1
 800663c:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2200      	movs	r2, #0
 8006642:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2200      	movs	r2, #0
 8006648:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2200      	movs	r2, #0
 800664e:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8006650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006652:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
	pdynamic->system__seed_config =
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	220b      	movs	r2, #11
 800665e:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	2209      	movs	r2, #9
 8006664:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800666e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006670:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2201      	movs	r2, #1
 800667a:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800667c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667e:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
	pdynamic->sd_config__first_order_select =
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8006686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006688:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
	pdynamic->sd_config__quantifier         =
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	22c7      	movs	r2, #199	@ 0xc7
 8006694:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	22ff      	movs	r2, #255	@ 0xff
 800669a:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	22db      	movs	r2, #219	@ 0xdb
 80066a0:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2202      	movs	r2, #2
 80066a6:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 80066a8:	6a3b      	ldr	r3, [r7, #32]
 80066aa:	2200      	movs	r2, #0
 80066ac:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	2201      	movs	r2, #1
 80066b2:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	2201      	movs	r2, #1
 80066b8:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	2221      	movs	r2, #33	@ 0x21
 80066be:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 80066c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	371c      	adds	r7, #28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af02      	add	r7, sp, #8
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
 80066dc:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80066de:	2300      	movs	r3, #0
 80066e0:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80066e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e4:	9301      	str	r3, [sp, #4]
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	68b9      	ldr	r1, [r7, #8]
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f7ff fecf 	bl	8006494 <VL53L1_preset_mode_standard_ranging>
 80066f6:	4603      	mov	r3, r0
 80066f8:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80066fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d121      	bne.n	8006746 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2207      	movs	r2, #7
 8006706:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2205      	movs	r2, #5
 800670c:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800670e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006710:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 8006716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006718:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2208      	movs	r2, #8
 8006722:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2238      	movs	r2, #56	@ 0x38
 8006728:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2207      	movs	r2, #7
 800672e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2205      	movs	r2, #5
 8006734:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8006736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006738:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800673e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006740:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8006746:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b088      	sub	sp, #32
 8006756:	af02      	add	r7, sp, #8
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	607a      	str	r2, [r7, #4]
 800675e:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006760:	2300      	movs	r3, #0
 8006762:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8006764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006766:	9301      	str	r3, [sp, #4]
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	68b9      	ldr	r1, [r7, #8]
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f7ff fe8e 	bl	8006494 <VL53L1_preset_mode_standard_ranging>
 8006778:	4603      	mov	r3, r0
 800677a:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800677c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d121      	bne.n	80067c8 <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	220f      	movs	r2, #15
 8006788:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	220d      	movs	r2, #13
 800678e:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8006790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006792:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8006798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679a:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2208      	movs	r2, #8
 80067a4:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	22b8      	movs	r2, #184	@ 0xb8
 80067aa:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	220f      	movs	r2, #15
 80067b0:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	220d      	movs	r2, #13
 80067b6:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 80067b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ba:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 80067c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c2:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 80067c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3718      	adds	r7, #24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b088      	sub	sp, #32
 80067d8:	af02      	add	r7, sp, #8
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
 80067e0:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80067e2:	2300      	movs	r3, #0
 80067e4:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80067e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e8:	9301      	str	r3, [sp, #4]
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	68b9      	ldr	r1, [r7, #8]
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f7ff fe4d 	bl	8006494 <VL53L1_preset_mode_standard_ranging>
 80067fa:	4603      	mov	r3, r0
 80067fc:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80067fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d105      	bne.n	8006812 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	2202      	movs	r2, #2
 800680a:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	223b      	movs	r2, #59	@ 0x3b
 8006810:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8006812:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b088      	sub	sp, #32
 8006822:	af02      	add	r7, sp, #8
 8006824:	60f8      	str	r0, [r7, #12]
 8006826:	60b9      	str	r1, [r7, #8]
 8006828:	607a      	str	r2, [r7, #4]
 800682a:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800682c:	2300      	movs	r3, #0
 800682e:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8006830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006832:	9301      	str	r3, [sp, #4]
 8006834:	6a3b      	ldr	r3, [r7, #32]
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	68b9      	ldr	r1, [r7, #8]
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f7ff fe28 	bl	8006494 <VL53L1_preset_mode_standard_ranging>
 8006844:	4603      	mov	r3, r0
 8006846:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8006848:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d105      	bne.n	800685c <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2202      	movs	r2, #2
 8006854:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	225b      	movs	r2, #91	@ 0x5b
 800685a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800685c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3718      	adds	r7, #24
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b088      	sub	sp, #32
 800686c:	af02      	add	r7, sp, #8
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
 8006874:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006876:	2300      	movs	r3, #0
 8006878:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687c:	9301      	str	r3, [sp, #4]
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	68b9      	ldr	r1, [r7, #8]
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f7ff fe03 	bl	8006494 <VL53L1_preset_mode_standard_ranging>
 800688e:	4603      	mov	r3, r0
 8006890:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8006892:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d11a      	bne.n	80068d0 <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2200      	movs	r2, #0
 800689e:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	22b1      	movs	r2, #177	@ 0xb1
 80068aa:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	22d4      	movs	r2, #212	@ 0xd4
 80068b6:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80068be:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80068c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c2:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80068ca:	6a3b      	ldr	r3, [r7, #32]
 80068cc:	2240      	movs	r2, #64	@ 0x40
 80068ce:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80068d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3718      	adds	r7, #24
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b088      	sub	sp, #32
 80068e0:	af02      	add	r7, sp, #8
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80068ea:	2300      	movs	r3, #0
 80068ec:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 80068ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f0:	9301      	str	r3, [sp, #4]
 80068f2:	6a3b      	ldr	r3, [r7, #32]
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	68b9      	ldr	r1, [r7, #8]
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f7ff fee7 	bl	80066d0 <VL53L1_preset_mode_standard_ranging_short_range>
 8006902:	4603      	mov	r3, r0
 8006904:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8006906:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d11a      	bne.n	8006944 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2200      	movs	r2, #0
 8006912:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2284      	movs	r2, #132	@ 0x84
 800691e:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	22b1      	movs	r2, #177	@ 0xb1
 800692a:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006932:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8006934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006936:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	2240      	movs	r2, #64	@ 0x40
 8006942:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8006944:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3718      	adds	r7, #24
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b088      	sub	sp, #32
 8006954:	af02      	add	r7, sp, #8
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800695e:	2300      	movs	r3, #0
 8006960:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 8006962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006964:	9301      	str	r3, [sp, #4]
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	68b9      	ldr	r1, [r7, #8]
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f7ff feee 	bl	8006752 <VL53L1_preset_mode_standard_ranging_long_range>
 8006976:	4603      	mov	r3, r0
 8006978:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800697a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d11a      	bne.n	80069b8 <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2200      	movs	r2, #0
 8006986:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2297      	movs	r2, #151	@ 0x97
 8006992:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	22b1      	movs	r2, #177	@ 0xb1
 800699e:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80069a6:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80069a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069aa:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80069b2:	6a3b      	ldr	r3, [r7, #32]
 80069b4:	2240      	movs	r2, #64	@ 0x40
 80069b6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80069b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3718      	adds	r7, #24
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b088      	sub	sp, #32
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80069d2:	2300      	movs	r3, #0
 80069d4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 80069d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d8:	9301      	str	r3, [sp, #4]
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	68b9      	ldr	r1, [r7, #8]
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f7ff ff3f 	bl	8006868 <VL53L1_preset_mode_timed_ranging>
 80069ea:	4603      	mov	r3, r0
 80069ec:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 80069ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d106      	bne.n	8006a04 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 80069f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	68b8      	ldr	r0, [r7, #8]
 80069fc:	f000 fe86 	bl	800770c <VL53L1_config_low_power_auto_mode>
 8006a00:	4603      	mov	r3, r0
 8006a02:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8006a04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3718      	adds	r7, #24
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b088      	sub	sp, #32
 8006a14:	af02      	add	r7, sp, #8
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
 8006a1c:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 8006a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a24:	9301      	str	r3, [sp, #4]
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	68b9      	ldr	r1, [r7, #8]
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f7ff ff53 	bl	80068dc <VL53L1_preset_mode_timed_ranging_short_range>
 8006a36:	4603      	mov	r3, r0
 8006a38:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8006a3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d106      	bne.n	8006a50 <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8006a42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	68b8      	ldr	r0, [r7, #8]
 8006a48:	f000 fe60 	bl	800770c <VL53L1_config_low_power_auto_mode>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8006a50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3718      	adds	r7, #24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b088      	sub	sp, #32
 8006a60:	af02      	add	r7, sp, #8
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
 8006a68:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a70:	9301      	str	r3, [sp, #4]
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	68b9      	ldr	r1, [r7, #8]
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f7ff ff67 	bl	8006950 <VL53L1_preset_mode_timed_ranging_long_range>
 8006a82:	4603      	mov	r3, r0
 8006a84:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8006a86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d106      	bne.n	8006a9c <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8006a8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	68b8      	ldr	r0, [r7, #8]
 8006a94:	f000 fe3a 	bl	800770c <VL53L1_config_low_power_auto_mode>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8006a9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3718      	adds	r7, #24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b088      	sub	sp, #32
 8006aac:	af02      	add	r7, sp, #8
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
 8006ab4:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8006aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abc:	9301      	str	r3, [sp, #4]
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	68b9      	ldr	r1, [r7, #8]
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f7ff fce3 	bl	8006494 <VL53L1_preset_mode_standard_ranging>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8006ad2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d116      	bne.n	8006b08 <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2200      	movs	r2, #0
 8006ade:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	22b1      	movs	r2, #177	@ 0xb1
 8006aea:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	22d4      	movs	r2, #212	@ 0xd4
 8006af6:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8006af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afa:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	2210      	movs	r2, #16
 8006b06:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 8006b08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3718      	adds	r7, #24
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b088      	sub	sp, #32
 8006b18:	af02      	add	r7, sp, #8
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
 8006b20:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006b22:	2300      	movs	r3, #0
 8006b24:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8006b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b28:	9301      	str	r3, [sp, #4]
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	68b9      	ldr	r1, [r7, #8]
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f7ff fcad 	bl	8006494 <VL53L1_preset_mode_standard_ranging>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8006b3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d102      	bne.n	8006b4c <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 8006b4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3718      	adds	r7, #24
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	220a      	movs	r2, #10
 8006b78:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f44f 62e6 	mov.w	r2, #1840	@ 0x730
 8006b82:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006b84:	bf00      	nop
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	460b      	mov	r3, r1
 8006b9a:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	332c      	adds	r3, #44	@ 0x2c
 8006ba4:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	78fa      	ldrb	r2, [r7, #3]
 8006baa:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	78fa      	ldrb	r2, [r7, #3]
 8006bc2:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	71da      	strb	r2, [r3, #7]

}
 8006bd6:	bf00      	nop
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
	...

08006be4 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 8006bec:	2300      	movs	r3, #0
 8006bee:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	332c      	adds	r3, #44	@ 0x2c
 8006bf8:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8006c00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10c      	bne.n	8006c22 <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2203      	movs	r2, #3
 8006c0c:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2202      	movs	r2, #2
 8006c18:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	71da      	strb	r2, [r3, #7]
 8006c20:	e060      	b.n	8006ce4 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	795b      	ldrb	r3, [r3, #5]
 8006c26:	2bff      	cmp	r3, #255	@ 0xff
 8006c28:	d103      	bne.n	8006c32 <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2280      	movs	r2, #128	@ 0x80
 8006c2e:	715a      	strb	r2, [r3, #5]
 8006c30:	e005      	b.n	8006c3e <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	795b      	ldrb	r3, [r3, #5]
 8006c36:	3301      	adds	r3, #1
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	799b      	ldrb	r3, [r3, #6]
 8006c42:	f083 0302 	eor.w	r3, r3, #2
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	791b      	ldrb	r3, [r3, #4]
 8006c50:	3b03      	subs	r3, #3
 8006c52:	2b05      	cmp	r3, #5
 8006c54:	d839      	bhi.n	8006cca <VL53L1_update_ll_driver_rd_state+0xe6>
 8006c56:	a201      	add	r2, pc, #4	@ (adr r2, 8006c5c <VL53L1_update_ll_driver_rd_state+0x78>)
 8006c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5c:	08006c75 	.word	0x08006c75
 8006c60:	08006ccb 	.word	0x08006ccb
 8006c64:	08006ccb 	.word	0x08006ccb
 8006c68:	08006c9f 	.word	0x08006c9f
 8006c6c:	08006cad 	.word	0x08006cad
 8006c70:	08006cb5 	.word	0x08006cb5

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	f893 31c6 	ldrb.w	r3, [r3, #454]	@ 0x1c6
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	dd03      	ble.n	8006c8a <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2206      	movs	r2, #6
 8006c86:	711a      	strb	r2, [r3, #4]
 8006c88:	e002      	b.n	8006c90 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2208      	movs	r2, #8
 8006c8e:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	71da      	strb	r2, [r3, #7]

		break;
 8006c9c:	e022      	b.n	8006ce4 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2208      	movs	r2, #8
 8006ca8:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8006caa:	e01b      	b.n	8006ce4 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2208      	movs	r2, #8
 8006cb0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8006cb2:	e017      	b.n	8006ce4 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	79db      	ldrb	r3, [r3, #7]
 8006cb8:	f083 0301 	eor.w	r3, r3, #1
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2208      	movs	r2, #8
 8006cc6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8006cc8:	e00c      	b.n	8006ce4 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2203      	movs	r2, #3
 8006cce:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2202      	movs	r2, #2
 8006cda:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	71da      	strb	r2, [r3, #7]

		break;
 8006ce2:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8006ce4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	371c      	adds	r7, #28
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b089      	sub	sp, #36	@ 0x24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	332c      	adds	r3, #44	@ 0x2c
 8006d08:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	f503 73e7 	add.w	r3, r3, #462	@ 0x1ce
 8006d10:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 8006d12:	2300      	movs	r3, #0
 8006d14:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 8006d22:	f003 031f 	and.w	r3, r3, #31
 8006d26:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	78db      	ldrb	r3, [r3, #3]
 8006d2c:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8006d32:	111b      	asrs	r3, r3, #4
 8006d34:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8006d42:	f003 0320 	and.w	r3, r3, #32
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d017      	beq.n	8006d7a <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	791b      	ldrb	r3, [r3, #4]
 8006d4e:	2b06      	cmp	r3, #6
 8006d50:	d105      	bne.n	8006d5e <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 8006d52:	7bfb      	ldrb	r3, [r7, #15]
 8006d54:	2b12      	cmp	r3, #18
 8006d56:	d010      	beq.n	8006d7a <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 8006d58:	23ef      	movs	r3, #239	@ 0xef
 8006d5a:	77fb      	strb	r3, [r7, #31]
 8006d5c:	e00d      	b.n	8006d7a <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	795b      	ldrb	r3, [r3, #5]
 8006d62:	7bba      	ldrb	r2, [r7, #14]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d001      	beq.n	8006d6c <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 8006d68:	23ee      	movs	r3, #238	@ 0xee
 8006d6a:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	799b      	ldrb	r3, [r3, #6]
 8006d70:	7b7a      	ldrb	r2, [r7, #13]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d001      	beq.n	8006d7a <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 8006d76:	23ed      	movs	r3, #237	@ 0xed
 8006d78:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 8006d7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3724      	adds	r7, #36	@ 0x24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b087      	sub	sp, #28
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8006d92:	2300      	movs	r3, #0
 8006d94:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	332c      	adds	r3, #44	@ 0x2c
 8006d9e:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8006da6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10c      	bne.n	8006dc8 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2203      	movs	r2, #3
 8006db2:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	70da      	strb	r2, [r3, #3]
 8006dc6:	e03e      	b.n	8006e46 <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	785b      	ldrb	r3, [r3, #1]
 8006dcc:	2bff      	cmp	r3, #255	@ 0xff
 8006dce:	d103      	bne.n	8006dd8 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2280      	movs	r2, #128	@ 0x80
 8006dd4:	705a      	strb	r2, [r3, #1]
 8006dd6:	e005      	b.n	8006de4 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	785b      	ldrb	r3, [r3, #1]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	789b      	ldrb	r3, [r3, #2]
 8006de8:	f083 0302 	eor.w	r3, r3, #2
 8006dec:	b2da      	uxtb	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	2b03      	cmp	r3, #3
 8006df8:	d002      	beq.n	8006e00 <VL53L1_update_ll_driver_cfg_state+0x76>
 8006dfa:	2b04      	cmp	r3, #4
 8006dfc:	d00e      	beq.n	8006e1c <VL53L1_update_ll_driver_cfg_state+0x92>
 8006dfe:	e015      	b.n	8006e2c <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	78db      	ldrb	r3, [r3, #3]
 8006e04:	f083 0301 	eor.w	r3, r3, #1
 8006e08:	b2da      	uxtb	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2201      	movs	r2, #1
 8006e12:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2204      	movs	r2, #4
 8006e18:	701a      	strb	r2, [r3, #0]
		break;
 8006e1a:	e014      	b.n	8006e46 <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	78db      	ldrb	r3, [r3, #3]
 8006e20:	f083 0301 	eor.w	r3, r3, #1
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	70da      	strb	r2, [r3, #3]

		break;
 8006e2a:	e00c      	b.n	8006e46 <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2203      	movs	r2, #3
 8006e30:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	70da      	strb	r2, [r3, #3]

		break;
 8006e44:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8006e46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	371c      	adds	r7, #28
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	7c1a      	ldrb	r2, [r3, #16]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	7c52      	ldrb	r2, [r2, #17]
 8006e70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	3302      	adds	r3, #2
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	7c92      	ldrb	r2, [r2, #18]
 8006e7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	3303      	adds	r3, #3
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	7cd2      	ldrb	r2, [r2, #19]
 8006e84:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	3304      	adds	r3, #4
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	7d12      	ldrb	r2, [r2, #20]
 8006e8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	3305      	adds	r3, #5
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	7d52      	ldrb	r2, [r2, #21]
 8006e98:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	3306      	adds	r3, #6
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	7d92      	ldrb	r2, [r2, #22]
 8006ea2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	3307      	adds	r3, #7
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	7dd2      	ldrb	r2, [r2, #23]
 8006eac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	3308      	adds	r3, #8
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	7e12      	ldrb	r2, [r2, #24]
 8006eb6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	3309      	adds	r3, #9
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	7e52      	ldrb	r2, [r2, #25]
 8006ec0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	330a      	adds	r3, #10
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	7e92      	ldrb	r2, [r2, #26]
 8006eca:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	330b      	adds	r3, #11
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	7ed2      	ldrb	r2, [r2, #27]
 8006ed4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	330c      	adds	r3, #12
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	7f12      	ldrb	r2, [r2, #28]
 8006ede:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	330d      	adds	r3, #13
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	7f52      	ldrb	r2, [r2, #29]
 8006ee8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	330e      	adds	r3, #14
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	7f92      	ldrb	r2, [r2, #30]
 8006ef2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	330f      	adds	r3, #15
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	7fd2      	ldrb	r2, [r2, #31]
 8006efc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	3310      	adds	r3, #16
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006f08:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	3311      	adds	r3, #17
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 8006f14:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	3312      	adds	r3, #18
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8006f20:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	3313      	adds	r3, #19
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8006f2c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	3314      	adds	r3, #20
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8006f38:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	3315      	adds	r3, #21
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 8006f44:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	3316      	adds	r3, #22
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8006f50:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	3317      	adds	r3, #23
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8006f5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	3318      	adds	r3, #24
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8006f68:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	3319      	adds	r3, #25
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 8006f74:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	331a      	adds	r3, #26
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8006f80:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	331b      	adds	r3, #27
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 8006f8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	331c      	adds	r3, #28
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8006f98:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	331d      	adds	r3, #29
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	f892 202d 	ldrb.w	r2, [r2, #45]	@ 0x2d
 8006fa4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	331e      	adds	r3, #30
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8006fb0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	331f      	adds	r3, #31
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 8006fbc:	701a      	strb	r2, [r3, #0]
}
 8006fbe:	bf00      	nop
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b085      	sub	sp, #20
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	603a      	str	r2, [r7, #0]
 8006fd4:	80fb      	strh	r3, [r7, #6]
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8006fe2:	88fb      	ldrh	r3, [r7, #6]
 8006fe4:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	81fb      	strh	r3, [r7, #14]
 8006fea:	e00e      	b.n	800700a <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8006fec:	88ba      	ldrh	r2, [r7, #4]
 8006fee:	89fb      	ldrh	r3, [r7, #14]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	89ba      	ldrh	r2, [r7, #12]
 8006ffa:	b2d2      	uxtb	r2, r2
 8006ffc:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8006ffe:	89bb      	ldrh	r3, [r7, #12]
 8007000:	0a1b      	lsrs	r3, r3, #8
 8007002:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 8007004:	89fb      	ldrh	r3, [r7, #14]
 8007006:	3301      	adds	r3, #1
 8007008:	81fb      	strh	r3, [r7, #14]
 800700a:	89fa      	ldrh	r2, [r7, #14]
 800700c:	88bb      	ldrh	r3, [r7, #4]
 800700e:	429a      	cmp	r2, r3
 8007010:	d3ec      	bcc.n	8006fec <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 8007012:	bf00      	nop
 8007014:	bf00      	nop
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	4603      	mov	r3, r0
 8007028:	6039      	str	r1, [r7, #0]
 800702a:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800702c:	2300      	movs	r3, #0
 800702e:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 8007030:	e00a      	b.n	8007048 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 8007032:	89fb      	ldrh	r3, [r7, #14]
 8007034:	021b      	lsls	r3, r3, #8
 8007036:	b21a      	sxth	r2, r3
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	1c59      	adds	r1, r3, #1
 800703c:	6039      	str	r1, [r7, #0]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	b21b      	sxth	r3, r3
 8007042:	4313      	orrs	r3, r2
 8007044:	b21b      	sxth	r3, r3
 8007046:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 8007048:	88fb      	ldrh	r3, [r7, #6]
 800704a:	1e5a      	subs	r2, r3, #1
 800704c:	80fa      	strh	r2, [r7, #6]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1ef      	bne.n	8007032 <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 8007052:	89fb      	ldrh	r3, [r7, #14]
}
 8007054:	4618      	mov	r0, r3
 8007056:	3714      	adds	r7, #20
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	4603      	mov	r3, r0
 8007068:	603a      	str	r2, [r7, #0]
 800706a:	80fb      	strh	r3, [r7, #6]
 800706c:	460b      	mov	r3, r1
 800706e:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8007070:	2300      	movs	r3, #0
 8007072:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 8007074:	2300      	movs	r3, #0
 8007076:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8007078:	88fb      	ldrh	r3, [r7, #6]
 800707a:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800707c:	2300      	movs	r3, #0
 800707e:	81fb      	strh	r3, [r7, #14]
 8007080:	e00f      	b.n	80070a2 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8007082:	88ba      	ldrh	r2, [r7, #4]
 8007084:	89fb      	ldrh	r3, [r7, #14]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	3b01      	subs	r3, #1
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	4413      	add	r3, r2
 800708e:	89ba      	ldrh	r2, [r7, #12]
 8007090:	b2d2      	uxtb	r2, r2
 8007092:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8007094:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007098:	121b      	asrs	r3, r3, #8
 800709a:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800709c:	89fb      	ldrh	r3, [r7, #14]
 800709e:	3301      	adds	r3, #1
 80070a0:	81fb      	strh	r3, [r7, #14]
 80070a2:	89fa      	ldrh	r2, [r7, #14]
 80070a4:	88bb      	ldrh	r3, [r7, #4]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d3eb      	bcc.n	8007082 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 80070aa:	bf00      	nop
 80070ac:	bf00      	nop
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	4603      	mov	r3, r0
 80070c0:	6039      	str	r1, [r7, #0]
 80070c2:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 80070c4:	2300      	movs	r3, #0
 80070c6:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	b25b      	sxtb	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	da0e      	bge.n	80070f0 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 80070d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80070d6:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 80070d8:	e00a      	b.n	80070f0 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 80070da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80070de:	021b      	lsls	r3, r3, #8
 80070e0:	b21a      	sxth	r2, r3
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	1c59      	adds	r1, r3, #1
 80070e6:	6039      	str	r1, [r7, #0]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	b21b      	sxth	r3, r3
 80070ec:	4313      	orrs	r3, r2
 80070ee:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 80070f0:	88fb      	ldrh	r3, [r7, #6]
 80070f2:	1e5a      	subs	r2, r3, #1
 80070f4:	80fa      	strh	r2, [r7, #6]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1ef      	bne.n	80070da <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 80070fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800710a:	b480      	push	{r7}
 800710c:	b087      	sub	sp, #28
 800710e:	af00      	add	r7, sp, #0
 8007110:	60f8      	str	r0, [r7, #12]
 8007112:	460b      	mov	r3, r1
 8007114:	607a      	str	r2, [r7, #4]
 8007116:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8007118:	2300      	movs	r3, #0
 800711a:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 800711c:	2300      	movs	r3, #0
 800711e:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 8007124:	2300      	movs	r3, #0
 8007126:	82fb      	strh	r3, [r7, #22]
 8007128:	e00e      	b.n	8007148 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800712a:	897a      	ldrh	r2, [r7, #10]
 800712c:	8afb      	ldrh	r3, [r7, #22]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	3b01      	subs	r3, #1
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	4413      	add	r3, r2
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	b2d2      	uxtb	r2, r2
 800713a:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	0a1b      	lsrs	r3, r3, #8
 8007140:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 8007142:	8afb      	ldrh	r3, [r7, #22]
 8007144:	3301      	adds	r3, #1
 8007146:	82fb      	strh	r3, [r7, #22]
 8007148:	8afa      	ldrh	r2, [r7, #22]
 800714a:	897b      	ldrh	r3, [r7, #10]
 800714c:	429a      	cmp	r2, r3
 800714e:	d3ec      	bcc.n	800712a <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 8007150:	bf00      	nop
 8007152:	bf00      	nop
 8007154:	371c      	adds	r7, #28
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800715e:	b480      	push	{r7}
 8007160:	b085      	sub	sp, #20
 8007162:	af00      	add	r7, sp, #0
 8007164:	4603      	mov	r3, r0
 8007166:	6039      	str	r1, [r7, #0]
 8007168:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 800716a:	2300      	movs	r3, #0
 800716c:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 800716e:	e007      	b.n	8007180 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	021a      	lsls	r2, r3, #8
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	1c59      	adds	r1, r3, #1
 8007178:	6039      	str	r1, [r7, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	4313      	orrs	r3, r2
 800717e:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 8007180:	88fb      	ldrh	r3, [r7, #6]
 8007182:	1e5a      	subs	r2, r3, #1
 8007184:	80fa      	strh	r2, [r7, #6]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1f2      	bne.n	8007170 <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 800718a:	68fb      	ldr	r3, [r7, #12]
}
 800718c:	4618      	mov	r0, r3
 800718e:	3714      	adds	r7, #20
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	4603      	mov	r3, r0
 80071a0:	6039      	str	r1, [r7, #0]
 80071a2:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 80071a4:	2300      	movs	r3, #0
 80071a6:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	b25b      	sxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	da0b      	bge.n	80071ca <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 80071b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071b6:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 80071b8:	e007      	b.n	80071ca <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	021a      	lsls	r2, r3, #8
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	1c59      	adds	r1, r3, #1
 80071c2:	6039      	str	r1, [r7, #0]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 80071ca:	88fb      	ldrh	r3, [r7, #6]
 80071cc:	1e5a      	subs	r2, r3, #1
 80071ce:	80fa      	strh	r2, [r7, #6]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1f2      	bne.n	80071ba <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 80071d4:	68fb      	ldr	r3, [r7, #12]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b086      	sub	sp, #24
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	4603      	mov	r3, r0
 80071ea:	460a      	mov	r2, r1
 80071ec:	80fb      	strh	r3, [r7, #6]
 80071ee:	4613      	mov	r3, r2
 80071f0:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 80071f2:	2300      	movs	r3, #0
 80071f4:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 80071f6:	2300      	movs	r3, #0
 80071f8:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 80071fa:	2300      	movs	r3, #0
 80071fc:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 80071fe:	88fb      	ldrh	r3, [r7, #6]
 8007200:	4618      	mov	r0, r3
 8007202:	f000 fb5f 	bl	80078c4 <VL53L1_calc_pll_period_us>
 8007206:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 8007208:	797b      	ldrb	r3, [r7, #5]
 800720a:	4618      	mov	r0, r3
 800720c:	f000 fb6e 	bl	80078ec <VL53L1_decode_vcsel_period>
 8007210:	4603      	mov	r3, r0
 8007212:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	4613      	mov	r3, r2
 8007218:	00db      	lsls	r3, r3, #3
 800721a:	4413      	add	r3, r2
 800721c:	021b      	lsls	r3, r3, #8
 800721e:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	099b      	lsrs	r3, r3, #6
 8007224:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 8007226:	7cfa      	ldrb	r2, [r7, #19]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	fb02 f303 	mul.w	r3, r2, r3
 800722e:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	099b      	lsrs	r3, r3, #6
 8007234:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 8007236:	68fb      	ldr	r3, [r7, #12]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8007240:	b480      	push	{r7}
 8007242:	b089      	sub	sp, #36	@ 0x24
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	4608      	mov	r0, r1
 800724a:	4611      	mov	r1, r2
 800724c:	461a      	mov	r2, r3
 800724e:	4603      	mov	r3, r0
 8007250:	817b      	strh	r3, [r7, #10]
 8007252:	460b      	mov	r3, r1
 8007254:	813b      	strh	r3, [r7, #8]
 8007256:	4613      	mov	r3, r2
 8007258:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 800725a:	2300      	movs	r3, #0
 800725c:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800725e:	2300      	movs	r3, #0
 8007260:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 8007262:	2300      	movs	r3, #0
 8007264:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 8007266:	2300      	movs	r3, #0
 8007268:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800726a:	2300      	movs	r3, #0
 800726c:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	011b      	lsls	r3, r3, #4
 8007272:	4a23      	ldr	r2, [pc, #140]	@ (8007300 <VL53L1_calc_range_ignore_threshold+0xc0>)
 8007274:	fb82 1203 	smull	r1, r2, r2, r3
 8007278:	1192      	asrs	r2, r2, #6
 800727a:	17db      	asrs	r3, r3, #31
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 8007280:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007284:	2b00      	cmp	r3, #0
 8007286:	da03      	bge.n	8007290 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8007288:	897b      	ldrh	r3, [r7, #10]
 800728a:	425b      	negs	r3, r3
 800728c:	b29b      	uxth	r3, r3
 800728e:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 8007290:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007294:	2b00      	cmp	r3, #0
 8007296:	da03      	bge.n	80072a0 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8007298:	893b      	ldrh	r3, [r7, #8]
 800729a:	425b      	negs	r3, r3
 800729c:	b29b      	uxth	r3, r3
 800729e:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 80072a0:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80072a4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80072a8:	4413      	add	r3, r2
 80072aa:	015b      	lsls	r3, r3, #5
 80072ac:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	4a13      	ldr	r2, [pc, #76]	@ (8007300 <VL53L1_calc_range_ignore_threshold+0xc0>)
 80072b2:	fb82 1203 	smull	r1, r2, r2, r3
 80072b6:	1192      	asrs	r2, r2, #6
 80072b8:	17db      	asrs	r3, r3, #31
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	4413      	add	r3, r2
 80072c4:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 80072c6:	79fa      	ldrb	r2, [r7, #7]
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	fb02 f303 	mul.w	r3, r2, r3
 80072ce:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	3310      	adds	r3, #16
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	da00      	bge.n	80072da <VL53L1_calc_range_ignore_threshold+0x9a>
 80072d8:	331f      	adds	r3, #31
 80072da:	115b      	asrs	r3, r3, #5
 80072dc:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072e4:	db03      	blt.n	80072ee <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 80072e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80072ea:	83fb      	strh	r3, [r7, #30]
 80072ec:	e001      	b.n	80072f2 <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 80072f2:	8bfb      	ldrh	r3, [r7, #30]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3724      	adds	r7, #36	@ 0x24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	10624dd3 	.word	0x10624dd3

08007304 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800730e:	2300      	movs	r3, #0
 8007310:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	031a      	lsls	r2, r3, #12
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	085b      	lsrs	r3, r3, #1
 800731a:	441a      	add	r2, r3
	timeout_mclks   =
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007322:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8007324:	68fb      	ldr	r3, [r7, #12]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b084      	sub	sp, #16
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800733c:	2300      	movs	r3, #0
 800733e:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8007340:	2300      	movs	r3, #0
 8007342:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7ff ffdc 	bl	8007304 <VL53L1_calc_timeout_mclks>
 800734c:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 f860 	bl	8007414 <VL53L1_encode_timeout>
 8007354:	4603      	mov	r3, r0
 8007356:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 8007358:	897b      	ldrh	r3, [r7, #10]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 8007362:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 800736e:	2100      	movs	r1, #0
 8007370:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 8007372:	f04f 0000 	mov.w	r0, #0
 8007376:	f04f 0100 	mov.w	r1, #0
 800737a:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800737e:	6879      	ldr	r1, [r7, #4]
 8007380:	2000      	movs	r0, #0
 8007382:	4688      	mov	r8, r1
 8007384:	4681      	mov	r9, r0
 8007386:	6839      	ldr	r1, [r7, #0]
 8007388:	2000      	movs	r0, #0
 800738a:	460c      	mov	r4, r1
 800738c:	4605      	mov	r5, r0
 800738e:	fb04 f009 	mul.w	r0, r4, r9
 8007392:	fb08 f105 	mul.w	r1, r8, r5
 8007396:	4401      	add	r1, r0
 8007398:	fba8 2304 	umull	r2, r3, r8, r4
 800739c:	4419      	add	r1, r3
 800739e:	460b      	mov	r3, r1
 80073a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80073a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 80073a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073ac:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 80073b0:	f143 0b00 	adc.w	fp, r3, #0
 80073b4:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 80073b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073bc:	f04f 0200 	mov.w	r2, #0
 80073c0:	f04f 0300 	mov.w	r3, #0
 80073c4:	0b02      	lsrs	r2, r0, #12
 80073c6:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80073ca:	0b0b      	lsrs	r3, r1, #12
 80073cc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 80073d4:	697b      	ldr	r3, [r7, #20]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	371c      	adds	r7, #28
 80073da:	46bd      	mov	sp, r7
 80073dc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80073e0:	4770      	bx	lr

080073e2 <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	4603      	mov	r3, r0
 80073ea:	6039      	str	r1, [r7, #0]
 80073ec:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 80073f2:	2300      	movs	r3, #0
 80073f4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 80073f6:	88fb      	ldrh	r3, [r7, #6]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 f835 	bl	8007468 <VL53L1_decode_timeout>
 80073fe:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f7ff ffad 	bl	8007362 <VL53L1_calc_timeout_us>
 8007408:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800740a:	68bb      	ldr	r3, [r7, #8]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 8007414:	b480      	push	{r7}
 8007416:	b087      	sub	sp, #28
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800741c:	2300      	movs	r3, #0
 800741e:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8007420:	2300      	movs	r3, #0
 8007422:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8007424:	2300      	movs	r3, #0
 8007426:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d015      	beq.n	800745a <VL53L1_encode_timeout+0x46>
		ls_byte = timeout_mclks - 1;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	3b01      	subs	r3, #1
 8007432:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007434:	e005      	b.n	8007442 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	085b      	lsrs	r3, r3, #1
 800743a:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800743c:	89fb      	ldrh	r3, [r7, #14]
 800743e:	3301      	adds	r3, #1
 8007440:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	2bff      	cmp	r3, #255	@ 0xff
 8007446:	d8f6      	bhi.n	8007436 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8007448:	89fb      	ldrh	r3, [r7, #14]
 800744a:	021b      	lsls	r3, r3, #8
 800744c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	b29b      	uxth	r3, r3
 8007452:	b2db      	uxtb	r3, r3
 8007454:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8007456:	4413      	add	r3, r2
 8007458:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800745a:	8afb      	ldrh	r3, [r7, #22]
}
 800745c:	4618      	mov	r0, r3
 800745e:	371c      	adds	r7, #28
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	4603      	mov	r3, r0
 8007470:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8007472:	2300      	movs	r3, #0
 8007474:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007476:	88fb      	ldrh	r3, [r7, #6]
 8007478:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800747a:	88fa      	ldrh	r2, [r7, #6]
 800747c:	0a12      	lsrs	r2, r2, #8
 800747e:	b292      	uxth	r2, r2
 8007480:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007482:	3301      	adds	r3, #1
 8007484:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8007486:	68fb      	ldr	r3, [r7, #12]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b088      	sub	sp, #32
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
 80074a0:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80074a2:	2300      	movs	r3, #0
 80074a4:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 80074a6:	2300      	movs	r3, #0
 80074a8:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 80074aa:	2300      	movs	r3, #0
 80074ac:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 80074ae:	2300      	movs	r3, #0
 80074b0:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 80074b2:	887b      	ldrh	r3, [r7, #2]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d102      	bne.n	80074be <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80074b8:	23f1      	movs	r3, #241	@ 0xf1
 80074ba:	77fb      	strb	r3, [r7, #31]
 80074bc:	e05d      	b.n	800757a <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 80074be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c0:	799a      	ldrb	r2, [r3, #6]
 80074c2:	887b      	ldrh	r3, [r7, #2]
 80074c4:	4611      	mov	r1, r2
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7ff fe8b 	bl	80071e2 <VL53L1_calc_macro_period_us>
 80074cc:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 80074ce:	6979      	ldr	r1, [r7, #20]
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f7ff ff17 	bl	8007304 <VL53L1_calc_timeout_mclks>
 80074d6:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	2bff      	cmp	r3, #255	@ 0xff
 80074dc:	d901      	bls.n	80074e2 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 80074de:	23ff      	movs	r3, #255	@ 0xff
 80074e0:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 80074e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e8:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 80074ea:	6979      	ldr	r1, [r7, #20]
 80074ec:	68b8      	ldr	r0, [r7, #8]
 80074ee:	f7ff ff20 	bl	8007332 <VL53L1_calc_encoded_timeout>
 80074f2:	4603      	mov	r3, r0
 80074f4:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80074f6:	8a7b      	ldrh	r3, [r7, #18]
 80074f8:	0a1b      	lsrs	r3, r3, #8
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 80074fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007500:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8007502:	8a7b      	ldrh	r3, [r7, #18]
 8007504:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8007506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007508:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800750a:	6979      	ldr	r1, [r7, #20]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7ff ff10 	bl	8007332 <VL53L1_calc_encoded_timeout>
 8007512:	4603      	mov	r3, r0
 8007514:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8007516:	8a7b      	ldrh	r3, [r7, #18]
 8007518:	0a1b      	lsrs	r3, r3, #8
 800751a:	b29b      	uxth	r3, r3
 800751c:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800751e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007520:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8007522:	8a7b      	ldrh	r3, [r7, #18]
 8007524:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8007526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007528:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800752a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800752c:	7a5a      	ldrb	r2, [r3, #9]
 800752e:	887b      	ldrh	r3, [r7, #2]
 8007530:	4611      	mov	r1, r2
 8007532:	4618      	mov	r0, r3
 8007534:	f7ff fe55 	bl	80071e2 <VL53L1_calc_macro_period_us>
 8007538:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800753a:	6979      	ldr	r1, [r7, #20]
 800753c:	68b8      	ldr	r0, [r7, #8]
 800753e:	f7ff fef8 	bl	8007332 <VL53L1_calc_encoded_timeout>
 8007542:	4603      	mov	r3, r0
 8007544:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8007546:	8a7b      	ldrh	r3, [r7, #18]
 8007548:	0a1b      	lsrs	r3, r3, #8
 800754a:	b29b      	uxth	r3, r3
 800754c:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800754e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007550:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8007552:	8a7b      	ldrh	r3, [r7, #18]
 8007554:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 8007556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007558:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 800755a:	6979      	ldr	r1, [r7, #20]
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7ff fee8 	bl	8007332 <VL53L1_calc_encoded_timeout>
 8007562:	4603      	mov	r3, r0
 8007564:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8007566:	8a7b      	ldrh	r3, [r7, #18]
 8007568:	0a1b      	lsrs	r3, r3, #8
 800756a:	b29b      	uxth	r3, r3
 800756c:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800756e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007570:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8007572:	8a7b      	ldrh	r3, [r7, #18]
 8007574:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 8007576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007578:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800757a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800757e:	4618      	mov	r0, r3
 8007580:	3720      	adds	r7, #32
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 8007586:	b480      	push	{r7}
 8007588:	b083      	sub	sp, #12
 800758a:	af00      	add	r7, sp, #0
 800758c:	4603      	mov	r3, r0
 800758e:	603a      	str	r2, [r7, #0]
 8007590:	71fb      	strb	r3, [r7, #7]
 8007592:	460b      	mov	r3, r1
 8007594:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 8007596:	79fb      	ldrb	r3, [r7, #7]
 8007598:	2b07      	cmp	r3, #7
 800759a:	d90a      	bls.n	80075b2 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800759c:	79bb      	ldrb	r3, [r7, #6]
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	79fb      	ldrb	r3, [r7, #7]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	3b71      	subs	r3, #113	@ 0x71
 80075aa:	b2da      	uxtb	r2, r3
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 80075b0:	e00a      	b.n	80075c8 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 80075b2:	79bb      	ldrb	r3, [r7, #6]
 80075b4:	f1c3 030f 	rsb	r3, r3, #15
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	00db      	lsls	r3, r3, #3
 80075bc:	b2da      	uxtb	r2, r3
 80075be:	79fb      	ldrb	r3, [r7, #7]
 80075c0:	4413      	add	r3, r2
 80075c2:	b2da      	uxtb	r2, r3
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	701a      	strb	r2, [r3, #0]
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	4603      	mov	r3, r0
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
 80075e0:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 80075e2:	7bfb      	ldrb	r3, [r7, #15]
 80075e4:	091b      	lsrs	r3, r3, #4
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
 80075ee:	f003 030f 	and.w	r3, r3, #15
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	701a      	strb	r2, [r3, #0]

}
 80075f8:	bf00      	nop
 80075fa:	3714      	adds	r7, #20
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	4603      	mov	r3, r0
 800760c:	603a      	str	r2, [r7, #0]
 800760e:	71fb      	strb	r3, [r7, #7]
 8007610:	460b      	mov	r3, r1
 8007612:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 8007614:	79bb      	ldrb	r3, [r7, #6]
 8007616:	011b      	lsls	r3, r3, #4
 8007618:	b2da      	uxtb	r2, r3
 800761a:	79fb      	ldrb	r3, [r7, #7]
 800761c:	4413      	add	r3, r2
 800761e:	b2da      	uxtb	r2, r3
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	701a      	strb	r2, [r3, #0]

}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007638:	2300      	movs	r3, #0
 800763a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2203      	movs	r2, #3
 8007644:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2200      	movs	r2, #0
 800767c:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2200      	movs	r2, #0
 8007684:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 8007688:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800768c:	4618      	mov	r0, r3
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
	/*
	 * Range has been paused but may continue later
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80076a0:	2300      	movs	r3, #0
 80076a2:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	60bb      	str	r3, [r7, #8]
	LOG_FUNCTION_START("");

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	22ff      	movs	r2, #255	@ 0xff
 80076ac:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

	/* restore vhv configs */
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d005      	beq.n	80076de <VL53L1_low_power_auto_data_stop_range+0x46>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	f893 22e8 	ldrb.w	r2, [r3, #744]	@ 0x2e8
		pdev->stat_nvm.vhv_config__init =
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	f893 32e9 	ldrb.w	r3, [r3, #745]	@ 0x2e9
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d005      	beq.n	80076f4 <VL53L1_low_power_auto_data_stop_range+0x5c>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	f893 22e9 	ldrb.w	r2, [r3, #745]	@ 0x2e9
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160

	/* remove phasecal override */
	pdev->gen_cfg.phasecal_config__override = 0x00;
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 218d 	strb.w	r2, [r3, #397]	@ 0x18d

	LOG_FUNCTION_END(status);

	return status;
 80076fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800770c:	b480      	push	{r7}
 800770e:	b087      	sub	sp, #28
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007718:	2300      	movs	r3, #0
 800771a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	228b      	movs	r2, #139	@ 0x8b
 800772c:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM1_EN | \*/
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f44f 4248 	mov.w	r2, #51200	@ 0xc800
 8007734:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__roi_mode_control =
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2202      	movs	r2, #2
 800773a:	729a      	strb	r2, [r3, #10]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
 800773c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007740:	4618      	mov	r0, r3
 8007742:	371c      	adds	r7, #28
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007758:	2300      	movs	r3, #0
 800775a:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f893 2163 	ldrb.w	r2, [r3, #355]	@ 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f893 2160 	ldrb.w	r2, [r3, #352]	@ 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f893 3163 	ldrb.w	r3, [r3, #355]	@ 0x163
 800777a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800777e:	b2da      	uxtb	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800778c:	f003 0303 	and.w	r3, r3, #3
 8007790:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800779c:	4413      	add	r3, r2
 800779e:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 218d 	strb.w	r2, [r3, #397]	@ 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f893 22ae 	ldrb.w	r2, [r3, #686]	@ 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f893 22ea 	ldrb.w	r2, [r3, #746]	@ 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f883 2187 	strb.w	r2, [r3, #391]	@ 0x187

	LOG_FUNCTION_END(status);

	return status;
 80077c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <VL53L1_low_power_auto_update_DSS>:

VL53L1_Error VL53L1_low_power_auto_update_DSS(
	VL53L1_DEV        Dev)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b087      	sub	sp, #28
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]

	/*
	 * Do a DSS calculation and update manual config
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80077e2:	2300      	movs	r3, #0
 80077e4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Calc total rate per spad */

	/* 9.7 format */
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f8b3 31de 	ldrh.w	r3, [r3, #478]	@ 0x1de
 80077ec:	461a      	mov	r2, r3
		pdev->sys_results.result__ambient_count_rate_mcps_sd0;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f8b3 31d6 	ldrh.w	r3, [r3, #470]	@ 0x1d6
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 80077f4:	4413      	add	r3, r2
 80077f6:	613b      	str	r3, [r7, #16]

	/* clip to 16 bits */
	if (utemp32a > 0xFFFF)
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077fe:	d302      	bcc.n	8007806 <VL53L1_low_power_auto_update_DSS+0x30>
		utemp32a = 0xFFFF;
 8007800:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007804:	613b      	str	r3, [r7, #16]

	/* shift up to take advantage of 32 bits */
	/* 9.23 format */
	utemp32a = utemp32a << 16;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	041b      	lsls	r3, r3, #16
 800780a:	613b      	str	r3, [r7, #16]

	/* check SPAD count */
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	@ 0x1d2
 8007812:	2b00      	cmp	r3, #0
 8007814:	d102      	bne.n	800781c <VL53L1_low_power_auto_update_DSS+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8007816:	23f1      	movs	r3, #241	@ 0xf1
 8007818:	75fb      	strb	r3, [r7, #23]
 800781a:	e035      	b.n	8007888 <VL53L1_low_power_auto_update_DSS+0xb2>
	else {
		/* format 17.15 */
		utemp32a = utemp32a /
			pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	@ 0x1d2
 8007822:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	fbb3 f3f2 	udiv	r3, r3, r2
 800782a:	613b      	str	r3, [r7, #16]
		/* save intermediate result */
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
			utemp32a;

		/* get the target rate and shift up by 16
		 * format 9.23 */
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 800783a:	041b      	lsls	r3, r3, #16
 800783c:	613b      	str	r3, [r7, #16]
			16;

		/* check for divide by zero */
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps == 0)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8007844:	2b00      	cmp	r3, #0
 8007846:	d102      	bne.n	800784e <VL53L1_low_power_auto_update_DSS+0x78>
			status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8007848:	23f1      	movs	r3, #241	@ 0xf1
 800784a:	75fb      	strb	r3, [r7, #23]
 800784c:	e01c      	b.n	8007888 <VL53L1_low_power_auto_update_DSS+0xb2>
		else {
			/* divide by rate per spad
			 * format 24.8 */
			utemp32a = utemp32a /
				pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
			utemp32a = utemp32a /
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	fbb2 f3f3 	udiv	r3, r2, r3
 800785a:	613b      	str	r3, [r7, #16]

			/* clip to 16 bit */
			if (utemp32a > 0xFFFF)
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007862:	d302      	bcc.n	800786a <VL53L1_low_power_auto_update_DSS+0x94>
				utemp32a = 0xFFFF;
 8007864:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007868:	613b      	str	r3, [r7, #16]

			/* save result in low power auto data */
			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

			/* override DSS config */
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
				pdev->low_power_auto_data.dss__required_spads;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	@ 0x2f0
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f8a3 2194 	strh.w	r2, [r3, #404]	@ 0x194
			pdev->gen_cfg.dss_config__roi_mode_control =
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2202      	movs	r2, #2
 8007884:	f883 218e 	strb.w	r2, [r3, #398]	@ 0x18e
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53L1_ERROR_DIVISION_BY_ZERO) {
 8007888:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800788c:	f113 0f0f 	cmn.w	r3, #15
 8007890:	d110      	bne.n	80078b4 <VL53L1_low_power_auto_update_DSS+0xde>
		/* We want to gracefully set a spad target, not just exit with
		* an error */

		/* set target to mid point */
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007898:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

		/* override DSS config */
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
		pdev->low_power_auto_data.dss__required_spads;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	@ 0x2f0
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f8a3 2194 	strh.w	r2, [r3, #404]	@ 0x194
		pdev->gen_cfg.dss_config__roi_mode_control =
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2202      	movs	r2, #2
 80078ac:	f883 218e 	strb.w	r2, [r3, #398]	@ 0x18e
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		/* reset error */
		status = VL53L1_ERROR_NONE;
 80078b0:	2300      	movs	r3, #0
 80078b2:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 80078b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	371c      	adds	r7, #28
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	4603      	mov	r3, r0
 80078cc:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 80078ce:	2300      	movs	r3, #0
 80078d0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 80078d2:	88fb      	ldrh	r3, [r7, #6]
 80078d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80078d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80078dc:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 80078de:	68fb      	ldr	r3, [r7, #12]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3714      	adds	r7, #20
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	4603      	mov	r3, r0
 80078f4:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80078f6:	2300      	movs	r3, #0
 80078f8:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80078fa:	79fb      	ldrb	r3, [r7, #7]
 80078fc:	3301      	adds	r3, #1
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8007904:	7bfb      	ldrb	r3, [r7, #15]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3714      	adds	r7, #20
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 8007912:	b480      	push	{r7}
 8007914:	b085      	sub	sp, #20
 8007916:	af00      	add	r7, sp, #0
 8007918:	4603      	mov	r3, r0
 800791a:	60b9      	str	r1, [r7, #8]
 800791c:	607a      	str	r2, [r7, #4]
 800791e:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 8007920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007924:	2b00      	cmp	r3, #0
 8007926:	da10      	bge.n	800794a <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 8007928:	7bfb      	ldrb	r3, [r7, #15]
 800792a:	43db      	mvns	r3, r3
 800792c:	b2db      	uxtb	r3, r3
 800792e:	f003 0307 	and.w	r3, r3, #7
 8007932:	b2db      	uxtb	r3, r3
 8007934:	3308      	adds	r3, #8
 8007936:	b2da      	uxtb	r2, r3
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800793c:	7bfb      	ldrb	r3, [r7, #15]
 800793e:	3b80      	subs	r3, #128	@ 0x80
 8007940:	10db      	asrs	r3, r3, #3
 8007942:	b2da      	uxtb	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 8007948:	e00c      	b.n	8007964 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800794a:	7bfb      	ldrb	r3, [r7, #15]
 800794c:	f003 0307 	and.w	r3, r3, #7
 8007950:	b2da      	uxtb	r2, r3
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 8007956:	7bfb      	ldrb	r3, [r7, #15]
 8007958:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800795c:	10db      	asrs	r3, r3, #3
 800795e:	b2da      	uxtb	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	701a      	strb	r2, [r3, #0]
}
 8007964:	bf00      	nop
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	460b      	mov	r3, r1
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800797e:	2300      	movs	r3, #0
 8007980:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8007982:	897b      	ldrh	r3, [r7, #10]
 8007984:	2b0a      	cmp	r3, #10
 8007986:	d802      	bhi.n	800798e <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007988:	f06f 0309 	mvn.w	r3, #9
 800798c:	e047      	b.n	8007a1e <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007996:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 80079a4:	f002 020f 	and.w	r2, r2, #15
 80079a8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 80079aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 80079b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80079b8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80079ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 80079c4:	f002 0203 	and.w	r2, r2, #3
 80079c8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80079ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 80079d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80079d8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80079da:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	88d8      	ldrh	r0, [r3, #6]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	3305      	adds	r3, #5
 80079e4:	461a      	mov	r2, r3
 80079e6:	2102      	movs	r1, #2
 80079e8:	f7ff faef 	bl	8006fca <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 80079f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 80079fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 8007a08:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007a0c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8007a0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 8007a18:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8007a1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3718      	adds	r7, #24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b086      	sub	sp, #24
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	60b9      	str	r1, [r7, #8]
 8007a30:	607a      	str	r2, [r7, #4]
 8007a32:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007a34:	2300      	movs	r3, #0
 8007a36:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8007a38:	89fb      	ldrh	r3, [r7, #14]
 8007a3a:	2b0a      	cmp	r3, #10
 8007a3c:	d802      	bhi.n	8007a44 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007a3e:	f06f 0309 	mvn.w	r3, #9
 8007a42:	e046      	b.n	8007ad2 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a4c:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	3301      	adds	r3, #1
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	f003 030f 	and.w	r3, r3, #15
 8007a5c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	3302      	adds	r3, #2
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a6c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	3303      	adds	r3, #3
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	f003 0303 	and.w	r3, r3, #3
 8007a7c:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	3304      	adds	r3, #4
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a8c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	3305      	adds	r3, #5
 8007a96:	4619      	mov	r1, r3
 8007a98:	2002      	movs	r0, #2
 8007a9a:	f7ff fac1 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	79da      	ldrb	r2, [r3, #7]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	7a1a      	ldrb	r2, [r3, #8]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	3309      	adds	r3, #9
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ac0:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	7a9a      	ldrb	r2, [r3, #10]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8007ace:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3718      	adds	r7, #24
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b086      	sub	sp, #24
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8007ae8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d108      	bne.n	8007b02 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8007af0:	f107 020c 	add.w	r2, r7, #12
 8007af4:	230b      	movs	r3, #11
 8007af6:	2101      	movs	r1, #1
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 f97d 	bl	8008df8 <VL53L1_ReadMulti>
 8007afe:	4603      	mov	r3, r0
 8007b00:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8007b02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d108      	bne.n	8007b1c <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 8007b0a:	f107 030c 	add.w	r3, r7, #12
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	4619      	mov	r1, r3
 8007b12:	200b      	movs	r0, #11
 8007b14:	f7ff ff87 	bl	8007a26 <VL53L1_i2c_decode_static_nvm_managed>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8007b1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3718      	adds	r7, #24
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	460b      	mov	r3, r1
 8007b32:	607a      	str	r2, [r7, #4]
 8007b34:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007b36:	2300      	movs	r3, #0
 8007b38:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8007b3a:	897b      	ldrh	r3, [r7, #10]
 8007b3c:	2b16      	cmp	r3, #22
 8007b3e:	d802      	bhi.n	8007b46 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007b40:	f06f 0309 	mvn.w	r3, #9
 8007b44:	e076      	b.n	8007c34 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8007b56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8007b60:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8007b6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8007b74:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8007b7e:	f002 020f 	and.w	r2, r2, #15
 8007b82:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8007b84:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8007b8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8007b98:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007b9c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8007b9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8007ba8:	f002 0203 	and.w	r2, r2, #3
 8007bac:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8007bae:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	8958      	ldrh	r0, [r3, #10]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3309      	adds	r3, #9
 8007bb8:	461a      	mov	r2, r3
 8007bba:	2102      	movs	r1, #2
 8007bbc:	f7ff fa05 	bl	8006fca <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	330b      	adds	r3, #11
 8007bca:	461a      	mov	r2, r3
 8007bcc:	2102      	movs	r1, #2
 8007bce:	f7ff fa47 	bl	8007060 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	330d      	adds	r3, #13
 8007bdc:	461a      	mov	r2, r3
 8007bde:	2102      	movs	r1, #2
 8007be0:	f7ff fa3e 	bl	8007060 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	8a18      	ldrh	r0, [r3, #16]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	330f      	adds	r3, #15
 8007bec:	461a      	mov	r2, r3
 8007bee:	2102      	movs	r1, #2
 8007bf0:	f7ff f9eb 	bl	8006fca <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 8007bfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bfe:	b218      	sxth	r0, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	3311      	adds	r3, #17
 8007c04:	461a      	mov	r2, r3
 8007c06:	2102      	movs	r1, #2
 8007c08:	f7ff fa2a 	bl	8007060 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	3313      	adds	r3, #19
 8007c16:	461a      	mov	r2, r3
 8007c18:	2102      	movs	r1, #2
 8007c1a:	f7ff fa21 	bl	8007060 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	3315      	adds	r3, #21
 8007c28:	461a      	mov	r2, r3
 8007c2a:	2102      	movs	r1, #2
 8007c2c:	f7ff fa18 	bl	8007060 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8007c30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3718      	adds	r7, #24
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	4603      	mov	r3, r0
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
 8007c48:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8007c4e:	89fb      	ldrh	r3, [r7, #14]
 8007c50:	2b16      	cmp	r3, #22
 8007c52:	d802      	bhi.n	8007c5a <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007c54:	f06f 0309 	mvn.w	r3, #9
 8007c58:	e079      	b.n	8007d4e <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	785a      	ldrb	r2, [r3, #1]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	789a      	ldrb	r2, [r3, #2]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	78da      	ldrb	r2, [r3, #3]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	791a      	ldrb	r2, [r3, #4]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	3305      	adds	r3, #5
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	f003 030f 	and.w	r3, r3, #15
 8007c8c:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	799a      	ldrb	r2, [r3, #6]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	3307      	adds	r3, #7
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ca4:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	3308      	adds	r3, #8
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	f003 0303 	and.w	r3, r3, #3
 8007cb4:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	3309      	adds	r3, #9
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	2002      	movs	r0, #2
 8007cc2:	f7ff f9ad 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	330b      	adds	r3, #11
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	2002      	movs	r0, #2
 8007cd6:	f7ff f9ef 	bl	80070b8 <VL53L1_i2c_decode_int16_t>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	330d      	adds	r3, #13
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	2002      	movs	r0, #2
 8007cea:	f7ff f9e5 	bl	80070b8 <VL53L1_i2c_decode_int16_t>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	330f      	adds	r3, #15
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	2002      	movs	r0, #2
 8007cfe:	f7ff f98f 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 8007d02:	4603      	mov	r3, r0
 8007d04:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	3311      	adds	r3, #17
 8007d0e:	4619      	mov	r1, r3
 8007d10:	2002      	movs	r0, #2
 8007d12:	f7ff f9d1 	bl	80070b8 <VL53L1_i2c_decode_int16_t>
 8007d16:	4603      	mov	r3, r0
 8007d18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d1c:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	3313      	adds	r3, #19
 8007d26:	4619      	mov	r1, r3
 8007d28:	2002      	movs	r0, #2
 8007d2a:	f7ff f9c5 	bl	80070b8 <VL53L1_i2c_decode_int16_t>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	3315      	adds	r3, #21
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	2002      	movs	r0, #2
 8007d3e:	f7ff f9bb 	bl	80070b8 <VL53L1_i2c_decode_int16_t>
 8007d42:	4603      	mov	r3, r0
 8007d44:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 8007d4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3718      	adds	r7, #24
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b088      	sub	sp, #32
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007d60:	2300      	movs	r3, #0
 8007d62:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8007d64:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d108      	bne.n	8007d7e <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8007d6c:	f107 0208 	add.w	r2, r7, #8
 8007d70:	2317      	movs	r3, #23
 8007d72:	210d      	movs	r1, #13
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f001 f83f 	bl	8008df8 <VL53L1_ReadMulti>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8007d7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d108      	bne.n	8007d98 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8007d86:	f107 0308 	add.w	r3, r7, #8
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	2017      	movs	r0, #23
 8007d90:	f7ff ff54 	bl	8007c3c <VL53L1_i2c_decode_customer_nvm_managed>
 8007d94:	4603      	mov	r3, r0
 8007d96:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8007d98:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3720      	adds	r7, #32
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	460b      	mov	r3, r1
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007db2:	2300      	movs	r3, #0
 8007db4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8007db6:	897b      	ldrh	r3, [r7, #10]
 8007db8:	2b1f      	cmp	r3, #31
 8007dba:	d802      	bhi.n	8007dc2 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007dbc:	f06f 0309 	mvn.w	r3, #9
 8007dc0:	e0cf      	b.n	8007f62 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	2102      	movs	r1, #2
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7ff f8fd 	bl	8006fca <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 8007dd8:	f002 0201 	and.w	r2, r2, #1
 8007ddc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8007dde:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8007de8:	f002 020f 	and.w	r2, r2, #15
 8007dec:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8007dee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 8007df8:	f002 020f 	and.w	r2, r2, #15
 8007dfc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8007dfe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 8007e08:	f002 021f 	and.w	r2, r2, #31
 8007e0c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8007e0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8007e18:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007e1c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8007e1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 8007e28:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007e2c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8007e2e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 8007e38:	f002 0201 	and.w	r2, r2, #1
 8007e3c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8007e3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 8007e48:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8007e52:	f002 0201 	and.w	r2, r2, #1
 8007e56:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8007e58:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 8007e62:	f002 0203 	and.w	r2, r2, #3
 8007e66:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8007e68:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8007e72:	f002 021f 	and.w	r2, r2, #31
 8007e76:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8007e78:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8007e82:	f002 0203 	and.w	r2, r2, #3
 8007e86:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8007e88:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8007e92:	f002 0203 	and.w	r2, r2, #3
 8007e96:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 8007e98:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8007ea2:	f002 0207 	and.w	r2, r2, #7
 8007ea6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8007ea8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8007eb2:	f002 021f 	and.w	r2, r2, #31
 8007eb6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8007eb8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8007ec2:	f002 0201 	and.w	r2, r2, #1
 8007ec6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8007ec8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8007ed2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8007edc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8007ee6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8007ef0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8007efa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 8007f04:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	8b18      	ldrh	r0, [r3, #24]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	3318      	adds	r3, #24
 8007f0e:	461a      	mov	r2, r3
 8007f10:	2102      	movs	r1, #2
 8007f12:	f7ff f85a 	bl	8006fca <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8007f1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 8007f28:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 8007f32:	f002 020f 	and.w	r2, r2, #15
 8007f36:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 8007f38:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 8007f42:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 8007f4c:	f002 020f 	and.w	r2, r2, #15
 8007f50:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 8007f52:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 8007f5c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8007f5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3718      	adds	r7, #24
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b086      	sub	sp, #24
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	60f8      	str	r0, [r7, #12]
 8007f72:	460b      	mov	r3, r1
 8007f74:	607a      	str	r2, [r7, #4]
 8007f76:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 8007f7c:	897b      	ldrh	r3, [r7, #10]
 8007f7e:	2b15      	cmp	r3, #21
 8007f80:	d802      	bhi.n	8007f88 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007f82:	f06f 0309 	mvn.w	r3, #9
 8007f86:	e070      	b.n	800806a <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8007f98:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8007fa2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8007fac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007fb0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8007fb2:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8007fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fbc:	b298      	uxth	r0, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	3304      	adds	r3, #4
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	2102      	movs	r1, #2
 8007fc6:	f7ff f800 	bl	8006fca <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8007fd2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007fd6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8007fd8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8007fe2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8007fec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8007ff6:	f002 0201 	and.w	r2, r2, #1
 8007ffa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8007ffc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8008006:	f002 0207 	and.w	r2, r2, #7
 800800a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800800c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	8998      	ldrh	r0, [r3, #12]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	330c      	adds	r3, #12
 8008016:	461a      	mov	r2, r3
 8008018:	2102      	movs	r1, #2
 800801a:	f7fe ffd6 	bl	8006fca <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	89d8      	ldrh	r0, [r3, #14]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	330e      	adds	r3, #14
 8008026:	461a      	mov	r2, r3
 8008028:	2102      	movs	r1, #2
 800802a:	f7fe ffce 	bl	8006fca <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	8a18      	ldrh	r0, [r3, #16]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	3310      	adds	r3, #16
 8008036:	461a      	mov	r2, r3
 8008038:	2102      	movs	r1, #2
 800803a:	f7fe ffc6 	bl	8006fca <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8008046:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8008050:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800805a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8008064:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8008066:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800806a:	4618      	mov	r0, r3
 800806c:	3718      	adds	r7, #24
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b086      	sub	sp, #24
 8008076:	af00      	add	r7, sp, #0
 8008078:	60f8      	str	r0, [r7, #12]
 800807a:	460b      	mov	r3, r1
 800807c:	607a      	str	r2, [r7, #4]
 800807e:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008080:	2300      	movs	r3, #0
 8008082:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 8008084:	897b      	ldrh	r3, [r7, #10]
 8008086:	2b16      	cmp	r3, #22
 8008088:	d802      	bhi.n	8008090 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800808a:	f06f 0309 	mvn.w	r3, #9
 800808e:	e06e      	b.n	800816e <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	f003 030f 	and.w	r3, r3, #15
 8008098:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80080a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 80080b0:	f002 020f 	and.w	r2, r2, #15
 80080b4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80080b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 80080c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 80080ca:	f002 020f 	and.w	r2, r2, #15
 80080ce:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80080d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 80080da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 80080e4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80080e8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80080ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 80080f4:	f002 020f 	and.w	r2, r2, #15
 80080f8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80080fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8008104:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800810e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008112:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8008114:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	8958      	ldrh	r0, [r3, #10]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	330a      	adds	r3, #10
 800811e:	461a      	mov	r2, r3
 8008120:	2102      	movs	r1, #2
 8008122:	f7fe ff52 	bl	8006fca <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	8998      	ldrh	r0, [r3, #12]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	330c      	adds	r3, #12
 800812e:	461a      	mov	r2, r3
 8008130:	2102      	movs	r1, #2
 8008132:	f7fe ff4a 	bl	8006fca <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800813e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8008148:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6918      	ldr	r0, [r3, #16]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	3312      	adds	r3, #18
 8008152:	461a      	mov	r2, r3
 8008154:	2104      	movs	r1, #4
 8008156:	f7fe ffd8 	bl	800710a <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8008162:	f002 0201 	and.w	r2, r2, #1
 8008166:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8008168:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800816a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800816e:	4618      	mov	r0, r3
 8008170:	3718      	adds	r7, #24
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b086      	sub	sp, #24
 800817a:	af00      	add	r7, sp, #0
 800817c:	60f8      	str	r0, [r7, #12]
 800817e:	460b      	mov	r3, r1
 8008180:	607a      	str	r2, [r7, #4]
 8008182:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008184:	2300      	movs	r3, #0
 8008186:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8008188:	897b      	ldrh	r3, [r7, #10]
 800818a:	2b11      	cmp	r3, #17
 800818c:	d802      	bhi.n	8008194 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800818e:	f06f 0309 	mvn.w	r3, #9
 8008192:	e071      	b.n	8008278 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	f003 0303 	and.w	r3, r3, #3
 800819c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	8858      	ldrh	r0, [r3, #2]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	3301      	adds	r3, #1
 80081aa:	461a      	mov	r2, r3
 80081ac:	2102      	movs	r1, #2
 80081ae:	f7fe ff0c 	bl	8006fca <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	8898      	ldrh	r0, [r3, #4]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	3303      	adds	r3, #3
 80081ba:	461a      	mov	r2, r3
 80081bc:	2102      	movs	r1, #2
 80081be:	f7fe ff04 	bl	8006fca <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 80081ca:	f002 0201 	and.w	r2, r2, #1
 80081ce:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80081d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 80081da:	f002 0207 	and.w	r2, r2, #7
 80081de:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80081e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 80081ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 80081f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 80081fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008202:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8008204:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800820e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008212:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8008214:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800821e:	f002 0203 	and.w	r2, r2, #3
 8008222:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8008224:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800822e:	f002 0203 	and.w	r2, r2, #3
 8008232:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8008234:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800823e:	f002 020f 	and.w	r2, r2, #15
 8008242:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8008244:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800824e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8008258:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8008262:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800826c:	f002 0203 	and.w	r2, r2, #3
 8008270:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8008272:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8008274:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3718      	adds	r7, #24
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8008280:	b480      	push	{r7}
 8008282:	b087      	sub	sp, #28
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	460b      	mov	r3, r1
 800828a:	607a      	str	r2, [r7, #4]
 800828c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800828e:	2300      	movs	r3, #0
 8008290:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 8008292:	897b      	ldrh	r3, [r7, #10]
 8008294:	2b04      	cmp	r3, #4
 8008296:	d802      	bhi.n	800829e <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8008298:	f06f 0309 	mvn.w	r3, #9
 800829c:	e025      	b.n	80082ea <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 80082b4:	f002 0201 	and.w	r2, r2, #1
 80082b8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 80082ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 80082c4:	f002 0201 	and.w	r2, r2, #1
 80082c8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80082ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 80082d4:	f002 0203 	and.w	r2, r2, #3
 80082d8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80082da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	3304      	adds	r3, #4
		pdata->system__mode_start;
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 80082e4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80082e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	371c      	adds	r7, #28
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr

080082f6 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b084      	sub	sp, #16
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
 80082fe:	6039      	str	r1, [r7, #0]
	/**
	 * Serialises and sends the contents of VL53L1_system_control_t
	 * data structure to the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008300:	2300      	movs	r3, #0
 8008302:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8008304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d108      	bne.n	800831e <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 800830c:	f107 0308 	add.w	r3, r7, #8
 8008310:	461a      	mov	r2, r3
 8008312:	2105      	movs	r1, #5
 8008314:	6838      	ldr	r0, [r7, #0]
 8008316:	f7ff ffb3 	bl	8008280 <VL53L1_i2c_encode_system_control>
 800831a:	4603      	mov	r3, r0
 800831c:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 800831e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d108      	bne.n	8008338 <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 8008326:	f107 0208 	add.w	r2, r7, #8
 800832a:	2305      	movs	r3, #5
 800832c:	2183      	movs	r1, #131	@ 0x83
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fd2c 	bl	8008d8c <VL53L1_WriteMulti>
 8008334:	4603      	mov	r3, r0
 8008336:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 8008338:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af00      	add	r7, sp, #0
 800834a:	4603      	mov	r3, r0
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
 8008350:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008352:	2300      	movs	r3, #0
 8008354:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 8008356:	89fb      	ldrh	r3, [r7, #14]
 8008358:	2b2b      	cmp	r3, #43	@ 0x2b
 800835a:	d802      	bhi.n	8008362 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800835c:	f06f 0309 	mvn.w	r3, #9
 8008360:	e0e2      	b.n	8008528 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800836a:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	785a      	ldrb	r2, [r3, #1]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	3302      	adds	r3, #2
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	f003 030f 	and.w	r3, r3, #15
 8008382:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	78da      	ldrb	r2, [r3, #3]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	3304      	adds	r3, #4
 8008394:	4619      	mov	r1, r3
 8008396:	2002      	movs	r0, #2
 8008398:	f7fe fe42 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 800839c:	4603      	mov	r3, r0
 800839e:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	3306      	adds	r3, #6
 80083a8:	4619      	mov	r1, r3
 80083aa:	2002      	movs	r0, #2
 80083ac:	f7fe fe38 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 80083b0:	4603      	mov	r3, r0
 80083b2:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	3308      	adds	r3, #8
 80083bc:	4619      	mov	r1, r3
 80083be:	2002      	movs	r0, #2
 80083c0:	f7fe fe2e 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 80083c4:	4603      	mov	r3, r0
 80083c6:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	330a      	adds	r3, #10
 80083d0:	4619      	mov	r1, r3
 80083d2:	2002      	movs	r0, #2
 80083d4:	f7fe fe24 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 80083d8:	4603      	mov	r3, r0
 80083da:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	330c      	adds	r3, #12
 80083e4:	4619      	mov	r1, r3
 80083e6:	2002      	movs	r0, #2
 80083e8:	f7fe fe1a 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 80083ec:	4603      	mov	r3, r0
 80083ee:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	330e      	adds	r3, #14
 80083f8:	4619      	mov	r1, r3
 80083fa:	2002      	movs	r0, #2
 80083fc:	f7fe fe10 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 8008400:	4603      	mov	r3, r0
 8008402:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	3310      	adds	r3, #16
 800840c:	4619      	mov	r1, r3
 800840e:	2002      	movs	r0, #2
 8008410:	f7fe fe06 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 8008414:	4603      	mov	r3, r0
 8008416:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	3312      	adds	r3, #18
 8008420:	4619      	mov	r1, r3
 8008422:	2002      	movs	r0, #2
 8008424:	f7fe fdfc 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 8008428:	4603      	mov	r3, r0
 800842a:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	3314      	adds	r3, #20
 8008434:	4619      	mov	r1, r3
 8008436:	2002      	movs	r0, #2
 8008438:	f7fe fdf2 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 800843c:	4603      	mov	r3, r0
 800843e:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	3316      	adds	r3, #22
 8008448:	4619      	mov	r1, r3
 800844a:	2002      	movs	r0, #2
 800844c:	f7fe fde8 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 8008450:	4603      	mov	r3, r0
 8008452:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	3318      	adds	r3, #24
 800845c:	4619      	mov	r1, r3
 800845e:	2002      	movs	r0, #2
 8008460:	f7fe fdde 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 8008464:	4603      	mov	r3, r0
 8008466:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	331a      	adds	r3, #26
 8008470:	4619      	mov	r1, r3
 8008472:	2002      	movs	r0, #2
 8008474:	f7fe fdd4 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 8008478:	4603      	mov	r3, r0
 800847a:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	331c      	adds	r3, #28
 8008484:	4619      	mov	r1, r3
 8008486:	2002      	movs	r0, #2
 8008488:	f7fe fdca 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 800848c:	4603      	mov	r3, r0
 800848e:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	331e      	adds	r3, #30
 8008498:	4619      	mov	r1, r3
 800849a:	2002      	movs	r0, #2
 800849c:	f7fe fdc0 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 80084a0:	4603      	mov	r3, r0
 80084a2:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	3320      	adds	r3, #32
 80084ac:	4619      	mov	r1, r3
 80084ae:	2002      	movs	r0, #2
 80084b0:	f7fe fdb6 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 80084b4:	4603      	mov	r3, r0
 80084b6:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	3322      	adds	r3, #34	@ 0x22
 80084c0:	4619      	mov	r1, r3
 80084c2:	2002      	movs	r0, #2
 80084c4:	f7fe fdac 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 80084c8:	4603      	mov	r3, r0
 80084ca:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	3324      	adds	r3, #36	@ 0x24
 80084d4:	4619      	mov	r1, r3
 80084d6:	2002      	movs	r0, #2
 80084d8:	f7fe fda2 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 80084dc:	4603      	mov	r3, r0
 80084de:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	3326      	adds	r3, #38	@ 0x26
 80084e8:	4619      	mov	r1, r3
 80084ea:	2002      	movs	r0, #2
 80084ec:	f7fe fd98 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 80084f0:	4603      	mov	r3, r0
 80084f2:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	3328      	adds	r3, #40	@ 0x28
 80084fc:	4619      	mov	r1, r3
 80084fe:	2002      	movs	r0, #2
 8008500:	f7fe fd8e 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 8008504:	4603      	mov	r3, r0
 8008506:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1 =
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8008524:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3718      	adds	r7, #24
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
 8008536:	4603      	mov	r3, r0
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
 800853c:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800853e:	2300      	movs	r3, #0
 8008540:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 8008542:	89fb      	ldrh	r3, [r7, #14]
 8008544:	2b20      	cmp	r3, #32
 8008546:	d802      	bhi.n	800854e <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8008548:	f06f 0309 	mvn.w	r3, #9
 800854c:	e04d      	b.n	80085ea <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800854e:	68b9      	ldr	r1, [r7, #8]
 8008550:	2004      	movs	r0, #4
 8008552:	f7fe fe04 	bl	800715e <VL53L1_i2c_decode_uint32_t>
 8008556:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	3304      	adds	r3, #4
 8008560:	4619      	mov	r1, r3
 8008562:	2004      	movs	r0, #4
 8008564:	f7fe fdfb 	bl	800715e <VL53L1_i2c_decode_uint32_t>
 8008568:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	3308      	adds	r3, #8
 8008572:	4619      	mov	r1, r3
 8008574:	2004      	movs	r0, #4
 8008576:	f7fe fe0f 	bl	8007198 <VL53L1_i2c_decode_int32_t>
 800857a:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	330c      	adds	r3, #12
 8008584:	4619      	mov	r1, r3
 8008586:	2004      	movs	r0, #4
 8008588:	f7fe fde9 	bl	800715e <VL53L1_i2c_decode_uint32_t>
 800858c:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	3310      	adds	r3, #16
 8008596:	4619      	mov	r1, r3
 8008598:	2004      	movs	r0, #4
 800859a:	f7fe fde0 	bl	800715e <VL53L1_i2c_decode_uint32_t>
 800859e:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	3314      	adds	r3, #20
 80085a8:	4619      	mov	r1, r3
 80085aa:	2004      	movs	r0, #4
 80085ac:	f7fe fdd7 	bl	800715e <VL53L1_i2c_decode_uint32_t>
 80085b0:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	3318      	adds	r3, #24
 80085ba:	4619      	mov	r1, r3
 80085bc:	2004      	movs	r0, #4
 80085be:	f7fe fdeb 	bl	8007198 <VL53L1_i2c_decode_int32_t>
 80085c2:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	331c      	adds	r3, #28
 80085cc:	4619      	mov	r1, r3
 80085ce:	2004      	movs	r0, #4
 80085d0:	f7fe fdc5 	bl	800715e <VL53L1_i2c_decode_uint32_t>
 80085d4:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	f893 2020 	ldrb.w	r2, [r3, #32]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 80085e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3718      	adds	r7, #24
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b086      	sub	sp, #24
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	4603      	mov	r3, r0
 80085fa:	60b9      	str	r1, [r7, #8]
 80085fc:	607a      	str	r2, [r7, #4]
 80085fe:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008600:	2300      	movs	r3, #0
 8008602:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 8008604:	89fb      	ldrh	r3, [r7, #14]
 8008606:	2b37      	cmp	r3, #55	@ 0x37
 8008608:	d802      	bhi.n	8008610 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800860a:	f06f 0309 	mvn.w	r3, #9
 800860e:	e15e      	b.n	80088ce <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 8008610:	68b9      	ldr	r1, [r7, #8]
 8008612:	2002      	movs	r0, #2
 8008614:	f7fe fd04 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 8008618:	4603      	mov	r3, r0
 800861a:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	3302      	adds	r3, #2
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800862a:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	3303      	adds	r3, #3
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800863a:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	3304      	adds	r3, #4
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	f003 0303 	and.w	r3, r3, #3
 800864a:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	3305      	adds	r3, #5
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	3306      	adds	r3, #6
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800866a:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	3307      	adds	r3, #7
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800867a:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	3308      	adds	r3, #8
 8008684:	4619      	mov	r1, r3
 8008686:	2002      	movs	r0, #2
 8008688:	f7fe fcca 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 800868c:	4603      	mov	r3, r0
 800868e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008692:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	330a      	adds	r3, #10
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	f003 0303 	and.w	r3, r3, #3
 80086a2:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	330b      	adds	r3, #11
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	f003 0303 	and.w	r3, r3, #3
 80086b2:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	330c      	adds	r3, #12
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	f003 030f 	and.w	r3, r3, #15
 80086c2:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	330d      	adds	r3, #13
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	f003 0307 	and.w	r3, r3, #7
 80086d2:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	330e      	adds	r3, #14
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	f003 0301 	and.w	r3, r3, #1
 80086e2:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	330f      	adds	r3, #15
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	f003 0303 	and.w	r3, r3, #3
 80086f2:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	7c1a      	ldrb	r2, [r3, #16]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	7c5a      	ldrb	r2, [r3, #17]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	3312      	adds	r3, #18
 800870c:	4619      	mov	r1, r3
 800870e:	2002      	movs	r0, #2
 8008710:	f7fe fc86 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 8008714:	4603      	mov	r3, r0
 8008716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800871a:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	3316      	adds	r3, #22
 8008724:	4619      	mov	r1, r3
 8008726:	2002      	movs	r0, #2
 8008728:	f7fe fc7a 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 800872c:	4603      	mov	r3, r0
 800872e:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	3318      	adds	r3, #24
 8008738:	4619      	mov	r1, r3
 800873a:	2002      	movs	r0, #2
 800873c:	f7fe fc70 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 8008740:	4603      	mov	r3, r0
 8008742:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	331a      	adds	r3, #26
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	331b      	adds	r3, #27
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	f003 0307 	and.w	r3, r3, #7
 8008762:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	7f1a      	ldrb	r2, [r3, #28]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	7f5a      	ldrb	r2, [r3, #29]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	331e      	adds	r3, #30
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008782:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	331f      	adds	r3, #31
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008792:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	3320      	adds	r3, #32
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	f003 0303 	and.w	r3, r3, #3
 80087a2:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	3321      	adds	r3, #33	@ 0x21
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	f003 030f 	and.w	r3, r3, #15
 80087b2:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	3325      	adds	r3, #37	@ 0x25
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	f003 0301 	and.w	r3, r3, #1
 80087e6:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	3326      	adds	r3, #38	@ 0x26
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	f003 0303 	and.w	r3, r3, #3
 80087f8:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	3327      	adds	r3, #39	@ 0x27
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	f003 031f 	and.w	r3, r3, #31
 800880a:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	3328      	adds	r3, #40	@ 0x28
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	f003 031f 	and.w	r3, r3, #31
 800881c:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	3329      	adds	r3, #41	@ 0x29
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	f003 031f 	and.w	r3, r3, #31
 800882e:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	332a      	adds	r3, #42	@ 0x2a
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	f003 0301 	and.w	r3, r3, #1
 8008840:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	332b      	adds	r3, #43	@ 0x2b
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	f003 0301 	and.w	r3, r3, #1
 8008852:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	332c      	adds	r3, #44	@ 0x2c
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	f003 0303 	and.w	r3, r3, #3
 8008864:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	332d      	adds	r3, #45	@ 0x2d
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008876:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	332e      	adds	r3, #46	@ 0x2e
 8008882:	4619      	mov	r1, r3
 8008884:	2004      	movs	r0, #4
 8008886:	f7fe fc6a 	bl	800715e <VL53L1_i2c_decode_uint32_t>
 800888a:	4603      	mov	r3, r0
 800888c:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	3332      	adds	r3, #50	@ 0x32
 8008898:	4619      	mov	r1, r3
 800889a:	2004      	movs	r0, #4
 800889c:	f7fe fc5f 	bl	800715e <VL53L1_i2c_decode_uint32_t>
 80088a0:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	631a      	str	r2, [r3, #48]	@ 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	3336      	adds	r3, #54	@ 0x36
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	f003 0301 	and.w	r3, r3, #1
 80088b0:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	3337      	adds	r3, #55	@ 0x37
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	f003 0301 	and.w	r3, r3, #1
 80088c2:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	LOG_FUNCTION_END(status);

	return status;
 80088ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3718      	adds	r7, #24
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b086      	sub	sp, #24
 80088da:	af00      	add	r7, sp, #0
 80088dc:	4603      	mov	r3, r0
 80088de:	60b9      	str	r1, [r7, #8]
 80088e0:	607a      	str	r2, [r7, #4]
 80088e2:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80088e4:	2300      	movs	r3, #0
 80088e6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 80088e8:	89fb      	ldrh	r3, [r7, #14]
 80088ea:	2b30      	cmp	r3, #48	@ 0x30
 80088ec:	d802      	bhi.n	80088f4 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80088ee:	f06f 0309 	mvn.w	r3, #9
 80088f2:	e112      	b.n	8008b1a <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	785a      	ldrb	r2, [r3, #1]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	789a      	ldrb	r2, [r3, #2]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	3303      	adds	r3, #3
 8008910:	4619      	mov	r1, r3
 8008912:	2002      	movs	r0, #2
 8008914:	f7fe fb84 	bl	8007020 <VL53L1_i2c_decode_uint16_t>
 8008918:	4603      	mov	r3, r0
 800891a:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	3305      	adds	r3, #5
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800892a:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	3306      	adds	r3, #6
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	f003 0307 	and.w	r3, r3, #7
 800893a:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	3307      	adds	r3, #7
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	f003 0307 	and.w	r3, r3, #7
 800894a:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	3308      	adds	r3, #8
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800895a:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	3309      	adds	r3, #9
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800896a:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	330a      	adds	r3, #10
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	330b      	adds	r3, #11
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800898a:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	330c      	adds	r3, #12
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	f003 0301 	and.w	r3, r3, #1
 800899a:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	330d      	adds	r3, #13
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80089aa:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	330e      	adds	r3, #14
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80089ba:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	7bda      	ldrb	r2, [r3, #15]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	7c1a      	ldrb	r2, [r3, #16]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	7c5a      	ldrb	r2, [r3, #17]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	7c9a      	ldrb	r2, [r3, #18]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	7cda      	ldrb	r2, [r3, #19]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	7d1a      	ldrb	r2, [r3, #20]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	7d5a      	ldrb	r2, [r3, #21]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	7d9a      	ldrb	r2, [r3, #22]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	7dda      	ldrb	r2, [r3, #23]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	7e1a      	ldrb	r2, [r3, #24]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	7e5a      	ldrb	r2, [r3, #25]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	7e9a      	ldrb	r2, [r3, #26]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	7eda      	ldrb	r2, [r3, #27]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	7f1a      	ldrb	r2, [r3, #28]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	7f5a      	ldrb	r2, [r3, #29]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	7f9a      	ldrb	r2, [r3, #30]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	7fda      	ldrb	r2, [r3, #31]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8008b16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3718      	adds	r7, #24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b090      	sub	sp, #64	@ 0x40
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8008b32:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10a      	bne.n	8008b50 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 8008b3a:	f107 020c 	add.w	r2, r7, #12
 8008b3e:	2331      	movs	r3, #49	@ 0x31
 8008b40:	f240 110f 	movw	r1, #271	@ 0x10f
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f957 	bl	8008df8 <VL53L1_ReadMulti>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8008b50:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d109      	bne.n	8008b6c <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 8008b58:	f107 030c 	add.w	r3, r7, #12
 8008b5c:	683a      	ldr	r2, [r7, #0]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	2031      	movs	r0, #49	@ 0x31
 8008b62:	f7ff feb8 	bl	80088d6 <VL53L1_i2c_decode_nvm_copy_data>
 8008b66:	4603      	mov	r3, r0
 8008b68:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8008b6c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3740      	adds	r7, #64	@ 0x40
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <VL53L1_wait_for_boot_completion>:
		fmt, ##__VA_ARGS__)


VL53L1_Error VL53L1_wait_for_boot_completion(
	VL53L1_DEV     Dev)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]

	/* Waits for firmware boot to finish
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008b80:	2300      	movs	r3, #0
 8008b82:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	613b      	str	r3, [r7, #16]

	uint8_t      fw_ready  = 0;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53L1_WAIT_METHOD_BLOCKING) {
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d107      	bne.n	8008ba4 <VL53L1_wait_for_boot_completion+0x2c>

		/* blocking version */

		status =
			VL53L1_poll_for_boot_completion(
 8008b94:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f88a 	bl	8008cb2 <VL53L1_poll_for_boot_completion>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	75fb      	strb	r3, [r7, #23]
 8008ba2:	e01b      	b.n	8008bdc <VL53L1_wait_for_boot_completion+0x64>

	} else {

		/* implement non blocking version below */

		fw_ready = 0;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	73fb      	strb	r3, [r7, #15]
		while (fw_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8008ba8:	e011      	b.n	8008bce <VL53L1_wait_for_boot_completion+0x56>
			status = VL53L1_is_boot_complete(
 8008baa:	f107 030f 	add.w	r3, r7, #15
 8008bae:	4619      	mov	r1, r3
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f819 	bl	8008be8 <VL53L1_is_boot_complete>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	75fb      	strb	r3, [r7, #23]
				Dev,
				&fw_ready);

			if (status == VL53L1_ERROR_NONE) {
 8008bba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d105      	bne.n	8008bce <VL53L1_wait_for_boot_completion+0x56>
				status = VL53L1_WaitMs(
 8008bc2:	2101      	movs	r1, #1
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 f9fa 	bl	8008fbe <VL53L1_WaitMs>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	75fb      	strb	r3, [r7, #23]
		while (fw_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d103      	bne.n	8008bdc <VL53L1_wait_for_boot_completion+0x64>
 8008bd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d0e6      	beq.n	8008baa <VL53L1_wait_for_boot_completion+0x32>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8008bdc:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3718      	adds	r7, #24
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <VL53L1_is_boot_complete>:


VL53L1_Error VL53L1_is_boot_complete(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
	/**
	 * Determines if the firmware finished booting by reading
	 * bit 0 of firmware__system_status register
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	73fb      	strb	r3, [r7, #15]
	uint8_t  firmware__system_status = 0;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	/* read current range interrupt state */

	status =
		VL53L1_RdByte(
 8008bfa:	f107 030e 	add.w	r3, r7, #14
 8008bfe:	461a      	mov	r2, r3
 8008c00:	21e5      	movs	r1, #229	@ 0xe5
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f958 	bl	8008eb8 <VL53L1_RdByte>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	73fb      	strb	r3, [r7, #15]

	/* set *pready = 1 if new range data ready complete
	 * zero otherwise
	 */

	if ((firmware__system_status & 0x01) == 0x01) {
 8008c0c:	7bbb      	ldrb	r3, [r7, #14]
 8008c0e:	f003 0301 	and.w	r3, r3, #1
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d007      	beq.n	8008c26 <VL53L1_is_boot_complete+0x3e>
		*pready = 0x01;
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	701a      	strb	r2, [r3, #0]
		VL53L1_init_ll_driver_state(
 8008c1c:	2103      	movs	r1, #3
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f7fd ffb6 	bl	8006b90 <VL53L1_init_ll_driver_state>
 8008c24:	e006      	b.n	8008c34 <VL53L1_is_boot_complete+0x4c>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);
	} else {
		*pready = 0x00;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	701a      	strb	r2, [r3, #0]
		VL53L1_init_ll_driver_state(
 8008c2c:	2102      	movs	r1, #2
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f7fd ffae 	bl	8006b90 <VL53L1_init_ll_driver_state>
			VL53L1_DEVICESTATE_FW_COLDBOOT);
	}

	LOG_FUNCTION_END(status);

	return status;
 8008c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b086      	sub	sp, #24
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
	 * Determines if new range data is ready by reading bit 0 of
	 * VL53L1_GPIO__TIO_HV_STATUS to determine the current state
	 * of output interrupt pin
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8008c52:	2300      	movs	r3, #0
 8008c54:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8008c56:	2300      	movs	r3, #0
 8008c58:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	f893 3170 	ldrb.w	r3, [r3, #368]	@ 0x170
	gpio__mux_active_high_hv =
 8008c64:	f003 0310 	and.w	r3, r3, #16
 8008c68:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8008c6a:	7bfb      	ldrb	r3, [r7, #15]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d102      	bne.n	8008c76 <VL53L1_is_new_data_ready+0x36>
		interrupt_ready = 0x01;
 8008c70:	2301      	movs	r3, #1
 8008c72:	75fb      	strb	r3, [r7, #23]
 8008c74:	e001      	b.n	8008c7a <VL53L1_is_new_data_ready+0x3a>
	else
		interrupt_ready = 0x00;
 8008c76:	2300      	movs	r3, #0
 8008c78:	75fb      	strb	r3, [r7, #23]

	/* read current range interrupt state */

	status = VL53L1_RdByte(
 8008c7a:	f107 030e 	add.w	r3, r7, #14
 8008c7e:	461a      	mov	r2, r3
 8008c80:	2131      	movs	r1, #49	@ 0x31
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 f918 	bl	8008eb8 <VL53L1_RdByte>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);

	/* set *pready = 1 if new range data ready complete zero otherwise */

	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8008c8c:	7bbb      	ldrb	r3, [r7, #14]
 8008c8e:	f003 0201 	and.w	r2, r3, #1
 8008c92:	7dfb      	ldrb	r3, [r7, #23]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d103      	bne.n	8008ca0 <VL53L1_is_new_data_ready+0x60>
		*pready = 0x01;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	701a      	strb	r2, [r3, #0]
 8008c9e:	e002      	b.n	8008ca6 <VL53L1_is_new_data_ready+0x66>
	else
		*pready = 0x00;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8008ca6:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3718      	adds	r7, #24
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b086      	sub	sp, #24
 8008cb6:	af02      	add	r7, sp, #8
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 8008cc0:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f989 	bl	8008fdc <VL53L1_WaitUs>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8008cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10b      	bne.n	8008cee <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	9301      	str	r3, [sp, #4]
 8008cda:	2301      	movs	r3, #1
 8008cdc:	9300      	str	r3, [sp, #0]
 8008cde:	2301      	movs	r3, #1
 8008ce0:	22e5      	movs	r2, #229	@ 0xe5
 8008ce2:	6839      	ldr	r1, [r7, #0]
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f98f 	bl	8009008 <VL53L1_WaitValueMaskEx>
 8008cea:	4603      	mov	r3, r0
 8008cec:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8008cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d103      	bne.n	8008cfe <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8008cf6:	2103      	movs	r1, #3
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f7fd ff49 	bl	8006b90 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8008cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b088      	sub	sp, #32
 8008d0e:	af02      	add	r7, sp, #8
 8008d10:	60f8      	str	r0, [r7, #12]
 8008d12:	60b9      	str	r1, [r7, #8]
 8008d14:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	330a      	adds	r3, #10
 8008d1a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f8d3 03a0 	ldr.w	r0, [r3, #928]	@ 0x3a0
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f893 3398 	ldrb.w	r3, [r3, #920]	@ 0x398
 8008d28:	4619      	mov	r1, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	9300      	str	r3, [sp, #0]
 8008d32:	4613      	mov	r3, r2
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	f7f8 f911 	bl	8000f5c <HAL_I2C_Master_Transmit>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008d3e:	693b      	ldr	r3, [r7, #16]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3718      	adds	r7, #24
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b088      	sub	sp, #32
 8008d4c:	af02      	add	r7, sp, #8
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	330a      	adds	r3, #10
 8008d58:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f8d3 03a0 	ldr.w	r0, [r3, #928]	@ 0x3a0
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f893 3398 	ldrb.w	r3, [r3, #920]	@ 0x398
 8008d66:	f043 0301 	orr.w	r3, r3, #1
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	b29a      	uxth	r2, r3
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	4613      	mov	r3, r2
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	f7f8 f9e3 	bl	8001144 <HAL_I2C_Master_Receive>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008d82:	693b      	ldr	r3, [r7, #16]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3718      	adds	r7, #24
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b086      	sub	sp, #24
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	607a      	str	r2, [r7, #4]
 8008d96:	603b      	str	r3, [r7, #0]
 8008d98:	460b      	mov	r3, r1
 8008d9a:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	2bff      	cmp	r3, #255	@ 0xff
 8008da4:	d902      	bls.n	8008dac <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 8008da6:	f06f 0303 	mvn.w	r3, #3
 8008daa:	e01d      	b.n	8008de8 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8008dac:	897b      	ldrh	r3, [r7, #10]
 8008dae:	0a1b      	lsrs	r3, r3, #8
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	b2da      	uxtb	r2, r3
 8008db4:	4b0e      	ldr	r3, [pc, #56]	@ (8008df0 <VL53L1_WriteMulti+0x64>)
 8008db6:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8008db8:	897b      	ldrh	r3, [r7, #10]
 8008dba:	b2da      	uxtb	r2, r3
 8008dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8008df0 <VL53L1_WriteMulti+0x64>)
 8008dbe:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8008dc0:	683a      	ldr	r2, [r7, #0]
 8008dc2:	6879      	ldr	r1, [r7, #4]
 8008dc4:	480b      	ldr	r0, [pc, #44]	@ (8008df4 <VL53L1_WriteMulti+0x68>)
 8008dc6:	f000 fc2a 	bl	800961e <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	3302      	adds	r3, #2
 8008dce:	461a      	mov	r2, r3
 8008dd0:	4907      	ldr	r1, [pc, #28]	@ (8008df0 <VL53L1_WriteMulti+0x64>)
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f7ff ff99 	bl	8008d0a <_I2CWrite>
 8008dd8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d001      	beq.n	8008de4 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008de0:	23f3      	movs	r3, #243	@ 0xf3
 8008de2:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 8008de4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3718      	adds	r7, #24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	20000188 	.word	0x20000188
 8008df4:	2000018a 	.word	0x2000018a

08008df8 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	607a      	str	r2, [r7, #4]
 8008e02:	603b      	str	r3, [r7, #0]
 8008e04:	460b      	mov	r3, r1
 8008e06:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8008e0c:	897b      	ldrh	r3, [r7, #10]
 8008e0e:	0a1b      	lsrs	r3, r3, #8
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	b2da      	uxtb	r2, r3
 8008e14:	4b12      	ldr	r3, [pc, #72]	@ (8008e60 <VL53L1_ReadMulti+0x68>)
 8008e16:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8008e18:	897b      	ldrh	r3, [r7, #10]
 8008e1a:	b2da      	uxtb	r2, r3
 8008e1c:	4b10      	ldr	r3, [pc, #64]	@ (8008e60 <VL53L1_ReadMulti+0x68>)
 8008e1e:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008e20:	2202      	movs	r2, #2
 8008e22:	490f      	ldr	r1, [pc, #60]	@ (8008e60 <VL53L1_ReadMulti+0x68>)
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f7ff ff70 	bl	8008d0a <_I2CWrite>
 8008e2a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d002      	beq.n	8008e38 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008e32:	23f3      	movs	r3, #243	@ 0xf3
 8008e34:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008e36:	e00c      	b.n	8008e52 <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8008e38:	683a      	ldr	r2, [r7, #0]
 8008e3a:	6879      	ldr	r1, [r7, #4]
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f7ff ff83 	bl	8008d48 <_I2CRead>
 8008e42:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d002      	beq.n	8008e50 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008e4a:	23f3      	movs	r3, #243	@ 0xf3
 8008e4c:	75fb      	strb	r3, [r7, #23]
 8008e4e:	e000      	b.n	8008e52 <VL53L1_ReadMulti+0x5a>
    }
done:
 8008e50:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8008e52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3718      	adds	r7, #24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	20000188 	.word	0x20000188

08008e64 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	807b      	strh	r3, [r7, #2]
 8008e70:	4613      	mov	r3, r2
 8008e72:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008e74:	2300      	movs	r3, #0
 8008e76:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8008e78:	887b      	ldrh	r3, [r7, #2]
 8008e7a:	0a1b      	lsrs	r3, r3, #8
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	b2da      	uxtb	r2, r3
 8008e80:	4b0c      	ldr	r3, [pc, #48]	@ (8008eb4 <VL53L1_WrByte+0x50>)
 8008e82:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8008e84:	887b      	ldrh	r3, [r7, #2]
 8008e86:	b2da      	uxtb	r2, r3
 8008e88:	4b0a      	ldr	r3, [pc, #40]	@ (8008eb4 <VL53L1_WrByte+0x50>)
 8008e8a:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8008e8c:	4a09      	ldr	r2, [pc, #36]	@ (8008eb4 <VL53L1_WrByte+0x50>)
 8008e8e:	787b      	ldrb	r3, [r7, #1]
 8008e90:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8008e92:	2203      	movs	r2, #3
 8008e94:	4907      	ldr	r1, [pc, #28]	@ (8008eb4 <VL53L1_WrByte+0x50>)
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f7ff ff37 	bl	8008d0a <_I2CWrite>
 8008e9c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d001      	beq.n	8008ea8 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008ea4:	23f3      	movs	r3, #243	@ 0xf3
 8008ea6:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8008ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	20000188 	.word	0x20000188

08008eb8 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	607a      	str	r2, [r7, #4]
 8008ec4:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8008eca:	897b      	ldrh	r3, [r7, #10]
 8008ecc:	0a1b      	lsrs	r3, r3, #8
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	b2da      	uxtb	r2, r3
 8008ed2:	4b12      	ldr	r3, [pc, #72]	@ (8008f1c <VL53L1_RdByte+0x64>)
 8008ed4:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8008ed6:	897b      	ldrh	r3, [r7, #10]
 8008ed8:	b2da      	uxtb	r2, r3
 8008eda:	4b10      	ldr	r3, [pc, #64]	@ (8008f1c <VL53L1_RdByte+0x64>)
 8008edc:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008ede:	2202      	movs	r2, #2
 8008ee0:	490e      	ldr	r1, [pc, #56]	@ (8008f1c <VL53L1_RdByte+0x64>)
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f7ff ff11 	bl	8008d0a <_I2CWrite>
 8008ee8:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d002      	beq.n	8008ef6 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008ef0:	23f3      	movs	r3, #243	@ 0xf3
 8008ef2:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008ef4:	e00c      	b.n	8008f10 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	6879      	ldr	r1, [r7, #4]
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f7ff ff24 	bl	8008d48 <_I2CRead>
 8008f00:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d002      	beq.n	8008f0e <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008f08:	23f3      	movs	r3, #243	@ 0xf3
 8008f0a:	75fb      	strb	r3, [r7, #23]
 8008f0c:	e000      	b.n	8008f10 <VL53L1_RdByte+0x58>
    }
done:
 8008f0e:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8008f10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3718      	adds	r7, #24
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	20000188 	.word	0x20000188

08008f20 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	460b      	mov	r3, r1
 8008f2a:	607a      	str	r2, [r7, #4]
 8008f2c:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8008f32:	897b      	ldrh	r3, [r7, #10]
 8008f34:	0a1b      	lsrs	r3, r3, #8
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	b2da      	uxtb	r2, r3
 8008f3a:	4b17      	ldr	r3, [pc, #92]	@ (8008f98 <VL53L1_RdWord+0x78>)
 8008f3c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8008f3e:	897b      	ldrh	r3, [r7, #10]
 8008f40:	b2da      	uxtb	r2, r3
 8008f42:	4b15      	ldr	r3, [pc, #84]	@ (8008f98 <VL53L1_RdWord+0x78>)
 8008f44:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008f46:	2202      	movs	r2, #2
 8008f48:	4913      	ldr	r1, [pc, #76]	@ (8008f98 <VL53L1_RdWord+0x78>)
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	f7ff fedd 	bl	8008d0a <_I2CWrite>
 8008f50:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d002      	beq.n	8008f5e <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008f58:	23f3      	movs	r3, #243	@ 0xf3
 8008f5a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008f5c:	e015      	b.n	8008f8a <VL53L1_RdWord+0x6a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8008f5e:	2202      	movs	r2, #2
 8008f60:	490d      	ldr	r1, [pc, #52]	@ (8008f98 <VL53L1_RdWord+0x78>)
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f7ff fef0 	bl	8008d48 <_I2CRead>
 8008f68:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d002      	beq.n	8008f76 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008f70:	23f3      	movs	r3, #243	@ 0xf3
 8008f72:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008f74:	e009      	b.n	8008f8a <VL53L1_RdWord+0x6a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8008f76:	4b08      	ldr	r3, [pc, #32]	@ (8008f98 <VL53L1_RdWord+0x78>)
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	021b      	lsls	r3, r3, #8
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	4a06      	ldr	r2, [pc, #24]	@ (8008f98 <VL53L1_RdWord+0x78>)
 8008f80:	7852      	ldrb	r2, [r2, #1]
 8008f82:	4413      	add	r3, r2
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8008f8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3718      	adds	r7, #24
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	20000188 	.word	0x20000188

08008f9c <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8008fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3714      	adds	r7, #20
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b082      	sub	sp, #8
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
 8008fc6:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7f7 fcba 	bl	8000944 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
	...

08008fdc <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	4a06      	ldr	r2, [pc, #24]	@ (8009004 <VL53L1_WaitUs+0x28>)
 8008fea:	fb82 1203 	smull	r1, r2, r2, r3
 8008fee:	1192      	asrs	r2, r2, #6
 8008ff0:	17db      	asrs	r3, r3, #31
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7f7 fca5 	bl	8000944 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3708      	adds	r7, #8
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	10624dd3 	.word	0x10624dd3

08009008 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8009008:	b590      	push	{r4, r7, lr}
 800900a:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 800900e:	af00      	add	r7, sp, #0
 8009010:	f507 740a 	add.w	r4, r7, #552	@ 0x228
 8009014:	f5a4 7407 	sub.w	r4, r4, #540	@ 0x21c
 8009018:	6020      	str	r0, [r4, #0]
 800901a:	f507 700a 	add.w	r0, r7, #552	@ 0x228
 800901e:	f5a0 7008 	sub.w	r0, r0, #544	@ 0x220
 8009022:	6001      	str	r1, [r0, #0]
 8009024:	4619      	mov	r1, r3
 8009026:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800902a:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 800902e:	801a      	strh	r2, [r3, #0]
 8009030:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8009034:	f2a3 2323 	subw	r3, r3, #547	@ 0x223
 8009038:	460a      	mov	r2, r1
 800903a:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800903c:	2300      	movs	r3, #0
 800903e:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
	uint32_t     start_time_ms = 0;
 8009042:	2300      	movs	r3, #0
 8009044:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
	uint32_t     current_time_ms = 0;
 8009048:	2300      	movs	r3, #0
 800904a:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	uint32_t     polling_time_ms = 0;
 800904e:	2300      	movs	r3, #0
 8009050:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
	uint8_t      byte_value      = 0;
 8009054:	2300      	movs	r3, #0
 8009056:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
	uint8_t      found           = 0;
 800905a:	2300      	movs	r3, #0
 800905c:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8009060:	f107 0310 	add.w	r3, r7, #16
 8009064:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009068:	493b      	ldr	r1, [pc, #236]	@ (8009158 <VL53L1_WaitValueMaskEx+0x150>)
 800906a:	4618      	mov	r0, r3
 800906c:	f000 fa51 	bl	8009512 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 8009070:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009074:	4618      	mov	r0, r3
 8009076:	f7ff ff91 	bl	8008f9c <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 800907a:	e049      	b.n	8009110 <VL53L1_WaitValueMaskEx+0x108>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 800907c:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8009080:	2b00      	cmp	r3, #0
 8009082:	d110      	bne.n	80090a6 <VL53L1_WaitValueMaskEx+0x9e>
			status = VL53L1_RdByte(
 8009084:	f207 2213 	addw	r2, r7, #531	@ 0x213
 8009088:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800908c:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 8009090:	8819      	ldrh	r1, [r3, #0]
 8009092:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8009096:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800909a:	6818      	ldr	r0, [r3, #0]
 800909c:	f7ff ff0c 	bl	8008eb8 <VL53L1_RdByte>
 80090a0:	4603      	mov	r3, r0
 80090a2:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 80090a6:	f897 2213 	ldrb.w	r2, [r7, #531]	@ 0x213
 80090aa:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 80090ae:	4013      	ands	r3, r2
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 80090b6:	f2a2 2223 	subw	r2, r2, #547	@ 0x223
 80090ba:	7812      	ldrb	r2, [r2, #0]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d102      	bne.n	80090c6 <VL53L1_WaitValueMaskEx+0xbe>
			found = 1;
 80090c0:	2301      	movs	r3, #1
 80090c2:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 80090c6:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d114      	bne.n	80090f8 <VL53L1_WaitValueMaskEx+0xf0>
 80090ce:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d110      	bne.n	80090f8 <VL53L1_WaitValueMaskEx+0xf0>
			found == 0 &&
 80090d6:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00c      	beq.n	80090f8 <VL53L1_WaitValueMaskEx+0xf0>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 80090de:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 80090e2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80090e6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80090ea:	4611      	mov	r1, r2
 80090ec:	6818      	ldr	r0, [r3, #0]
 80090ee:	f7ff ff66 	bl	8008fbe <VL53L1_WaitMs>
 80090f2:	4603      	mov	r3, r0
 80090f4:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 80090f8:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7ff ff4d 	bl	8008f9c <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8009102:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8009106:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
		   (polling_time_ms < timeout_ms) &&
 8009110:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10c      	bne.n	8009132 <VL53L1_WaitValueMaskEx+0x12a>
	while ((status == VL53L1_ERROR_NONE) &&
 8009118:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800911c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8009120:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	429a      	cmp	r2, r3
 8009128:	d203      	bcs.n	8009132 <VL53L1_WaitValueMaskEx+0x12a>
		   (polling_time_ms < timeout_ms) &&
 800912a:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 800912e:	2b00      	cmp	r3, #0
 8009130:	d0a4      	beq.n	800907c <VL53L1_WaitValueMaskEx+0x74>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 8009132:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8009136:	2b00      	cmp	r3, #0
 8009138:	d106      	bne.n	8009148 <VL53L1_WaitValueMaskEx+0x140>
 800913a:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 800913e:	2b00      	cmp	r3, #0
 8009140:	d102      	bne.n	8009148 <VL53L1_WaitValueMaskEx+0x140>
		status = VL53L1_ERROR_TIME_OUT;
 8009142:	23f9      	movs	r3, #249	@ 0xf9
 8009144:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227

	return status;
 8009148:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
}
 800914c:	4618      	mov	r0, r3
 800914e:	f507 770b 	add.w	r7, r7, #556	@ 0x22c
 8009152:	46bd      	mov	sp, r7
 8009154:	bd90      	pop	{r4, r7, pc}
 8009156:	bf00      	nop
 8009158:	0800a280 	.word	0x0800a280

0800915c <std>:
 800915c:	2300      	movs	r3, #0
 800915e:	b510      	push	{r4, lr}
 8009160:	4604      	mov	r4, r0
 8009162:	e9c0 3300 	strd	r3, r3, [r0]
 8009166:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800916a:	6083      	str	r3, [r0, #8]
 800916c:	8181      	strh	r1, [r0, #12]
 800916e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009170:	81c2      	strh	r2, [r0, #14]
 8009172:	6183      	str	r3, [r0, #24]
 8009174:	4619      	mov	r1, r3
 8009176:	2208      	movs	r2, #8
 8009178:	305c      	adds	r0, #92	@ 0x5c
 800917a:	f000 f9c2 	bl	8009502 <memset>
 800917e:	4b0d      	ldr	r3, [pc, #52]	@ (80091b4 <std+0x58>)
 8009180:	6263      	str	r3, [r4, #36]	@ 0x24
 8009182:	4b0d      	ldr	r3, [pc, #52]	@ (80091b8 <std+0x5c>)
 8009184:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009186:	4b0d      	ldr	r3, [pc, #52]	@ (80091bc <std+0x60>)
 8009188:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800918a:	4b0d      	ldr	r3, [pc, #52]	@ (80091c0 <std+0x64>)
 800918c:	6323      	str	r3, [r4, #48]	@ 0x30
 800918e:	4b0d      	ldr	r3, [pc, #52]	@ (80091c4 <std+0x68>)
 8009190:	6224      	str	r4, [r4, #32]
 8009192:	429c      	cmp	r4, r3
 8009194:	d006      	beq.n	80091a4 <std+0x48>
 8009196:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800919a:	4294      	cmp	r4, r2
 800919c:	d002      	beq.n	80091a4 <std+0x48>
 800919e:	33d0      	adds	r3, #208	@ 0xd0
 80091a0:	429c      	cmp	r4, r3
 80091a2:	d105      	bne.n	80091b0 <std+0x54>
 80091a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80091a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091ac:	f000 ba34 	b.w	8009618 <__retarget_lock_init_recursive>
 80091b0:	bd10      	pop	{r4, pc}
 80091b2:	bf00      	nop
 80091b4:	0800947d 	.word	0x0800947d
 80091b8:	0800949f 	.word	0x0800949f
 80091bc:	080094d7 	.word	0x080094d7
 80091c0:	080094fb 	.word	0x080094fb
 80091c4:	20000288 	.word	0x20000288

080091c8 <stdio_exit_handler>:
 80091c8:	4a02      	ldr	r2, [pc, #8]	@ (80091d4 <stdio_exit_handler+0xc>)
 80091ca:	4903      	ldr	r1, [pc, #12]	@ (80091d8 <stdio_exit_handler+0x10>)
 80091cc:	4803      	ldr	r0, [pc, #12]	@ (80091dc <stdio_exit_handler+0x14>)
 80091ce:	f000 b869 	b.w	80092a4 <_fwalk_sglue>
 80091d2:	bf00      	nop
 80091d4:	2000002c 	.word	0x2000002c
 80091d8:	08009ee5 	.word	0x08009ee5
 80091dc:	2000003c 	.word	0x2000003c

080091e0 <cleanup_stdio>:
 80091e0:	6841      	ldr	r1, [r0, #4]
 80091e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009214 <cleanup_stdio+0x34>)
 80091e4:	4299      	cmp	r1, r3
 80091e6:	b510      	push	{r4, lr}
 80091e8:	4604      	mov	r4, r0
 80091ea:	d001      	beq.n	80091f0 <cleanup_stdio+0x10>
 80091ec:	f000 fe7a 	bl	8009ee4 <_fflush_r>
 80091f0:	68a1      	ldr	r1, [r4, #8]
 80091f2:	4b09      	ldr	r3, [pc, #36]	@ (8009218 <cleanup_stdio+0x38>)
 80091f4:	4299      	cmp	r1, r3
 80091f6:	d002      	beq.n	80091fe <cleanup_stdio+0x1e>
 80091f8:	4620      	mov	r0, r4
 80091fa:	f000 fe73 	bl	8009ee4 <_fflush_r>
 80091fe:	68e1      	ldr	r1, [r4, #12]
 8009200:	4b06      	ldr	r3, [pc, #24]	@ (800921c <cleanup_stdio+0x3c>)
 8009202:	4299      	cmp	r1, r3
 8009204:	d004      	beq.n	8009210 <cleanup_stdio+0x30>
 8009206:	4620      	mov	r0, r4
 8009208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800920c:	f000 be6a 	b.w	8009ee4 <_fflush_r>
 8009210:	bd10      	pop	{r4, pc}
 8009212:	bf00      	nop
 8009214:	20000288 	.word	0x20000288
 8009218:	200002f0 	.word	0x200002f0
 800921c:	20000358 	.word	0x20000358

08009220 <global_stdio_init.part.0>:
 8009220:	b510      	push	{r4, lr}
 8009222:	4b0b      	ldr	r3, [pc, #44]	@ (8009250 <global_stdio_init.part.0+0x30>)
 8009224:	4c0b      	ldr	r4, [pc, #44]	@ (8009254 <global_stdio_init.part.0+0x34>)
 8009226:	4a0c      	ldr	r2, [pc, #48]	@ (8009258 <global_stdio_init.part.0+0x38>)
 8009228:	601a      	str	r2, [r3, #0]
 800922a:	4620      	mov	r0, r4
 800922c:	2200      	movs	r2, #0
 800922e:	2104      	movs	r1, #4
 8009230:	f7ff ff94 	bl	800915c <std>
 8009234:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009238:	2201      	movs	r2, #1
 800923a:	2109      	movs	r1, #9
 800923c:	f7ff ff8e 	bl	800915c <std>
 8009240:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009244:	2202      	movs	r2, #2
 8009246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800924a:	2112      	movs	r1, #18
 800924c:	f7ff bf86 	b.w	800915c <std>
 8009250:	200003c0 	.word	0x200003c0
 8009254:	20000288 	.word	0x20000288
 8009258:	080091c9 	.word	0x080091c9

0800925c <__sfp_lock_acquire>:
 800925c:	4801      	ldr	r0, [pc, #4]	@ (8009264 <__sfp_lock_acquire+0x8>)
 800925e:	f000 b9dc 	b.w	800961a <__retarget_lock_acquire_recursive>
 8009262:	bf00      	nop
 8009264:	200003c9 	.word	0x200003c9

08009268 <__sfp_lock_release>:
 8009268:	4801      	ldr	r0, [pc, #4]	@ (8009270 <__sfp_lock_release+0x8>)
 800926a:	f000 b9d7 	b.w	800961c <__retarget_lock_release_recursive>
 800926e:	bf00      	nop
 8009270:	200003c9 	.word	0x200003c9

08009274 <__sinit>:
 8009274:	b510      	push	{r4, lr}
 8009276:	4604      	mov	r4, r0
 8009278:	f7ff fff0 	bl	800925c <__sfp_lock_acquire>
 800927c:	6a23      	ldr	r3, [r4, #32]
 800927e:	b11b      	cbz	r3, 8009288 <__sinit+0x14>
 8009280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009284:	f7ff bff0 	b.w	8009268 <__sfp_lock_release>
 8009288:	4b04      	ldr	r3, [pc, #16]	@ (800929c <__sinit+0x28>)
 800928a:	6223      	str	r3, [r4, #32]
 800928c:	4b04      	ldr	r3, [pc, #16]	@ (80092a0 <__sinit+0x2c>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1f5      	bne.n	8009280 <__sinit+0xc>
 8009294:	f7ff ffc4 	bl	8009220 <global_stdio_init.part.0>
 8009298:	e7f2      	b.n	8009280 <__sinit+0xc>
 800929a:	bf00      	nop
 800929c:	080091e1 	.word	0x080091e1
 80092a0:	200003c0 	.word	0x200003c0

080092a4 <_fwalk_sglue>:
 80092a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092a8:	4607      	mov	r7, r0
 80092aa:	4688      	mov	r8, r1
 80092ac:	4614      	mov	r4, r2
 80092ae:	2600      	movs	r6, #0
 80092b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092b4:	f1b9 0901 	subs.w	r9, r9, #1
 80092b8:	d505      	bpl.n	80092c6 <_fwalk_sglue+0x22>
 80092ba:	6824      	ldr	r4, [r4, #0]
 80092bc:	2c00      	cmp	r4, #0
 80092be:	d1f7      	bne.n	80092b0 <_fwalk_sglue+0xc>
 80092c0:	4630      	mov	r0, r6
 80092c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092c6:	89ab      	ldrh	r3, [r5, #12]
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d907      	bls.n	80092dc <_fwalk_sglue+0x38>
 80092cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092d0:	3301      	adds	r3, #1
 80092d2:	d003      	beq.n	80092dc <_fwalk_sglue+0x38>
 80092d4:	4629      	mov	r1, r5
 80092d6:	4638      	mov	r0, r7
 80092d8:	47c0      	blx	r8
 80092da:	4306      	orrs	r6, r0
 80092dc:	3568      	adds	r5, #104	@ 0x68
 80092de:	e7e9      	b.n	80092b4 <_fwalk_sglue+0x10>

080092e0 <iprintf>:
 80092e0:	b40f      	push	{r0, r1, r2, r3}
 80092e2:	b507      	push	{r0, r1, r2, lr}
 80092e4:	4906      	ldr	r1, [pc, #24]	@ (8009300 <iprintf+0x20>)
 80092e6:	ab04      	add	r3, sp, #16
 80092e8:	6808      	ldr	r0, [r1, #0]
 80092ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80092ee:	6881      	ldr	r1, [r0, #8]
 80092f0:	9301      	str	r3, [sp, #4]
 80092f2:	f000 facd 	bl	8009890 <_vfiprintf_r>
 80092f6:	b003      	add	sp, #12
 80092f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80092fc:	b004      	add	sp, #16
 80092fe:	4770      	bx	lr
 8009300:	20000038 	.word	0x20000038

08009304 <setbuf>:
 8009304:	fab1 f281 	clz	r2, r1
 8009308:	0952      	lsrs	r2, r2, #5
 800930a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800930e:	0052      	lsls	r2, r2, #1
 8009310:	f000 b800 	b.w	8009314 <setvbuf>

08009314 <setvbuf>:
 8009314:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009318:	461d      	mov	r5, r3
 800931a:	4b57      	ldr	r3, [pc, #348]	@ (8009478 <setvbuf+0x164>)
 800931c:	681f      	ldr	r7, [r3, #0]
 800931e:	4604      	mov	r4, r0
 8009320:	460e      	mov	r6, r1
 8009322:	4690      	mov	r8, r2
 8009324:	b127      	cbz	r7, 8009330 <setvbuf+0x1c>
 8009326:	6a3b      	ldr	r3, [r7, #32]
 8009328:	b913      	cbnz	r3, 8009330 <setvbuf+0x1c>
 800932a:	4638      	mov	r0, r7
 800932c:	f7ff ffa2 	bl	8009274 <__sinit>
 8009330:	f1b8 0f02 	cmp.w	r8, #2
 8009334:	d006      	beq.n	8009344 <setvbuf+0x30>
 8009336:	f1b8 0f01 	cmp.w	r8, #1
 800933a:	f200 809a 	bhi.w	8009472 <setvbuf+0x15e>
 800933e:	2d00      	cmp	r5, #0
 8009340:	f2c0 8097 	blt.w	8009472 <setvbuf+0x15e>
 8009344:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009346:	07d9      	lsls	r1, r3, #31
 8009348:	d405      	bmi.n	8009356 <setvbuf+0x42>
 800934a:	89a3      	ldrh	r3, [r4, #12]
 800934c:	059a      	lsls	r2, r3, #22
 800934e:	d402      	bmi.n	8009356 <setvbuf+0x42>
 8009350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009352:	f000 f962 	bl	800961a <__retarget_lock_acquire_recursive>
 8009356:	4621      	mov	r1, r4
 8009358:	4638      	mov	r0, r7
 800935a:	f000 fdc3 	bl	8009ee4 <_fflush_r>
 800935e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009360:	b141      	cbz	r1, 8009374 <setvbuf+0x60>
 8009362:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009366:	4299      	cmp	r1, r3
 8009368:	d002      	beq.n	8009370 <setvbuf+0x5c>
 800936a:	4638      	mov	r0, r7
 800936c:	f000 f966 	bl	800963c <_free_r>
 8009370:	2300      	movs	r3, #0
 8009372:	6363      	str	r3, [r4, #52]	@ 0x34
 8009374:	2300      	movs	r3, #0
 8009376:	61a3      	str	r3, [r4, #24]
 8009378:	6063      	str	r3, [r4, #4]
 800937a:	89a3      	ldrh	r3, [r4, #12]
 800937c:	061b      	lsls	r3, r3, #24
 800937e:	d503      	bpl.n	8009388 <setvbuf+0x74>
 8009380:	6921      	ldr	r1, [r4, #16]
 8009382:	4638      	mov	r0, r7
 8009384:	f000 f95a 	bl	800963c <_free_r>
 8009388:	89a3      	ldrh	r3, [r4, #12]
 800938a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800938e:	f023 0303 	bic.w	r3, r3, #3
 8009392:	f1b8 0f02 	cmp.w	r8, #2
 8009396:	81a3      	strh	r3, [r4, #12]
 8009398:	d061      	beq.n	800945e <setvbuf+0x14a>
 800939a:	ab01      	add	r3, sp, #4
 800939c:	466a      	mov	r2, sp
 800939e:	4621      	mov	r1, r4
 80093a0:	4638      	mov	r0, r7
 80093a2:	f000 fdc7 	bl	8009f34 <__swhatbuf_r>
 80093a6:	89a3      	ldrh	r3, [r4, #12]
 80093a8:	4318      	orrs	r0, r3
 80093aa:	81a0      	strh	r0, [r4, #12]
 80093ac:	bb2d      	cbnz	r5, 80093fa <setvbuf+0xe6>
 80093ae:	9d00      	ldr	r5, [sp, #0]
 80093b0:	4628      	mov	r0, r5
 80093b2:	f000 f98d 	bl	80096d0 <malloc>
 80093b6:	4606      	mov	r6, r0
 80093b8:	2800      	cmp	r0, #0
 80093ba:	d152      	bne.n	8009462 <setvbuf+0x14e>
 80093bc:	f8dd 9000 	ldr.w	r9, [sp]
 80093c0:	45a9      	cmp	r9, r5
 80093c2:	d140      	bne.n	8009446 <setvbuf+0x132>
 80093c4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80093c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093cc:	f043 0202 	orr.w	r2, r3, #2
 80093d0:	81a2      	strh	r2, [r4, #12]
 80093d2:	2200      	movs	r2, #0
 80093d4:	60a2      	str	r2, [r4, #8]
 80093d6:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80093da:	6022      	str	r2, [r4, #0]
 80093dc:	6122      	str	r2, [r4, #16]
 80093de:	2201      	movs	r2, #1
 80093e0:	6162      	str	r2, [r4, #20]
 80093e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80093e4:	07d6      	lsls	r6, r2, #31
 80093e6:	d404      	bmi.n	80093f2 <setvbuf+0xde>
 80093e8:	0598      	lsls	r0, r3, #22
 80093ea:	d402      	bmi.n	80093f2 <setvbuf+0xde>
 80093ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093ee:	f000 f915 	bl	800961c <__retarget_lock_release_recursive>
 80093f2:	4628      	mov	r0, r5
 80093f4:	b003      	add	sp, #12
 80093f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093fa:	2e00      	cmp	r6, #0
 80093fc:	d0d8      	beq.n	80093b0 <setvbuf+0x9c>
 80093fe:	6a3b      	ldr	r3, [r7, #32]
 8009400:	b913      	cbnz	r3, 8009408 <setvbuf+0xf4>
 8009402:	4638      	mov	r0, r7
 8009404:	f7ff ff36 	bl	8009274 <__sinit>
 8009408:	f1b8 0f01 	cmp.w	r8, #1
 800940c:	bf08      	it	eq
 800940e:	89a3      	ldrheq	r3, [r4, #12]
 8009410:	6026      	str	r6, [r4, #0]
 8009412:	bf04      	itt	eq
 8009414:	f043 0301 	orreq.w	r3, r3, #1
 8009418:	81a3      	strheq	r3, [r4, #12]
 800941a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800941e:	f013 0208 	ands.w	r2, r3, #8
 8009422:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009426:	d01e      	beq.n	8009466 <setvbuf+0x152>
 8009428:	07d9      	lsls	r1, r3, #31
 800942a:	bf41      	itttt	mi
 800942c:	2200      	movmi	r2, #0
 800942e:	426d      	negmi	r5, r5
 8009430:	60a2      	strmi	r2, [r4, #8]
 8009432:	61a5      	strmi	r5, [r4, #24]
 8009434:	bf58      	it	pl
 8009436:	60a5      	strpl	r5, [r4, #8]
 8009438:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800943a:	07d2      	lsls	r2, r2, #31
 800943c:	d401      	bmi.n	8009442 <setvbuf+0x12e>
 800943e:	059b      	lsls	r3, r3, #22
 8009440:	d513      	bpl.n	800946a <setvbuf+0x156>
 8009442:	2500      	movs	r5, #0
 8009444:	e7d5      	b.n	80093f2 <setvbuf+0xde>
 8009446:	4648      	mov	r0, r9
 8009448:	f000 f942 	bl	80096d0 <malloc>
 800944c:	4606      	mov	r6, r0
 800944e:	2800      	cmp	r0, #0
 8009450:	d0b8      	beq.n	80093c4 <setvbuf+0xb0>
 8009452:	89a3      	ldrh	r3, [r4, #12]
 8009454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009458:	81a3      	strh	r3, [r4, #12]
 800945a:	464d      	mov	r5, r9
 800945c:	e7cf      	b.n	80093fe <setvbuf+0xea>
 800945e:	2500      	movs	r5, #0
 8009460:	e7b2      	b.n	80093c8 <setvbuf+0xb4>
 8009462:	46a9      	mov	r9, r5
 8009464:	e7f5      	b.n	8009452 <setvbuf+0x13e>
 8009466:	60a2      	str	r2, [r4, #8]
 8009468:	e7e6      	b.n	8009438 <setvbuf+0x124>
 800946a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800946c:	f000 f8d6 	bl	800961c <__retarget_lock_release_recursive>
 8009470:	e7e7      	b.n	8009442 <setvbuf+0x12e>
 8009472:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009476:	e7bc      	b.n	80093f2 <setvbuf+0xde>
 8009478:	20000038 	.word	0x20000038

0800947c <__sread>:
 800947c:	b510      	push	{r4, lr}
 800947e:	460c      	mov	r4, r1
 8009480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009484:	f000 f87a 	bl	800957c <_read_r>
 8009488:	2800      	cmp	r0, #0
 800948a:	bfab      	itete	ge
 800948c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800948e:	89a3      	ldrhlt	r3, [r4, #12]
 8009490:	181b      	addge	r3, r3, r0
 8009492:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009496:	bfac      	ite	ge
 8009498:	6563      	strge	r3, [r4, #84]	@ 0x54
 800949a:	81a3      	strhlt	r3, [r4, #12]
 800949c:	bd10      	pop	{r4, pc}

0800949e <__swrite>:
 800949e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094a2:	461f      	mov	r7, r3
 80094a4:	898b      	ldrh	r3, [r1, #12]
 80094a6:	05db      	lsls	r3, r3, #23
 80094a8:	4605      	mov	r5, r0
 80094aa:	460c      	mov	r4, r1
 80094ac:	4616      	mov	r6, r2
 80094ae:	d505      	bpl.n	80094bc <__swrite+0x1e>
 80094b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b4:	2302      	movs	r3, #2
 80094b6:	2200      	movs	r2, #0
 80094b8:	f000 f84e 	bl	8009558 <_lseek_r>
 80094bc:	89a3      	ldrh	r3, [r4, #12]
 80094be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80094c6:	81a3      	strh	r3, [r4, #12]
 80094c8:	4632      	mov	r2, r6
 80094ca:	463b      	mov	r3, r7
 80094cc:	4628      	mov	r0, r5
 80094ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094d2:	f000 b865 	b.w	80095a0 <_write_r>

080094d6 <__sseek>:
 80094d6:	b510      	push	{r4, lr}
 80094d8:	460c      	mov	r4, r1
 80094da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094de:	f000 f83b 	bl	8009558 <_lseek_r>
 80094e2:	1c43      	adds	r3, r0, #1
 80094e4:	89a3      	ldrh	r3, [r4, #12]
 80094e6:	bf15      	itete	ne
 80094e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80094ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80094ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80094f2:	81a3      	strheq	r3, [r4, #12]
 80094f4:	bf18      	it	ne
 80094f6:	81a3      	strhne	r3, [r4, #12]
 80094f8:	bd10      	pop	{r4, pc}

080094fa <__sclose>:
 80094fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094fe:	f000 b81b 	b.w	8009538 <_close_r>

08009502 <memset>:
 8009502:	4402      	add	r2, r0
 8009504:	4603      	mov	r3, r0
 8009506:	4293      	cmp	r3, r2
 8009508:	d100      	bne.n	800950c <memset+0xa>
 800950a:	4770      	bx	lr
 800950c:	f803 1b01 	strb.w	r1, [r3], #1
 8009510:	e7f9      	b.n	8009506 <memset+0x4>

08009512 <strncpy>:
 8009512:	b510      	push	{r4, lr}
 8009514:	3901      	subs	r1, #1
 8009516:	4603      	mov	r3, r0
 8009518:	b132      	cbz	r2, 8009528 <strncpy+0x16>
 800951a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800951e:	f803 4b01 	strb.w	r4, [r3], #1
 8009522:	3a01      	subs	r2, #1
 8009524:	2c00      	cmp	r4, #0
 8009526:	d1f7      	bne.n	8009518 <strncpy+0x6>
 8009528:	441a      	add	r2, r3
 800952a:	2100      	movs	r1, #0
 800952c:	4293      	cmp	r3, r2
 800952e:	d100      	bne.n	8009532 <strncpy+0x20>
 8009530:	bd10      	pop	{r4, pc}
 8009532:	f803 1b01 	strb.w	r1, [r3], #1
 8009536:	e7f9      	b.n	800952c <strncpy+0x1a>

08009538 <_close_r>:
 8009538:	b538      	push	{r3, r4, r5, lr}
 800953a:	4d06      	ldr	r5, [pc, #24]	@ (8009554 <_close_r+0x1c>)
 800953c:	2300      	movs	r3, #0
 800953e:	4604      	mov	r4, r0
 8009540:	4608      	mov	r0, r1
 8009542:	602b      	str	r3, [r5, #0]
 8009544:	f7f7 f8f2 	bl	800072c <_close>
 8009548:	1c43      	adds	r3, r0, #1
 800954a:	d102      	bne.n	8009552 <_close_r+0x1a>
 800954c:	682b      	ldr	r3, [r5, #0]
 800954e:	b103      	cbz	r3, 8009552 <_close_r+0x1a>
 8009550:	6023      	str	r3, [r4, #0]
 8009552:	bd38      	pop	{r3, r4, r5, pc}
 8009554:	200003c4 	.word	0x200003c4

08009558 <_lseek_r>:
 8009558:	b538      	push	{r3, r4, r5, lr}
 800955a:	4d07      	ldr	r5, [pc, #28]	@ (8009578 <_lseek_r+0x20>)
 800955c:	4604      	mov	r4, r0
 800955e:	4608      	mov	r0, r1
 8009560:	4611      	mov	r1, r2
 8009562:	2200      	movs	r2, #0
 8009564:	602a      	str	r2, [r5, #0]
 8009566:	461a      	mov	r2, r3
 8009568:	f7f7 f907 	bl	800077a <_lseek>
 800956c:	1c43      	adds	r3, r0, #1
 800956e:	d102      	bne.n	8009576 <_lseek_r+0x1e>
 8009570:	682b      	ldr	r3, [r5, #0]
 8009572:	b103      	cbz	r3, 8009576 <_lseek_r+0x1e>
 8009574:	6023      	str	r3, [r4, #0]
 8009576:	bd38      	pop	{r3, r4, r5, pc}
 8009578:	200003c4 	.word	0x200003c4

0800957c <_read_r>:
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	4d07      	ldr	r5, [pc, #28]	@ (800959c <_read_r+0x20>)
 8009580:	4604      	mov	r4, r0
 8009582:	4608      	mov	r0, r1
 8009584:	4611      	mov	r1, r2
 8009586:	2200      	movs	r2, #0
 8009588:	602a      	str	r2, [r5, #0]
 800958a:	461a      	mov	r2, r3
 800958c:	f7f7 f8b1 	bl	80006f2 <_read>
 8009590:	1c43      	adds	r3, r0, #1
 8009592:	d102      	bne.n	800959a <_read_r+0x1e>
 8009594:	682b      	ldr	r3, [r5, #0]
 8009596:	b103      	cbz	r3, 800959a <_read_r+0x1e>
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	bd38      	pop	{r3, r4, r5, pc}
 800959c:	200003c4 	.word	0x200003c4

080095a0 <_write_r>:
 80095a0:	b538      	push	{r3, r4, r5, lr}
 80095a2:	4d07      	ldr	r5, [pc, #28]	@ (80095c0 <_write_r+0x20>)
 80095a4:	4604      	mov	r4, r0
 80095a6:	4608      	mov	r0, r1
 80095a8:	4611      	mov	r1, r2
 80095aa:	2200      	movs	r2, #0
 80095ac:	602a      	str	r2, [r5, #0]
 80095ae:	461a      	mov	r2, r3
 80095b0:	f7f6 fe5e 	bl	8000270 <_write>
 80095b4:	1c43      	adds	r3, r0, #1
 80095b6:	d102      	bne.n	80095be <_write_r+0x1e>
 80095b8:	682b      	ldr	r3, [r5, #0]
 80095ba:	b103      	cbz	r3, 80095be <_write_r+0x1e>
 80095bc:	6023      	str	r3, [r4, #0]
 80095be:	bd38      	pop	{r3, r4, r5, pc}
 80095c0:	200003c4 	.word	0x200003c4

080095c4 <__errno>:
 80095c4:	4b01      	ldr	r3, [pc, #4]	@ (80095cc <__errno+0x8>)
 80095c6:	6818      	ldr	r0, [r3, #0]
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	20000038 	.word	0x20000038

080095d0 <__libc_init_array>:
 80095d0:	b570      	push	{r4, r5, r6, lr}
 80095d2:	4d0d      	ldr	r5, [pc, #52]	@ (8009608 <__libc_init_array+0x38>)
 80095d4:	4c0d      	ldr	r4, [pc, #52]	@ (800960c <__libc_init_array+0x3c>)
 80095d6:	1b64      	subs	r4, r4, r5
 80095d8:	10a4      	asrs	r4, r4, #2
 80095da:	2600      	movs	r6, #0
 80095dc:	42a6      	cmp	r6, r4
 80095de:	d109      	bne.n	80095f4 <__libc_init_array+0x24>
 80095e0:	4d0b      	ldr	r5, [pc, #44]	@ (8009610 <__libc_init_array+0x40>)
 80095e2:	4c0c      	ldr	r4, [pc, #48]	@ (8009614 <__libc_init_array+0x44>)
 80095e4:	f000 fdce 	bl	800a184 <_init>
 80095e8:	1b64      	subs	r4, r4, r5
 80095ea:	10a4      	asrs	r4, r4, #2
 80095ec:	2600      	movs	r6, #0
 80095ee:	42a6      	cmp	r6, r4
 80095f0:	d105      	bne.n	80095fe <__libc_init_array+0x2e>
 80095f2:	bd70      	pop	{r4, r5, r6, pc}
 80095f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80095f8:	4798      	blx	r3
 80095fa:	3601      	adds	r6, #1
 80095fc:	e7ee      	b.n	80095dc <__libc_init_array+0xc>
 80095fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009602:	4798      	blx	r3
 8009604:	3601      	adds	r6, #1
 8009606:	e7f2      	b.n	80095ee <__libc_init_array+0x1e>
 8009608:	0800a2f8 	.word	0x0800a2f8
 800960c:	0800a2f8 	.word	0x0800a2f8
 8009610:	0800a2f8 	.word	0x0800a2f8
 8009614:	0800a2fc 	.word	0x0800a2fc

08009618 <__retarget_lock_init_recursive>:
 8009618:	4770      	bx	lr

0800961a <__retarget_lock_acquire_recursive>:
 800961a:	4770      	bx	lr

0800961c <__retarget_lock_release_recursive>:
 800961c:	4770      	bx	lr

0800961e <memcpy>:
 800961e:	440a      	add	r2, r1
 8009620:	4291      	cmp	r1, r2
 8009622:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009626:	d100      	bne.n	800962a <memcpy+0xc>
 8009628:	4770      	bx	lr
 800962a:	b510      	push	{r4, lr}
 800962c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009630:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009634:	4291      	cmp	r1, r2
 8009636:	d1f9      	bne.n	800962c <memcpy+0xe>
 8009638:	bd10      	pop	{r4, pc}
	...

0800963c <_free_r>:
 800963c:	b538      	push	{r3, r4, r5, lr}
 800963e:	4605      	mov	r5, r0
 8009640:	2900      	cmp	r1, #0
 8009642:	d041      	beq.n	80096c8 <_free_r+0x8c>
 8009644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009648:	1f0c      	subs	r4, r1, #4
 800964a:	2b00      	cmp	r3, #0
 800964c:	bfb8      	it	lt
 800964e:	18e4      	addlt	r4, r4, r3
 8009650:	f000 f8e8 	bl	8009824 <__malloc_lock>
 8009654:	4a1d      	ldr	r2, [pc, #116]	@ (80096cc <_free_r+0x90>)
 8009656:	6813      	ldr	r3, [r2, #0]
 8009658:	b933      	cbnz	r3, 8009668 <_free_r+0x2c>
 800965a:	6063      	str	r3, [r4, #4]
 800965c:	6014      	str	r4, [r2, #0]
 800965e:	4628      	mov	r0, r5
 8009660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009664:	f000 b8e4 	b.w	8009830 <__malloc_unlock>
 8009668:	42a3      	cmp	r3, r4
 800966a:	d908      	bls.n	800967e <_free_r+0x42>
 800966c:	6820      	ldr	r0, [r4, #0]
 800966e:	1821      	adds	r1, r4, r0
 8009670:	428b      	cmp	r3, r1
 8009672:	bf01      	itttt	eq
 8009674:	6819      	ldreq	r1, [r3, #0]
 8009676:	685b      	ldreq	r3, [r3, #4]
 8009678:	1809      	addeq	r1, r1, r0
 800967a:	6021      	streq	r1, [r4, #0]
 800967c:	e7ed      	b.n	800965a <_free_r+0x1e>
 800967e:	461a      	mov	r2, r3
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	b10b      	cbz	r3, 8009688 <_free_r+0x4c>
 8009684:	42a3      	cmp	r3, r4
 8009686:	d9fa      	bls.n	800967e <_free_r+0x42>
 8009688:	6811      	ldr	r1, [r2, #0]
 800968a:	1850      	adds	r0, r2, r1
 800968c:	42a0      	cmp	r0, r4
 800968e:	d10b      	bne.n	80096a8 <_free_r+0x6c>
 8009690:	6820      	ldr	r0, [r4, #0]
 8009692:	4401      	add	r1, r0
 8009694:	1850      	adds	r0, r2, r1
 8009696:	4283      	cmp	r3, r0
 8009698:	6011      	str	r1, [r2, #0]
 800969a:	d1e0      	bne.n	800965e <_free_r+0x22>
 800969c:	6818      	ldr	r0, [r3, #0]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	6053      	str	r3, [r2, #4]
 80096a2:	4408      	add	r0, r1
 80096a4:	6010      	str	r0, [r2, #0]
 80096a6:	e7da      	b.n	800965e <_free_r+0x22>
 80096a8:	d902      	bls.n	80096b0 <_free_r+0x74>
 80096aa:	230c      	movs	r3, #12
 80096ac:	602b      	str	r3, [r5, #0]
 80096ae:	e7d6      	b.n	800965e <_free_r+0x22>
 80096b0:	6820      	ldr	r0, [r4, #0]
 80096b2:	1821      	adds	r1, r4, r0
 80096b4:	428b      	cmp	r3, r1
 80096b6:	bf04      	itt	eq
 80096b8:	6819      	ldreq	r1, [r3, #0]
 80096ba:	685b      	ldreq	r3, [r3, #4]
 80096bc:	6063      	str	r3, [r4, #4]
 80096be:	bf04      	itt	eq
 80096c0:	1809      	addeq	r1, r1, r0
 80096c2:	6021      	streq	r1, [r4, #0]
 80096c4:	6054      	str	r4, [r2, #4]
 80096c6:	e7ca      	b.n	800965e <_free_r+0x22>
 80096c8:	bd38      	pop	{r3, r4, r5, pc}
 80096ca:	bf00      	nop
 80096cc:	200003d0 	.word	0x200003d0

080096d0 <malloc>:
 80096d0:	4b02      	ldr	r3, [pc, #8]	@ (80096dc <malloc+0xc>)
 80096d2:	4601      	mov	r1, r0
 80096d4:	6818      	ldr	r0, [r3, #0]
 80096d6:	f000 b825 	b.w	8009724 <_malloc_r>
 80096da:	bf00      	nop
 80096dc:	20000038 	.word	0x20000038

080096e0 <sbrk_aligned>:
 80096e0:	b570      	push	{r4, r5, r6, lr}
 80096e2:	4e0f      	ldr	r6, [pc, #60]	@ (8009720 <sbrk_aligned+0x40>)
 80096e4:	460c      	mov	r4, r1
 80096e6:	6831      	ldr	r1, [r6, #0]
 80096e8:	4605      	mov	r5, r0
 80096ea:	b911      	cbnz	r1, 80096f2 <sbrk_aligned+0x12>
 80096ec:	f000 fd3a 	bl	800a164 <_sbrk_r>
 80096f0:	6030      	str	r0, [r6, #0]
 80096f2:	4621      	mov	r1, r4
 80096f4:	4628      	mov	r0, r5
 80096f6:	f000 fd35 	bl	800a164 <_sbrk_r>
 80096fa:	1c43      	adds	r3, r0, #1
 80096fc:	d103      	bne.n	8009706 <sbrk_aligned+0x26>
 80096fe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009702:	4620      	mov	r0, r4
 8009704:	bd70      	pop	{r4, r5, r6, pc}
 8009706:	1cc4      	adds	r4, r0, #3
 8009708:	f024 0403 	bic.w	r4, r4, #3
 800970c:	42a0      	cmp	r0, r4
 800970e:	d0f8      	beq.n	8009702 <sbrk_aligned+0x22>
 8009710:	1a21      	subs	r1, r4, r0
 8009712:	4628      	mov	r0, r5
 8009714:	f000 fd26 	bl	800a164 <_sbrk_r>
 8009718:	3001      	adds	r0, #1
 800971a:	d1f2      	bne.n	8009702 <sbrk_aligned+0x22>
 800971c:	e7ef      	b.n	80096fe <sbrk_aligned+0x1e>
 800971e:	bf00      	nop
 8009720:	200003cc 	.word	0x200003cc

08009724 <_malloc_r>:
 8009724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009728:	1ccd      	adds	r5, r1, #3
 800972a:	f025 0503 	bic.w	r5, r5, #3
 800972e:	3508      	adds	r5, #8
 8009730:	2d0c      	cmp	r5, #12
 8009732:	bf38      	it	cc
 8009734:	250c      	movcc	r5, #12
 8009736:	2d00      	cmp	r5, #0
 8009738:	4606      	mov	r6, r0
 800973a:	db01      	blt.n	8009740 <_malloc_r+0x1c>
 800973c:	42a9      	cmp	r1, r5
 800973e:	d904      	bls.n	800974a <_malloc_r+0x26>
 8009740:	230c      	movs	r3, #12
 8009742:	6033      	str	r3, [r6, #0]
 8009744:	2000      	movs	r0, #0
 8009746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800974a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009820 <_malloc_r+0xfc>
 800974e:	f000 f869 	bl	8009824 <__malloc_lock>
 8009752:	f8d8 3000 	ldr.w	r3, [r8]
 8009756:	461c      	mov	r4, r3
 8009758:	bb44      	cbnz	r4, 80097ac <_malloc_r+0x88>
 800975a:	4629      	mov	r1, r5
 800975c:	4630      	mov	r0, r6
 800975e:	f7ff ffbf 	bl	80096e0 <sbrk_aligned>
 8009762:	1c43      	adds	r3, r0, #1
 8009764:	4604      	mov	r4, r0
 8009766:	d158      	bne.n	800981a <_malloc_r+0xf6>
 8009768:	f8d8 4000 	ldr.w	r4, [r8]
 800976c:	4627      	mov	r7, r4
 800976e:	2f00      	cmp	r7, #0
 8009770:	d143      	bne.n	80097fa <_malloc_r+0xd6>
 8009772:	2c00      	cmp	r4, #0
 8009774:	d04b      	beq.n	800980e <_malloc_r+0xea>
 8009776:	6823      	ldr	r3, [r4, #0]
 8009778:	4639      	mov	r1, r7
 800977a:	4630      	mov	r0, r6
 800977c:	eb04 0903 	add.w	r9, r4, r3
 8009780:	f000 fcf0 	bl	800a164 <_sbrk_r>
 8009784:	4581      	cmp	r9, r0
 8009786:	d142      	bne.n	800980e <_malloc_r+0xea>
 8009788:	6821      	ldr	r1, [r4, #0]
 800978a:	1a6d      	subs	r5, r5, r1
 800978c:	4629      	mov	r1, r5
 800978e:	4630      	mov	r0, r6
 8009790:	f7ff ffa6 	bl	80096e0 <sbrk_aligned>
 8009794:	3001      	adds	r0, #1
 8009796:	d03a      	beq.n	800980e <_malloc_r+0xea>
 8009798:	6823      	ldr	r3, [r4, #0]
 800979a:	442b      	add	r3, r5
 800979c:	6023      	str	r3, [r4, #0]
 800979e:	f8d8 3000 	ldr.w	r3, [r8]
 80097a2:	685a      	ldr	r2, [r3, #4]
 80097a4:	bb62      	cbnz	r2, 8009800 <_malloc_r+0xdc>
 80097a6:	f8c8 7000 	str.w	r7, [r8]
 80097aa:	e00f      	b.n	80097cc <_malloc_r+0xa8>
 80097ac:	6822      	ldr	r2, [r4, #0]
 80097ae:	1b52      	subs	r2, r2, r5
 80097b0:	d420      	bmi.n	80097f4 <_malloc_r+0xd0>
 80097b2:	2a0b      	cmp	r2, #11
 80097b4:	d917      	bls.n	80097e6 <_malloc_r+0xc2>
 80097b6:	1961      	adds	r1, r4, r5
 80097b8:	42a3      	cmp	r3, r4
 80097ba:	6025      	str	r5, [r4, #0]
 80097bc:	bf18      	it	ne
 80097be:	6059      	strne	r1, [r3, #4]
 80097c0:	6863      	ldr	r3, [r4, #4]
 80097c2:	bf08      	it	eq
 80097c4:	f8c8 1000 	streq.w	r1, [r8]
 80097c8:	5162      	str	r2, [r4, r5]
 80097ca:	604b      	str	r3, [r1, #4]
 80097cc:	4630      	mov	r0, r6
 80097ce:	f000 f82f 	bl	8009830 <__malloc_unlock>
 80097d2:	f104 000b 	add.w	r0, r4, #11
 80097d6:	1d23      	adds	r3, r4, #4
 80097d8:	f020 0007 	bic.w	r0, r0, #7
 80097dc:	1ac2      	subs	r2, r0, r3
 80097de:	bf1c      	itt	ne
 80097e0:	1a1b      	subne	r3, r3, r0
 80097e2:	50a3      	strne	r3, [r4, r2]
 80097e4:	e7af      	b.n	8009746 <_malloc_r+0x22>
 80097e6:	6862      	ldr	r2, [r4, #4]
 80097e8:	42a3      	cmp	r3, r4
 80097ea:	bf0c      	ite	eq
 80097ec:	f8c8 2000 	streq.w	r2, [r8]
 80097f0:	605a      	strne	r2, [r3, #4]
 80097f2:	e7eb      	b.n	80097cc <_malloc_r+0xa8>
 80097f4:	4623      	mov	r3, r4
 80097f6:	6864      	ldr	r4, [r4, #4]
 80097f8:	e7ae      	b.n	8009758 <_malloc_r+0x34>
 80097fa:	463c      	mov	r4, r7
 80097fc:	687f      	ldr	r7, [r7, #4]
 80097fe:	e7b6      	b.n	800976e <_malloc_r+0x4a>
 8009800:	461a      	mov	r2, r3
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	42a3      	cmp	r3, r4
 8009806:	d1fb      	bne.n	8009800 <_malloc_r+0xdc>
 8009808:	2300      	movs	r3, #0
 800980a:	6053      	str	r3, [r2, #4]
 800980c:	e7de      	b.n	80097cc <_malloc_r+0xa8>
 800980e:	230c      	movs	r3, #12
 8009810:	6033      	str	r3, [r6, #0]
 8009812:	4630      	mov	r0, r6
 8009814:	f000 f80c 	bl	8009830 <__malloc_unlock>
 8009818:	e794      	b.n	8009744 <_malloc_r+0x20>
 800981a:	6005      	str	r5, [r0, #0]
 800981c:	e7d6      	b.n	80097cc <_malloc_r+0xa8>
 800981e:	bf00      	nop
 8009820:	200003d0 	.word	0x200003d0

08009824 <__malloc_lock>:
 8009824:	4801      	ldr	r0, [pc, #4]	@ (800982c <__malloc_lock+0x8>)
 8009826:	f7ff bef8 	b.w	800961a <__retarget_lock_acquire_recursive>
 800982a:	bf00      	nop
 800982c:	200003c8 	.word	0x200003c8

08009830 <__malloc_unlock>:
 8009830:	4801      	ldr	r0, [pc, #4]	@ (8009838 <__malloc_unlock+0x8>)
 8009832:	f7ff bef3 	b.w	800961c <__retarget_lock_release_recursive>
 8009836:	bf00      	nop
 8009838:	200003c8 	.word	0x200003c8

0800983c <__sfputc_r>:
 800983c:	6893      	ldr	r3, [r2, #8]
 800983e:	3b01      	subs	r3, #1
 8009840:	2b00      	cmp	r3, #0
 8009842:	b410      	push	{r4}
 8009844:	6093      	str	r3, [r2, #8]
 8009846:	da08      	bge.n	800985a <__sfputc_r+0x1e>
 8009848:	6994      	ldr	r4, [r2, #24]
 800984a:	42a3      	cmp	r3, r4
 800984c:	db01      	blt.n	8009852 <__sfputc_r+0x16>
 800984e:	290a      	cmp	r1, #10
 8009850:	d103      	bne.n	800985a <__sfputc_r+0x1e>
 8009852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009856:	f000 bbcf 	b.w	8009ff8 <__swbuf_r>
 800985a:	6813      	ldr	r3, [r2, #0]
 800985c:	1c58      	adds	r0, r3, #1
 800985e:	6010      	str	r0, [r2, #0]
 8009860:	7019      	strb	r1, [r3, #0]
 8009862:	4608      	mov	r0, r1
 8009864:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009868:	4770      	bx	lr

0800986a <__sfputs_r>:
 800986a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986c:	4606      	mov	r6, r0
 800986e:	460f      	mov	r7, r1
 8009870:	4614      	mov	r4, r2
 8009872:	18d5      	adds	r5, r2, r3
 8009874:	42ac      	cmp	r4, r5
 8009876:	d101      	bne.n	800987c <__sfputs_r+0x12>
 8009878:	2000      	movs	r0, #0
 800987a:	e007      	b.n	800988c <__sfputs_r+0x22>
 800987c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009880:	463a      	mov	r2, r7
 8009882:	4630      	mov	r0, r6
 8009884:	f7ff ffda 	bl	800983c <__sfputc_r>
 8009888:	1c43      	adds	r3, r0, #1
 800988a:	d1f3      	bne.n	8009874 <__sfputs_r+0xa>
 800988c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009890 <_vfiprintf_r>:
 8009890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009894:	460d      	mov	r5, r1
 8009896:	b09d      	sub	sp, #116	@ 0x74
 8009898:	4614      	mov	r4, r2
 800989a:	4698      	mov	r8, r3
 800989c:	4606      	mov	r6, r0
 800989e:	b118      	cbz	r0, 80098a8 <_vfiprintf_r+0x18>
 80098a0:	6a03      	ldr	r3, [r0, #32]
 80098a2:	b90b      	cbnz	r3, 80098a8 <_vfiprintf_r+0x18>
 80098a4:	f7ff fce6 	bl	8009274 <__sinit>
 80098a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098aa:	07d9      	lsls	r1, r3, #31
 80098ac:	d405      	bmi.n	80098ba <_vfiprintf_r+0x2a>
 80098ae:	89ab      	ldrh	r3, [r5, #12]
 80098b0:	059a      	lsls	r2, r3, #22
 80098b2:	d402      	bmi.n	80098ba <_vfiprintf_r+0x2a>
 80098b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098b6:	f7ff feb0 	bl	800961a <__retarget_lock_acquire_recursive>
 80098ba:	89ab      	ldrh	r3, [r5, #12]
 80098bc:	071b      	lsls	r3, r3, #28
 80098be:	d501      	bpl.n	80098c4 <_vfiprintf_r+0x34>
 80098c0:	692b      	ldr	r3, [r5, #16]
 80098c2:	b99b      	cbnz	r3, 80098ec <_vfiprintf_r+0x5c>
 80098c4:	4629      	mov	r1, r5
 80098c6:	4630      	mov	r0, r6
 80098c8:	f000 fbd4 	bl	800a074 <__swsetup_r>
 80098cc:	b170      	cbz	r0, 80098ec <_vfiprintf_r+0x5c>
 80098ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098d0:	07dc      	lsls	r4, r3, #31
 80098d2:	d504      	bpl.n	80098de <_vfiprintf_r+0x4e>
 80098d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098d8:	b01d      	add	sp, #116	@ 0x74
 80098da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098de:	89ab      	ldrh	r3, [r5, #12]
 80098e0:	0598      	lsls	r0, r3, #22
 80098e2:	d4f7      	bmi.n	80098d4 <_vfiprintf_r+0x44>
 80098e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098e6:	f7ff fe99 	bl	800961c <__retarget_lock_release_recursive>
 80098ea:	e7f3      	b.n	80098d4 <_vfiprintf_r+0x44>
 80098ec:	2300      	movs	r3, #0
 80098ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80098f0:	2320      	movs	r3, #32
 80098f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80098f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80098fa:	2330      	movs	r3, #48	@ 0x30
 80098fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009aac <_vfiprintf_r+0x21c>
 8009900:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009904:	f04f 0901 	mov.w	r9, #1
 8009908:	4623      	mov	r3, r4
 800990a:	469a      	mov	sl, r3
 800990c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009910:	b10a      	cbz	r2, 8009916 <_vfiprintf_r+0x86>
 8009912:	2a25      	cmp	r2, #37	@ 0x25
 8009914:	d1f9      	bne.n	800990a <_vfiprintf_r+0x7a>
 8009916:	ebba 0b04 	subs.w	fp, sl, r4
 800991a:	d00b      	beq.n	8009934 <_vfiprintf_r+0xa4>
 800991c:	465b      	mov	r3, fp
 800991e:	4622      	mov	r2, r4
 8009920:	4629      	mov	r1, r5
 8009922:	4630      	mov	r0, r6
 8009924:	f7ff ffa1 	bl	800986a <__sfputs_r>
 8009928:	3001      	adds	r0, #1
 800992a:	f000 80a7 	beq.w	8009a7c <_vfiprintf_r+0x1ec>
 800992e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009930:	445a      	add	r2, fp
 8009932:	9209      	str	r2, [sp, #36]	@ 0x24
 8009934:	f89a 3000 	ldrb.w	r3, [sl]
 8009938:	2b00      	cmp	r3, #0
 800993a:	f000 809f 	beq.w	8009a7c <_vfiprintf_r+0x1ec>
 800993e:	2300      	movs	r3, #0
 8009940:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009948:	f10a 0a01 	add.w	sl, sl, #1
 800994c:	9304      	str	r3, [sp, #16]
 800994e:	9307      	str	r3, [sp, #28]
 8009950:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009954:	931a      	str	r3, [sp, #104]	@ 0x68
 8009956:	4654      	mov	r4, sl
 8009958:	2205      	movs	r2, #5
 800995a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800995e:	4853      	ldr	r0, [pc, #332]	@ (8009aac <_vfiprintf_r+0x21c>)
 8009960:	f7f6 fc36 	bl	80001d0 <memchr>
 8009964:	9a04      	ldr	r2, [sp, #16]
 8009966:	b9d8      	cbnz	r0, 80099a0 <_vfiprintf_r+0x110>
 8009968:	06d1      	lsls	r1, r2, #27
 800996a:	bf44      	itt	mi
 800996c:	2320      	movmi	r3, #32
 800996e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009972:	0713      	lsls	r3, r2, #28
 8009974:	bf44      	itt	mi
 8009976:	232b      	movmi	r3, #43	@ 0x2b
 8009978:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800997c:	f89a 3000 	ldrb.w	r3, [sl]
 8009980:	2b2a      	cmp	r3, #42	@ 0x2a
 8009982:	d015      	beq.n	80099b0 <_vfiprintf_r+0x120>
 8009984:	9a07      	ldr	r2, [sp, #28]
 8009986:	4654      	mov	r4, sl
 8009988:	2000      	movs	r0, #0
 800998a:	f04f 0c0a 	mov.w	ip, #10
 800998e:	4621      	mov	r1, r4
 8009990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009994:	3b30      	subs	r3, #48	@ 0x30
 8009996:	2b09      	cmp	r3, #9
 8009998:	d94b      	bls.n	8009a32 <_vfiprintf_r+0x1a2>
 800999a:	b1b0      	cbz	r0, 80099ca <_vfiprintf_r+0x13a>
 800999c:	9207      	str	r2, [sp, #28]
 800999e:	e014      	b.n	80099ca <_vfiprintf_r+0x13a>
 80099a0:	eba0 0308 	sub.w	r3, r0, r8
 80099a4:	fa09 f303 	lsl.w	r3, r9, r3
 80099a8:	4313      	orrs	r3, r2
 80099aa:	9304      	str	r3, [sp, #16]
 80099ac:	46a2      	mov	sl, r4
 80099ae:	e7d2      	b.n	8009956 <_vfiprintf_r+0xc6>
 80099b0:	9b03      	ldr	r3, [sp, #12]
 80099b2:	1d19      	adds	r1, r3, #4
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	9103      	str	r1, [sp, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	bfbb      	ittet	lt
 80099bc:	425b      	neglt	r3, r3
 80099be:	f042 0202 	orrlt.w	r2, r2, #2
 80099c2:	9307      	strge	r3, [sp, #28]
 80099c4:	9307      	strlt	r3, [sp, #28]
 80099c6:	bfb8      	it	lt
 80099c8:	9204      	strlt	r2, [sp, #16]
 80099ca:	7823      	ldrb	r3, [r4, #0]
 80099cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80099ce:	d10a      	bne.n	80099e6 <_vfiprintf_r+0x156>
 80099d0:	7863      	ldrb	r3, [r4, #1]
 80099d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80099d4:	d132      	bne.n	8009a3c <_vfiprintf_r+0x1ac>
 80099d6:	9b03      	ldr	r3, [sp, #12]
 80099d8:	1d1a      	adds	r2, r3, #4
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	9203      	str	r2, [sp, #12]
 80099de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099e2:	3402      	adds	r4, #2
 80099e4:	9305      	str	r3, [sp, #20]
 80099e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009abc <_vfiprintf_r+0x22c>
 80099ea:	7821      	ldrb	r1, [r4, #0]
 80099ec:	2203      	movs	r2, #3
 80099ee:	4650      	mov	r0, sl
 80099f0:	f7f6 fbee 	bl	80001d0 <memchr>
 80099f4:	b138      	cbz	r0, 8009a06 <_vfiprintf_r+0x176>
 80099f6:	9b04      	ldr	r3, [sp, #16]
 80099f8:	eba0 000a 	sub.w	r0, r0, sl
 80099fc:	2240      	movs	r2, #64	@ 0x40
 80099fe:	4082      	lsls	r2, r0
 8009a00:	4313      	orrs	r3, r2
 8009a02:	3401      	adds	r4, #1
 8009a04:	9304      	str	r3, [sp, #16]
 8009a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a0a:	4829      	ldr	r0, [pc, #164]	@ (8009ab0 <_vfiprintf_r+0x220>)
 8009a0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a10:	2206      	movs	r2, #6
 8009a12:	f7f6 fbdd 	bl	80001d0 <memchr>
 8009a16:	2800      	cmp	r0, #0
 8009a18:	d03f      	beq.n	8009a9a <_vfiprintf_r+0x20a>
 8009a1a:	4b26      	ldr	r3, [pc, #152]	@ (8009ab4 <_vfiprintf_r+0x224>)
 8009a1c:	bb1b      	cbnz	r3, 8009a66 <_vfiprintf_r+0x1d6>
 8009a1e:	9b03      	ldr	r3, [sp, #12]
 8009a20:	3307      	adds	r3, #7
 8009a22:	f023 0307 	bic.w	r3, r3, #7
 8009a26:	3308      	adds	r3, #8
 8009a28:	9303      	str	r3, [sp, #12]
 8009a2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a2c:	443b      	add	r3, r7
 8009a2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a30:	e76a      	b.n	8009908 <_vfiprintf_r+0x78>
 8009a32:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a36:	460c      	mov	r4, r1
 8009a38:	2001      	movs	r0, #1
 8009a3a:	e7a8      	b.n	800998e <_vfiprintf_r+0xfe>
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	3401      	adds	r4, #1
 8009a40:	9305      	str	r3, [sp, #20]
 8009a42:	4619      	mov	r1, r3
 8009a44:	f04f 0c0a 	mov.w	ip, #10
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a4e:	3a30      	subs	r2, #48	@ 0x30
 8009a50:	2a09      	cmp	r2, #9
 8009a52:	d903      	bls.n	8009a5c <_vfiprintf_r+0x1cc>
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d0c6      	beq.n	80099e6 <_vfiprintf_r+0x156>
 8009a58:	9105      	str	r1, [sp, #20]
 8009a5a:	e7c4      	b.n	80099e6 <_vfiprintf_r+0x156>
 8009a5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a60:	4604      	mov	r4, r0
 8009a62:	2301      	movs	r3, #1
 8009a64:	e7f0      	b.n	8009a48 <_vfiprintf_r+0x1b8>
 8009a66:	ab03      	add	r3, sp, #12
 8009a68:	9300      	str	r3, [sp, #0]
 8009a6a:	462a      	mov	r2, r5
 8009a6c:	4b12      	ldr	r3, [pc, #72]	@ (8009ab8 <_vfiprintf_r+0x228>)
 8009a6e:	a904      	add	r1, sp, #16
 8009a70:	4630      	mov	r0, r6
 8009a72:	f3af 8000 	nop.w
 8009a76:	4607      	mov	r7, r0
 8009a78:	1c78      	adds	r0, r7, #1
 8009a7a:	d1d6      	bne.n	8009a2a <_vfiprintf_r+0x19a>
 8009a7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a7e:	07d9      	lsls	r1, r3, #31
 8009a80:	d405      	bmi.n	8009a8e <_vfiprintf_r+0x1fe>
 8009a82:	89ab      	ldrh	r3, [r5, #12]
 8009a84:	059a      	lsls	r2, r3, #22
 8009a86:	d402      	bmi.n	8009a8e <_vfiprintf_r+0x1fe>
 8009a88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a8a:	f7ff fdc7 	bl	800961c <__retarget_lock_release_recursive>
 8009a8e:	89ab      	ldrh	r3, [r5, #12]
 8009a90:	065b      	lsls	r3, r3, #25
 8009a92:	f53f af1f 	bmi.w	80098d4 <_vfiprintf_r+0x44>
 8009a96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a98:	e71e      	b.n	80098d8 <_vfiprintf_r+0x48>
 8009a9a:	ab03      	add	r3, sp, #12
 8009a9c:	9300      	str	r3, [sp, #0]
 8009a9e:	462a      	mov	r2, r5
 8009aa0:	4b05      	ldr	r3, [pc, #20]	@ (8009ab8 <_vfiprintf_r+0x228>)
 8009aa2:	a904      	add	r1, sp, #16
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	f000 f879 	bl	8009b9c <_printf_i>
 8009aaa:	e7e4      	b.n	8009a76 <_vfiprintf_r+0x1e6>
 8009aac:	0800a2bc 	.word	0x0800a2bc
 8009ab0:	0800a2c6 	.word	0x0800a2c6
 8009ab4:	00000000 	.word	0x00000000
 8009ab8:	0800986b 	.word	0x0800986b
 8009abc:	0800a2c2 	.word	0x0800a2c2

08009ac0 <_printf_common>:
 8009ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac4:	4616      	mov	r6, r2
 8009ac6:	4698      	mov	r8, r3
 8009ac8:	688a      	ldr	r2, [r1, #8]
 8009aca:	690b      	ldr	r3, [r1, #16]
 8009acc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	bfb8      	it	lt
 8009ad4:	4613      	movlt	r3, r2
 8009ad6:	6033      	str	r3, [r6, #0]
 8009ad8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009adc:	4607      	mov	r7, r0
 8009ade:	460c      	mov	r4, r1
 8009ae0:	b10a      	cbz	r2, 8009ae6 <_printf_common+0x26>
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	6033      	str	r3, [r6, #0]
 8009ae6:	6823      	ldr	r3, [r4, #0]
 8009ae8:	0699      	lsls	r1, r3, #26
 8009aea:	bf42      	ittt	mi
 8009aec:	6833      	ldrmi	r3, [r6, #0]
 8009aee:	3302      	addmi	r3, #2
 8009af0:	6033      	strmi	r3, [r6, #0]
 8009af2:	6825      	ldr	r5, [r4, #0]
 8009af4:	f015 0506 	ands.w	r5, r5, #6
 8009af8:	d106      	bne.n	8009b08 <_printf_common+0x48>
 8009afa:	f104 0a19 	add.w	sl, r4, #25
 8009afe:	68e3      	ldr	r3, [r4, #12]
 8009b00:	6832      	ldr	r2, [r6, #0]
 8009b02:	1a9b      	subs	r3, r3, r2
 8009b04:	42ab      	cmp	r3, r5
 8009b06:	dc26      	bgt.n	8009b56 <_printf_common+0x96>
 8009b08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009b0c:	6822      	ldr	r2, [r4, #0]
 8009b0e:	3b00      	subs	r3, #0
 8009b10:	bf18      	it	ne
 8009b12:	2301      	movne	r3, #1
 8009b14:	0692      	lsls	r2, r2, #26
 8009b16:	d42b      	bmi.n	8009b70 <_printf_common+0xb0>
 8009b18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009b1c:	4641      	mov	r1, r8
 8009b1e:	4638      	mov	r0, r7
 8009b20:	47c8      	blx	r9
 8009b22:	3001      	adds	r0, #1
 8009b24:	d01e      	beq.n	8009b64 <_printf_common+0xa4>
 8009b26:	6823      	ldr	r3, [r4, #0]
 8009b28:	6922      	ldr	r2, [r4, #16]
 8009b2a:	f003 0306 	and.w	r3, r3, #6
 8009b2e:	2b04      	cmp	r3, #4
 8009b30:	bf02      	ittt	eq
 8009b32:	68e5      	ldreq	r5, [r4, #12]
 8009b34:	6833      	ldreq	r3, [r6, #0]
 8009b36:	1aed      	subeq	r5, r5, r3
 8009b38:	68a3      	ldr	r3, [r4, #8]
 8009b3a:	bf0c      	ite	eq
 8009b3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b40:	2500      	movne	r5, #0
 8009b42:	4293      	cmp	r3, r2
 8009b44:	bfc4      	itt	gt
 8009b46:	1a9b      	subgt	r3, r3, r2
 8009b48:	18ed      	addgt	r5, r5, r3
 8009b4a:	2600      	movs	r6, #0
 8009b4c:	341a      	adds	r4, #26
 8009b4e:	42b5      	cmp	r5, r6
 8009b50:	d11a      	bne.n	8009b88 <_printf_common+0xc8>
 8009b52:	2000      	movs	r0, #0
 8009b54:	e008      	b.n	8009b68 <_printf_common+0xa8>
 8009b56:	2301      	movs	r3, #1
 8009b58:	4652      	mov	r2, sl
 8009b5a:	4641      	mov	r1, r8
 8009b5c:	4638      	mov	r0, r7
 8009b5e:	47c8      	blx	r9
 8009b60:	3001      	adds	r0, #1
 8009b62:	d103      	bne.n	8009b6c <_printf_common+0xac>
 8009b64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b6c:	3501      	adds	r5, #1
 8009b6e:	e7c6      	b.n	8009afe <_printf_common+0x3e>
 8009b70:	18e1      	adds	r1, r4, r3
 8009b72:	1c5a      	adds	r2, r3, #1
 8009b74:	2030      	movs	r0, #48	@ 0x30
 8009b76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009b7a:	4422      	add	r2, r4
 8009b7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009b80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009b84:	3302      	adds	r3, #2
 8009b86:	e7c7      	b.n	8009b18 <_printf_common+0x58>
 8009b88:	2301      	movs	r3, #1
 8009b8a:	4622      	mov	r2, r4
 8009b8c:	4641      	mov	r1, r8
 8009b8e:	4638      	mov	r0, r7
 8009b90:	47c8      	blx	r9
 8009b92:	3001      	adds	r0, #1
 8009b94:	d0e6      	beq.n	8009b64 <_printf_common+0xa4>
 8009b96:	3601      	adds	r6, #1
 8009b98:	e7d9      	b.n	8009b4e <_printf_common+0x8e>
	...

08009b9c <_printf_i>:
 8009b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba0:	7e0f      	ldrb	r7, [r1, #24]
 8009ba2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009ba4:	2f78      	cmp	r7, #120	@ 0x78
 8009ba6:	4691      	mov	r9, r2
 8009ba8:	4680      	mov	r8, r0
 8009baa:	460c      	mov	r4, r1
 8009bac:	469a      	mov	sl, r3
 8009bae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009bb2:	d807      	bhi.n	8009bc4 <_printf_i+0x28>
 8009bb4:	2f62      	cmp	r7, #98	@ 0x62
 8009bb6:	d80a      	bhi.n	8009bce <_printf_i+0x32>
 8009bb8:	2f00      	cmp	r7, #0
 8009bba:	f000 80d2 	beq.w	8009d62 <_printf_i+0x1c6>
 8009bbe:	2f58      	cmp	r7, #88	@ 0x58
 8009bc0:	f000 80b9 	beq.w	8009d36 <_printf_i+0x19a>
 8009bc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009bc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009bcc:	e03a      	b.n	8009c44 <_printf_i+0xa8>
 8009bce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009bd2:	2b15      	cmp	r3, #21
 8009bd4:	d8f6      	bhi.n	8009bc4 <_printf_i+0x28>
 8009bd6:	a101      	add	r1, pc, #4	@ (adr r1, 8009bdc <_printf_i+0x40>)
 8009bd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bdc:	08009c35 	.word	0x08009c35
 8009be0:	08009c49 	.word	0x08009c49
 8009be4:	08009bc5 	.word	0x08009bc5
 8009be8:	08009bc5 	.word	0x08009bc5
 8009bec:	08009bc5 	.word	0x08009bc5
 8009bf0:	08009bc5 	.word	0x08009bc5
 8009bf4:	08009c49 	.word	0x08009c49
 8009bf8:	08009bc5 	.word	0x08009bc5
 8009bfc:	08009bc5 	.word	0x08009bc5
 8009c00:	08009bc5 	.word	0x08009bc5
 8009c04:	08009bc5 	.word	0x08009bc5
 8009c08:	08009d49 	.word	0x08009d49
 8009c0c:	08009c73 	.word	0x08009c73
 8009c10:	08009d03 	.word	0x08009d03
 8009c14:	08009bc5 	.word	0x08009bc5
 8009c18:	08009bc5 	.word	0x08009bc5
 8009c1c:	08009d6b 	.word	0x08009d6b
 8009c20:	08009bc5 	.word	0x08009bc5
 8009c24:	08009c73 	.word	0x08009c73
 8009c28:	08009bc5 	.word	0x08009bc5
 8009c2c:	08009bc5 	.word	0x08009bc5
 8009c30:	08009d0b 	.word	0x08009d0b
 8009c34:	6833      	ldr	r3, [r6, #0]
 8009c36:	1d1a      	adds	r2, r3, #4
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	6032      	str	r2, [r6, #0]
 8009c3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009c44:	2301      	movs	r3, #1
 8009c46:	e09d      	b.n	8009d84 <_printf_i+0x1e8>
 8009c48:	6833      	ldr	r3, [r6, #0]
 8009c4a:	6820      	ldr	r0, [r4, #0]
 8009c4c:	1d19      	adds	r1, r3, #4
 8009c4e:	6031      	str	r1, [r6, #0]
 8009c50:	0606      	lsls	r6, r0, #24
 8009c52:	d501      	bpl.n	8009c58 <_printf_i+0xbc>
 8009c54:	681d      	ldr	r5, [r3, #0]
 8009c56:	e003      	b.n	8009c60 <_printf_i+0xc4>
 8009c58:	0645      	lsls	r5, r0, #25
 8009c5a:	d5fb      	bpl.n	8009c54 <_printf_i+0xb8>
 8009c5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009c60:	2d00      	cmp	r5, #0
 8009c62:	da03      	bge.n	8009c6c <_printf_i+0xd0>
 8009c64:	232d      	movs	r3, #45	@ 0x2d
 8009c66:	426d      	negs	r5, r5
 8009c68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c6c:	4859      	ldr	r0, [pc, #356]	@ (8009dd4 <_printf_i+0x238>)
 8009c6e:	230a      	movs	r3, #10
 8009c70:	e011      	b.n	8009c96 <_printf_i+0xfa>
 8009c72:	6821      	ldr	r1, [r4, #0]
 8009c74:	6833      	ldr	r3, [r6, #0]
 8009c76:	0608      	lsls	r0, r1, #24
 8009c78:	f853 5b04 	ldr.w	r5, [r3], #4
 8009c7c:	d402      	bmi.n	8009c84 <_printf_i+0xe8>
 8009c7e:	0649      	lsls	r1, r1, #25
 8009c80:	bf48      	it	mi
 8009c82:	b2ad      	uxthmi	r5, r5
 8009c84:	2f6f      	cmp	r7, #111	@ 0x6f
 8009c86:	4853      	ldr	r0, [pc, #332]	@ (8009dd4 <_printf_i+0x238>)
 8009c88:	6033      	str	r3, [r6, #0]
 8009c8a:	bf14      	ite	ne
 8009c8c:	230a      	movne	r3, #10
 8009c8e:	2308      	moveq	r3, #8
 8009c90:	2100      	movs	r1, #0
 8009c92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009c96:	6866      	ldr	r6, [r4, #4]
 8009c98:	60a6      	str	r6, [r4, #8]
 8009c9a:	2e00      	cmp	r6, #0
 8009c9c:	bfa2      	ittt	ge
 8009c9e:	6821      	ldrge	r1, [r4, #0]
 8009ca0:	f021 0104 	bicge.w	r1, r1, #4
 8009ca4:	6021      	strge	r1, [r4, #0]
 8009ca6:	b90d      	cbnz	r5, 8009cac <_printf_i+0x110>
 8009ca8:	2e00      	cmp	r6, #0
 8009caa:	d04b      	beq.n	8009d44 <_printf_i+0x1a8>
 8009cac:	4616      	mov	r6, r2
 8009cae:	fbb5 f1f3 	udiv	r1, r5, r3
 8009cb2:	fb03 5711 	mls	r7, r3, r1, r5
 8009cb6:	5dc7      	ldrb	r7, [r0, r7]
 8009cb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009cbc:	462f      	mov	r7, r5
 8009cbe:	42bb      	cmp	r3, r7
 8009cc0:	460d      	mov	r5, r1
 8009cc2:	d9f4      	bls.n	8009cae <_printf_i+0x112>
 8009cc4:	2b08      	cmp	r3, #8
 8009cc6:	d10b      	bne.n	8009ce0 <_printf_i+0x144>
 8009cc8:	6823      	ldr	r3, [r4, #0]
 8009cca:	07df      	lsls	r7, r3, #31
 8009ccc:	d508      	bpl.n	8009ce0 <_printf_i+0x144>
 8009cce:	6923      	ldr	r3, [r4, #16]
 8009cd0:	6861      	ldr	r1, [r4, #4]
 8009cd2:	4299      	cmp	r1, r3
 8009cd4:	bfde      	ittt	le
 8009cd6:	2330      	movle	r3, #48	@ 0x30
 8009cd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009cdc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009ce0:	1b92      	subs	r2, r2, r6
 8009ce2:	6122      	str	r2, [r4, #16]
 8009ce4:	f8cd a000 	str.w	sl, [sp]
 8009ce8:	464b      	mov	r3, r9
 8009cea:	aa03      	add	r2, sp, #12
 8009cec:	4621      	mov	r1, r4
 8009cee:	4640      	mov	r0, r8
 8009cf0:	f7ff fee6 	bl	8009ac0 <_printf_common>
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	d14a      	bne.n	8009d8e <_printf_i+0x1f2>
 8009cf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009cfc:	b004      	add	sp, #16
 8009cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d02:	6823      	ldr	r3, [r4, #0]
 8009d04:	f043 0320 	orr.w	r3, r3, #32
 8009d08:	6023      	str	r3, [r4, #0]
 8009d0a:	4833      	ldr	r0, [pc, #204]	@ (8009dd8 <_printf_i+0x23c>)
 8009d0c:	2778      	movs	r7, #120	@ 0x78
 8009d0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009d12:	6823      	ldr	r3, [r4, #0]
 8009d14:	6831      	ldr	r1, [r6, #0]
 8009d16:	061f      	lsls	r7, r3, #24
 8009d18:	f851 5b04 	ldr.w	r5, [r1], #4
 8009d1c:	d402      	bmi.n	8009d24 <_printf_i+0x188>
 8009d1e:	065f      	lsls	r7, r3, #25
 8009d20:	bf48      	it	mi
 8009d22:	b2ad      	uxthmi	r5, r5
 8009d24:	6031      	str	r1, [r6, #0]
 8009d26:	07d9      	lsls	r1, r3, #31
 8009d28:	bf44      	itt	mi
 8009d2a:	f043 0320 	orrmi.w	r3, r3, #32
 8009d2e:	6023      	strmi	r3, [r4, #0]
 8009d30:	b11d      	cbz	r5, 8009d3a <_printf_i+0x19e>
 8009d32:	2310      	movs	r3, #16
 8009d34:	e7ac      	b.n	8009c90 <_printf_i+0xf4>
 8009d36:	4827      	ldr	r0, [pc, #156]	@ (8009dd4 <_printf_i+0x238>)
 8009d38:	e7e9      	b.n	8009d0e <_printf_i+0x172>
 8009d3a:	6823      	ldr	r3, [r4, #0]
 8009d3c:	f023 0320 	bic.w	r3, r3, #32
 8009d40:	6023      	str	r3, [r4, #0]
 8009d42:	e7f6      	b.n	8009d32 <_printf_i+0x196>
 8009d44:	4616      	mov	r6, r2
 8009d46:	e7bd      	b.n	8009cc4 <_printf_i+0x128>
 8009d48:	6833      	ldr	r3, [r6, #0]
 8009d4a:	6825      	ldr	r5, [r4, #0]
 8009d4c:	6961      	ldr	r1, [r4, #20]
 8009d4e:	1d18      	adds	r0, r3, #4
 8009d50:	6030      	str	r0, [r6, #0]
 8009d52:	062e      	lsls	r6, r5, #24
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	d501      	bpl.n	8009d5c <_printf_i+0x1c0>
 8009d58:	6019      	str	r1, [r3, #0]
 8009d5a:	e002      	b.n	8009d62 <_printf_i+0x1c6>
 8009d5c:	0668      	lsls	r0, r5, #25
 8009d5e:	d5fb      	bpl.n	8009d58 <_printf_i+0x1bc>
 8009d60:	8019      	strh	r1, [r3, #0]
 8009d62:	2300      	movs	r3, #0
 8009d64:	6123      	str	r3, [r4, #16]
 8009d66:	4616      	mov	r6, r2
 8009d68:	e7bc      	b.n	8009ce4 <_printf_i+0x148>
 8009d6a:	6833      	ldr	r3, [r6, #0]
 8009d6c:	1d1a      	adds	r2, r3, #4
 8009d6e:	6032      	str	r2, [r6, #0]
 8009d70:	681e      	ldr	r6, [r3, #0]
 8009d72:	6862      	ldr	r2, [r4, #4]
 8009d74:	2100      	movs	r1, #0
 8009d76:	4630      	mov	r0, r6
 8009d78:	f7f6 fa2a 	bl	80001d0 <memchr>
 8009d7c:	b108      	cbz	r0, 8009d82 <_printf_i+0x1e6>
 8009d7e:	1b80      	subs	r0, r0, r6
 8009d80:	6060      	str	r0, [r4, #4]
 8009d82:	6863      	ldr	r3, [r4, #4]
 8009d84:	6123      	str	r3, [r4, #16]
 8009d86:	2300      	movs	r3, #0
 8009d88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d8c:	e7aa      	b.n	8009ce4 <_printf_i+0x148>
 8009d8e:	6923      	ldr	r3, [r4, #16]
 8009d90:	4632      	mov	r2, r6
 8009d92:	4649      	mov	r1, r9
 8009d94:	4640      	mov	r0, r8
 8009d96:	47d0      	blx	sl
 8009d98:	3001      	adds	r0, #1
 8009d9a:	d0ad      	beq.n	8009cf8 <_printf_i+0x15c>
 8009d9c:	6823      	ldr	r3, [r4, #0]
 8009d9e:	079b      	lsls	r3, r3, #30
 8009da0:	d413      	bmi.n	8009dca <_printf_i+0x22e>
 8009da2:	68e0      	ldr	r0, [r4, #12]
 8009da4:	9b03      	ldr	r3, [sp, #12]
 8009da6:	4298      	cmp	r0, r3
 8009da8:	bfb8      	it	lt
 8009daa:	4618      	movlt	r0, r3
 8009dac:	e7a6      	b.n	8009cfc <_printf_i+0x160>
 8009dae:	2301      	movs	r3, #1
 8009db0:	4632      	mov	r2, r6
 8009db2:	4649      	mov	r1, r9
 8009db4:	4640      	mov	r0, r8
 8009db6:	47d0      	blx	sl
 8009db8:	3001      	adds	r0, #1
 8009dba:	d09d      	beq.n	8009cf8 <_printf_i+0x15c>
 8009dbc:	3501      	adds	r5, #1
 8009dbe:	68e3      	ldr	r3, [r4, #12]
 8009dc0:	9903      	ldr	r1, [sp, #12]
 8009dc2:	1a5b      	subs	r3, r3, r1
 8009dc4:	42ab      	cmp	r3, r5
 8009dc6:	dcf2      	bgt.n	8009dae <_printf_i+0x212>
 8009dc8:	e7eb      	b.n	8009da2 <_printf_i+0x206>
 8009dca:	2500      	movs	r5, #0
 8009dcc:	f104 0619 	add.w	r6, r4, #25
 8009dd0:	e7f5      	b.n	8009dbe <_printf_i+0x222>
 8009dd2:	bf00      	nop
 8009dd4:	0800a2cd 	.word	0x0800a2cd
 8009dd8:	0800a2de 	.word	0x0800a2de

08009ddc <__sflush_r>:
 8009ddc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009de4:	0716      	lsls	r6, r2, #28
 8009de6:	4605      	mov	r5, r0
 8009de8:	460c      	mov	r4, r1
 8009dea:	d454      	bmi.n	8009e96 <__sflush_r+0xba>
 8009dec:	684b      	ldr	r3, [r1, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	dc02      	bgt.n	8009df8 <__sflush_r+0x1c>
 8009df2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	dd48      	ble.n	8009e8a <__sflush_r+0xae>
 8009df8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009dfa:	2e00      	cmp	r6, #0
 8009dfc:	d045      	beq.n	8009e8a <__sflush_r+0xae>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009e04:	682f      	ldr	r7, [r5, #0]
 8009e06:	6a21      	ldr	r1, [r4, #32]
 8009e08:	602b      	str	r3, [r5, #0]
 8009e0a:	d030      	beq.n	8009e6e <__sflush_r+0x92>
 8009e0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009e0e:	89a3      	ldrh	r3, [r4, #12]
 8009e10:	0759      	lsls	r1, r3, #29
 8009e12:	d505      	bpl.n	8009e20 <__sflush_r+0x44>
 8009e14:	6863      	ldr	r3, [r4, #4]
 8009e16:	1ad2      	subs	r2, r2, r3
 8009e18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009e1a:	b10b      	cbz	r3, 8009e20 <__sflush_r+0x44>
 8009e1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009e1e:	1ad2      	subs	r2, r2, r3
 8009e20:	2300      	movs	r3, #0
 8009e22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e24:	6a21      	ldr	r1, [r4, #32]
 8009e26:	4628      	mov	r0, r5
 8009e28:	47b0      	blx	r6
 8009e2a:	1c43      	adds	r3, r0, #1
 8009e2c:	89a3      	ldrh	r3, [r4, #12]
 8009e2e:	d106      	bne.n	8009e3e <__sflush_r+0x62>
 8009e30:	6829      	ldr	r1, [r5, #0]
 8009e32:	291d      	cmp	r1, #29
 8009e34:	d82b      	bhi.n	8009e8e <__sflush_r+0xb2>
 8009e36:	4a2a      	ldr	r2, [pc, #168]	@ (8009ee0 <__sflush_r+0x104>)
 8009e38:	410a      	asrs	r2, r1
 8009e3a:	07d6      	lsls	r6, r2, #31
 8009e3c:	d427      	bmi.n	8009e8e <__sflush_r+0xb2>
 8009e3e:	2200      	movs	r2, #0
 8009e40:	6062      	str	r2, [r4, #4]
 8009e42:	04d9      	lsls	r1, r3, #19
 8009e44:	6922      	ldr	r2, [r4, #16]
 8009e46:	6022      	str	r2, [r4, #0]
 8009e48:	d504      	bpl.n	8009e54 <__sflush_r+0x78>
 8009e4a:	1c42      	adds	r2, r0, #1
 8009e4c:	d101      	bne.n	8009e52 <__sflush_r+0x76>
 8009e4e:	682b      	ldr	r3, [r5, #0]
 8009e50:	b903      	cbnz	r3, 8009e54 <__sflush_r+0x78>
 8009e52:	6560      	str	r0, [r4, #84]	@ 0x54
 8009e54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e56:	602f      	str	r7, [r5, #0]
 8009e58:	b1b9      	cbz	r1, 8009e8a <__sflush_r+0xae>
 8009e5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e5e:	4299      	cmp	r1, r3
 8009e60:	d002      	beq.n	8009e68 <__sflush_r+0x8c>
 8009e62:	4628      	mov	r0, r5
 8009e64:	f7ff fbea 	bl	800963c <_free_r>
 8009e68:	2300      	movs	r3, #0
 8009e6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e6c:	e00d      	b.n	8009e8a <__sflush_r+0xae>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	4628      	mov	r0, r5
 8009e72:	47b0      	blx	r6
 8009e74:	4602      	mov	r2, r0
 8009e76:	1c50      	adds	r0, r2, #1
 8009e78:	d1c9      	bne.n	8009e0e <__sflush_r+0x32>
 8009e7a:	682b      	ldr	r3, [r5, #0]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d0c6      	beq.n	8009e0e <__sflush_r+0x32>
 8009e80:	2b1d      	cmp	r3, #29
 8009e82:	d001      	beq.n	8009e88 <__sflush_r+0xac>
 8009e84:	2b16      	cmp	r3, #22
 8009e86:	d11e      	bne.n	8009ec6 <__sflush_r+0xea>
 8009e88:	602f      	str	r7, [r5, #0]
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	e022      	b.n	8009ed4 <__sflush_r+0xf8>
 8009e8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e92:	b21b      	sxth	r3, r3
 8009e94:	e01b      	b.n	8009ece <__sflush_r+0xf2>
 8009e96:	690f      	ldr	r7, [r1, #16]
 8009e98:	2f00      	cmp	r7, #0
 8009e9a:	d0f6      	beq.n	8009e8a <__sflush_r+0xae>
 8009e9c:	0793      	lsls	r3, r2, #30
 8009e9e:	680e      	ldr	r6, [r1, #0]
 8009ea0:	bf08      	it	eq
 8009ea2:	694b      	ldreq	r3, [r1, #20]
 8009ea4:	600f      	str	r7, [r1, #0]
 8009ea6:	bf18      	it	ne
 8009ea8:	2300      	movne	r3, #0
 8009eaa:	eba6 0807 	sub.w	r8, r6, r7
 8009eae:	608b      	str	r3, [r1, #8]
 8009eb0:	f1b8 0f00 	cmp.w	r8, #0
 8009eb4:	dde9      	ble.n	8009e8a <__sflush_r+0xae>
 8009eb6:	6a21      	ldr	r1, [r4, #32]
 8009eb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009eba:	4643      	mov	r3, r8
 8009ebc:	463a      	mov	r2, r7
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	47b0      	blx	r6
 8009ec2:	2800      	cmp	r0, #0
 8009ec4:	dc08      	bgt.n	8009ed8 <__sflush_r+0xfc>
 8009ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ece:	81a3      	strh	r3, [r4, #12]
 8009ed0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ed8:	4407      	add	r7, r0
 8009eda:	eba8 0800 	sub.w	r8, r8, r0
 8009ede:	e7e7      	b.n	8009eb0 <__sflush_r+0xd4>
 8009ee0:	dfbffffe 	.word	0xdfbffffe

08009ee4 <_fflush_r>:
 8009ee4:	b538      	push	{r3, r4, r5, lr}
 8009ee6:	690b      	ldr	r3, [r1, #16]
 8009ee8:	4605      	mov	r5, r0
 8009eea:	460c      	mov	r4, r1
 8009eec:	b913      	cbnz	r3, 8009ef4 <_fflush_r+0x10>
 8009eee:	2500      	movs	r5, #0
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	bd38      	pop	{r3, r4, r5, pc}
 8009ef4:	b118      	cbz	r0, 8009efe <_fflush_r+0x1a>
 8009ef6:	6a03      	ldr	r3, [r0, #32]
 8009ef8:	b90b      	cbnz	r3, 8009efe <_fflush_r+0x1a>
 8009efa:	f7ff f9bb 	bl	8009274 <__sinit>
 8009efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d0f3      	beq.n	8009eee <_fflush_r+0xa>
 8009f06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009f08:	07d0      	lsls	r0, r2, #31
 8009f0a:	d404      	bmi.n	8009f16 <_fflush_r+0x32>
 8009f0c:	0599      	lsls	r1, r3, #22
 8009f0e:	d402      	bmi.n	8009f16 <_fflush_r+0x32>
 8009f10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f12:	f7ff fb82 	bl	800961a <__retarget_lock_acquire_recursive>
 8009f16:	4628      	mov	r0, r5
 8009f18:	4621      	mov	r1, r4
 8009f1a:	f7ff ff5f 	bl	8009ddc <__sflush_r>
 8009f1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009f20:	07da      	lsls	r2, r3, #31
 8009f22:	4605      	mov	r5, r0
 8009f24:	d4e4      	bmi.n	8009ef0 <_fflush_r+0xc>
 8009f26:	89a3      	ldrh	r3, [r4, #12]
 8009f28:	059b      	lsls	r3, r3, #22
 8009f2a:	d4e1      	bmi.n	8009ef0 <_fflush_r+0xc>
 8009f2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f2e:	f7ff fb75 	bl	800961c <__retarget_lock_release_recursive>
 8009f32:	e7dd      	b.n	8009ef0 <_fflush_r+0xc>

08009f34 <__swhatbuf_r>:
 8009f34:	b570      	push	{r4, r5, r6, lr}
 8009f36:	460c      	mov	r4, r1
 8009f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f3c:	2900      	cmp	r1, #0
 8009f3e:	b096      	sub	sp, #88	@ 0x58
 8009f40:	4615      	mov	r5, r2
 8009f42:	461e      	mov	r6, r3
 8009f44:	da0d      	bge.n	8009f62 <__swhatbuf_r+0x2e>
 8009f46:	89a3      	ldrh	r3, [r4, #12]
 8009f48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f4c:	f04f 0100 	mov.w	r1, #0
 8009f50:	bf14      	ite	ne
 8009f52:	2340      	movne	r3, #64	@ 0x40
 8009f54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f58:	2000      	movs	r0, #0
 8009f5a:	6031      	str	r1, [r6, #0]
 8009f5c:	602b      	str	r3, [r5, #0]
 8009f5e:	b016      	add	sp, #88	@ 0x58
 8009f60:	bd70      	pop	{r4, r5, r6, pc}
 8009f62:	466a      	mov	r2, sp
 8009f64:	f000 f8dc 	bl	800a120 <_fstat_r>
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	dbec      	blt.n	8009f46 <__swhatbuf_r+0x12>
 8009f6c:	9901      	ldr	r1, [sp, #4]
 8009f6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f76:	4259      	negs	r1, r3
 8009f78:	4159      	adcs	r1, r3
 8009f7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f7e:	e7eb      	b.n	8009f58 <__swhatbuf_r+0x24>

08009f80 <__smakebuf_r>:
 8009f80:	898b      	ldrh	r3, [r1, #12]
 8009f82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f84:	079d      	lsls	r5, r3, #30
 8009f86:	4606      	mov	r6, r0
 8009f88:	460c      	mov	r4, r1
 8009f8a:	d507      	bpl.n	8009f9c <__smakebuf_r+0x1c>
 8009f8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009f90:	6023      	str	r3, [r4, #0]
 8009f92:	6123      	str	r3, [r4, #16]
 8009f94:	2301      	movs	r3, #1
 8009f96:	6163      	str	r3, [r4, #20]
 8009f98:	b003      	add	sp, #12
 8009f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f9c:	ab01      	add	r3, sp, #4
 8009f9e:	466a      	mov	r2, sp
 8009fa0:	f7ff ffc8 	bl	8009f34 <__swhatbuf_r>
 8009fa4:	9f00      	ldr	r7, [sp, #0]
 8009fa6:	4605      	mov	r5, r0
 8009fa8:	4639      	mov	r1, r7
 8009faa:	4630      	mov	r0, r6
 8009fac:	f7ff fbba 	bl	8009724 <_malloc_r>
 8009fb0:	b948      	cbnz	r0, 8009fc6 <__smakebuf_r+0x46>
 8009fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fb6:	059a      	lsls	r2, r3, #22
 8009fb8:	d4ee      	bmi.n	8009f98 <__smakebuf_r+0x18>
 8009fba:	f023 0303 	bic.w	r3, r3, #3
 8009fbe:	f043 0302 	orr.w	r3, r3, #2
 8009fc2:	81a3      	strh	r3, [r4, #12]
 8009fc4:	e7e2      	b.n	8009f8c <__smakebuf_r+0xc>
 8009fc6:	89a3      	ldrh	r3, [r4, #12]
 8009fc8:	6020      	str	r0, [r4, #0]
 8009fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fce:	81a3      	strh	r3, [r4, #12]
 8009fd0:	9b01      	ldr	r3, [sp, #4]
 8009fd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009fd6:	b15b      	cbz	r3, 8009ff0 <__smakebuf_r+0x70>
 8009fd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fdc:	4630      	mov	r0, r6
 8009fde:	f000 f8b1 	bl	800a144 <_isatty_r>
 8009fe2:	b128      	cbz	r0, 8009ff0 <__smakebuf_r+0x70>
 8009fe4:	89a3      	ldrh	r3, [r4, #12]
 8009fe6:	f023 0303 	bic.w	r3, r3, #3
 8009fea:	f043 0301 	orr.w	r3, r3, #1
 8009fee:	81a3      	strh	r3, [r4, #12]
 8009ff0:	89a3      	ldrh	r3, [r4, #12]
 8009ff2:	431d      	orrs	r5, r3
 8009ff4:	81a5      	strh	r5, [r4, #12]
 8009ff6:	e7cf      	b.n	8009f98 <__smakebuf_r+0x18>

08009ff8 <__swbuf_r>:
 8009ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffa:	460e      	mov	r6, r1
 8009ffc:	4614      	mov	r4, r2
 8009ffe:	4605      	mov	r5, r0
 800a000:	b118      	cbz	r0, 800a00a <__swbuf_r+0x12>
 800a002:	6a03      	ldr	r3, [r0, #32]
 800a004:	b90b      	cbnz	r3, 800a00a <__swbuf_r+0x12>
 800a006:	f7ff f935 	bl	8009274 <__sinit>
 800a00a:	69a3      	ldr	r3, [r4, #24]
 800a00c:	60a3      	str	r3, [r4, #8]
 800a00e:	89a3      	ldrh	r3, [r4, #12]
 800a010:	071a      	lsls	r2, r3, #28
 800a012:	d501      	bpl.n	800a018 <__swbuf_r+0x20>
 800a014:	6923      	ldr	r3, [r4, #16]
 800a016:	b943      	cbnz	r3, 800a02a <__swbuf_r+0x32>
 800a018:	4621      	mov	r1, r4
 800a01a:	4628      	mov	r0, r5
 800a01c:	f000 f82a 	bl	800a074 <__swsetup_r>
 800a020:	b118      	cbz	r0, 800a02a <__swbuf_r+0x32>
 800a022:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a026:	4638      	mov	r0, r7
 800a028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	6922      	ldr	r2, [r4, #16]
 800a02e:	1a98      	subs	r0, r3, r2
 800a030:	6963      	ldr	r3, [r4, #20]
 800a032:	b2f6      	uxtb	r6, r6
 800a034:	4283      	cmp	r3, r0
 800a036:	4637      	mov	r7, r6
 800a038:	dc05      	bgt.n	800a046 <__swbuf_r+0x4e>
 800a03a:	4621      	mov	r1, r4
 800a03c:	4628      	mov	r0, r5
 800a03e:	f7ff ff51 	bl	8009ee4 <_fflush_r>
 800a042:	2800      	cmp	r0, #0
 800a044:	d1ed      	bne.n	800a022 <__swbuf_r+0x2a>
 800a046:	68a3      	ldr	r3, [r4, #8]
 800a048:	3b01      	subs	r3, #1
 800a04a:	60a3      	str	r3, [r4, #8]
 800a04c:	6823      	ldr	r3, [r4, #0]
 800a04e:	1c5a      	adds	r2, r3, #1
 800a050:	6022      	str	r2, [r4, #0]
 800a052:	701e      	strb	r6, [r3, #0]
 800a054:	6962      	ldr	r2, [r4, #20]
 800a056:	1c43      	adds	r3, r0, #1
 800a058:	429a      	cmp	r2, r3
 800a05a:	d004      	beq.n	800a066 <__swbuf_r+0x6e>
 800a05c:	89a3      	ldrh	r3, [r4, #12]
 800a05e:	07db      	lsls	r3, r3, #31
 800a060:	d5e1      	bpl.n	800a026 <__swbuf_r+0x2e>
 800a062:	2e0a      	cmp	r6, #10
 800a064:	d1df      	bne.n	800a026 <__swbuf_r+0x2e>
 800a066:	4621      	mov	r1, r4
 800a068:	4628      	mov	r0, r5
 800a06a:	f7ff ff3b 	bl	8009ee4 <_fflush_r>
 800a06e:	2800      	cmp	r0, #0
 800a070:	d0d9      	beq.n	800a026 <__swbuf_r+0x2e>
 800a072:	e7d6      	b.n	800a022 <__swbuf_r+0x2a>

0800a074 <__swsetup_r>:
 800a074:	b538      	push	{r3, r4, r5, lr}
 800a076:	4b29      	ldr	r3, [pc, #164]	@ (800a11c <__swsetup_r+0xa8>)
 800a078:	4605      	mov	r5, r0
 800a07a:	6818      	ldr	r0, [r3, #0]
 800a07c:	460c      	mov	r4, r1
 800a07e:	b118      	cbz	r0, 800a088 <__swsetup_r+0x14>
 800a080:	6a03      	ldr	r3, [r0, #32]
 800a082:	b90b      	cbnz	r3, 800a088 <__swsetup_r+0x14>
 800a084:	f7ff f8f6 	bl	8009274 <__sinit>
 800a088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a08c:	0719      	lsls	r1, r3, #28
 800a08e:	d422      	bmi.n	800a0d6 <__swsetup_r+0x62>
 800a090:	06da      	lsls	r2, r3, #27
 800a092:	d407      	bmi.n	800a0a4 <__swsetup_r+0x30>
 800a094:	2209      	movs	r2, #9
 800a096:	602a      	str	r2, [r5, #0]
 800a098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a09c:	81a3      	strh	r3, [r4, #12]
 800a09e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a0a2:	e033      	b.n	800a10c <__swsetup_r+0x98>
 800a0a4:	0758      	lsls	r0, r3, #29
 800a0a6:	d512      	bpl.n	800a0ce <__swsetup_r+0x5a>
 800a0a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0aa:	b141      	cbz	r1, 800a0be <__swsetup_r+0x4a>
 800a0ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0b0:	4299      	cmp	r1, r3
 800a0b2:	d002      	beq.n	800a0ba <__swsetup_r+0x46>
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	f7ff fac1 	bl	800963c <_free_r>
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0be:	89a3      	ldrh	r3, [r4, #12]
 800a0c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a0c4:	81a3      	strh	r3, [r4, #12]
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	6063      	str	r3, [r4, #4]
 800a0ca:	6923      	ldr	r3, [r4, #16]
 800a0cc:	6023      	str	r3, [r4, #0]
 800a0ce:	89a3      	ldrh	r3, [r4, #12]
 800a0d0:	f043 0308 	orr.w	r3, r3, #8
 800a0d4:	81a3      	strh	r3, [r4, #12]
 800a0d6:	6923      	ldr	r3, [r4, #16]
 800a0d8:	b94b      	cbnz	r3, 800a0ee <__swsetup_r+0x7a>
 800a0da:	89a3      	ldrh	r3, [r4, #12]
 800a0dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a0e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0e4:	d003      	beq.n	800a0ee <__swsetup_r+0x7a>
 800a0e6:	4621      	mov	r1, r4
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	f7ff ff49 	bl	8009f80 <__smakebuf_r>
 800a0ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0f2:	f013 0201 	ands.w	r2, r3, #1
 800a0f6:	d00a      	beq.n	800a10e <__swsetup_r+0x9a>
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	60a2      	str	r2, [r4, #8]
 800a0fc:	6962      	ldr	r2, [r4, #20]
 800a0fe:	4252      	negs	r2, r2
 800a100:	61a2      	str	r2, [r4, #24]
 800a102:	6922      	ldr	r2, [r4, #16]
 800a104:	b942      	cbnz	r2, 800a118 <__swsetup_r+0xa4>
 800a106:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a10a:	d1c5      	bne.n	800a098 <__swsetup_r+0x24>
 800a10c:	bd38      	pop	{r3, r4, r5, pc}
 800a10e:	0799      	lsls	r1, r3, #30
 800a110:	bf58      	it	pl
 800a112:	6962      	ldrpl	r2, [r4, #20]
 800a114:	60a2      	str	r2, [r4, #8]
 800a116:	e7f4      	b.n	800a102 <__swsetup_r+0x8e>
 800a118:	2000      	movs	r0, #0
 800a11a:	e7f7      	b.n	800a10c <__swsetup_r+0x98>
 800a11c:	20000038 	.word	0x20000038

0800a120 <_fstat_r>:
 800a120:	b538      	push	{r3, r4, r5, lr}
 800a122:	4d07      	ldr	r5, [pc, #28]	@ (800a140 <_fstat_r+0x20>)
 800a124:	2300      	movs	r3, #0
 800a126:	4604      	mov	r4, r0
 800a128:	4608      	mov	r0, r1
 800a12a:	4611      	mov	r1, r2
 800a12c:	602b      	str	r3, [r5, #0]
 800a12e:	f7f6 fb09 	bl	8000744 <_fstat>
 800a132:	1c43      	adds	r3, r0, #1
 800a134:	d102      	bne.n	800a13c <_fstat_r+0x1c>
 800a136:	682b      	ldr	r3, [r5, #0]
 800a138:	b103      	cbz	r3, 800a13c <_fstat_r+0x1c>
 800a13a:	6023      	str	r3, [r4, #0]
 800a13c:	bd38      	pop	{r3, r4, r5, pc}
 800a13e:	bf00      	nop
 800a140:	200003c4 	.word	0x200003c4

0800a144 <_isatty_r>:
 800a144:	b538      	push	{r3, r4, r5, lr}
 800a146:	4d06      	ldr	r5, [pc, #24]	@ (800a160 <_isatty_r+0x1c>)
 800a148:	2300      	movs	r3, #0
 800a14a:	4604      	mov	r4, r0
 800a14c:	4608      	mov	r0, r1
 800a14e:	602b      	str	r3, [r5, #0]
 800a150:	f7f6 fb08 	bl	8000764 <_isatty>
 800a154:	1c43      	adds	r3, r0, #1
 800a156:	d102      	bne.n	800a15e <_isatty_r+0x1a>
 800a158:	682b      	ldr	r3, [r5, #0]
 800a15a:	b103      	cbz	r3, 800a15e <_isatty_r+0x1a>
 800a15c:	6023      	str	r3, [r4, #0]
 800a15e:	bd38      	pop	{r3, r4, r5, pc}
 800a160:	200003c4 	.word	0x200003c4

0800a164 <_sbrk_r>:
 800a164:	b538      	push	{r3, r4, r5, lr}
 800a166:	4d06      	ldr	r5, [pc, #24]	@ (800a180 <_sbrk_r+0x1c>)
 800a168:	2300      	movs	r3, #0
 800a16a:	4604      	mov	r4, r0
 800a16c:	4608      	mov	r0, r1
 800a16e:	602b      	str	r3, [r5, #0]
 800a170:	f7f6 fb10 	bl	8000794 <_sbrk>
 800a174:	1c43      	adds	r3, r0, #1
 800a176:	d102      	bne.n	800a17e <_sbrk_r+0x1a>
 800a178:	682b      	ldr	r3, [r5, #0]
 800a17a:	b103      	cbz	r3, 800a17e <_sbrk_r+0x1a>
 800a17c:	6023      	str	r3, [r4, #0]
 800a17e:	bd38      	pop	{r3, r4, r5, pc}
 800a180:	200003c4 	.word	0x200003c4

0800a184 <_init>:
 800a184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a186:	bf00      	nop
 800a188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a18a:	bc08      	pop	{r3}
 800a18c:	469e      	mov	lr, r3
 800a18e:	4770      	bx	lr

0800a190 <_fini>:
 800a190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a192:	bf00      	nop
 800a194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a196:	bc08      	pop	{r3}
 800a198:	469e      	mov	lr, r3
 800a19a:	4770      	bx	lr
