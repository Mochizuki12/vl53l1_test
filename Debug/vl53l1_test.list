
vl53l1_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c630  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800c7c0  0800c7c0  0000d7c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc58  0800cc58  0000e204  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc58  0800cc58  0000dc58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc60  0800cc60  0000e204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc60  0800cc60  0000dc60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cc64  0800cc64  0000dc64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000204  20000000  0800cc68  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e204  2**0
                  CONTENTS
 10 .bss          0000034c  20000204  20000204  0000e204  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000550  20000550  0000e204  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023eb9  00000000  00000000  0000e234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002eab  00000000  00000000  000320ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c0  00000000  00000000  00034f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e74  00000000  00000000  00036258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000211f5  00000000  00000000  000370cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017d9a  00000000  00000000  000582c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be015  00000000  00000000  0007005b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012e070  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000602c  00000000  00000000  0012e0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  001340e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c7a8 	.word	0x0800c7a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	0800c7a8 	.word	0x0800c7a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <I2C_Dev_Search>:
I2C_HandleTypeDef hi2c1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
void I2C_Dev_Search(){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b0a6      	sub	sp, #152	@ 0x98
 8000bac:	af02      	add	r7, sp, #8

    uint8_t FindNum=0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    uint8_t FindDev[128];

    printf("*** I2C Device Search Start! ***\n\r");
 8000bb4:	4841      	ldr	r0, [pc, #260]	@ (8000cbc <I2C_Dev_Search+0x114>)
 8000bb6:	f009 fd75 	bl	800a6a4 <iprintf>
    for(int i=0; i<0xff;i=i+2){
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000bc0:	e044      	b.n	8000c4c <I2C_Dev_Search+0xa4>

        uint8_t res=HAL_I2C_Master_Transmit(&hi2c1, i,(uint8_t*)0x00,0,50);
 8000bc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000bc6:	b299      	uxth	r1, r3
 8000bc8:	2332      	movs	r3, #50	@ 0x32
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	2300      	movs	r3, #0
 8000bce:	2200      	movs	r2, #0
 8000bd0:	483b      	ldr	r0, [pc, #236]	@ (8000cc0 <I2C_Dev_Search+0x118>)
 8000bd2:	f000 ff91 	bl	8001af8 <HAL_I2C_Master_Transmit>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
        if(res==HAL_OK){
 8000bdc:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d113      	bne.n	8000c0c <I2C_Dev_Search+0x64>
            FindDev[FindNum]=i;
 8000be4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000be8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	3390      	adds	r3, #144	@ 0x90
 8000bf0:	443b      	add	r3, r7
 8000bf2:	f803 2c90 	strb.w	r2, [r3, #-144]
            FindNum++;
 8000bf6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            printf("[0x%X] \t",i);
 8000c00:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8000c04:	482f      	ldr	r0, [pc, #188]	@ (8000cc4 <I2C_Dev_Search+0x11c>)
 8000c06:	f009 fd4d 	bl	800a6a4 <iprintf>
 8000c0a:	e004      	b.n	8000c16 <I2C_Dev_Search+0x6e>
        }
        else{
            printf("0x%X \t",i);
 8000c0c:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8000c10:	482d      	ldr	r0, [pc, #180]	@ (8000cc8 <I2C_Dev_Search+0x120>)
 8000c12:	f009 fd47 	bl	800a6a4 <iprintf>
        }

        if((i+2)%10==0)printf("\n");
 8000c16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000c1a:	1c99      	adds	r1, r3, #2
 8000c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000ccc <I2C_Dev_Search+0x124>)
 8000c1e:	fb83 2301 	smull	r2, r3, r3, r1
 8000c22:	109a      	asrs	r2, r3, #2
 8000c24:	17cb      	asrs	r3, r1, #31
 8000c26:	1ad2      	subs	r2, r2, r3
 8000c28:	4613      	mov	r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	4413      	add	r3, r2
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	1aca      	subs	r2, r1, r3
 8000c32:	2a00      	cmp	r2, #0
 8000c34:	d102      	bne.n	8000c3c <I2C_Dev_Search+0x94>
 8000c36:	200a      	movs	r0, #10
 8000c38:	f009 fd46 	bl	800a6c8 <putchar>
        HAL_Delay(1);
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f000 fc4f 	bl	80014e0 <HAL_Delay>
    for(int i=0; i<0xff;i=i+2){
 8000c42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000c46:	3302      	adds	r3, #2
 8000c48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000c4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000c50:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c52:	ddb6      	ble.n	8000bc2 <I2C_Dev_Search+0x1a>
    }
    printf("\nDevice Found: %d \n",FindNum);
 8000c54:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000c58:	4619      	mov	r1, r3
 8000c5a:	481d      	ldr	r0, [pc, #116]	@ (8000cd0 <I2C_Dev_Search+0x128>)
 8000c5c:	f009 fd22 	bl	800a6a4 <iprintf>
    for(int i=0; i<FindNum; i++){
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000c66:	e018      	b.n	8000c9a <I2C_Dev_Search+0xf2>
        printf("Device No. %d  Address: 0x%X (0x%X)\n",i+1,FindDev[i],FindDev[i]>>1);
 8000c68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000c6c:	1c59      	adds	r1, r3, #1
 8000c6e:	463a      	mov	r2, r7
 8000c70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000c74:	4413      	add	r3, r2
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	463a      	mov	r2, r7
 8000c7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000c80:	4413      	add	r3, r2
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	085b      	lsrs	r3, r3, #1
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	4602      	mov	r2, r0
 8000c8a:	4812      	ldr	r0, [pc, #72]	@ (8000cd4 <I2C_Dev_Search+0x12c>)
 8000c8c:	f009 fd0a 	bl	800a6a4 <iprintf>
    for(int i=0; i<FindNum; i++){
 8000c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000c94:	3301      	adds	r3, #1
 8000c96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000c9a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000c9e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	dbe0      	blt.n	8000c68 <I2C_Dev_Search+0xc0>
    }
    printf("*** I2C Device Search Finished! ***\n\r");
 8000ca6:	480c      	ldr	r0, [pc, #48]	@ (8000cd8 <I2C_Dev_Search+0x130>)
 8000ca8:	f009 fcfc 	bl	800a6a4 <iprintf>
    HAL_Delay(100);
 8000cac:	2064      	movs	r0, #100	@ 0x64
 8000cae:	f000 fc17 	bl	80014e0 <HAL_Delay>

}
 8000cb2:	bf00      	nop
 8000cb4:	3790      	adds	r7, #144	@ 0x90
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	0800c7c0 	.word	0x0800c7c0
 8000cc0:	20000220 	.word	0x20000220
 8000cc4:	0800c7e4 	.word	0x0800c7e4
 8000cc8:	0800c7f0 	.word	0x0800c7f0
 8000ccc:	66666667 	.word	0x66666667
 8000cd0:	0800c7f8 	.word	0x0800c7f8
 8000cd4:	0800c80c 	.word	0x0800c80c
 8000cd8:	0800c834 	.word	0x0800c834

08000cdc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	230a      	movs	r3, #10
 8000cee:	68b9      	ldr	r1, [r7, #8]
 8000cf0:	4803      	ldr	r0, [pc, #12]	@ (8000d00 <_write+0x24>)
 8000cf2:	f002 ffff 	bl	8003cf4 <HAL_UART_Transmit>
  return len;
 8000cf6:	687b      	ldr	r3, [r7, #4]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000274 	.word	0x20000274

08000d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  setbuf(stdout, NULL);
 8000d0c:	4b61      	ldr	r3, [pc, #388]	@ (8000e94 <main+0x190>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f009 fcdf 	bl	800a6d8 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d1a:	f000 fb7b 	bl	8001414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d1e:	f000 f8c1 	bl	8000ea4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d22:	f000 f97f 	bl	8001024 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d26:	f000 f94d 	bl	8000fc4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000d2a:	f000 f90d 	bl	8000f48 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Dev.I2cDevAddr = 0x54;
 8000d2e:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8000d32:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8000d36:	2254      	movs	r2, #84	@ 0x54
 8000d38:	f883 2398 	strb.w	r2, [r3, #920]	@ 0x398
  Dev.I2cHandle = &hi2c1;
 8000d3c:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8000d40:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8000d44:	4a54      	ldr	r2, [pc, #336]	@ (8000e98 <main+0x194>)
 8000d46:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
  Dev.comms_type = 1;
 8000d4a:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8000d4e:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8000d52:	2201      	movs	r2, #1
 8000d54:	f883 2399 	strb.w	r2, [r3, #921]	@ 0x399
  Dev.comms_speed_khz = 400;
 8000d58:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8000d5c:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8000d60:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000d64:	f8a3 239a 	strh.w	r2, [r3, #922]	@ 0x39a

  //sensor initialize;
  while(1){
	  Status = VL53L1_WaitDeviceBooted(&Dev);
 8000d68:	f107 0320 	add.w	r3, r7, #32
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f003 fbee 	bl	800454e <VL53L1_WaitDeviceBooted>
 8000d72:	4603      	mov	r3, r0
 8000d74:	f887 33c7 	strb.w	r3, [r7, #967]	@ 0x3c7
	  break;
 8000d78:	bf00      	nop
	  if(Status == 0){
	  	  break;
	    }
  }
  VL53L1_software_reset(&Dev);
 8000d7a:	f107 0320 	add.w	r3, r7, #32
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f004 fd11 	bl	80057a6 <VL53L1_software_reset>
  printf("%d\n\r",Status);
 8000d84:	f997 33c7 	ldrsb.w	r3, [r7, #967]	@ 0x3c7
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4844      	ldr	r0, [pc, #272]	@ (8000e9c <main+0x198>)
 8000d8c:	f009 fc8a 	bl	800a6a4 <iprintf>
  Status = VL53L1_DataInit(&Dev);
 8000d90:	f107 0320 	add.w	r3, r7, #32
 8000d94:	4618      	mov	r0, r3
 8000d96:	f003 fb82 	bl	800449e <VL53L1_DataInit>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	f887 33c7 	strb.w	r3, [r7, #967]	@ 0x3c7
  printf("%d\n\r",Status);
 8000da0:	f997 33c7 	ldrsb.w	r3, [r7, #967]	@ 0x3c7
 8000da4:	4619      	mov	r1, r3
 8000da6:	483d      	ldr	r0, [pc, #244]	@ (8000e9c <main+0x198>)
 8000da8:	f009 fc7c 	bl	800a6a4 <iprintf>
  Status = VL53L1_StaticInit(&Dev);
 8000dac:	f107 0320 	add.w	r3, r7, #32
 8000db0:	4618      	mov	r0, r3
 8000db2:	f003 fbad 	bl	8004510 <VL53L1_StaticInit>
 8000db6:	4603      	mov	r3, r0
 8000db8:	f887 33c7 	strb.w	r3, [r7, #967]	@ 0x3c7
  printf("%d\n\r",Status);
 8000dbc:	f997 33c7 	ldrsb.w	r3, [r7, #967]	@ 0x3c7
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4836      	ldr	r0, [pc, #216]	@ (8000e9c <main+0x198>)
 8000dc4:	f009 fc6e 	bl	800a6a4 <iprintf>
  Status = VL53L1_SetPresetMode(&Dev, VL53L1_PRESETMODE_AUTONOMOUS);
 8000dc8:	f107 0320 	add.w	r3, r7, #32
 8000dcc:	2103      	movs	r1, #3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f003 fca7 	bl	8004722 <VL53L1_SetPresetMode>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	f887 33c7 	strb.w	r3, [r7, #967]	@ 0x3c7
  printf("%d\n\r",Status);
 8000dda:	f997 33c7 	ldrsb.w	r3, [r7, #967]	@ 0x3c7
 8000dde:	4619      	mov	r1, r3
 8000de0:	482e      	ldr	r0, [pc, #184]	@ (8000e9c <main+0x198>)
 8000de2:	f009 fc5f 	bl	800a6a4 <iprintf>
  Status = VL53L1_SetDistanceMode(&Dev, VL53L1_DISTANCEMODE_LONG);
 8000de6:	f107 0320 	add.w	r3, r7, #32
 8000dea:	2103      	movs	r1, #3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 fcdd 	bl	80047ac <VL53L1_SetDistanceMode>
 8000df2:	4603      	mov	r3, r0
 8000df4:	f887 33c7 	strb.w	r3, [r7, #967]	@ 0x3c7
  printf("%d\n\r",Status);
 8000df8:	f997 33c7 	ldrsb.w	r3, [r7, #967]	@ 0x3c7
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4827      	ldr	r0, [pc, #156]	@ (8000e9c <main+0x198>)
 8000e00:	f009 fc50 	bl	800a6a4 <iprintf>
  Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(&Dev, 50);
 8000e04:	f107 0320 	add.w	r3, r7, #32
 8000e08:	2132      	movs	r1, #50	@ 0x32
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f003 fece 	bl	8004bac <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8000e10:	4603      	mov	r3, r0
 8000e12:	f887 33c7 	strb.w	r3, [r7, #967]	@ 0x3c7
  printf("%d\n\r",Status);
 8000e16:	f997 33c7 	ldrsb.w	r3, [r7, #967]	@ 0x3c7
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	481f      	ldr	r0, [pc, #124]	@ (8000e9c <main+0x198>)
 8000e1e:	f009 fc41 	bl	800a6a4 <iprintf>

  //start
  VL53L1_StartMeasurement(&Dev);
 8000e22:	f107 0320 	add.w	r3, r7, #32
 8000e26:	4618      	mov	r0, r3
 8000e28:	f003 fffe 	bl	8004e28 <VL53L1_StartMeasurement>
  I2C_Dev_Search();
 8000e2c:	f7ff febc 	bl	8000ba8 <I2C_Dev_Search>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
   uint8_t data_ready = 0;
 8000e30:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8000e34:	f2a3 33c5 	subw	r3, r3, #965	@ 0x3c5
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
	VL53L1_GetMeasurementDataReady(&Dev, &data_ready);
 8000e3c:	1cfa      	adds	r2, r7, #3
 8000e3e:	f107 0320 	add.w	r3, r7, #32
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f004 f871 	bl	8004f2c <VL53L1_GetMeasurementDataReady>
		if (!data_ready) {
 8000e4a:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8000e4e:	f2a3 33c5 	subw	r3, r3, #965	@ 0x3c5
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d01a      	beq.n	8000e8e <main+0x18a>
			continue;
		}
	VL53L1_GetRangingMeasurementData(&Dev,&data);
 8000e58:	1d3a      	adds	r2, r7, #4
 8000e5a:	f107 0320 	add.w	r3, r7, #32
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f004 fa1f 	bl	80052a4 <VL53L1_GetRangingMeasurementData>

	printf("VL53L1X: %4d\n\r", data.RangeMilliMeter);
 8000e66:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8000e6a:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 8000e6e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000e72:	4619      	mov	r1, r3
 8000e74:	480a      	ldr	r0, [pc, #40]	@ (8000ea0 <main+0x19c>)
 8000e76:	f009 fc15 	bl	800a6a4 <iprintf>
	VL53L1_ClearInterruptAndStartMeasurement(&Dev);
 8000e7a:	f107 0320 	add.w	r3, r7, #32
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f004 f83e 	bl	8004f00 <VL53L1_ClearInterruptAndStartMeasurement>
	HAL_Delay(1000);
 8000e84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e88:	f000 fb2a 	bl	80014e0 <HAL_Delay>
 8000e8c:	e7d0      	b.n	8000e30 <main+0x12c>
			continue;
 8000e8e:	bf00      	nop
  {
 8000e90:	e7ce      	b.n	8000e30 <main+0x12c>
 8000e92:	bf00      	nop
 8000e94:	20000048 	.word	0x20000048
 8000e98:	20000220 	.word	0x20000220
 8000e9c:	0800c85c 	.word	0x0800c85c
 8000ea0:	0800c864 	.word	0x0800c864

08000ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b096      	sub	sp, #88	@ 0x58
 8000ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eaa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000eae:	2228      	movs	r2, #40	@ 0x28
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f009 fd0f 	bl	800a8d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]
 8000ed6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000edc:	2301      	movs	r3, #1
 8000ede:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee0:	2310      	movs	r3, #16
 8000ee2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 fb17 	bl	8002520 <HAL_RCC_OscConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ef8:	f000 f8c4 	bl	8001084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efc:	230f      	movs	r3, #15
 8000efe:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f002 fb40 	bl	800359c <HAL_RCC_ClockConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f22:	f000 f8af 	bl	8001084 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f26:	2320      	movs	r3, #32
 8000f28:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	4618      	mov	r0, r3
 8000f32:	f002 fd6b 	bl	8003a0c <HAL_RCCEx_PeriphCLKConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f3c:	f000 f8a2 	bl	8001084 <Error_Handler>
  }
}
 8000f40:	bf00      	nop
 8000f42:	3758      	adds	r7, #88	@ 0x58
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fbc <MX_I2C1_Init+0x74>)
 8000f4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc0 <MX_I2C1_Init+0x78>)
 8000f50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	@ (8000fbc <MX_I2C1_Init+0x74>)
 8000f54:	f240 220b 	movw	r2, #523	@ 0x20b
 8000f58:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f5a:	4b18      	ldr	r3, [pc, #96]	@ (8000fbc <MX_I2C1_Init+0x74>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f60:	4b16      	ldr	r3, [pc, #88]	@ (8000fbc <MX_I2C1_Init+0x74>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f66:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <MX_I2C1_Init+0x74>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f6c:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <MX_I2C1_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f72:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <MX_I2C1_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f78:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <MX_I2C1_Init+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <MX_I2C1_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f84:	480d      	ldr	r0, [pc, #52]	@ (8000fbc <MX_I2C1_Init+0x74>)
 8000f86:	f000 fd27 	bl	80019d8 <HAL_I2C_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f90:	f000 f878 	bl	8001084 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f94:	2100      	movs	r1, #0
 8000f96:	4809      	ldr	r0, [pc, #36]	@ (8000fbc <MX_I2C1_Init+0x74>)
 8000f98:	f001 fa2a 	bl	80023f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000fa2:	f000 f86f 	bl	8001084 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4804      	ldr	r0, [pc, #16]	@ (8000fbc <MX_I2C1_Init+0x74>)
 8000faa:	f001 fa6c 	bl	8002486 <HAL_I2CEx_ConfigDigitalFilter>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000fb4:	f000 f866 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000220 	.word	0x20000220
 8000fc0:	40005400 	.word	0x40005400

08000fc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fc8:	4b14      	ldr	r3, [pc, #80]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000fca:	4a15      	ldr	r2, [pc, #84]	@ (8001020 <MX_USART2_UART_Init+0x5c>)
 8000fcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fce:	4b13      	ldr	r3, [pc, #76]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000fd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000fea:	220c      	movs	r2, #12
 8000fec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ffa:	4b08      	ldr	r3, [pc, #32]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001006:	4805      	ldr	r0, [pc, #20]	@ (800101c <MX_USART2_UART_Init+0x58>)
 8001008:	f002 fe26 	bl	8003c58 <HAL_UART_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001012:	f000 f837 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000274 	.word	0x20000274
 8001020:	40004400 	.word	0x40004400

08001024 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800102a:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <MX_GPIO_Init+0x5c>)
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	4a14      	ldr	r2, [pc, #80]	@ (8001080 <MX_GPIO_Init+0x5c>)
 8001030:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001034:	6153      	str	r3, [r2, #20]
 8001036:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <MX_GPIO_Init+0x5c>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <MX_GPIO_Init+0x5c>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	4a0e      	ldr	r2, [pc, #56]	@ (8001080 <MX_GPIO_Init+0x5c>)
 8001048:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800104c:	6153      	str	r3, [r2, #20]
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <MX_GPIO_Init+0x5c>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <MX_GPIO_Init+0x5c>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	4a08      	ldr	r2, [pc, #32]	@ (8001080 <MX_GPIO_Init+0x5c>)
 8001060:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001064:	6153      	str	r3, [r2, #20]
 8001066:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <MX_GPIO_Init+0x5c>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000

08001084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001088:	b672      	cpsid	i
}
 800108a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <Error_Handler+0x8>

08001090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <HAL_MspInit+0x44>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	4a0e      	ldr	r2, [pc, #56]	@ (80010d4 <HAL_MspInit+0x44>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6193      	str	r3, [r2, #24]
 80010a2:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <HAL_MspInit+0x44>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ae:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <HAL_MspInit+0x44>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	4a08      	ldr	r2, [pc, #32]	@ (80010d4 <HAL_MspInit+0x44>)
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010b8:	61d3      	str	r3, [r2, #28]
 80010ba:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <HAL_MspInit+0x44>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000

080010d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	@ 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a17      	ldr	r2, [pc, #92]	@ (8001154 <HAL_I2C_MspInit+0x7c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d127      	bne.n	800114a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	4b17      	ldr	r3, [pc, #92]	@ (8001158 <HAL_I2C_MspInit+0x80>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	4a16      	ldr	r2, [pc, #88]	@ (8001158 <HAL_I2C_MspInit+0x80>)
 8001100:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001104:	6153      	str	r3, [r2, #20]
 8001106:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <HAL_I2C_MspInit+0x80>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001112:	23c0      	movs	r3, #192	@ 0xc0
 8001114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001116:	2312      	movs	r3, #18
 8001118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001122:	2304      	movs	r3, #4
 8001124:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	480b      	ldr	r0, [pc, #44]	@ (800115c <HAL_I2C_MspInit+0x84>)
 800112e:	f000 fae1 	bl	80016f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001132:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <HAL_I2C_MspInit+0x80>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	4a08      	ldr	r2, [pc, #32]	@ (8001158 <HAL_I2C_MspInit+0x80>)
 8001138:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800113c:	61d3      	str	r3, [r2, #28]
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <HAL_I2C_MspInit+0x80>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800114a:	bf00      	nop
 800114c:	3728      	adds	r7, #40	@ 0x28
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40005400 	.word	0x40005400
 8001158:	40021000 	.word	0x40021000
 800115c:	48000400 	.word	0x48000400

08001160 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	@ 0x28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a18      	ldr	r2, [pc, #96]	@ (80011e0 <HAL_UART_MspInit+0x80>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d129      	bne.n	80011d6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001182:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <HAL_UART_MspInit+0x84>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	4a17      	ldr	r2, [pc, #92]	@ (80011e4 <HAL_UART_MspInit+0x84>)
 8001188:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800118c:	61d3      	str	r3, [r2, #28]
 800118e:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <HAL_UART_MspInit+0x84>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <HAL_UART_MspInit+0x84>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a11      	ldr	r2, [pc, #68]	@ (80011e4 <HAL_UART_MspInit+0x84>)
 80011a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011a4:	6153      	str	r3, [r2, #20]
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <HAL_UART_MspInit+0x84>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80011b2:	f248 0304 	movw	r3, #32772	@ 0x8004
 80011b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011c4:	2307      	movs	r3, #7
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d2:	f000 fa8f 	bl	80016f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011d6:	bf00      	nop
 80011d8:	3728      	adds	r7, #40	@ 0x28
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40004400 	.word	0x40004400
 80011e4:	40021000 	.word	0x40021000

080011e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <NMI_Handler+0x4>

080011f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <HardFault_Handler+0x4>

080011f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <MemManage_Handler+0x4>

08001200 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <BusFault_Handler+0x4>

08001208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <UsageFault_Handler+0x4>

08001210 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123e:	f000 f92f 	bl	80014a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}

08001246 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  return 1;
 800124a:	2301      	movs	r3, #1
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <_kill>:

int _kill(int pid, int sig)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001260:	f009 fb9e 	bl	800a9a0 <__errno>
 8001264:	4603      	mov	r3, r0
 8001266:	2216      	movs	r2, #22
 8001268:	601a      	str	r2, [r3, #0]
  return -1;
 800126a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <_exit>:

void _exit (int status)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800127e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ffe7 	bl	8001256 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <_exit+0x12>

0800128c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	e00a      	b.n	80012b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800129e:	f3af 8000 	nop.w
 80012a2:	4601      	mov	r1, r0
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	60ba      	str	r2, [r7, #8]
 80012aa:	b2ca      	uxtb	r2, r1
 80012ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3301      	adds	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dbf0      	blt.n	800129e <_read+0x12>
  }

  return len;
 80012bc:	687b      	ldr	r3, [r7, #4]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012ee:	605a      	str	r2, [r3, #4]
  return 0;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <_isatty>:

int _isatty(int file)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001306:	2301      	movs	r3, #1
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001338:	4a14      	ldr	r2, [pc, #80]	@ (800138c <_sbrk+0x5c>)
 800133a:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <_sbrk+0x60>)
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001344:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d102      	bne.n	8001352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800134c:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <_sbrk+0x64>)
 800134e:	4a12      	ldr	r2, [pc, #72]	@ (8001398 <_sbrk+0x68>)
 8001350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001352:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	429a      	cmp	r2, r3
 800135e:	d207      	bcs.n	8001370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001360:	f009 fb1e 	bl	800a9a0 <__errno>
 8001364:	4603      	mov	r3, r0
 8001366:	220c      	movs	r2, #12
 8001368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800136a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800136e:	e009      	b.n	8001384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001370:	4b08      	ldr	r3, [pc, #32]	@ (8001394 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001376:	4b07      	ldr	r3, [pc, #28]	@ (8001394 <_sbrk+0x64>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	4a05      	ldr	r2, [pc, #20]	@ (8001394 <_sbrk+0x64>)
 8001380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001382:	68fb      	ldr	r3, [r7, #12]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20003000 	.word	0x20003000
 8001390:	00000400 	.word	0x00000400
 8001394:	200002fc 	.word	0x200002fc
 8001398:	20000550 	.word	0x20000550

0800139c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a0:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <SystemInit+0x20>)
 80013a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013a6:	4a05      	ldr	r2, [pc, #20]	@ (80013bc <SystemInit+0x20>)
 80013a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013f8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013c4:	f7ff ffea 	bl	800139c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c8:	480c      	ldr	r0, [pc, #48]	@ (80013fc <LoopForever+0x6>)
  ldr r1, =_edata
 80013ca:	490d      	ldr	r1, [pc, #52]	@ (8001400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001404 <LoopForever+0xe>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d0:	e002      	b.n	80013d8 <LoopCopyDataInit>

080013d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d6:	3304      	adds	r3, #4

080013d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013dc:	d3f9      	bcc.n	80013d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013de:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013e0:	4c0a      	ldr	r4, [pc, #40]	@ (800140c <LoopForever+0x16>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e4:	e001      	b.n	80013ea <LoopFillZerobss>

080013e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e8:	3204      	adds	r2, #4

080013ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ec:	d3fb      	bcc.n	80013e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ee:	f009 fadd 	bl	800a9ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013f2:	f7ff fc87 	bl	8000d04 <main>

080013f6 <LoopForever>:

LoopForever:
    b LoopForever
 80013f6:	e7fe      	b.n	80013f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013f8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80013fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001400:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8001404:	0800cc68 	.word	0x0800cc68
  ldr r2, =_sbss
 8001408:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 800140c:	20000550 	.word	0x20000550

08001410 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001410:	e7fe      	b.n	8001410 <ADC1_2_IRQHandler>
	...

08001414 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <HAL_Init+0x28>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a07      	ldr	r2, [pc, #28]	@ (800143c <HAL_Init+0x28>)
 800141e:	f043 0310 	orr.w	r3, r3, #16
 8001422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001424:	2003      	movs	r0, #3
 8001426:	f000 f931 	bl	800168c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800142a:	2000      	movs	r0, #0
 800142c:	f000 f808 	bl	8001440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001430:	f7ff fe2e 	bl	8001090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40022000 	.word	0x40022000

08001440 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001448:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <HAL_InitTick+0x54>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <HAL_InitTick+0x58>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001456:	fbb3 f3f1 	udiv	r3, r3, r1
 800145a:	fbb2 f3f3 	udiv	r3, r2, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f93b 	bl	80016da <HAL_SYSTICK_Config>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e00e      	b.n	800148c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b0f      	cmp	r3, #15
 8001472:	d80a      	bhi.n	800148a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001474:	2200      	movs	r2, #0
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800147c:	f000 f911 	bl	80016a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001480:	4a06      	ldr	r2, [pc, #24]	@ (800149c <HAL_InitTick+0x5c>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	e000      	b.n	800148c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000000 	.word	0x20000000
 8001498:	20000008 	.word	0x20000008
 800149c:	20000004 	.word	0x20000004

080014a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a4:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <HAL_IncTick+0x20>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_IncTick+0x24>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	4a04      	ldr	r2, [pc, #16]	@ (80014c4 <HAL_IncTick+0x24>)
 80014b2:	6013      	str	r3, [r2, #0]
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000008 	.word	0x20000008
 80014c4:	20000300 	.word	0x20000300

080014c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80014cc:	4b03      	ldr	r3, [pc, #12]	@ (80014dc <HAL_GetTick+0x14>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000300 	.word	0x20000300

080014e0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e8:	f7ff ffee 	bl	80014c8 <HAL_GetTick>
 80014ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80014f8:	d005      	beq.n	8001506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <HAL_Delay+0x44>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001506:	bf00      	nop
 8001508:	f7ff ffde 	bl	80014c8 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	429a      	cmp	r2, r3
 8001516:	d8f7      	bhi.n	8001508 <HAL_Delay+0x28>
  {
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000008 	.word	0x20000008

08001528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001544:	4013      	ands	r3, r2
 8001546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001550:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155a:	4a04      	ldr	r2, [pc, #16]	@ (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	60d3      	str	r3, [r2, #12]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001574:	4b04      	ldr	r3, [pc, #16]	@ (8001588 <__NVIC_GetPriorityGrouping+0x18>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	f003 0307 	and.w	r3, r3, #7
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	2b00      	cmp	r3, #0
 800159e:	db0a      	blt.n	80015b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	490c      	ldr	r1, [pc, #48]	@ (80015d8 <__NVIC_SetPriority+0x4c>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	0112      	lsls	r2, r2, #4
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	440b      	add	r3, r1
 80015b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b4:	e00a      	b.n	80015cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4908      	ldr	r1, [pc, #32]	@ (80015dc <__NVIC_SetPriority+0x50>)
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	3b04      	subs	r3, #4
 80015c4:	0112      	lsls	r2, r2, #4
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	440b      	add	r3, r1
 80015ca:	761a      	strb	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000e100 	.word	0xe000e100
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	@ 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f1c3 0307 	rsb	r3, r3, #7
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	bf28      	it	cs
 80015fe:	2304      	movcs	r3, #4
 8001600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3304      	adds	r3, #4
 8001606:	2b06      	cmp	r3, #6
 8001608:	d902      	bls.n	8001610 <NVIC_EncodePriority+0x30>
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3b03      	subs	r3, #3
 800160e:	e000      	b.n	8001612 <NVIC_EncodePriority+0x32>
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43da      	mvns	r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	401a      	ands	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001628:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	43d9      	mvns	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	4313      	orrs	r3, r2
         );
}
 800163a:	4618      	mov	r0, r3
 800163c:	3724      	adds	r7, #36	@ 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001658:	d301      	bcc.n	800165e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165a:	2301      	movs	r3, #1
 800165c:	e00f      	b.n	800167e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165e:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <SysTick_Config+0x40>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001666:	210f      	movs	r1, #15
 8001668:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800166c:	f7ff ff8e 	bl	800158c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001670:	4b05      	ldr	r3, [pc, #20]	@ (8001688 <SysTick_Config+0x40>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001676:	4b04      	ldr	r3, [pc, #16]	@ (8001688 <SysTick_Config+0x40>)
 8001678:	2207      	movs	r2, #7
 800167a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	e000e010 	.word	0xe000e010

0800168c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ff47 	bl	8001528 <__NVIC_SetPriorityGrouping>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b4:	f7ff ff5c 	bl	8001570 <__NVIC_GetPriorityGrouping>
 80016b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	6978      	ldr	r0, [r7, #20]
 80016c0:	f7ff ff8e 	bl	80015e0 <NVIC_EncodePriority>
 80016c4:	4602      	mov	r2, r0
 80016c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff5d 	bl	800158c <__NVIC_SetPriority>
}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ffb0 	bl	8001648 <SysTick_Config>
 80016e8:	4603      	mov	r3, r0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001702:	e14e      	b.n	80019a2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	2101      	movs	r1, #1
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	fa01 f303 	lsl.w	r3, r1, r3
 8001710:	4013      	ands	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 8140 	beq.w	800199c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	2b01      	cmp	r3, #1
 8001726:	d005      	beq.n	8001734 <HAL_GPIO_Init+0x40>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d130      	bne.n	8001796 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	2203      	movs	r2, #3
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4313      	orrs	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800176a:	2201      	movs	r2, #1
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	091b      	lsrs	r3, r3, #4
 8001780:	f003 0201 	and.w	r2, r3, #1
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d017      	beq.n	80017d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	2203      	movs	r2, #3
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d123      	bne.n	8001826 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	08da      	lsrs	r2, r3, #3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3208      	adds	r2, #8
 80017e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	220f      	movs	r2, #15
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	691a      	ldr	r2, [r3, #16]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	08da      	lsrs	r2, r3, #3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3208      	adds	r2, #8
 8001820:	6939      	ldr	r1, [r7, #16]
 8001822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	2203      	movs	r2, #3
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 0203 	and.w	r2, r3, #3
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 809a 	beq.w	800199c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001868:	4b55      	ldr	r3, [pc, #340]	@ (80019c0 <HAL_GPIO_Init+0x2cc>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	4a54      	ldr	r2, [pc, #336]	@ (80019c0 <HAL_GPIO_Init+0x2cc>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6193      	str	r3, [r2, #24]
 8001874:	4b52      	ldr	r3, [pc, #328]	@ (80019c0 <HAL_GPIO_Init+0x2cc>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001880:	4a50      	ldr	r2, [pc, #320]	@ (80019c4 <HAL_GPIO_Init+0x2d0>)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	089b      	lsrs	r3, r3, #2
 8001886:	3302      	adds	r3, #2
 8001888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	220f      	movs	r2, #15
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80018aa:	d013      	beq.n	80018d4 <HAL_GPIO_Init+0x1e0>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a46      	ldr	r2, [pc, #280]	@ (80019c8 <HAL_GPIO_Init+0x2d4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d00d      	beq.n	80018d0 <HAL_GPIO_Init+0x1dc>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a45      	ldr	r2, [pc, #276]	@ (80019cc <HAL_GPIO_Init+0x2d8>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d007      	beq.n	80018cc <HAL_GPIO_Init+0x1d8>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a44      	ldr	r2, [pc, #272]	@ (80019d0 <HAL_GPIO_Init+0x2dc>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d101      	bne.n	80018c8 <HAL_GPIO_Init+0x1d4>
 80018c4:	2303      	movs	r3, #3
 80018c6:	e006      	b.n	80018d6 <HAL_GPIO_Init+0x1e2>
 80018c8:	2305      	movs	r3, #5
 80018ca:	e004      	b.n	80018d6 <HAL_GPIO_Init+0x1e2>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e002      	b.n	80018d6 <HAL_GPIO_Init+0x1e2>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <HAL_GPIO_Init+0x1e2>
 80018d4:	2300      	movs	r3, #0
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	f002 0203 	and.w	r2, r2, #3
 80018dc:	0092      	lsls	r2, r2, #2
 80018de:	4093      	lsls	r3, r2
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018e6:	4937      	ldr	r1, [pc, #220]	@ (80019c4 <HAL_GPIO_Init+0x2d0>)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	089b      	lsrs	r3, r3, #2
 80018ec:	3302      	adds	r3, #2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018f4:	4b37      	ldr	r3, [pc, #220]	@ (80019d4 <HAL_GPIO_Init+0x2e0>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001918:	4a2e      	ldr	r2, [pc, #184]	@ (80019d4 <HAL_GPIO_Init+0x2e0>)
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800191e:	4b2d      	ldr	r3, [pc, #180]	@ (80019d4 <HAL_GPIO_Init+0x2e0>)
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001942:	4a24      	ldr	r2, [pc, #144]	@ (80019d4 <HAL_GPIO_Init+0x2e0>)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001948:	4b22      	ldr	r3, [pc, #136]	@ (80019d4 <HAL_GPIO_Init+0x2e0>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	43db      	mvns	r3, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800196c:	4a19      	ldr	r2, [pc, #100]	@ (80019d4 <HAL_GPIO_Init+0x2e0>)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001972:	4b18      	ldr	r3, [pc, #96]	@ (80019d4 <HAL_GPIO_Init+0x2e0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001996:	4a0f      	ldr	r2, [pc, #60]	@ (80019d4 <HAL_GPIO_Init+0x2e0>)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	3301      	adds	r3, #1
 80019a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	fa22 f303 	lsr.w	r3, r2, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f47f aea9 	bne.w	8001704 <HAL_GPIO_Init+0x10>
  }
}
 80019b2:	bf00      	nop
 80019b4:	bf00      	nop
 80019b6:	371c      	adds	r7, #28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010000 	.word	0x40010000
 80019c8:	48000400 	.word	0x48000400
 80019cc:	48000800 	.word	0x48000800
 80019d0:	48000c00 	.word	0x48000c00
 80019d4:	40010400 	.word	0x40010400

080019d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e081      	b.n	8001aee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d106      	bne.n	8001a04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff fb6a 	bl	80010d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2224      	movs	r2, #36	@ 0x24
 8001a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0201 	bic.w	r2, r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d107      	bne.n	8001a52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	e006      	b.n	8001a60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001a5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d104      	bne.n	8001a72 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691a      	ldr	r2, [r3, #16]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69d9      	ldr	r1, [r3, #28]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1a      	ldr	r2, [r3, #32]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0201 	orr.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2220      	movs	r2, #32
 8001ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af02      	add	r7, sp, #8
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	461a      	mov	r2, r3
 8001b04:	460b      	mov	r3, r1
 8001b06:	817b      	strh	r3, [r7, #10]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b20      	cmp	r3, #32
 8001b16:	f040 80da 	bne.w	8001cce <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_I2C_Master_Transmit+0x30>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e0d3      	b.n	8001cd0 <HAL_I2C_Master_Transmit+0x1d8>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b30:	f7ff fcca 	bl	80014c8 <HAL_GetTick>
 8001b34:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	2319      	movs	r3, #25
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 f9e6 	bl	8001f14 <I2C_WaitOnFlagUntilTimeout>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e0be      	b.n	8001cd0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2221      	movs	r2, #33	@ 0x21
 8001b56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2210      	movs	r2, #16
 8001b5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	893a      	ldrh	r2, [r7, #8]
 8001b72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	2bff      	cmp	r3, #255	@ 0xff
 8001b82:	d90e      	bls.n	8001ba2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	22ff      	movs	r2, #255	@ 0xff
 8001b88:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	8979      	ldrh	r1, [r7, #10]
 8001b92:	4b51      	ldr	r3, [pc, #324]	@ (8001cd8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 fbf6 	bl	800238c <I2C_TransferConfig>
 8001ba0:	e06c      	b.n	8001c7c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	8979      	ldrh	r1, [r7, #10]
 8001bb4:	4b48      	ldr	r3, [pc, #288]	@ (8001cd8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f000 fbe5 	bl	800238c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001bc2:	e05b      	b.n	8001c7c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	6a39      	ldr	r1, [r7, #32]
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f000 f9f2 	bl	8001fb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e07b      	b.n	8001cd0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bdc:	781a      	ldrb	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d034      	beq.n	8001c7c <HAL_I2C_Master_Transmit+0x184>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d130      	bne.n	8001c7c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
 8001c20:	2200      	movs	r2, #0
 8001c22:	2180      	movs	r1, #128	@ 0x80
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 f975 	bl	8001f14 <I2C_WaitOnFlagUntilTimeout>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e04d      	b.n	8001cd0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	2bff      	cmp	r3, #255	@ 0xff
 8001c3c:	d90e      	bls.n	8001c5c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	22ff      	movs	r2, #255	@ 0xff
 8001c42:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	8979      	ldrh	r1, [r7, #10]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 fb99 	bl	800238c <I2C_TransferConfig>
 8001c5a:	e00f      	b.n	8001c7c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	8979      	ldrh	r1, [r7, #10]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 fb88 	bl	800238c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d19e      	bne.n	8001bc4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	6a39      	ldr	r1, [r7, #32]
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f000 f9d8 	bl	8002040 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e01a      	b.n	8001cd0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6859      	ldr	r1, [r3, #4]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <HAL_I2C_Master_Transmit+0x1e4>)
 8001cae:	400b      	ands	r3, r1
 8001cb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e000      	b.n	8001cd0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001cce:	2302      	movs	r3, #2
  }
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	80002000 	.word	0x80002000
 8001cdc:	fe00e800 	.word	0xfe00e800

08001ce0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af02      	add	r7, sp, #8
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	461a      	mov	r2, r3
 8001cec:	460b      	mov	r3, r1
 8001cee:	817b      	strh	r3, [r7, #10]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b20      	cmp	r3, #32
 8001cfe:	f040 80db 	bne.w	8001eb8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_I2C_Master_Receive+0x30>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e0d4      	b.n	8001eba <HAL_I2C_Master_Receive+0x1da>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d18:	f7ff fbd6 	bl	80014c8 <HAL_GetTick>
 8001d1c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	2319      	movs	r3, #25
 8001d24:	2201      	movs	r2, #1
 8001d26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f8f2 	bl	8001f14 <I2C_WaitOnFlagUntilTimeout>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e0bf      	b.n	8001eba <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2222      	movs	r2, #34	@ 0x22
 8001d3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2210      	movs	r2, #16
 8001d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	893a      	ldrh	r2, [r7, #8]
 8001d5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	2bff      	cmp	r3, #255	@ 0xff
 8001d6a:	d90e      	bls.n	8001d8a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	22ff      	movs	r2, #255	@ 0xff
 8001d70:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	8979      	ldrh	r1, [r7, #10]
 8001d7a:	4b52      	ldr	r3, [pc, #328]	@ (8001ec4 <HAL_I2C_Master_Receive+0x1e4>)
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 fb02 	bl	800238c <I2C_TransferConfig>
 8001d88:	e06d      	b.n	8001e66 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	8979      	ldrh	r1, [r7, #10]
 8001d9c:	4b49      	ldr	r3, [pc, #292]	@ (8001ec4 <HAL_I2C_Master_Receive+0x1e4>)
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 faf1 	bl	800238c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001daa:	e05c      	b.n	8001e66 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	6a39      	ldr	r1, [r7, #32]
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 f989 	bl	80020c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e07c      	b.n	8001eba <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	3b01      	subs	r3, #1
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d034      	beq.n	8001e66 <HAL_I2C_Master_Receive+0x186>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d130      	bne.n	8001e66 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2180      	movs	r1, #128	@ 0x80
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 f880 	bl	8001f14 <I2C_WaitOnFlagUntilTimeout>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e04d      	b.n	8001eba <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2bff      	cmp	r3, #255	@ 0xff
 8001e26:	d90e      	bls.n	8001e46 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	22ff      	movs	r2, #255	@ 0xff
 8001e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	8979      	ldrh	r1, [r7, #10]
 8001e36:	2300      	movs	r3, #0
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 faa4 	bl	800238c <I2C_TransferConfig>
 8001e44:	e00f      	b.n	8001e66 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	8979      	ldrh	r1, [r7, #10]
 8001e58:	2300      	movs	r3, #0
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f000 fa93 	bl	800238c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d19d      	bne.n	8001dac <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	6a39      	ldr	r1, [r7, #32]
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 f8e3 	bl	8002040 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e01a      	b.n	8001eba <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6859      	ldr	r1, [r3, #4]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec8 <HAL_I2C_Master_Receive+0x1e8>)
 8001e98:	400b      	ands	r3, r1
 8001e9a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	e000      	b.n	8001eba <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001eb8:	2302      	movs	r3, #2
  }
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	80002400 	.word	0x80002400
 8001ec8:	fe00e800 	.word	0xfe00e800

08001ecc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d103      	bne.n	8001eea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d007      	beq.n	8001f08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	699a      	ldr	r2, [r3, #24]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	619a      	str	r2, [r3, #24]
  }
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	4613      	mov	r3, r2
 8001f22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f24:	e031      	b.n	8001f8a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f2c:	d02d      	beq.n	8001f8a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f2e:	f7ff facb 	bl	80014c8 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d302      	bcc.n	8001f44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d122      	bne.n	8001f8a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	699a      	ldr	r2, [r3, #24]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	bf0c      	ite	eq
 8001f54:	2301      	moveq	r3, #1
 8001f56:	2300      	movne	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d113      	bne.n	8001f8a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f66:	f043 0220 	orr.w	r2, r3, #32
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2220      	movs	r2, #32
 8001f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00f      	b.n	8001faa <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699a      	ldr	r2, [r3, #24]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	4013      	ands	r3, r2
 8001f94:	68ba      	ldr	r2, [r7, #8]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	bf0c      	ite	eq
 8001f9a:	2301      	moveq	r3, #1
 8001f9c:	2300      	movne	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d0be      	beq.n	8001f26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b084      	sub	sp, #16
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	60f8      	str	r0, [r7, #12]
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fbe:	e033      	b.n	8002028 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	68b9      	ldr	r1, [r7, #8]
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 f901 	bl	80021cc <I2C_IsErrorOccurred>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e031      	b.n	8002038 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001fda:	d025      	beq.n	8002028 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fdc:	f7ff fa74 	bl	80014c8 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d302      	bcc.n	8001ff2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d11a      	bne.n	8002028 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d013      	beq.n	8002028 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002004:	f043 0220 	orr.w	r2, r3, #32
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e007      	b.n	8002038 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b02      	cmp	r3, #2
 8002034:	d1c4      	bne.n	8001fc0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800204c:	e02f      	b.n	80020ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 f8ba 	bl	80021cc <I2C_IsErrorOccurred>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e02d      	b.n	80020be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002062:	f7ff fa31 	bl	80014c8 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	429a      	cmp	r2, r3
 8002070:	d302      	bcc.n	8002078 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d11a      	bne.n	80020ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	2b20      	cmp	r3, #32
 8002084:	d013      	beq.n	80020ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208a:	f043 0220 	orr.w	r2, r3, #32
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2220      	movs	r2, #32
 8002096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e007      	b.n	80020be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f003 0320 	and.w	r3, r3, #32
 80020b8:	2b20      	cmp	r3, #32
 80020ba:	d1c8      	bne.n	800204e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020d4:	e06b      	b.n	80021ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 f876 	bl	80021cc <I2C_IsErrorOccurred>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e069      	b.n	80021be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	f003 0320 	and.w	r3, r3, #32
 80020f4:	2b20      	cmp	r3, #32
 80020f6:	d138      	bne.n	800216a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b04      	cmp	r3, #4
 8002104:	d105      	bne.n	8002112 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800210e:	2300      	movs	r3, #0
 8002110:	e055      	b.n	80021be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	2b10      	cmp	r3, #16
 800211e:	d107      	bne.n	8002130 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2210      	movs	r2, #16
 8002126:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2204      	movs	r2, #4
 800212c:	645a      	str	r2, [r3, #68]	@ 0x44
 800212e:	e002      	b.n	8002136 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2220      	movs	r2, #32
 800213c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6859      	ldr	r1, [r3, #4]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b1f      	ldr	r3, [pc, #124]	@ (80021c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800214a:	400b      	ands	r3, r1
 800214c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2220      	movs	r2, #32
 8002152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e029      	b.n	80021be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800216a:	f7ff f9ad 	bl	80014c8 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	429a      	cmp	r2, r3
 8002178:	d302      	bcc.n	8002180 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d116      	bne.n	80021ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b04      	cmp	r3, #4
 800218c:	d00f      	beq.n	80021ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002192:	f043 0220 	orr.w	r2, r3, #32
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2220      	movs	r2, #32
 800219e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e007      	b.n	80021be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d18c      	bne.n	80020d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	fe00e800 	.word	0xfe00e800

080021cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	@ 0x28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d068      	beq.n	80022ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2210      	movs	r2, #16
 80021fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002200:	e049      	b.n	8002296 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002208:	d045      	beq.n	8002296 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800220a:	f7ff f95d 	bl	80014c8 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	429a      	cmp	r2, r3
 8002218:	d302      	bcc.n	8002220 <I2C_IsErrorOccurred+0x54>
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d13a      	bne.n	8002296 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800222a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002232:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800223e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002242:	d121      	bne.n	8002288 <I2C_IsErrorOccurred+0xbc>
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800224a:	d01d      	beq.n	8002288 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800224c:	7cfb      	ldrb	r3, [r7, #19]
 800224e:	2b20      	cmp	r3, #32
 8002250:	d01a      	beq.n	8002288 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002260:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002262:	f7ff f931 	bl	80014c8 <HAL_GetTick>
 8002266:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002268:	e00e      	b.n	8002288 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800226a:	f7ff f92d 	bl	80014c8 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b19      	cmp	r3, #25
 8002276:	d907      	bls.n	8002288 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	f043 0320 	orr.w	r3, r3, #32
 800227e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002286:	e006      	b.n	8002296 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f003 0320 	and.w	r3, r3, #32
 8002292:	2b20      	cmp	r3, #32
 8002294:	d1e9      	bne.n	800226a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	f003 0320 	and.w	r3, r3, #32
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	d003      	beq.n	80022ac <I2C_IsErrorOccurred+0xe0>
 80022a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0aa      	beq.n	8002202 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80022ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d103      	bne.n	80022bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2220      	movs	r2, #32
 80022ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	f043 0304 	orr.w	r3, r3, #4
 80022c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00b      	beq.n	80022f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	f043 0308 	orr.w	r3, r3, #8
 8002304:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800230e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00b      	beq.n	8002338 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	f043 0302 	orr.w	r3, r3, #2
 8002326:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002330:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002338:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800233c:	2b00      	cmp	r3, #0
 800233e:	d01c      	beq.n	800237a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f7ff fdc3 	bl	8001ecc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6859      	ldr	r1, [r3, #4]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b0d      	ldr	r3, [pc, #52]	@ (8002388 <I2C_IsErrorOccurred+0x1bc>)
 8002352:	400b      	ands	r3, r1
 8002354:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	431a      	orrs	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2220      	movs	r2, #32
 8002366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800237a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800237e:	4618      	mov	r0, r3
 8002380:	3728      	adds	r7, #40	@ 0x28
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	fe00e800 	.word	0xfe00e800

0800238c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	607b      	str	r3, [r7, #4]
 8002396:	460b      	mov	r3, r1
 8002398:	817b      	strh	r3, [r7, #10]
 800239a:	4613      	mov	r3, r2
 800239c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800239e:	897b      	ldrh	r3, [r7, #10]
 80023a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023a4:	7a7b      	ldrb	r3, [r7, #9]
 80023a6:	041b      	lsls	r3, r3, #16
 80023a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	6a3b      	ldr	r3, [r7, #32]
 80023c4:	0d5b      	lsrs	r3, r3, #21
 80023c6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80023ca:	4b08      	ldr	r3, [pc, #32]	@ (80023ec <I2C_TransferConfig+0x60>)
 80023cc:	430b      	orrs	r3, r1
 80023ce:	43db      	mvns	r3, r3
 80023d0:	ea02 0103 	and.w	r1, r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	430a      	orrs	r2, r1
 80023dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80023de:	bf00      	nop
 80023e0:	371c      	adds	r7, #28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	03ff63ff 	.word	0x03ff63ff

080023f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b20      	cmp	r3, #32
 8002404:	d138      	bne.n	8002478 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002410:	2302      	movs	r3, #2
 8002412:	e032      	b.n	800247a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2224      	movs	r2, #36	@ 0x24
 8002420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0201 	bic.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002442:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6819      	ldr	r1, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	e000      	b.n	800247a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002478:	2302      	movs	r3, #2
  }
}
 800247a:	4618      	mov	r0, r3
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002486:	b480      	push	{r7}
 8002488:	b085      	sub	sp, #20
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b20      	cmp	r3, #32
 800249a:	d139      	bne.n	8002510 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e033      	b.n	8002512 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2224      	movs	r2, #36	@ 0x24
 80024b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0201 	bic.w	r2, r2, #1
 80024c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	021b      	lsls	r3, r3, #8
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	e000      	b.n	8002512 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002510:	2302      	movs	r3, #2
  }
}
 8002512:	4618      	mov	r0, r3
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002526:	af00      	add	r7, sp, #0
 8002528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002530:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002536:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d102      	bne.n	8002546 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	f001 b823 	b.w	800358c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 817d 	beq.w	8002856 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800255c:	4bbc      	ldr	r3, [pc, #752]	@ (8002850 <HAL_RCC_OscConfig+0x330>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 030c 	and.w	r3, r3, #12
 8002564:	2b04      	cmp	r3, #4
 8002566:	d00c      	beq.n	8002582 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002568:	4bb9      	ldr	r3, [pc, #740]	@ (8002850 <HAL_RCC_OscConfig+0x330>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 030c 	and.w	r3, r3, #12
 8002570:	2b08      	cmp	r3, #8
 8002572:	d15c      	bne.n	800262e <HAL_RCC_OscConfig+0x10e>
 8002574:	4bb6      	ldr	r3, [pc, #728]	@ (8002850 <HAL_RCC_OscConfig+0x330>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800257c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002580:	d155      	bne.n	800262e <HAL_RCC_OscConfig+0x10e>
 8002582:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002586:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800258e:	fa93 f3a3 	rbit	r3, r3
 8002592:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002596:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259a:	fab3 f383 	clz	r3, r3
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	095b      	lsrs	r3, r3, #5
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d102      	bne.n	80025b4 <HAL_RCC_OscConfig+0x94>
 80025ae:	4ba8      	ldr	r3, [pc, #672]	@ (8002850 <HAL_RCC_OscConfig+0x330>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	e015      	b.n	80025e0 <HAL_RCC_OscConfig+0xc0>
 80025b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025b8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80025c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025cc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80025d0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80025d4:	fa93 f3a3 	rbit	r3, r3
 80025d8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80025dc:	4b9c      	ldr	r3, [pc, #624]	@ (8002850 <HAL_RCC_OscConfig+0x330>)
 80025de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025e4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80025e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80025ec:	fa92 f2a2 	rbit	r2, r2
 80025f0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80025f4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80025f8:	fab2 f282 	clz	r2, r2
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	f042 0220 	orr.w	r2, r2, #32
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	f002 021f 	and.w	r2, r2, #31
 8002608:	2101      	movs	r1, #1
 800260a:	fa01 f202 	lsl.w	r2, r1, r2
 800260e:	4013      	ands	r3, r2
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 811f 	beq.w	8002854 <HAL_RCC_OscConfig+0x334>
 8002616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	f040 8116 	bne.w	8002854 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	f000 bfaf 	b.w	800358c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800262e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002632:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800263e:	d106      	bne.n	800264e <HAL_RCC_OscConfig+0x12e>
 8002640:	4b83      	ldr	r3, [pc, #524]	@ (8002850 <HAL_RCC_OscConfig+0x330>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a82      	ldr	r2, [pc, #520]	@ (8002850 <HAL_RCC_OscConfig+0x330>)
 8002646:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	e036      	b.n	80026bc <HAL_RCC_OscConfig+0x19c>
 800264e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002652:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10c      	bne.n	8002678 <HAL_RCC_OscConfig+0x158>
 800265e:	4b7c      	ldr	r3, [pc, #496]	@ (8002850 <HAL_RCC_OscConfig+0x330>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a7b      	ldr	r2, [pc, #492]	@ (8002850 <HAL_RCC_OscConfig+0x330>)
 8002664:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	4b79      	ldr	r3, [pc, #484]	@ (8002850 <HAL_RCC_OscConfig+0x330>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a78      	ldr	r2, [pc, #480]	@ (8002850 <HAL_RCC_OscConfig+0x330>)
 8002670:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	e021      	b.n	80026bc <HAL_RCC_OscConfig+0x19c>
 8002678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002688:	d10c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x184>
 800268a:	4b71      	ldr	r3, [pc, #452]	@ (8002850 <HAL_RCC_OscConfig+0x330>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a70      	ldr	r2, [pc, #448]	@ (8002850 <HAL_RCC_OscConfig+0x330>)
 8002690:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	4b6e      	ldr	r3, [pc, #440]	@ (8002850 <HAL_RCC_OscConfig+0x330>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6d      	ldr	r2, [pc, #436]	@ (8002850 <HAL_RCC_OscConfig+0x330>)
 800269c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e00b      	b.n	80026bc <HAL_RCC_OscConfig+0x19c>
 80026a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002850 <HAL_RCC_OscConfig+0x330>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a69      	ldr	r2, [pc, #420]	@ (8002850 <HAL_RCC_OscConfig+0x330>)
 80026aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4b67      	ldr	r3, [pc, #412]	@ (8002850 <HAL_RCC_OscConfig+0x330>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a66      	ldr	r2, [pc, #408]	@ (8002850 <HAL_RCC_OscConfig+0x330>)
 80026b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026bc:	4b64      	ldr	r3, [pc, #400]	@ (8002850 <HAL_RCC_OscConfig+0x330>)
 80026be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c0:	f023 020f 	bic.w	r2, r3, #15
 80026c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	495f      	ldr	r1, [pc, #380]	@ (8002850 <HAL_RCC_OscConfig+0x330>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d059      	beq.n	800279a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e6:	f7fe feef 	bl	80014c8 <HAL_GetTick>
 80026ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f0:	f7fe feea 	bl	80014c8 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b64      	cmp	r3, #100	@ 0x64
 80026fe:	d902      	bls.n	8002706 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	f000 bf43 	b.w	800358c <HAL_RCC_OscConfig+0x106c>
 8002706:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800270a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800271a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b01      	cmp	r3, #1
 8002730:	d102      	bne.n	8002738 <HAL_RCC_OscConfig+0x218>
 8002732:	4b47      	ldr	r3, [pc, #284]	@ (8002850 <HAL_RCC_OscConfig+0x330>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	e015      	b.n	8002764 <HAL_RCC_OscConfig+0x244>
 8002738:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800273c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800274c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002750:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002754:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002760:	4b3b      	ldr	r3, [pc, #236]	@ (8002850 <HAL_RCC_OscConfig+0x330>)
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002764:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002768:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800276c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002770:	fa92 f2a2 	rbit	r2, r2
 8002774:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002778:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800277c:	fab2 f282 	clz	r2, r2
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	f042 0220 	orr.w	r2, r2, #32
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	f002 021f 	and.w	r2, r2, #31
 800278c:	2101      	movs	r1, #1
 800278e:	fa01 f202 	lsl.w	r2, r1, r2
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0ab      	beq.n	80026f0 <HAL_RCC_OscConfig+0x1d0>
 8002798:	e05d      	b.n	8002856 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279a:	f7fe fe95 	bl	80014c8 <HAL_GetTick>
 800279e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a4:	f7fe fe90 	bl	80014c8 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b64      	cmp	r3, #100	@ 0x64
 80027b2:	d902      	bls.n	80027ba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	f000 bee9 	b.w	800358c <HAL_RCC_OscConfig+0x106c>
 80027ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027be:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80027ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	095b      	lsrs	r3, r3, #5
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d102      	bne.n	80027ec <HAL_RCC_OscConfig+0x2cc>
 80027e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002850 <HAL_RCC_OscConfig+0x330>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	e015      	b.n	8002818 <HAL_RCC_OscConfig+0x2f8>
 80027ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027f0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80027f8:	fa93 f3a3 	rbit	r3, r3
 80027fc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002800:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002804:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002808:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800280c:	fa93 f3a3 	rbit	r3, r3
 8002810:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002814:	4b0e      	ldr	r3, [pc, #56]	@ (8002850 <HAL_RCC_OscConfig+0x330>)
 8002816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002818:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800281c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002820:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002824:	fa92 f2a2 	rbit	r2, r2
 8002828:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800282c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002830:	fab2 f282 	clz	r2, r2
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	f042 0220 	orr.w	r2, r2, #32
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	f002 021f 	and.w	r2, r2, #31
 8002840:	2101      	movs	r1, #1
 8002842:	fa01 f202 	lsl.w	r2, r1, r2
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1ab      	bne.n	80027a4 <HAL_RCC_OscConfig+0x284>
 800284c:	e003      	b.n	8002856 <HAL_RCC_OscConfig+0x336>
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002856:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 817d 	beq.w	8002b66 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800286c:	4ba6      	ldr	r3, [pc, #664]	@ (8002b08 <HAL_RCC_OscConfig+0x5e8>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 030c 	and.w	r3, r3, #12
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00b      	beq.n	8002890 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002878:	4ba3      	ldr	r3, [pc, #652]	@ (8002b08 <HAL_RCC_OscConfig+0x5e8>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 030c 	and.w	r3, r3, #12
 8002880:	2b08      	cmp	r3, #8
 8002882:	d172      	bne.n	800296a <HAL_RCC_OscConfig+0x44a>
 8002884:	4ba0      	ldr	r3, [pc, #640]	@ (8002b08 <HAL_RCC_OscConfig+0x5e8>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d16c      	bne.n	800296a <HAL_RCC_OscConfig+0x44a>
 8002890:	2302      	movs	r3, #2
 8002892:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80028a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	095b      	lsrs	r3, r3, #5
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d102      	bne.n	80028c0 <HAL_RCC_OscConfig+0x3a0>
 80028ba:	4b93      	ldr	r3, [pc, #588]	@ (8002b08 <HAL_RCC_OscConfig+0x5e8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	e013      	b.n	80028e8 <HAL_RCC_OscConfig+0x3c8>
 80028c0:	2302      	movs	r3, #2
 80028c2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80028d2:	2302      	movs	r3, #2
 80028d4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80028d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80028dc:	fa93 f3a3 	rbit	r3, r3
 80028e0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80028e4:	4b88      	ldr	r3, [pc, #544]	@ (8002b08 <HAL_RCC_OscConfig+0x5e8>)
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	2202      	movs	r2, #2
 80028ea:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80028ee:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80028f2:	fa92 f2a2 	rbit	r2, r2
 80028f6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80028fa:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80028fe:	fab2 f282 	clz	r2, r2
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	f042 0220 	orr.w	r2, r2, #32
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	f002 021f 	and.w	r2, r2, #31
 800290e:	2101      	movs	r1, #1
 8002910:	fa01 f202 	lsl.w	r2, r1, r2
 8002914:	4013      	ands	r3, r2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCC_OscConfig+0x410>
 800291a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d002      	beq.n	8002930 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	f000 be2e 	b.w	800358c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002930:	4b75      	ldr	r3, [pc, #468]	@ (8002b08 <HAL_RCC_OscConfig+0x5e8>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	21f8      	movs	r1, #248	@ 0xf8
 8002946:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800294e:	fa91 f1a1 	rbit	r1, r1
 8002952:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002956:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800295a:	fab1 f181 	clz	r1, r1
 800295e:	b2c9      	uxtb	r1, r1
 8002960:	408b      	lsls	r3, r1
 8002962:	4969      	ldr	r1, [pc, #420]	@ (8002b08 <HAL_RCC_OscConfig+0x5e8>)
 8002964:	4313      	orrs	r3, r2
 8002966:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002968:	e0fd      	b.n	8002b66 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800296a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8088 	beq.w	8002a8c <HAL_RCC_OscConfig+0x56c>
 800297c:	2301      	movs	r3, #1
 800297e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800298e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800299c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	461a      	mov	r2, r3
 80029a4:	2301      	movs	r3, #1
 80029a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7fe fd8e 	bl	80014c8 <HAL_GetTick>
 80029ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b0:	e00a      	b.n	80029c8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029b2:	f7fe fd89 	bl	80014c8 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d902      	bls.n	80029c8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	f000 bde2 	b.w	800358c <HAL_RCC_OscConfig+0x106c>
 80029c8:	2302      	movs	r3, #2
 80029ca:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80029da:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029de:	fab3 f383 	clz	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	095b      	lsrs	r3, r3, #5
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d102      	bne.n	80029f8 <HAL_RCC_OscConfig+0x4d8>
 80029f2:	4b45      	ldr	r3, [pc, #276]	@ (8002b08 <HAL_RCC_OscConfig+0x5e8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	e013      	b.n	8002a20 <HAL_RCC_OscConfig+0x500>
 80029f8:	2302      	movs	r3, #2
 80029fa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002a10:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002a1c:	4b3a      	ldr	r3, [pc, #232]	@ (8002b08 <HAL_RCC_OscConfig+0x5e8>)
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a20:	2202      	movs	r2, #2
 8002a22:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002a26:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002a2a:	fa92 f2a2 	rbit	r2, r2
 8002a2e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002a32:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002a36:	fab2 f282 	clz	r2, r2
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	f042 0220 	orr.w	r2, r2, #32
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	f002 021f 	and.w	r2, r2, #31
 8002a46:	2101      	movs	r1, #1
 8002a48:	fa01 f202 	lsl.w	r2, r1, r2
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0af      	beq.n	80029b2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a52:	4b2d      	ldr	r3, [pc, #180]	@ (8002b08 <HAL_RCC_OscConfig+0x5e8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	21f8      	movs	r1, #248	@ 0xf8
 8002a68:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002a70:	fa91 f1a1 	rbit	r1, r1
 8002a74:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002a78:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002a7c:	fab1 f181 	clz	r1, r1
 8002a80:	b2c9      	uxtb	r1, r1
 8002a82:	408b      	lsls	r3, r1
 8002a84:	4920      	ldr	r1, [pc, #128]	@ (8002b08 <HAL_RCC_OscConfig+0x5e8>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]
 8002a8a:	e06c      	b.n	8002b66 <HAL_RCC_OscConfig+0x646>
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002a9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aa2:	fab3 f383 	clz	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002aac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fd06 	bl	80014c8 <HAL_GetTick>
 8002abc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac0:	e00a      	b.n	8002ad8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ac2:	f7fe fd01 	bl	80014c8 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d902      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	f000 bd5a 	b.w	800358c <HAL_RCC_OscConfig+0x106c>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d104      	bne.n	8002b0c <HAL_RCC_OscConfig+0x5ec>
 8002b02:	4b01      	ldr	r3, [pc, #4]	@ (8002b08 <HAL_RCC_OscConfig+0x5e8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	e015      	b.n	8002b34 <HAL_RCC_OscConfig+0x614>
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002b16:	fa93 f3a3 	rbit	r3, r3
 8002b1a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002b1e:	2302      	movs	r3, #2
 8002b20:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002b24:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002b28:	fa93 f3a3 	rbit	r3, r3
 8002b2c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002b30:	4bc8      	ldr	r3, [pc, #800]	@ (8002e54 <HAL_RCC_OscConfig+0x934>)
 8002b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b34:	2202      	movs	r2, #2
 8002b36:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002b3a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002b3e:	fa92 f2a2 	rbit	r2, r2
 8002b42:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002b46:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002b4a:	fab2 f282 	clz	r2, r2
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	f042 0220 	orr.w	r2, r2, #32
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	f002 021f 	and.w	r2, r2, #31
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1ad      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 8110 	beq.w	8002d9c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d079      	beq.n	8002c80 <HAL_RCC_OscConfig+0x760>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4bab      	ldr	r3, [pc, #684]	@ (8002e58 <HAL_RCC_OscConfig+0x938>)
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb6:	f7fe fc87 	bl	80014c8 <HAL_GetTick>
 8002bba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc0:	f7fe fc82 	bl	80014c8 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d902      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	f000 bcdb 	b.w	800358c <HAL_RCC_OscConfig+0x106c>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	fa93 f2a3 	rbit	r2, r3
 8002c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c14:	2202      	movs	r2, #2
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	fa93 f2a3 	rbit	r2, r3
 8002c26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c2e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c30:	4b88      	ldr	r3, [pc, #544]	@ (8002e54 <HAL_RCC_OscConfig+0x934>)
 8002c32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c38:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002c3c:	2102      	movs	r1, #2
 8002c3e:	6019      	str	r1, [r3, #0]
 8002c40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c44:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	fa93 f1a3 	rbit	r1, r3
 8002c4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c52:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c56:	6019      	str	r1, [r3, #0]
  return result;
 8002c58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c5c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	fab3 f383 	clz	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	2101      	movs	r1, #1
 8002c74:	fa01 f303 	lsl.w	r3, r1, r3
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0a0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x6a0>
 8002c7e:	e08d      	b.n	8002d9c <HAL_RCC_OscConfig+0x87c>
 8002c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c84:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c88:	2201      	movs	r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c90:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	fa93 f2a3 	rbit	r2, r3
 8002c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c9e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002ca2:	601a      	str	r2, [r3, #0]
  return result;
 8002ca4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002cac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4b68      	ldr	r3, [pc, #416]	@ (8002e58 <HAL_RCC_OscConfig+0x938>)
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc2:	f7fe fc01 	bl	80014c8 <HAL_GetTick>
 8002cc6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ccc:	f7fe fbfc 	bl	80014c8 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d902      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	f000 bc55 	b.w	800358c <HAL_RCC_OscConfig+0x106c>
 8002ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002cea:	2202      	movs	r2, #2
 8002cec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	fa93 f2a3 	rbit	r2, r3
 8002cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d00:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d0a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002d0e:	2202      	movs	r2, #2
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d16:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	fa93 f2a3 	rbit	r2, r3
 8002d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d24:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002d32:	2202      	movs	r2, #2
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	fa93 f2a3 	rbit	r2, r3
 8002d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d48:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002d4c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d4e:	4b41      	ldr	r3, [pc, #260]	@ (8002e54 <HAL_RCC_OscConfig+0x934>)
 8002d50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d56:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002d5a:	2102      	movs	r1, #2
 8002d5c:	6019      	str	r1, [r3, #0]
 8002d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d62:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	fa93 f1a3 	rbit	r1, r3
 8002d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d70:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d74:	6019      	str	r1, [r3, #0]
  return result;
 8002d76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	fab3 f383 	clz	r3, r3
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	2101      	movs	r1, #1
 8002d92:	fa01 f303 	lsl.w	r3, r1, r3
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d197      	bne.n	8002ccc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 81a1 	beq.w	80030f4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002db2:	2300      	movs	r3, #0
 8002db4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db8:	4b26      	ldr	r3, [pc, #152]	@ (8002e54 <HAL_RCC_OscConfig+0x934>)
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d116      	bne.n	8002df2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc4:	4b23      	ldr	r3, [pc, #140]	@ (8002e54 <HAL_RCC_OscConfig+0x934>)
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	4a22      	ldr	r2, [pc, #136]	@ (8002e54 <HAL_RCC_OscConfig+0x934>)
 8002dca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dce:	61d3      	str	r3, [r2, #28]
 8002dd0:	4b20      	ldr	r3, [pc, #128]	@ (8002e54 <HAL_RCC_OscConfig+0x934>)
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002dd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ddc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002dea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002dec:	2301      	movs	r3, #1
 8002dee:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e5c <HAL_RCC_OscConfig+0x93c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d11a      	bne.n	8002e34 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfe:	4b17      	ldr	r3, [pc, #92]	@ (8002e5c <HAL_RCC_OscConfig+0x93c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a16      	ldr	r2, [pc, #88]	@ (8002e5c <HAL_RCC_OscConfig+0x93c>)
 8002e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0a:	f7fe fb5d 	bl	80014c8 <HAL_GetTick>
 8002e0e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e12:	e009      	b.n	8002e28 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e14:	f7fe fb58 	bl	80014c8 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b64      	cmp	r3, #100	@ 0x64
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e3b1      	b.n	800358c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e28:	4b0c      	ldr	r3, [pc, #48]	@ (8002e5c <HAL_RCC_OscConfig+0x93c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0ef      	beq.n	8002e14 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d10d      	bne.n	8002e60 <HAL_RCC_OscConfig+0x940>
 8002e44:	4b03      	ldr	r3, [pc, #12]	@ (8002e54 <HAL_RCC_OscConfig+0x934>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	4a02      	ldr	r2, [pc, #8]	@ (8002e54 <HAL_RCC_OscConfig+0x934>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6213      	str	r3, [r2, #32]
 8002e50:	e03c      	b.n	8002ecc <HAL_RCC_OscConfig+0x9ac>
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000
 8002e58:	10908120 	.word	0x10908120
 8002e5c:	40007000 	.word	0x40007000
 8002e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10c      	bne.n	8002e8a <HAL_RCC_OscConfig+0x96a>
 8002e70:	4bc1      	ldr	r3, [pc, #772]	@ (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	4ac0      	ldr	r2, [pc, #768]	@ (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002e76:	f023 0301 	bic.w	r3, r3, #1
 8002e7a:	6213      	str	r3, [r2, #32]
 8002e7c:	4bbe      	ldr	r3, [pc, #760]	@ (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	4abd      	ldr	r2, [pc, #756]	@ (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002e82:	f023 0304 	bic.w	r3, r3, #4
 8002e86:	6213      	str	r3, [r2, #32]
 8002e88:	e020      	b.n	8002ecc <HAL_RCC_OscConfig+0x9ac>
 8002e8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	2b05      	cmp	r3, #5
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x994>
 8002e9a:	4bb7      	ldr	r3, [pc, #732]	@ (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	4ab6      	ldr	r2, [pc, #728]	@ (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002ea0:	f043 0304 	orr.w	r3, r3, #4
 8002ea4:	6213      	str	r3, [r2, #32]
 8002ea6:	4bb4      	ldr	r3, [pc, #720]	@ (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	4ab3      	ldr	r2, [pc, #716]	@ (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	6213      	str	r3, [r2, #32]
 8002eb2:	e00b      	b.n	8002ecc <HAL_RCC_OscConfig+0x9ac>
 8002eb4:	4bb0      	ldr	r3, [pc, #704]	@ (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	4aaf      	ldr	r2, [pc, #700]	@ (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002eba:	f023 0301 	bic.w	r3, r3, #1
 8002ebe:	6213      	str	r3, [r2, #32]
 8002ec0:	4bad      	ldr	r3, [pc, #692]	@ (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	4aac      	ldr	r2, [pc, #688]	@ (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002ec6:	f023 0304 	bic.w	r3, r3, #4
 8002eca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ecc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 8081 	beq.w	8002fe0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ede:	f7fe faf3 	bl	80014c8 <HAL_GetTick>
 8002ee2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee6:	e00b      	b.n	8002f00 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee8:	f7fe faee 	bl	80014c8 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e345      	b.n	800358c <HAL_RCC_OscConfig+0x106c>
 8002f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f04:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f08:	2202      	movs	r2, #2
 8002f0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f10:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	fa93 f2a3 	rbit	r2, r3
 8002f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f28:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f34:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	fa93 f2a3 	rbit	r2, r3
 8002f3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f42:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002f46:	601a      	str	r2, [r3, #0]
  return result;
 8002f48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f4c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002f50:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f52:	fab3 f383 	clz	r3, r3
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	095b      	lsrs	r3, r3, #5
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	f043 0302 	orr.w	r3, r3, #2
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d102      	bne.n	8002f6c <HAL_RCC_OscConfig+0xa4c>
 8002f66:	4b84      	ldr	r3, [pc, #528]	@ (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	e013      	b.n	8002f94 <HAL_RCC_OscConfig+0xa74>
 8002f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f70:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002f74:	2202      	movs	r2, #2
 8002f76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	fa93 f2a3 	rbit	r2, r3
 8002f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	4b79      	ldr	r3, [pc, #484]	@ (8003178 <HAL_RCC_OscConfig+0xc58>)
 8002f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f98:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002f9c:	2102      	movs	r1, #2
 8002f9e:	6011      	str	r1, [r2, #0]
 8002fa0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fa4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002fa8:	6812      	ldr	r2, [r2, #0]
 8002faa:	fa92 f1a2 	rbit	r1, r2
 8002fae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fb2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002fb6:	6011      	str	r1, [r2, #0]
  return result;
 8002fb8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fbc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002fc0:	6812      	ldr	r2, [r2, #0]
 8002fc2:	fab2 f282 	clz	r2, r2
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	f002 021f 	and.w	r2, r2, #31
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d084      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x9c8>
 8002fde:	e07f      	b.n	80030e0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe0:	f7fe fa72 	bl	80014c8 <HAL_GetTick>
 8002fe4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe8:	e00b      	b.n	8003002 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f7fe fa6d 	bl	80014c8 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e2c4      	b.n	800358c <HAL_RCC_OscConfig+0x106c>
 8003002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003006:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800300a:	2202      	movs	r2, #2
 800300c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003012:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	fa93 f2a3 	rbit	r2, r3
 800301c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003020:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800302a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800302e:	2202      	movs	r2, #2
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003036:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	fa93 f2a3 	rbit	r2, r3
 8003040:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003044:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003048:	601a      	str	r2, [r3, #0]
  return result;
 800304a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800304e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003052:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f043 0302 	orr.w	r3, r3, #2
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d102      	bne.n	800306e <HAL_RCC_OscConfig+0xb4e>
 8003068:	4b43      	ldr	r3, [pc, #268]	@ (8003178 <HAL_RCC_OscConfig+0xc58>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	e013      	b.n	8003096 <HAL_RCC_OscConfig+0xb76>
 800306e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003072:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003076:	2202      	movs	r2, #2
 8003078:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800307e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	fa93 f2a3 	rbit	r2, r3
 8003088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800308c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	4b39      	ldr	r3, [pc, #228]	@ (8003178 <HAL_RCC_OscConfig+0xc58>)
 8003094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003096:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800309a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800309e:	2102      	movs	r1, #2
 80030a0:	6011      	str	r1, [r2, #0]
 80030a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030a6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	fa92 f1a2 	rbit	r1, r2
 80030b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030b4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80030b8:	6011      	str	r1, [r2, #0]
  return result;
 80030ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030be:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	fab2 f282 	clz	r2, r2
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	f002 021f 	and.w	r2, r2, #31
 80030d4:	2101      	movs	r1, #1
 80030d6:	fa01 f202 	lsl.w	r2, r1, r2
 80030da:	4013      	ands	r3, r2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d184      	bne.n	8002fea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d105      	bne.n	80030f4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e8:	4b23      	ldr	r3, [pc, #140]	@ (8003178 <HAL_RCC_OscConfig+0xc58>)
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	4a22      	ldr	r2, [pc, #136]	@ (8003178 <HAL_RCC_OscConfig+0xc58>)
 80030ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 8242 	beq.w	800358a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003106:	4b1c      	ldr	r3, [pc, #112]	@ (8003178 <HAL_RCC_OscConfig+0xc58>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b08      	cmp	r3, #8
 8003110:	f000 8213 	beq.w	800353a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003118:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	2b02      	cmp	r3, #2
 8003122:	f040 8162 	bne.w	80033ea <HAL_RCC_OscConfig+0xeca>
 8003126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800312e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003138:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	fa93 f2a3 	rbit	r2, r3
 8003142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003146:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800314a:	601a      	str	r2, [r3, #0]
  return result;
 800314c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003150:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003154:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003160:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	461a      	mov	r2, r3
 8003168:	2300      	movs	r3, #0
 800316a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316c:	f7fe f9ac 	bl	80014c8 <HAL_GetTick>
 8003170:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003174:	e00c      	b.n	8003190 <HAL_RCC_OscConfig+0xc70>
 8003176:	bf00      	nop
 8003178:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317c:	f7fe f9a4 	bl	80014c8 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e1fd      	b.n	800358c <HAL_RCC_OscConfig+0x106c>
 8003190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003194:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003198:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800319c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	fa93 f2a3 	rbit	r2, r3
 80031ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80031b4:	601a      	str	r2, [r3, #0]
  return result;
 80031b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ba:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80031be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c0:	fab3 f383 	clz	r3, r3
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d102      	bne.n	80031da <HAL_RCC_OscConfig+0xcba>
 80031d4:	4bb0      	ldr	r3, [pc, #704]	@ (8003498 <HAL_RCC_OscConfig+0xf78>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	e027      	b.n	800322a <HAL_RCC_OscConfig+0xd0a>
 80031da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031de:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80031e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ec:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	fa93 f2a3 	rbit	r2, r3
 80031f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003204:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003208:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003212:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	fa93 f2a3 	rbit	r2, r3
 800321c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003220:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	4b9c      	ldr	r3, [pc, #624]	@ (8003498 <HAL_RCC_OscConfig+0xf78>)
 8003228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800322e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003232:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003236:	6011      	str	r1, [r2, #0]
 8003238:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800323c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	fa92 f1a2 	rbit	r1, r2
 8003246:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800324a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800324e:	6011      	str	r1, [r2, #0]
  return result;
 8003250:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003254:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003258:	6812      	ldr	r2, [r2, #0]
 800325a:	fab2 f282 	clz	r2, r2
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	f042 0220 	orr.w	r2, r2, #32
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	f002 021f 	and.w	r2, r2, #31
 800326a:	2101      	movs	r1, #1
 800326c:	fa01 f202 	lsl.w	r2, r1, r2
 8003270:	4013      	ands	r3, r2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d182      	bne.n	800317c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003276:	4b88      	ldr	r3, [pc, #544]	@ (8003498 <HAL_RCC_OscConfig+0xf78>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800327e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003282:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800328a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800328e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	430b      	orrs	r3, r1
 8003298:	497f      	ldr	r1, [pc, #508]	@ (8003498 <HAL_RCC_OscConfig+0xf78>)
 800329a:	4313      	orrs	r3, r2
 800329c:	604b      	str	r3, [r1, #4]
 800329e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80032a6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80032aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	fa93 f2a3 	rbit	r2, r3
 80032ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032be:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80032c2:	601a      	str	r2, [r3, #0]
  return result;
 80032c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80032cc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ce:	fab3 f383 	clz	r3, r3
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80032d8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	461a      	mov	r2, r3
 80032e0:	2301      	movs	r3, #1
 80032e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7fe f8f0 	bl	80014c8 <HAL_GetTick>
 80032e8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032ec:	e009      	b.n	8003302 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ee:	f7fe f8eb 	bl	80014c8 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e144      	b.n	800358c <HAL_RCC_OscConfig+0x106c>
 8003302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003306:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800330a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800330e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003314:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	fa93 f2a3 	rbit	r2, r3
 800331e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003322:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003326:	601a      	str	r2, [r3, #0]
  return result;
 8003328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800332c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003330:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003332:	fab3 f383 	clz	r3, r3
 8003336:	b2db      	uxtb	r3, r3
 8003338:	095b      	lsrs	r3, r3, #5
 800333a:	b2db      	uxtb	r3, r3
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b01      	cmp	r3, #1
 8003344:	d102      	bne.n	800334c <HAL_RCC_OscConfig+0xe2c>
 8003346:	4b54      	ldr	r3, [pc, #336]	@ (8003498 <HAL_RCC_OscConfig+0xf78>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	e027      	b.n	800339c <HAL_RCC_OscConfig+0xe7c>
 800334c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003350:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003354:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003358:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800335e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	fa93 f2a3 	rbit	r2, r3
 8003368:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800336c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003376:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800337a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003384:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	fa93 f2a3 	rbit	r2, r3
 800338e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003392:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	4b3f      	ldr	r3, [pc, #252]	@ (8003498 <HAL_RCC_OscConfig+0xf78>)
 800339a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033a0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80033a4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80033a8:	6011      	str	r1, [r2, #0]
 80033aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033ae:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	fa92 f1a2 	rbit	r1, r2
 80033b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033bc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80033c0:	6011      	str	r1, [r2, #0]
  return result;
 80033c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033c6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	fab2 f282 	clz	r2, r2
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	f042 0220 	orr.w	r2, r2, #32
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	f002 021f 	and.w	r2, r2, #31
 80033dc:	2101      	movs	r1, #1
 80033de:	fa01 f202 	lsl.w	r2, r1, r2
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d082      	beq.n	80032ee <HAL_RCC_OscConfig+0xdce>
 80033e8:	e0cf      	b.n	800358a <HAL_RCC_OscConfig+0x106a>
 80033ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ee:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80033f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80033f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033fc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	fa93 f2a3 	rbit	r2, r3
 8003406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800340a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800340e:	601a      	str	r2, [r3, #0]
  return result;
 8003410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003414:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003418:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341a:	fab3 f383 	clz	r3, r3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003424:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	461a      	mov	r2, r3
 800342c:	2300      	movs	r3, #0
 800342e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fe f84a 	bl	80014c8 <HAL_GetTick>
 8003434:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003438:	e009      	b.n	800344e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800343a:	f7fe f845 	bl	80014c8 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e09e      	b.n	800358c <HAL_RCC_OscConfig+0x106c>
 800344e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003452:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003456:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800345a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003460:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	fa93 f2a3 	rbit	r2, r3
 800346a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800346e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003472:	601a      	str	r2, [r3, #0]
  return result;
 8003474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003478:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800347c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800347e:	fab3 f383 	clz	r3, r3
 8003482:	b2db      	uxtb	r3, r3
 8003484:	095b      	lsrs	r3, r3, #5
 8003486:	b2db      	uxtb	r3, r3
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b01      	cmp	r3, #1
 8003490:	d104      	bne.n	800349c <HAL_RCC_OscConfig+0xf7c>
 8003492:	4b01      	ldr	r3, [pc, #4]	@ (8003498 <HAL_RCC_OscConfig+0xf78>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	e029      	b.n	80034ec <HAL_RCC_OscConfig+0xfcc>
 8003498:	40021000 	.word	0x40021000
 800349c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80034a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ae:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	fa93 f2a3 	rbit	r2, r3
 80034b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034bc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80034ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	fa93 f2a3 	rbit	r2, r3
 80034de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003598 <HAL_RCC_OscConfig+0x1078>)
 80034ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034f0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80034f4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80034f8:	6011      	str	r1, [r2, #0]
 80034fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034fe:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003502:	6812      	ldr	r2, [r2, #0]
 8003504:	fa92 f1a2 	rbit	r1, r2
 8003508:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800350c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003510:	6011      	str	r1, [r2, #0]
  return result;
 8003512:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003516:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800351a:	6812      	ldr	r2, [r2, #0]
 800351c:	fab2 f282 	clz	r2, r2
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	f042 0220 	orr.w	r2, r2, #32
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	f002 021f 	and.w	r2, r2, #31
 800352c:	2101      	movs	r1, #1
 800352e:	fa01 f202 	lsl.w	r2, r1, r2
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d180      	bne.n	800343a <HAL_RCC_OscConfig+0xf1a>
 8003538:	e027      	b.n	800358a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800353a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800353e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e01e      	b.n	800358c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800354e:	4b12      	ldr	r3, [pc, #72]	@ (8003598 <HAL_RCC_OscConfig+0x1078>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003556:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800355a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800355e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003562:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	429a      	cmp	r2, r3
 800356c:	d10b      	bne.n	8003586 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800356e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003572:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003576:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800357a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003582:	429a      	cmp	r2, r3
 8003584:	d001      	beq.n	800358a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40021000 	.word	0x40021000

0800359c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b09e      	sub	sp, #120	@ 0x78
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e162      	b.n	800387a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035b4:	4b90      	ldr	r3, [pc, #576]	@ (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d910      	bls.n	80035e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c2:	4b8d      	ldr	r3, [pc, #564]	@ (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 0207 	bic.w	r2, r3, #7
 80035ca:	498b      	ldr	r1, [pc, #556]	@ (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b89      	ldr	r3, [pc, #548]	@ (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e14a      	b.n	800387a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f0:	4b82      	ldr	r3, [pc, #520]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	497f      	ldr	r1, [pc, #508]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 80dc 	beq.w	80037c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d13c      	bne.n	8003692 <HAL_RCC_ClockConfig+0xf6>
 8003618:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800361c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003620:	fa93 f3a3 	rbit	r3, r3
 8003624:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003626:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003628:	fab3 f383 	clz	r3, r3
 800362c:	b2db      	uxtb	r3, r3
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	b2db      	uxtb	r3, r3
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	d102      	bne.n	8003642 <HAL_RCC_ClockConfig+0xa6>
 800363c:	4b6f      	ldr	r3, [pc, #444]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	e00f      	b.n	8003662 <HAL_RCC_ClockConfig+0xc6>
 8003642:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003646:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003650:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003654:	663b      	str	r3, [r7, #96]	@ 0x60
 8003656:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003658:	fa93 f3a3 	rbit	r3, r3
 800365c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800365e:	4b67      	ldr	r3, [pc, #412]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003662:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003666:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003668:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800366a:	fa92 f2a2 	rbit	r2, r2
 800366e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003670:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003672:	fab2 f282 	clz	r2, r2
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	f042 0220 	orr.w	r2, r2, #32
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	f002 021f 	and.w	r2, r2, #31
 8003682:	2101      	movs	r1, #1
 8003684:	fa01 f202 	lsl.w	r2, r1, r2
 8003688:	4013      	ands	r3, r2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d17b      	bne.n	8003786 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e0f3      	b.n	800387a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d13c      	bne.n	8003714 <HAL_RCC_ClockConfig+0x178>
 800369a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800369e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036a2:	fa93 f3a3 	rbit	r3, r3
 80036a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80036a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036aa:	fab3 f383 	clz	r3, r3
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	095b      	lsrs	r3, r3, #5
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d102      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x128>
 80036be:	4b4f      	ldr	r3, [pc, #316]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	e00f      	b.n	80036e4 <HAL_RCC_ClockConfig+0x148>
 80036c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036cc:	fa93 f3a3 	rbit	r3, r3
 80036d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80036d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80036d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036da:	fa93 f3a3 	rbit	r3, r3
 80036de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036e0:	4b46      	ldr	r3, [pc, #280]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 80036e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036e8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80036ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036ec:	fa92 f2a2 	rbit	r2, r2
 80036f0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80036f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036f4:	fab2 f282 	clz	r2, r2
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	f042 0220 	orr.w	r2, r2, #32
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	f002 021f 	and.w	r2, r2, #31
 8003704:	2101      	movs	r1, #1
 8003706:	fa01 f202 	lsl.w	r2, r1, r2
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d13a      	bne.n	8003786 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0b2      	b.n	800387a <HAL_RCC_ClockConfig+0x2de>
 8003714:	2302      	movs	r3, #2
 8003716:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003722:	fab3 f383 	clz	r3, r3
 8003726:	b2db      	uxtb	r3, r3
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b01      	cmp	r3, #1
 8003734:	d102      	bne.n	800373c <HAL_RCC_ClockConfig+0x1a0>
 8003736:	4b31      	ldr	r3, [pc, #196]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	e00d      	b.n	8003758 <HAL_RCC_ClockConfig+0x1bc>
 800373c:	2302      	movs	r3, #2
 800373e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003742:	fa93 f3a3 	rbit	r3, r3
 8003746:	627b      	str	r3, [r7, #36]	@ 0x24
 8003748:	2302      	movs	r3, #2
 800374a:	623b      	str	r3, [r7, #32]
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	fa93 f3a3 	rbit	r3, r3
 8003752:	61fb      	str	r3, [r7, #28]
 8003754:	4b29      	ldr	r3, [pc, #164]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003758:	2202      	movs	r2, #2
 800375a:	61ba      	str	r2, [r7, #24]
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	fa92 f2a2 	rbit	r2, r2
 8003762:	617a      	str	r2, [r7, #20]
  return result;
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	fab2 f282 	clz	r2, r2
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	f042 0220 	orr.w	r2, r2, #32
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	f002 021f 	and.w	r2, r2, #31
 8003776:	2101      	movs	r1, #1
 8003778:	fa01 f202 	lsl.w	r2, r1, r2
 800377c:	4013      	ands	r3, r2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e079      	b.n	800387a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003786:	4b1d      	ldr	r3, [pc, #116]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f023 0203 	bic.w	r2, r3, #3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	491a      	ldr	r1, [pc, #104]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003794:	4313      	orrs	r3, r2
 8003796:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003798:	f7fd fe96 	bl	80014c8 <HAL_GetTick>
 800379c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379e:	e00a      	b.n	80037b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a0:	f7fd fe92 	bl	80014c8 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e061      	b.n	800387a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b6:	4b11      	ldr	r3, [pc, #68]	@ (80037fc <HAL_RCC_ClockConfig+0x260>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f003 020c 	and.w	r2, r3, #12
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d1eb      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037c8:	4b0b      	ldr	r3, [pc, #44]	@ (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d214      	bcs.n	8003800 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d6:	4b08      	ldr	r3, [pc, #32]	@ (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 0207 	bic.w	r2, r3, #7
 80037de:	4906      	ldr	r1, [pc, #24]	@ (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e6:	4b04      	ldr	r3, [pc, #16]	@ (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d005      	beq.n	8003800 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e040      	b.n	800387a <HAL_RCC_ClockConfig+0x2de>
 80037f8:	40022000 	.word	0x40022000
 80037fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800380c:	4b1d      	ldr	r3, [pc, #116]	@ (8003884 <HAL_RCC_ClockConfig+0x2e8>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	491a      	ldr	r1, [pc, #104]	@ (8003884 <HAL_RCC_ClockConfig+0x2e8>)
 800381a:	4313      	orrs	r3, r2
 800381c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d009      	beq.n	800383e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800382a:	4b16      	ldr	r3, [pc, #88]	@ (8003884 <HAL_RCC_ClockConfig+0x2e8>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4912      	ldr	r1, [pc, #72]	@ (8003884 <HAL_RCC_ClockConfig+0x2e8>)
 800383a:	4313      	orrs	r3, r2
 800383c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800383e:	f000 f829 	bl	8003894 <HAL_RCC_GetSysClockFreq>
 8003842:	4601      	mov	r1, r0
 8003844:	4b0f      	ldr	r3, [pc, #60]	@ (8003884 <HAL_RCC_ClockConfig+0x2e8>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800384c:	22f0      	movs	r2, #240	@ 0xf0
 800384e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	fa92 f2a2 	rbit	r2, r2
 8003856:	60fa      	str	r2, [r7, #12]
  return result;
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	fab2 f282 	clz	r2, r2
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	40d3      	lsrs	r3, r2
 8003862:	4a09      	ldr	r2, [pc, #36]	@ (8003888 <HAL_RCC_ClockConfig+0x2ec>)
 8003864:	5cd3      	ldrb	r3, [r2, r3]
 8003866:	fa21 f303 	lsr.w	r3, r1, r3
 800386a:	4a08      	ldr	r2, [pc, #32]	@ (800388c <HAL_RCC_ClockConfig+0x2f0>)
 800386c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800386e:	4b08      	ldr	r3, [pc, #32]	@ (8003890 <HAL_RCC_ClockConfig+0x2f4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f7fd fde4 	bl	8001440 <HAL_InitTick>
  
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3778      	adds	r7, #120	@ 0x78
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000
 8003888:	0800c8b0 	.word	0x0800c8b0
 800388c:	20000000 	.word	0x20000000
 8003890:	20000004 	.word	0x20000004

08003894 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003894:	b480      	push	{r7}
 8003896:	b08b      	sub	sp, #44	@ 0x2c
 8003898:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	61fb      	str	r3, [r7, #28]
 800389e:	2300      	movs	r3, #0
 80038a0:	61bb      	str	r3, [r7, #24]
 80038a2:	2300      	movs	r3, #0
 80038a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80038ae:	4b29      	ldr	r3, [pc, #164]	@ (8003954 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d002      	beq.n	80038c4 <HAL_RCC_GetSysClockFreq+0x30>
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d003      	beq.n	80038ca <HAL_RCC_GetSysClockFreq+0x36>
 80038c2:	e03c      	b.n	800393e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038c4:	4b24      	ldr	r3, [pc, #144]	@ (8003958 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038c6:	623b      	str	r3, [r7, #32]
      break;
 80038c8:	e03c      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80038d0:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80038d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	fa92 f2a2 	rbit	r2, r2
 80038dc:	607a      	str	r2, [r7, #4]
  return result;
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	fab2 f282 	clz	r2, r2
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	40d3      	lsrs	r3, r2
 80038e8:	4a1c      	ldr	r2, [pc, #112]	@ (800395c <HAL_RCC_GetSysClockFreq+0xc8>)
 80038ea:	5cd3      	ldrb	r3, [r2, r3]
 80038ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80038ee:	4b19      	ldr	r3, [pc, #100]	@ (8003954 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	220f      	movs	r2, #15
 80038f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	fa92 f2a2 	rbit	r2, r2
 8003900:	60fa      	str	r2, [r7, #12]
  return result;
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	fab2 f282 	clz	r2, r2
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	40d3      	lsrs	r3, r2
 800390c:	4a14      	ldr	r2, [pc, #80]	@ (8003960 <HAL_RCC_GetSysClockFreq+0xcc>)
 800390e:	5cd3      	ldrb	r3, [r2, r3]
 8003910:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d008      	beq.n	800392e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800391c:	4a0e      	ldr	r2, [pc, #56]	@ (8003958 <HAL_RCC_GetSysClockFreq+0xc4>)
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	fbb2 f2f3 	udiv	r2, r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	fb02 f303 	mul.w	r3, r2, r3
 800392a:	627b      	str	r3, [r7, #36]	@ 0x24
 800392c:	e004      	b.n	8003938 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	4a0c      	ldr	r2, [pc, #48]	@ (8003964 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003932:	fb02 f303 	mul.w	r3, r2, r3
 8003936:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393a:	623b      	str	r3, [r7, #32]
      break;
 800393c:	e002      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800393e:	4b0a      	ldr	r3, [pc, #40]	@ (8003968 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003940:	623b      	str	r3, [r7, #32]
      break;
 8003942:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003944:	6a3b      	ldr	r3, [r7, #32]
}
 8003946:	4618      	mov	r0, r3
 8003948:	372c      	adds	r7, #44	@ 0x2c
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40021000 	.word	0x40021000
 8003958:	01e84800 	.word	0x01e84800
 800395c:	0800c8c8 	.word	0x0800c8c8
 8003960:	0800c8d8 	.word	0x0800c8d8
 8003964:	003d0900 	.word	0x003d0900
 8003968:	007a1200 	.word	0x007a1200

0800396c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003970:	4b03      	ldr	r3, [pc, #12]	@ (8003980 <HAL_RCC_GetHCLKFreq+0x14>)
 8003972:	681b      	ldr	r3, [r3, #0]
}
 8003974:	4618      	mov	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20000000 	.word	0x20000000

08003984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800398a:	f7ff ffef 	bl	800396c <HAL_RCC_GetHCLKFreq>
 800398e:	4601      	mov	r1, r0
 8003990:	4b0b      	ldr	r3, [pc, #44]	@ (80039c0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003998:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800399c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	fa92 f2a2 	rbit	r2, r2
 80039a4:	603a      	str	r2, [r7, #0]
  return result;
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	fab2 f282 	clz	r2, r2
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	40d3      	lsrs	r3, r2
 80039b0:	4a04      	ldr	r2, [pc, #16]	@ (80039c4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80039b2:	5cd3      	ldrb	r3, [r2, r3]
 80039b4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80039b8:	4618      	mov	r0, r3
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40021000 	.word	0x40021000
 80039c4:	0800c8c0 	.word	0x0800c8c0

080039c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80039ce:	f7ff ffcd 	bl	800396c <HAL_RCC_GetHCLKFreq>
 80039d2:	4601      	mov	r1, r0
 80039d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a04 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80039dc:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80039e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	fa92 f2a2 	rbit	r2, r2
 80039e8:	603a      	str	r2, [r7, #0]
  return result;
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	fab2 f282 	clz	r2, r2
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	40d3      	lsrs	r3, r2
 80039f4:	4a04      	ldr	r2, [pc, #16]	@ (8003a08 <HAL_RCC_GetPCLK2Freq+0x40>)
 80039f6:	5cd3      	ldrb	r3, [r2, r3]
 80039f8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80039fc:	4618      	mov	r0, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40021000 	.word	0x40021000
 8003a08:	0800c8c0 	.word	0x0800c8c0

08003a0c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b092      	sub	sp, #72	@ 0x48
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 80cd 	beq.w	8003bca <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a30:	4b86      	ldr	r3, [pc, #536]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10e      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a3c:	4b83      	ldr	r3, [pc, #524]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	4a82      	ldr	r2, [pc, #520]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a46:	61d3      	str	r3, [r2, #28]
 8003a48:	4b80      	ldr	r3, [pc, #512]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a50:	60bb      	str	r3, [r7, #8]
 8003a52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a54:	2301      	movs	r3, #1
 8003a56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5a:	4b7d      	ldr	r3, [pc, #500]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d118      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a66:	4b7a      	ldr	r3, [pc, #488]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a79      	ldr	r2, [pc, #484]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a72:	f7fd fd29 	bl	80014c8 <HAL_GetTick>
 8003a76:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a78:	e008      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7a:	f7fd fd25 	bl	80014c8 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b64      	cmp	r3, #100	@ 0x64
 8003a86:	d901      	bls.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e0db      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8c:	4b70      	ldr	r3, [pc, #448]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0f0      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a98:	4b6c      	ldr	r3, [pc, #432]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d07d      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ab0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d076      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ab6:	4b65      	ldr	r3, [pc, #404]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ac0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ac4:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac8:	fa93 f3a3 	rbit	r3, r3
 8003acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ad0:	fab3 f383 	clz	r3, r3
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	4b5e      	ldr	r3, [pc, #376]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	461a      	mov	r2, r3
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aec:	fa93 f3a3 	rbit	r3, r3
 8003af0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003af4:	fab3 f383 	clz	r3, r3
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	4b55      	ldr	r3, [pc, #340]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003afe:	4413      	add	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	461a      	mov	r2, r3
 8003b04:	2300      	movs	r3, #0
 8003b06:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b08:	4a50      	ldr	r2, [pc, #320]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b0c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d045      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b18:	f7fd fcd6 	bl	80014c8 <HAL_GetTick>
 8003b1c:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1e:	e00a      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b20:	f7fd fcd2 	bl	80014c8 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e086      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003b36:	2302      	movs	r3, #2
 8003b38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3c:	fa93 f3a3 	rbit	r3, r3
 8003b40:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b42:	2302      	movs	r3, #2
 8003b44:	623b      	str	r3, [r7, #32]
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	fa93 f3a3 	rbit	r3, r3
 8003b4c:	61fb      	str	r3, [r7, #28]
  return result;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b50:	fab3 f383 	clz	r3, r3
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	f043 0302 	orr.w	r3, r3, #2
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d102      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003b64:	4b39      	ldr	r3, [pc, #228]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	e007      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	fa93 f3a3 	rbit	r3, r3
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	4b35      	ldr	r3, [pc, #212]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	613a      	str	r2, [r7, #16]
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	fa92 f2a2 	rbit	r2, r2
 8003b84:	60fa      	str	r2, [r7, #12]
  return result;
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	fab2 f282 	clz	r2, r2
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	f002 021f 	and.w	r2, r2, #31
 8003b98:	2101      	movs	r1, #1
 8003b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0bd      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003ba4:	4b29      	ldr	r3, [pc, #164]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	4926      	ldr	r1, [pc, #152]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bb6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d105      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bbe:	4b23      	ldr	r3, [pc, #140]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	4a22      	ldr	r2, [pc, #136]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bc8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d008      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bda:	f023 0203 	bic.w	r2, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	491a      	ldr	r1, [pc, #104]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d008      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bf4:	4b15      	ldr	r3, [pc, #84]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf8:	f023 0210 	bic.w	r2, r3, #16
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	4912      	ldr	r1, [pc, #72]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d008      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c12:	4b0e      	ldr	r3, [pc, #56]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c16:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	490b      	ldr	r1, [pc, #44]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c30:	4b06      	ldr	r3, [pc, #24]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	4903      	ldr	r1, [pc, #12]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3748      	adds	r7, #72	@ 0x48
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	40007000 	.word	0x40007000
 8003c54:	10908100 	.word	0x10908100

08003c58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e040      	b.n	8003cec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fd fa70 	bl	8001160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2224      	movs	r2, #36	@ 0x24
 8003c84:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0201 	bic.w	r2, r2, #1
 8003c94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f8b6 	bl	8003e08 <UART_SetConfig>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e022      	b.n	8003cec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f9e0 	bl	8004074 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0201 	orr.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 fa67 	bl	80041b8 <UART_CheckIdleState>
 8003cea:	4603      	mov	r3, r0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08a      	sub	sp, #40	@ 0x28
 8003cf8:	af02      	add	r7, sp, #8
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	4613      	mov	r3, r2
 8003d02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d08:	2b20      	cmp	r3, #32
 8003d0a:	d177      	bne.n	8003dfc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <HAL_UART_Transmit+0x24>
 8003d12:	88fb      	ldrh	r3, [r7, #6]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e070      	b.n	8003dfe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2221      	movs	r2, #33	@ 0x21
 8003d28:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d2a:	f7fd fbcd 	bl	80014c8 <HAL_GetTick>
 8003d2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	88fa      	ldrh	r2, [r7, #6]
 8003d34:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	88fa      	ldrh	r2, [r7, #6]
 8003d3c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d48:	d108      	bne.n	8003d5c <HAL_UART_Transmit+0x68>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d104      	bne.n	8003d5c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	e003      	b.n	8003d64 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d64:	e02f      	b.n	8003dc6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2180      	movs	r1, #128	@ 0x80
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 fac9 	bl	8004308 <UART_WaitOnFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d004      	beq.n	8003d86 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e03b      	b.n	8003dfe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10b      	bne.n	8003da4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	881a      	ldrh	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d98:	b292      	uxth	r2, r2
 8003d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	3302      	adds	r3, #2
 8003da0:	61bb      	str	r3, [r7, #24]
 8003da2:	e007      	b.n	8003db4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	781a      	ldrb	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	3301      	adds	r3, #1
 8003db2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1c9      	bne.n	8003d66 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2140      	movs	r1, #64	@ 0x40
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 fa93 	bl	8004308 <UART_WaitOnFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d004      	beq.n	8003df2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e005      	b.n	8003dfe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2220      	movs	r2, #32
 8003df6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e000      	b.n	8003dfe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003dfc:	2302      	movs	r3, #2
  }
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3720      	adds	r7, #32
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e10:	2300      	movs	r3, #0
 8003e12:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	4b8a      	ldr	r3, [pc, #552]	@ (800405c <UART_SetConfig+0x254>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6812      	ldr	r2, [r2, #0]
 8003e3a:	6979      	ldr	r1, [r7, #20]
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a78      	ldr	r2, [pc, #480]	@ (8004060 <UART_SetConfig+0x258>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d120      	bne.n	8003ec6 <UART_SetConfig+0xbe>
 8003e84:	4b77      	ldr	r3, [pc, #476]	@ (8004064 <UART_SetConfig+0x25c>)
 8003e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	2b03      	cmp	r3, #3
 8003e8e:	d817      	bhi.n	8003ec0 <UART_SetConfig+0xb8>
 8003e90:	a201      	add	r2, pc, #4	@ (adr r2, 8003e98 <UART_SetConfig+0x90>)
 8003e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e96:	bf00      	nop
 8003e98:	08003ea9 	.word	0x08003ea9
 8003e9c:	08003eb5 	.word	0x08003eb5
 8003ea0:	08003ebb 	.word	0x08003ebb
 8003ea4:	08003eaf 	.word	0x08003eaf
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	77fb      	strb	r3, [r7, #31]
 8003eac:	e01d      	b.n	8003eea <UART_SetConfig+0xe2>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	77fb      	strb	r3, [r7, #31]
 8003eb2:	e01a      	b.n	8003eea <UART_SetConfig+0xe2>
 8003eb4:	2304      	movs	r3, #4
 8003eb6:	77fb      	strb	r3, [r7, #31]
 8003eb8:	e017      	b.n	8003eea <UART_SetConfig+0xe2>
 8003eba:	2308      	movs	r3, #8
 8003ebc:	77fb      	strb	r3, [r7, #31]
 8003ebe:	e014      	b.n	8003eea <UART_SetConfig+0xe2>
 8003ec0:	2310      	movs	r3, #16
 8003ec2:	77fb      	strb	r3, [r7, #31]
 8003ec4:	e011      	b.n	8003eea <UART_SetConfig+0xe2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a67      	ldr	r2, [pc, #412]	@ (8004068 <UART_SetConfig+0x260>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d102      	bne.n	8003ed6 <UART_SetConfig+0xce>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	77fb      	strb	r3, [r7, #31]
 8003ed4:	e009      	b.n	8003eea <UART_SetConfig+0xe2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a64      	ldr	r2, [pc, #400]	@ (800406c <UART_SetConfig+0x264>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d102      	bne.n	8003ee6 <UART_SetConfig+0xde>
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	77fb      	strb	r3, [r7, #31]
 8003ee4:	e001      	b.n	8003eea <UART_SetConfig+0xe2>
 8003ee6:	2310      	movs	r3, #16
 8003ee8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ef2:	d15a      	bne.n	8003faa <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003ef4:	7ffb      	ldrb	r3, [r7, #31]
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d827      	bhi.n	8003f4a <UART_SetConfig+0x142>
 8003efa:	a201      	add	r2, pc, #4	@ (adr r2, 8003f00 <UART_SetConfig+0xf8>)
 8003efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f00:	08003f25 	.word	0x08003f25
 8003f04:	08003f2d 	.word	0x08003f2d
 8003f08:	08003f35 	.word	0x08003f35
 8003f0c:	08003f4b 	.word	0x08003f4b
 8003f10:	08003f3b 	.word	0x08003f3b
 8003f14:	08003f4b 	.word	0x08003f4b
 8003f18:	08003f4b 	.word	0x08003f4b
 8003f1c:	08003f4b 	.word	0x08003f4b
 8003f20:	08003f43 	.word	0x08003f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f24:	f7ff fd2e 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 8003f28:	61b8      	str	r0, [r7, #24]
        break;
 8003f2a:	e013      	b.n	8003f54 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f2c:	f7ff fd4c 	bl	80039c8 <HAL_RCC_GetPCLK2Freq>
 8003f30:	61b8      	str	r0, [r7, #24]
        break;
 8003f32:	e00f      	b.n	8003f54 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f34:	4b4e      	ldr	r3, [pc, #312]	@ (8004070 <UART_SetConfig+0x268>)
 8003f36:	61bb      	str	r3, [r7, #24]
        break;
 8003f38:	e00c      	b.n	8003f54 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f3a:	f7ff fcab 	bl	8003894 <HAL_RCC_GetSysClockFreq>
 8003f3e:	61b8      	str	r0, [r7, #24]
        break;
 8003f40:	e008      	b.n	8003f54 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f46:	61bb      	str	r3, [r7, #24]
        break;
 8003f48:	e004      	b.n	8003f54 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	77bb      	strb	r3, [r7, #30]
        break;
 8003f52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d074      	beq.n	8004044 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	005a      	lsls	r2, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	085b      	lsrs	r3, r3, #1
 8003f64:	441a      	add	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	2b0f      	cmp	r3, #15
 8003f74:	d916      	bls.n	8003fa4 <UART_SetConfig+0x19c>
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f7c:	d212      	bcs.n	8003fa4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	f023 030f 	bic.w	r3, r3, #15
 8003f86:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	085b      	lsrs	r3, r3, #1
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	89fb      	ldrh	r3, [r7, #14]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	89fa      	ldrh	r2, [r7, #14]
 8003fa0:	60da      	str	r2, [r3, #12]
 8003fa2:	e04f      	b.n	8004044 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	77bb      	strb	r3, [r7, #30]
 8003fa8:	e04c      	b.n	8004044 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003faa:	7ffb      	ldrb	r3, [r7, #31]
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d828      	bhi.n	8004002 <UART_SetConfig+0x1fa>
 8003fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb8 <UART_SetConfig+0x1b0>)
 8003fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb6:	bf00      	nop
 8003fb8:	08003fdd 	.word	0x08003fdd
 8003fbc:	08003fe5 	.word	0x08003fe5
 8003fc0:	08003fed 	.word	0x08003fed
 8003fc4:	08004003 	.word	0x08004003
 8003fc8:	08003ff3 	.word	0x08003ff3
 8003fcc:	08004003 	.word	0x08004003
 8003fd0:	08004003 	.word	0x08004003
 8003fd4:	08004003 	.word	0x08004003
 8003fd8:	08003ffb 	.word	0x08003ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fdc:	f7ff fcd2 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 8003fe0:	61b8      	str	r0, [r7, #24]
        break;
 8003fe2:	e013      	b.n	800400c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fe4:	f7ff fcf0 	bl	80039c8 <HAL_RCC_GetPCLK2Freq>
 8003fe8:	61b8      	str	r0, [r7, #24]
        break;
 8003fea:	e00f      	b.n	800400c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fec:	4b20      	ldr	r3, [pc, #128]	@ (8004070 <UART_SetConfig+0x268>)
 8003fee:	61bb      	str	r3, [r7, #24]
        break;
 8003ff0:	e00c      	b.n	800400c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ff2:	f7ff fc4f 	bl	8003894 <HAL_RCC_GetSysClockFreq>
 8003ff6:	61b8      	str	r0, [r7, #24]
        break;
 8003ff8:	e008      	b.n	800400c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ffa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ffe:	61bb      	str	r3, [r7, #24]
        break;
 8004000:	e004      	b.n	800400c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004002:	2300      	movs	r3, #0
 8004004:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	77bb      	strb	r3, [r7, #30]
        break;
 800400a:	bf00      	nop
    }

    if (pclk != 0U)
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d018      	beq.n	8004044 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	085a      	lsrs	r2, r3, #1
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	441a      	add	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	fbb2 f3f3 	udiv	r3, r2, r3
 8004024:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2b0f      	cmp	r3, #15
 800402a:	d909      	bls.n	8004040 <UART_SetConfig+0x238>
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004032:	d205      	bcs.n	8004040 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	b29a      	uxth	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	60da      	str	r2, [r3, #12]
 800403e:	e001      	b.n	8004044 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004050:	7fbb      	ldrb	r3, [r7, #30]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3720      	adds	r7, #32
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	efff69f3 	.word	0xefff69f3
 8004060:	40013800 	.word	0x40013800
 8004064:	40021000 	.word	0x40021000
 8004068:	40004400 	.word	0x40004400
 800406c:	40004800 	.word	0x40004800
 8004070:	007a1200 	.word	0x007a1200

08004074 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00a      	beq.n	800409e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412a:	f003 0320 	and.w	r3, r3, #32
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01a      	beq.n	800418a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004172:	d10a      	bne.n	800418a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	605a      	str	r2, [r3, #4]
  }
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b098      	sub	sp, #96	@ 0x60
 80041bc:	af02      	add	r7, sp, #8
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041c8:	f7fd f97e 	bl	80014c8 <HAL_GetTick>
 80041cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0308 	and.w	r3, r3, #8
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d12e      	bne.n	800423a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e4:	2200      	movs	r2, #0
 80041e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f88c 	bl	8004308 <UART_WaitOnFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d021      	beq.n	800423a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041fe:	e853 3f00 	ldrex	r3, [r3]
 8004202:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004206:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800420a:	653b      	str	r3, [r7, #80]	@ 0x50
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	461a      	mov	r2, r3
 8004212:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004214:	647b      	str	r3, [r7, #68]	@ 0x44
 8004216:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004218:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800421a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800421c:	e841 2300 	strex	r3, r2, [r1]
 8004220:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1e6      	bne.n	80041f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2220      	movs	r2, #32
 800422c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e062      	b.n	8004300 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b04      	cmp	r3, #4
 8004246:	d149      	bne.n	80042dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004248:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004250:	2200      	movs	r2, #0
 8004252:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f856 	bl	8004308 <UART_WaitOnFlagUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d03c      	beq.n	80042dc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426a:	e853 3f00 	ldrex	r3, [r3]
 800426e:	623b      	str	r3, [r7, #32]
   return(result);
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004276:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004280:	633b      	str	r3, [r7, #48]	@ 0x30
 8004282:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004284:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004288:	e841 2300 	strex	r3, r2, [r1]
 800428c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800428e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e6      	bne.n	8004262 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3308      	adds	r3, #8
 800429a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	e853 3f00 	ldrex	r3, [r3]
 80042a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0301 	bic.w	r3, r3, #1
 80042aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3308      	adds	r3, #8
 80042b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042b4:	61fa      	str	r2, [r7, #28]
 80042b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	69b9      	ldr	r1, [r7, #24]
 80042ba:	69fa      	ldr	r2, [r7, #28]
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	617b      	str	r3, [r7, #20]
   return(result);
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e5      	bne.n	8004294 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e011      	b.n	8004300 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3758      	adds	r7, #88	@ 0x58
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004318:	e049      	b.n	80043ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004320:	d045      	beq.n	80043ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004322:	f7fd f8d1 	bl	80014c8 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	429a      	cmp	r2, r3
 8004330:	d302      	bcc.n	8004338 <UART_WaitOnFlagUntilTimeout+0x30>
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e048      	b.n	80043ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0304 	and.w	r3, r3, #4
 8004346:	2b00      	cmp	r3, #0
 8004348:	d031      	beq.n	80043ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b08      	cmp	r3, #8
 8004356:	d110      	bne.n	800437a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2208      	movs	r2, #8
 800435e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 f838 	bl	80043d6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2208      	movs	r2, #8
 800436a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e029      	b.n	80043ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004384:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004388:	d111      	bne.n	80043ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004392:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 f81e 	bl	80043d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2220      	movs	r2, #32
 800439e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e00f      	b.n	80043ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69da      	ldr	r2, [r3, #28]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4013      	ands	r3, r2
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	bf0c      	ite	eq
 80043be:	2301      	moveq	r3, #1
 80043c0:	2300      	movne	r3, #0
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d0a6      	beq.n	800431a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b095      	sub	sp, #84	@ 0x54
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e6:	e853 3f00 	ldrex	r3, [r3]
 80043ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80043fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004402:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004404:	e841 2300 	strex	r3, r2, [r1]
 8004408:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800440a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e6      	bne.n	80043de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3308      	adds	r3, #8
 8004416:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	e853 3f00 	ldrex	r3, [r3]
 800441e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f023 0301 	bic.w	r3, r3, #1
 8004426:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3308      	adds	r3, #8
 800442e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004430:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004432:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004434:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004436:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004438:	e841 2300 	strex	r3, r2, [r1]
 800443c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800443e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e5      	bne.n	8004410 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004448:	2b01      	cmp	r3, #1
 800444a:	d118      	bne.n	800447e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	e853 3f00 	ldrex	r3, [r3]
 8004458:	60bb      	str	r3, [r7, #8]
   return(result);
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f023 0310 	bic.w	r3, r3, #16
 8004460:	647b      	str	r3, [r7, #68]	@ 0x44
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	461a      	mov	r2, r3
 8004468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800446a:	61bb      	str	r3, [r7, #24]
 800446c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	6979      	ldr	r1, [r7, #20]
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	e841 2300 	strex	r3, r2, [r1]
 8004476:	613b      	str	r3, [r7, #16]
   return(result);
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e6      	bne.n	800444c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2220      	movs	r2, #32
 8004482:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004492:	bf00      	nop
 8004494:	3754      	adds	r7, #84	@ 0x54
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80044a6:	2300      	movs	r3, #0
 80044a8:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 80044aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d105      	bne.n	80044be <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 80044b2:	2101      	movs	r1, #1
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f001 f859 	bl	800556c <VL53L1_data_init>
 80044ba:	4603      	mov	r3, r0
 80044bc:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L1_ERROR_NONE)
 80044be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d103      	bne.n	80044ce <VL53L1_DataInit+0x30>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80044ce:	2300      	movs	r3, #0
 80044d0:	73bb      	strb	r3, [r7, #14]
 80044d2:	e012      	b.n	80044fa <VL53L1_DataInit+0x5c>
		if (Status == VL53L1_ERROR_NONE)
 80044d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d112      	bne.n	8004502 <VL53L1_DataInit+0x64>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 80044dc:	7bbb      	ldrb	r3, [r7, #14]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	2201      	movs	r2, #1
 80044e2:	4619      	mov	r1, r3
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 fbce 	bl	8004c86 <VL53L1_SetLimitCheckEnable>
 80044ea:	4603      	mov	r3, r0
 80044ec:	461a      	mov	r2, r3
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80044f4:	7bbb      	ldrb	r3, [r7, #14]
 80044f6:	3301      	adds	r3, #1
 80044f8:	73bb      	strb	r3, [r7, #14]
 80044fa:	7bbb      	ldrb	r3, [r7, #14]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d9e9      	bls.n	80044d4 <VL53L1_DataInit+0x36>
 8004500:	e000      	b.n	8004504 <VL53L1_DataInit+0x66>
		else
			break;
 8004502:	bf00      	nop

	}


	LOG_FUNCTION_END(Status);
	return Status;
 8004504:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004518:	2300      	movs	r3, #0
 800451a:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2203      	movs	r2, #3
 8004520:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8004524:	2320      	movs	r3, #32
 8004526:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	7bba      	ldrb	r2, [r7, #14]
 800452c:	709a      	strb	r2, [r3, #2]

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 800452e:	2108      	movs	r1, #8
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f8f6 	bl	8004722 <VL53L1_SetPresetMode>
 8004536:	4603      	mov	r3, r0
 8004538:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2208      	movs	r2, #8
 800453e:	f883 237c 	strb.w	r2, [r3, #892]	@ 0x37c
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */

	LOG_FUNCTION_END(Status);
	return Status;
 8004542:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b084      	sub	sp, #16
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004556:	2300      	movs	r3, #0
 8004558:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 800455a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f005 f930 	bl	80097c4 <VL53L1_poll_for_boot_completion>
 8004564:	4603      	mov	r3, r0
 8004566:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8004568:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	603a      	str	r2, [r7, #0]
 800457e:	71fb      	strb	r3, [r7, #7]
 8004580:	460b      	mov	r3, r1
 8004582:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004584:	2300      	movs	r3, #0
 8004586:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8004588:	4a2b      	ldr	r2, [pc, #172]	@ (8004638 <ComputeDevicePresetMode+0xc4>)
 800458a:	f107 0310 	add.w	r3, r7, #16
 800458e:	6812      	ldr	r2, [r2, #0]
 8004590:	4611      	mov	r1, r2
 8004592:	8019      	strh	r1, [r3, #0]
 8004594:	3302      	adds	r3, #2
 8004596:	0c12      	lsrs	r2, r2, #16
 8004598:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 800459a:	4a28      	ldr	r2, [pc, #160]	@ (800463c <ComputeDevicePresetMode+0xc8>)
 800459c:	f107 030c 	add.w	r3, r7, #12
 80045a0:	6812      	ldr	r2, [r2, #0]
 80045a2:	4611      	mov	r1, r2
 80045a4:	8019      	strh	r1, [r3, #0]
 80045a6:	3302      	adds	r3, #2
 80045a8:	0c12      	lsrs	r2, r2, #16
 80045aa:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80045ac:	4a24      	ldr	r2, [pc, #144]	@ (8004640 <ComputeDevicePresetMode+0xcc>)
 80045ae:	f107 0308 	add.w	r3, r7, #8
 80045b2:	6812      	ldr	r2, [r2, #0]
 80045b4:	4611      	mov	r1, r2
 80045b6:	8019      	strh	r1, [r3, #0]
 80045b8:	3302      	adds	r3, #2
 80045ba:	0c12      	lsrs	r2, r2, #16
 80045bc:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2201      	movs	r2, #1
 80045c2:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 80045c4:	79bb      	ldrb	r3, [r7, #6]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d002      	beq.n	80045d0 <ComputeDevicePresetMode+0x5c>
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d003      	beq.n	80045d6 <ComputeDevicePresetMode+0x62>
 80045ce:	e005      	b.n	80045dc <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 80045d0:	2300      	movs	r3, #0
 80045d2:	75bb      	strb	r3, [r7, #22]
		break;
 80045d4:	e004      	b.n	80045e0 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 80045d6:	2301      	movs	r3, #1
 80045d8:	75bb      	strb	r3, [r7, #22]
		break;
 80045da:	e001      	b.n	80045e0 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 80045dc:	2302      	movs	r3, #2
 80045de:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 80045e0:	79fb      	ldrb	r3, [r7, #7]
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d015      	beq.n	8004612 <ComputeDevicePresetMode+0x9e>
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	dc1b      	bgt.n	8004622 <ComputeDevicePresetMode+0xae>
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d009      	beq.n	8004602 <ComputeDevicePresetMode+0x8e>
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d117      	bne.n	8004622 <ComputeDevicePresetMode+0xae>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 80045f2:	7dbb      	ldrb	r3, [r7, #22]
 80045f4:	3318      	adds	r3, #24
 80045f6:	443b      	add	r3, r7
 80045f8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	701a      	strb	r2, [r3, #0]
		break;
 8004600:	e011      	b.n	8004626 <ComputeDevicePresetMode+0xb2>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8004602:	7dbb      	ldrb	r3, [r7, #22]
 8004604:	3318      	adds	r3, #24
 8004606:	443b      	add	r3, r7
 8004608:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	701a      	strb	r2, [r3, #0]
		break;
 8004610:	e009      	b.n	8004626 <ComputeDevicePresetMode+0xb2>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8004612:	7dbb      	ldrb	r3, [r7, #22]
 8004614:	3318      	adds	r3, #24
 8004616:	443b      	add	r3, r7
 8004618:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	701a      	strb	r2, [r3, #0]
		break;
 8004620:	e001      	b.n	8004626 <ComputeDevicePresetMode+0xb2>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8004622:	23f8      	movs	r3, #248	@ 0xf8
 8004624:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 8004626:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800462a:	4618      	mov	r0, r3
 800462c:	371c      	adds	r7, #28
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	0800c8a0 	.word	0x0800c8a0
 800463c:	0800c8a4 	.word	0x0800c8a4
 8004640:	0800c8a8 	.word	0x0800c8a8

08004644 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8004644:	b5b0      	push	{r4, r5, r7, lr}
 8004646:	b08e      	sub	sp, #56	@ 0x38
 8004648:	af04      	add	r7, sp, #16
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	607b      	str	r3, [r7, #4]
 800464e:	460b      	mov	r3, r1
 8004650:	72fb      	strb	r3, [r7, #11]
 8004652:	4613      	mov	r3, r2
 8004654:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004656:	2300      	movs	r3, #0
 8004658:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8004664:	2300      	movs	r3, #0
 8004666:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800466c:	7afb      	ldrb	r3, [r7, #11]
 800466e:	2b03      	cmp	r3, #3
 8004670:	d002      	beq.n	8004678 <SetPresetMode+0x34>
 8004672:	7afb      	ldrb	r3, [r7, #11]
 8004674:	2b08      	cmp	r3, #8
 8004676:	d103      	bne.n	8004680 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8004678:	2340      	movs	r3, #64	@ 0x40
 800467a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800467e:	e002      	b.n	8004686 <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8004680:	2320      	movs	r3, #32
 8004682:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8004686:	f107 0225 	add.w	r2, r7, #37	@ 0x25
 800468a:	7ab9      	ldrb	r1, [r7, #10]
 800468c:	7afb      	ldrb	r3, [r7, #11]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff ff70 	bl	8004574 <ComputeDevicePresetMode>
 8004694:	4603      	mov	r3, r0
 8004696:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 800469a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d112      	bne.n	80046c8 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 80046a2:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 80046a6:	f107 001c 	add.w	r0, r7, #28
 80046aa:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 80046ae:	f107 0314 	add.w	r3, r7, #20
 80046b2:	9301      	str	r3, [sp, #4]
 80046b4:	f107 0318 	add.w	r3, r7, #24
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	4603      	mov	r3, r0
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f001 fa47 	bl	8005b50 <VL53L1_get_preset_mode_timing_cfg>
 80046c2:	4603      	mov	r3, r0
 80046c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 80046c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d112      	bne.n	80046f6 <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 80046d0:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
 80046d4:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 80046d6:	69fd      	ldr	r5, [r7, #28]
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	9102      	str	r1, [sp, #8]
 80046e0:	9201      	str	r2, [sp, #4]
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	462b      	mov	r3, r5
 80046e6:	4622      	mov	r2, r4
 80046e8:	4601      	mov	r1, r0
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f001 fada 	bl	8005ca4 <VL53L1_set_preset_mode>
 80046f0:	4603      	mov	r3, r0
 80046f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 80046f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d103      	bne.n	8004706 <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8004704:	709a      	strb	r2, [r3, #2]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 8004706:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800470a:	2b00      	cmp	r3, #0
 800470c:	d103      	bne.n	8004716 <SetPresetMode+0xd2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	7afa      	ldrb	r2, [r7, #11]
 8004712:	f883 237c 	strb.w	r2, [r3, #892]	@ 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 8004716:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800471a:	4618      	mov	r0, r3
 800471c:	3728      	adds	r7, #40	@ 0x28
 800471e:	46bd      	mov	sp, r7
 8004720:	bdb0      	pop	{r4, r5, r7, pc}

08004722 <VL53L1_SetPresetMode>:
	return Status;
}


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	460b      	mov	r3, r1
 800472c:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800472e:	2300      	movs	r3, #0
 8004730:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8004732:	2303      	movs	r3, #3
 8004734:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	/* fix for bug 495690 */
	Status = VL53L1_low_power_auto_data_init(Dev);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f003 fde2 	bl	8008300 <VL53L1_low_power_auto_data_init>
 800473c:	4603      	mov	r3, r0
 800473e:	73fb      	strb	r3, [r7, #15]

	Status = SetPresetMode(Dev,
 8004740:	7bba      	ldrb	r2, [r7, #14]
 8004742:	78f9      	ldrb	r1, [r7, #3]
 8004744:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7ff ff7b 	bl	8004644 <SetPresetMode>
 800474e:	4603      	mov	r3, r0
 8004750:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8004752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d117      	bne.n	800478a <VL53L1_SetPresetMode+0x68>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 800475a:	78fb      	ldrb	r3, [r7, #3]
 800475c:	2b04      	cmp	r3, #4
 800475e:	d005      	beq.n	800476c <VL53L1_SetPresetMode+0x4a>
 8004760:	78fb      	ldrb	r3, [r7, #3]
 8004762:	2b03      	cmp	r3, #3
 8004764:	d002      	beq.n	800476c <VL53L1_SetPresetMode+0x4a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8004766:	78fb      	ldrb	r3, [r7, #3]
 8004768:	2b08      	cmp	r3, #8
 800476a:	d107      	bne.n	800477c <VL53L1_SetPresetMode+0x5a>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800476c:	f24a 0128 	movw	r1, #41000	@ 0xa028
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f891 	bl	8004898 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8004776:	4603      	mov	r3, r0
 8004778:	73fb      	strb	r3, [r7, #15]
 800477a:	e006      	b.n	800478a <VL53L1_SetPresetMode+0x68>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800477c:	f248 2135 	movw	r1, #33333	@ 0x8235
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f889 	bl	8004898 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8004786:	4603      	mov	r3, r0
 8004788:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800478a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d106      	bne.n	80047a0 <VL53L1_SetPresetMode+0x7e>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8004792:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fa08 	bl	8004bac <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 800479c:	4603      	mov	r3, r0
 800479e:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80047a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80047b8:	2300      	movs	r3, #0
 80047ba:	77fb      	strb	r3, [r7, #31]
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 80047c0:	2300      	movs	r3, #0
 80047c2:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 80047ce:	77bb      	strb	r3, [r7, #30]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 80047d0:	78fb      	ldrb	r3, [r7, #3]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d008      	beq.n	80047e8 <VL53L1_SetDistanceMode+0x3c>
 80047d6:	78fb      	ldrb	r3, [r7, #3]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d005      	beq.n	80047e8 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 80047dc:	78fb      	ldrb	r3, [r7, #3]
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d002      	beq.n	80047e8 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 80047e2:	f06f 0303 	mvn.w	r3, #3
 80047e6:	e052      	b.n	800488e <VL53L1_SetDistanceMode+0xe2>

	if (Status == VL53L1_ERROR_NONE)
 80047e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d107      	bne.n	8004800 <VL53L1_SetDistanceMode+0x54>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 80047f0:	f107 0308 	add.w	r3, r7, #8
 80047f4:	4619      	mov	r1, r3
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f001 f954 	bl	8005aa4 <VL53L1_get_user_zone>
 80047fc:	4603      	mov	r3, r0
 80047fe:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8004806:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10a      	bne.n	8004824 <VL53L1_SetDistanceMode+0x78>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800480e:	f107 0314 	add.w	r3, r7, #20
 8004812:	f107 0210 	add.w	r2, r7, #16
 8004816:	f107 010c 	add.w	r1, r7, #12
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f001 f87f 	bl	800591e <VL53L1_get_timeouts_us>
 8004820:	4603      	mov	r3, r0
 8004822:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8004824:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d107      	bne.n	800483c <VL53L1_SetDistanceMode+0x90>
		Status = SetPresetMode(Dev,
 800482c:	78fa      	ldrb	r2, [r7, #3]
 800482e:	7fb9      	ldrb	r1, [r7, #30]
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7ff ff06 	bl	8004644 <SetPresetMode>
 8004838:	4603      	mov	r3, r0
 800483a:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 800483c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d103      	bne.n	800484c <VL53L1_SetDistanceMode+0xa0>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	78fa      	ldrb	r2, [r7, #3]
 8004848:	f883 237d 	strb.w	r2, [r3, #893]	@ 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800484c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10e      	bne.n	8004872 <VL53L1_SetDistanceMode+0xc6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8004854:	68f9      	ldr	r1, [r7, #12]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f001 f827 	bl	80058ae <VL53L1_set_timeouts_us>
 8004860:	4603      	mov	r3, r0
 8004862:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8004864:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d102      	bne.n	8004872 <VL53L1_SetDistanceMode+0xc6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8004872:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d107      	bne.n	800488a <VL53L1_SetDistanceMode+0xde>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800487a:	f107 0308 	add.w	r3, r7, #8
 800487e:	4619      	mov	r1, r3
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f001 f8ec 	bl	8005a5e <VL53L1_set_user_zone>
 8004886:	4603      	mov	r3, r0
 8004888:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 800488a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3720      	adds	r7, #32
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
	...

08004898 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08c      	sub	sp, #48	@ 0x30
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80048a2:	2300      	movs	r3, #0
 80048a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t Mm1Enabled = 0;
 80048a8:	2300      	movs	r3, #0
 80048aa:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 80048ac:	2300      	movs	r3, #0
 80048ae:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 80048bc:	4b64      	ldr	r3, [pc, #400]	@ (8004a50 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>)
 80048be:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	4a64      	ldr	r2, [pc, #400]	@ (8004a54 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1bc>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d902      	bls.n	80048ce <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80048c8:	23fc      	movs	r3, #252	@ 0xfc
 80048ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 80048ce:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d109      	bne.n	80048ea <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80048d6:	f107 031a 	add.w	r3, r7, #26
 80048da:	461a      	mov	r2, r3
 80048dc:	2105      	movs	r1, #5
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 fa8b 	bl	8004dfa <VL53L1_GetSequenceStepEnable>
 80048e4:	4603      	mov	r3, r0
 80048e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80048ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d109      	bne.n	8004906 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80048f2:	f107 0319 	add.w	r3, r7, #25
 80048f6:	461a      	mov	r2, r3
 80048f8:	2106      	movs	r1, #6
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fa7d 	bl	8004dfa <VL53L1_GetSequenceStepEnable>
 8004900:	4603      	mov	r3, r0
 8004902:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 8004906:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10b      	bne.n	8004926 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 800490e:	f107 0314 	add.w	r3, r7, #20
 8004912:	f107 0210 	add.w	r2, r7, #16
 8004916:	f107 010c 	add.w	r1, r7, #12
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 ffff 	bl	800591e <VL53L1_get_timeouts_us>
 8004920:	4603      	mov	r3, r0
 8004922:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 8004926:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800492a:	2b00      	cmp	r3, #0
 800492c:	f040 8081 	bne.w	8004a32 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
		PresetMode = VL53L1DevDataGet(Dev,
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 8004936:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 8004938:	2300      	movs	r3, #0
 800493a:	62bb      	str	r3, [r7, #40]	@ 0x28
		divisor = 1;
 800493c:	2301      	movs	r3, #1
 800493e:	627b      	str	r3, [r7, #36]	@ 0x24
		switch (PresetMode) {
 8004940:	7efb      	ldrb	r3, [r7, #27]
 8004942:	2b08      	cmp	r3, #8
 8004944:	d026      	beq.n	8004994 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
 8004946:	2b08      	cmp	r3, #8
 8004948:	dc43      	bgt.n	80049d2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
 800494a:	2b03      	cmp	r3, #3
 800494c:	d00f      	beq.n	800496e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
 800494e:	2b04      	cmp	r3, #4
 8004950:	d13f      	bne.n	80049d2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004952:	7ebb      	ldrb	r3, [r7, #26]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d002      	beq.n	800495e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 8004958:	7e7b      	ldrb	r3, [r7, #25]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d103      	bne.n	8004966 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
				TimingGuard = 5000;
 800495e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004962:	62bb      	str	r3, [r7, #40]	@ 0x28
			else
				TimingGuard = 1000;
		break;
 8004964:	e038      	b.n	80049d8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
				TimingGuard = 1000;
 8004966:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800496a:	62bb      	str	r3, [r7, #40]	@ 0x28
		break;
 800496c:	e034      	b.n	80049d8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004974:	7ebb      	ldrb	r3, [r7, #26]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d002      	beq.n	8004980 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 800497a:	7e7b      	ldrb	r3, [r7, #25]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d103      	bne.n	8004988 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				TimingGuard = 26600;
 8004980:	f246 73e8 	movw	r3, #26600	@ 0x67e8
 8004984:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004986:	e002      	b.n	800498e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
			else
				TimingGuard = 21600;
 8004988:	f245 4360 	movw	r3, #21600	@ 0x5460
 800498c:	62bb      	str	r3, [r7, #40]	@ 0x28
			divisor = 2;
 800498e:	2302      	movs	r3, #2
 8004990:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 8004992:	e021      	b.n	80049d8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800499a:	23f5      	movs	r3, #245	@ 0xf5
 800499c:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 800499e:	f107 0308 	add.w	r3, r7, #8
 80049a2:	461a      	mov	r2, r3
 80049a4:	f248 0136 	movw	r1, #32822	@ 0x8036
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f002 f82b 	bl	8006a04 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	dd07      	ble.n	80049c4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				vhv += vhv_loops *
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	22f5      	movs	r2, #245	@ 0xf5
 80049b8:	fb02 f303 	mul.w	r3, r2, r3
 80049bc:	461a      	mov	r2, r3
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	4413      	add	r3, r2
 80049c2:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	f603 53dc 	addw	r3, r3, #3548	@ 0xddc
 80049ca:	62bb      	str	r3, [r7, #40]	@ 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 80049cc:	2302      	movs	r3, #2
 80049ce:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 80049d0:	e002      	b.n	80049d8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80049d2:	23f8      	movs	r3, #248	@ 0xf8
 80049d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049dc:	429a      	cmp	r2, r3
 80049de:	d803      	bhi.n	80049e8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x150>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80049e0:	23fc      	movs	r3, #252	@ 0xfc
 80049e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80049e6:	e003      	b.n	80049f0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ec:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 80049ee:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 80049f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d11c      	bne.n	8004a32 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	69fa      	ldr	r2, [r7, #28]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d203      	bcs.n	8004a08 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x170>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8004a00:	23fc      	movs	r3, #252	@ 0xfc
 8004a02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004a06:	e00d      	b.n	8004a24 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18c>
			else {
				TimingBudget /= divisor;
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a10:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8004a12:	68f9      	ldr	r1, [r7, #12]
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 ff48 	bl	80058ae <VL53L1_set_timeouts_us>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8004a24:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d102      	bne.n	8004a32 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
				VL53L1DevDataSet(Dev,
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8004a32:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d103      	bne.n	8004a42 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1aa>
		VL53L1DevDataSet(Dev,
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004a42:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3730      	adds	r7, #48	@ 0x30
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	00086470 	.word	0x00086470
 8004a54:	00989680 	.word	0x00989680

08004a58 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08c      	sub	sp, #48	@ 0x30
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004a62:	2300      	movs	r3, #0
 8004a64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t Mm1Enabled = 0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 8004a70:	2300      	movs	r3, #0
 8004a72:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8004a74:	2300      	movs	r3, #0
 8004a76:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 8004a86:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d109      	bne.n	8004aa2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8004a8e:	f107 031b 	add.w	r3, r7, #27
 8004a92:	461a      	mov	r2, r3
 8004a94:	2105      	movs	r1, #5
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f9af 	bl	8004dfa <VL53L1_GetSequenceStepEnable>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8004aa2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d109      	bne.n	8004abe <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8004aaa:	f107 031a 	add.w	r3, r7, #26
 8004aae:	461a      	mov	r2, r3
 8004ab0:	2106      	movs	r1, #6
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f9a1 	bl	8004dfa <VL53L1_GetSequenceStepEnable>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8004abe:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10b      	bne.n	8004ade <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 8004ac6:	f107 0310 	add.w	r3, r7, #16
 8004aca:	f107 0214 	add.w	r2, r7, #20
 8004ace:	f107 010c 	add.w	r1, r7, #12
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 ff23 	bl	800591e <VL53L1_get_timeouts_us>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 8004ade:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d155      	bne.n	8004b92 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>
		PresetMode = VL53L1DevDataGet(Dev,
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 8004aec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 8004af0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d02a      	beq.n	8004b4e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf6>
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	dc47      	bgt.n	8004b8c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
 8004afc:	2b03      	cmp	r3, #3
 8004afe:	d012      	beq.n	8004b26 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d143      	bne.n	8004b8c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004b04:	7efb      	ldrb	r3, [r7, #27]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d002      	beq.n	8004b10 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb8>
 8004b0a:	7ebb      	ldrb	r3, [r7, #26]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d105      	bne.n	8004b1c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8004b16:	3308      	adds	r3, #8
 8004b18:	62bb      	str	r3, [r7, #40]	@ 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 8004b1a:	e03a      	b.n	8004b92 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004b22:	62bb      	str	r3, [r7, #40]	@ 0x28
		break;
 8004b24:	e035      	b.n	8004b92 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004b26:	7efb      	ldrb	r3, [r7, #27]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d002      	beq.n	8004b32 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
 8004b2c:	7ebb      	ldrb	r3, [r7, #26]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d106      	bne.n	8004b40 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	f503 534f 	add.w	r3, r3, #13248	@ 0x33c0
 8004b38:	3334      	adds	r3, #52	@ 0x34
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 8004b3e:	e028      	b.n	8004b92 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f503 5328 	add.w	r3, r3, #10752	@ 0x2a00
 8004b46:	3330      	adds	r3, #48	@ 0x30
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
		break;
 8004b4c:	e021      	b.n	8004b92 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8004b4e:	23f5      	movs	r3, #245	@ 0xf5
 8004b50:	627b      	str	r3, [r7, #36]	@ 0x24
			VL53L1_get_tuning_parm(Dev,
 8004b52:	f107 0308 	add.w	r3, r7, #8
 8004b56:	461a      	mov	r2, r3
 8004b58:	f248 0136 	movw	r1, #32822	@ 0x8036
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f001 ff51 	bl	8006a04 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	dd07      	ble.n	8004b78 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x120>
				vhv += vhv_loops *
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	22f5      	movs	r2, #245	@ 0xf5
 8004b6c:	fb02 f303 	mul.w	r3, r2, r3
 8004b70:	461a      	mov	r2, r3
 8004b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b74:	4413      	add	r3, r2
 8004b76:	627b      	str	r3, [r7, #36]	@ 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8004b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7a:	f603 53dc 	addw	r3, r3, #3548	@ 0xddc
 8004b7e:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	69fa      	ldr	r2, [r7, #28]
 8004b86:	4413      	add	r3, r2
 8004b88:	62bb      	str	r3, [r7, #40]	@ 0x28
		break;
 8004b8a:	e002      	b.n	8004b92 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8004b8c:	23f8      	movs	r3, #248	@ 0xf8
 8004b8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
	}
	if (Status == VL53L1_ERROR_NONE)
 8004b92:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d102      	bne.n	8004ba0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x148>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b9e:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004ba0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3730      	adds	r7, #48	@ 0x30
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	019b      	lsls	r3, r3, #6
 8004bc2:	4a09      	ldr	r2, [pc, #36]	@ (8004be8 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 8004bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc8:	099b      	lsrs	r3, r3, #6
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	4413      	add	r3, r2
 8004bce:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fe1c 	bl	8005810 <VL53L1_set_inter_measurement_period_ms>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 8004bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	10624dd3 	.word	0x10624dd3

08004bec <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8004bfa:	f107 0308 	add.w	r3, r7, #8
 8004bfe:	4619      	mov	r1, r3
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 fe2e 	bl	8005862 <VL53L1_get_inter_measurement_period_ms>
 8004c06:	4603      	mov	r3, r0
 8004c08:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	019b      	lsls	r3, r3, #6
 8004c10:	4907      	ldr	r1, [pc, #28]	@ (8004c30 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 8004c12:	fba1 1303 	umull	r1, r3, r1, r3
 8004c16:	099b      	lsrs	r3, r3, #6
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 8004c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	10624dd3 	.word	0x10624dd3

08004c34 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004c42:	2300      	movs	r3, #0
 8004c44:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8004c46:	897b      	ldrh	r3, [r7, #10]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <SetLimitValue+0x1e>
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d009      	beq.n	8004c64 <SetLimitValue+0x30>
 8004c50:	e011      	b.n	8004c76 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	0b9b      	lsrs	r3, r3, #14
 8004c56:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8004c58:	8abb      	ldrh	r3, [r7, #20]
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f001 f9ad 	bl	8005fbc <VL53L1_set_lite_sigma_threshold>
		break;
 8004c62:	e00a      	b.n	8004c7a <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	0a5b      	lsrs	r3, r3, #9
 8004c68:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8004c6a:	8abb      	ldrh	r3, [r7, #20]
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f001 f9d0 	bl	8006014 <VL53L1_set_lite_min_count_rate>
		break;
 8004c74:	e001      	b.n	8004c7a <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004c76:	23fc      	movs	r3, #252	@ 0xfc
 8004c78:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004c7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b084      	sub	sp, #16
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	460b      	mov	r3, r1
 8004c90:	807b      	strh	r3, [r7, #2]
 8004c92:	4613      	mov	r3, r2
 8004c94:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004c96:	2300      	movs	r3, #0
 8004c98:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004c9e:	887b      	ldrh	r3, [r7, #2]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d902      	bls.n	8004caa <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004ca4:	23fc      	movs	r3, #252	@ 0xfc
 8004ca6:	73fb      	strb	r3, [r7, #15]
 8004ca8:	e014      	b.n	8004cd4 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 8004caa:	787b      	ldrb	r3, [r7, #1]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d102      	bne.n	8004cb6 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60bb      	str	r3, [r7, #8]
 8004cb4:	e006      	b.n	8004cc4 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004cb6:	887b      	ldrh	r3, [r7, #2]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	33e0      	adds	r3, #224	@ 0xe0
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8004cc4:	887b      	ldrh	r3, [r7, #2]
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7ff ffb2 	bl	8004c34 <SetLimitValue>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 8004cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10c      	bne.n	8004cf6 <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004cdc:	787b      	ldrb	r3, [r7, #1]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	bf14      	ite	ne
 8004ce2:	2301      	movne	r3, #1
 8004ce4:	2300      	moveq	r3, #0
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	887b      	ldrh	r3, [r7, #2]
 8004cea:	4611      	mov	r1, r2
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	4413      	add	r3, r2
 8004cf0:	460a      	mov	r2, r1
 8004cf2:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 8004cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b087      	sub	sp, #28
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	607a      	str	r2, [r7, #4]
 8004d0e:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004d10:	2300      	movs	r3, #0
 8004d12:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004d14:	897b      	ldrh	r3, [r7, #10]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d905      	bls.n	8004d26 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004d1a:	23fc      	movs	r3, #252	@ 0xfc
 8004d1c:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	701a      	strb	r2, [r3, #0]
 8004d24:	e008      	b.n	8004d38 <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004d26:	897b      	ldrh	r3, [r7, #10]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f893 3384 	ldrb.w	r3, [r3, #900]	@ 0x384
 8004d30:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	7dba      	ldrb	r2, [r7, #22]
 8004d36:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8004d38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	460b      	mov	r3, r1
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004d56:	2300      	movs	r3, #0
 8004d58:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8004d5e:	897b      	ldrh	r3, [r7, #10]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <VL53L1_GetLimitCheckValue+0x22>
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d00c      	beq.n	8004d82 <VL53L1_GetLimitCheckValue+0x3a>
 8004d68:	e017      	b.n	8004d9a <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8004d6a:	f107 0314 	add.w	r3, r7, #20
 8004d6e:	4619      	mov	r1, r3
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f001 f90d 	bl	8005f90 <VL53L1_get_lite_sigma_threshold>
 8004d76:	4603      	mov	r3, r0
 8004d78:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 8004d7a:	8abb      	ldrh	r3, [r7, #20]
 8004d7c:	039b      	lsls	r3, r3, #14
 8004d7e:	61bb      	str	r3, [r7, #24]
		break;
 8004d80:	e00d      	b.n	8004d9e <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8004d82:	f107 0316 	add.w	r3, r7, #22
 8004d86:	4619      	mov	r1, r3
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f001 f92d 	bl	8005fe8 <VL53L1_get_lite_min_count_rate>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8004d92:	8afb      	ldrh	r3, [r7, #22]
 8004d94:	025b      	lsls	r3, r3, #9
 8004d96:	61bb      	str	r3, [r7, #24]
		break;
 8004d98:	e001      	b.n	8004d9e <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004d9a:	23fc      	movs	r3, #252	@ 0xfc
 8004d9c:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 8004d9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d123      	bne.n	8004dee <VL53L1_GetLimitCheckValue+0xa6>

		if (TempFix1616 == 0) {
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d110      	bne.n	8004dce <VL53L1_GetLimitCheckValue+0x86>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8004dac:	897b      	ldrh	r3, [r7, #10]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	33e0      	adds	r3, #224	@ 0xe0
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004dc0:	897b      	ldrh	r3, [r7, #10]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
 8004dcc:	e00f      	b.n	8004dee <VL53L1_GetLimitCheckValue+0xa6>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004dd4:	897b      	ldrh	r3, [r7, #10]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	33e0      	adds	r3, #224	@ 0xe0
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004de2:	897b      	ldrh	r3, [r7, #10]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4413      	add	r3, r2
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 8004dee:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3720      	adds	r7, #32
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b086      	sub	sp, #24
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	460b      	mov	r3, r1
 8004e04:	607a      	str	r2, [r7, #4]
 8004e06:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8004e0c:	7afb      	ldrb	r3, [r7, #11]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	4619      	mov	r1, r3
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 fdec 	bl	80059f0 <VL53L1_get_sequence_config_bit>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8004e1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004e30:	2300      	movs	r3, #0
 8004e32:	75fb      	strb	r3, [r7, #23]
	uint32_t MTBus, IMPms;


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	789b      	ldrb	r3, [r3, #2]
 8004e38:	75bb      	strb	r3, [r7, #22]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8004e3a:	7dbb      	ldrb	r3, [r7, #22]
 8004e3c:	2b40      	cmp	r3, #64	@ 0x40
 8004e3e:	d002      	beq.n	8004e46 <VL53L1_StartMeasurement+0x1e>
		VL53L1_LoadPatch(Dev);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fa6b 	bl	800531c <VL53L1_LoadPatch>
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3378 	ldrb.w	r3, [r3, #888]	@ 0x378
 8004e4c:	757b      	strb	r3, [r7, #21]
	switch (CurrPalState) {
 8004e4e:	7d7b      	ldrb	r3, [r7, #21]
 8004e50:	2b63      	cmp	r3, #99	@ 0x63
 8004e52:	dc12      	bgt.n	8004e7a <VL53L1_StartMeasurement+0x52>
 8004e54:	2b62      	cmp	r3, #98	@ 0x62
 8004e56:	da0d      	bge.n	8004e74 <VL53L1_StartMeasurement+0x4c>
 8004e58:	2b05      	cmp	r3, #5
 8004e5a:	dc0e      	bgt.n	8004e7a <VL53L1_StartMeasurement+0x52>
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	da09      	bge.n	8004e74 <VL53L1_StartMeasurement+0x4c>
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	dc02      	bgt.n	8004e6a <VL53L1_StartMeasurement+0x42>
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	da05      	bge.n	8004e74 <VL53L1_StartMeasurement+0x4c>
 8004e68:	e007      	b.n	8004e7a <VL53L1_StartMeasurement+0x52>
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	d105      	bne.n	8004e7a <VL53L1_StartMeasurement+0x52>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	75fb      	strb	r3, [r7, #23]
		break;
 8004e72:	e004      	b.n	8004e7e <VL53L1_StartMeasurement+0x56>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8004e74:	23f2      	movs	r3, #242	@ 0xf2
 8004e76:	75fb      	strb	r3, [r7, #23]
		break;
 8004e78:	e001      	b.n	8004e7e <VL53L1_StartMeasurement+0x56>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 8004e7a:	23fd      	movs	r3, #253	@ 0xfd
 8004e7c:	75fb      	strb	r3, [r7, #23]
	}

	/* Check timing configuration between timing budget and
	 * inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 8004e7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d11f      	bne.n	8004ec6 <VL53L1_StartMeasurement+0x9e>
 8004e86:	7dbb      	ldrb	r3, [r7, #22]
 8004e88:	2b40      	cmp	r3, #64	@ 0x40
 8004e8a:	d11c      	bne.n	8004ec6 <VL53L1_StartMeasurement+0x9e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8004e8c:	f107 0310 	add.w	r3, r7, #16
 8004e90:	4619      	mov	r1, r3
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7ff fde0 	bl	8004a58 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	4a17      	ldr	r2, [pc, #92]	@ (8004efc <VL53L1_StartMeasurement+0xd4>)
 8004ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea4:	099b      	lsrs	r3, r3, #6
 8004ea6:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8004ea8:	f107 030c 	add.w	r3, r7, #12
 8004eac:	4619      	mov	r1, r3
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7ff fe9c 	bl	8004bec <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1d1a      	adds	r2, r3, #4
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d901      	bls.n	8004ec6 <VL53L1_StartMeasurement+0x9e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8004ec2:	23fc      	movs	r3, #252	@ 0xfc
 8004ec4:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 8004ec6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d107      	bne.n	8004ede <VL53L1_StartMeasurement+0xb6>
		Status = VL53L1_init_and_start_range(
 8004ece:	7dbb      	ldrb	r3, [r7, #22]
 8004ed0:	2206      	movs	r2, #6
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f001 f8d3 	bl	8006080 <VL53L1_init_and_start_range>
 8004eda:	4603      	mov	r3, r0
 8004edc:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 8004ede:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d103      	bne.n	8004eee <VL53L1_StartMeasurement+0xc6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2204      	movs	r2, #4
 8004eea:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 8004eee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3718      	adds	r7, #24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	10624dd3 	.word	0x10624dd3

08004f00 <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	789b      	ldrb	r3, [r3, #2]
 8004f10:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 8004f12:	7bbb      	ldrb	r3, [r7, #14]
 8004f14:	4619      	mov	r1, r3
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f001 fc40 	bl	800679c <VL53L1_clear_interrupt_and_enable_next_range>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8004f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <VL53L1_GetMeasurementDataReady>:


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004f36:	2300      	movs	r3, #0
 8004f38:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 8004f3a:	6839      	ldr	r1, [r7, #0]
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f004 fc08 	bl	8009752 <VL53L1_is_new_data_ready>
 8004f42:	4603      	mov	r3, r0
 8004f44:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b08d      	sub	sp, #52	@ 0x34
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	603a      	str	r2, [r7, #0]
 8004f5e:	71fb      	strb	r3, [r7, #7]
 8004f60:	460b      	mov	r3, r1
 8004f62:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 8004f64:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004f68:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t SRAS = 30;
 8004f6a:	231e      	movs	r3, #30
 8004f6c:	847b      	strh	r3, [r7, #34]	@ 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 8004f6e:	4b33      	ldr	r3, [pc, #204]	@ (800503c <ComputeRQL+0xe8>)
 8004f70:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 8004f72:	4b33      	ldr	r3, [pc, #204]	@ (8005040 <ComputeRQL+0xec>)
 8004f74:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 8004f76:	f641 139a 	movw	r3, #6554	@ 0x199a
 8004f7a:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8004f7c:	79fb      	ldrb	r3, [r7, #7]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d103      	bne.n	8004f8a <ComputeRQL+0x36>
		returnvalue = 0;
 8004f82:	2300      	movs	r3, #0
 8004f84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004f88:	e04f      	b.n	800502a <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8004f8a:	79bb      	ldrb	r3, [r7, #6]
 8004f8c:	2b07      	cmp	r3, #7
 8004f8e:	d103      	bne.n	8004f98 <ComputeRQL+0x44>
		returnvalue = 50;
 8004f90:	2332      	movs	r3, #50	@ 0x32
 8004f92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004f96:	e048      	b.n	800502a <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8004f9e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	dd03      	ble.n	8004fae <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 8004fa6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004fa8:	041b      	lsls	r3, r3, #16
 8004faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fac:	e007      	b.n	8004fbe <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	fb02 f303 	mul.w	r3, r2, r3
 8004fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 8004fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d020      	beq.n	8005006 <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004fc8:	461a      	mov	r2, r3
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	fb02 f303 	mul.w	r3, r2, r3
 8004fd0:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 8004fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd4:	085b      	lsrs	r3, r3, #1
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	4413      	add	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe4:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	041b      	lsls	r3, r3, #16
 8004fea:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d804      	bhi.n	8004ffe <ComputeRQL+0xaa>
				SRQL = GI - partial;
 8004ff4:	69fa      	ldr	r2, [r7, #28]
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ffc:	e006      	b.n	800500c <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 8004ffe:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 8005002:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005004:	e002      	b.n	800500c <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 8005006:	f44f 03c8 	mov.w	r3, #6553600	@ 0x640000
 800500a:	62bb      	str	r3, [r7, #40]	@ 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 800500c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800500e:	0c1b      	lsrs	r3, r3, #16
 8005010:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8005012:	7bfb      	ldrb	r3, [r7, #15]
 8005014:	2b32      	cmp	r3, #50	@ 0x32
 8005016:	d905      	bls.n	8005024 <ComputeRQL+0xd0>
 8005018:	7bfb      	ldrb	r3, [r7, #15]
 800501a:	2b64      	cmp	r3, #100	@ 0x64
 800501c:	bf28      	it	cs
 800501e:	2364      	movcs	r3, #100	@ 0x64
 8005020:	b2db      	uxtb	r3, r3
 8005022:	e000      	b.n	8005026 <ComputeRQL+0xd2>
 8005024:	2332      	movs	r3, #50	@ 0x32
 8005026:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return returnvalue;
 800502a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800502e:	4618      	mov	r0, r3
 8005030:	3734      	adds	r7, #52	@ 0x34
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	0075b333 	.word	0x0075b333
 8005040:	0030cccd 	.word	0x0030cccd

08005044 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	4603      	mov	r3, r0
 800504c:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800504e:	79fb      	ldrb	r3, [r7, #7]
 8005050:	3b04      	subs	r3, #4
 8005052:	2b0f      	cmp	r3, #15
 8005054:	d83d      	bhi.n	80050d2 <ConvertStatusLite+0x8e>
 8005056:	a201      	add	r2, pc, #4	@ (adr r2, 800505c <ConvertStatusLite+0x18>)
 8005058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505c:	080050af 	.word	0x080050af
 8005060:	080050a9 	.word	0x080050a9
 8005064:	080050b5 	.word	0x080050b5
 8005068:	080050bb 	.word	0x080050bb
 800506c:	080050c7 	.word	0x080050c7
 8005070:	080050cd 	.word	0x080050cd
 8005074:	080050d3 	.word	0x080050d3
 8005078:	080050d3 	.word	0x080050d3
 800507c:	080050c1 	.word	0x080050c1
 8005080:	080050d3 	.word	0x080050d3
 8005084:	080050d3 	.word	0x080050d3
 8005088:	080050d3 	.word	0x080050d3
 800508c:	080050d3 	.word	0x080050d3
 8005090:	080050d3 	.word	0x080050d3
 8005094:	0800509d 	.word	0x0800509d
 8005098:	080050a3 	.word	0x080050a3
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 800509c:	230a      	movs	r3, #10
 800509e:	73fb      	strb	r3, [r7, #15]
		break;
 80050a0:	e019      	b.n	80050d6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 80050a2:	2306      	movs	r3, #6
 80050a4:	73fb      	strb	r3, [r7, #15]
		break;
 80050a6:	e016      	b.n	80050d6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 80050a8:	2304      	movs	r3, #4
 80050aa:	73fb      	strb	r3, [r7, #15]
		break;
 80050ac:	e013      	b.n	80050d6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 80050ae:	2302      	movs	r3, #2
 80050b0:	73fb      	strb	r3, [r7, #15]
		break;
 80050b2:	e010      	b.n	80050d6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 80050b4:	2301      	movs	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
		break;
 80050b8:	e00d      	b.n	80050d6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 80050ba:	2307      	movs	r3, #7
 80050bc:	73fb      	strb	r3, [r7, #15]
		break;
 80050be:	e00a      	b.n	80050d6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 80050c0:	2309      	movs	r3, #9
 80050c2:	73fb      	strb	r3, [r7, #15]
		break;
 80050c4:	e007      	b.n	80050d6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 80050c6:	2303      	movs	r3, #3
 80050c8:	73fb      	strb	r3, [r7, #15]
		break;
 80050ca:	e004      	b.n	80050d6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80050cc:	2300      	movs	r3, #0
 80050ce:	73fb      	strb	r3, [r7, #15]
		break;
 80050d0:	e001      	b.n	80050d6 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 80050d2:	23ff      	movs	r3, #255	@ 0xff
 80050d4:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 80050d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08c      	sub	sp, #48	@ 0x30
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	607b      	str	r3, [r7, #4]
 80050ee:	460b      	mov	r3, r1
 80050f0:	72fb      	strb	r3, [r7, #11]
 80050f2:	4613      	mov	r3, r2
 80050f4:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80050f6:	2300      	movs	r3, #0
 80050f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005102:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800510a:	f003 031f 	and.w	r3, r3, #31
 800510e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8005112:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8005116:	7afb      	ldrb	r3, [r7, #11]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff ff1a 	bl	8004f54 <ComputeRQL>
 8005120:	4603      	mov	r3, r0
 8005122:	461a      	mov	r2, r3
 8005124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005126:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800512c:	025b      	lsls	r3, r3, #9
 800512e:	62bb      	str	r3, [r7, #40]	@ 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8005130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005132:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005134:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800513a:	025b      	lsls	r3, r3, #9
 800513c:	627b      	str	r3, [r7, #36]	@ 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 800513e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005142:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 8005148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800514a:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005150:	025b      	lsls	r3, r3, #9
 8005152:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8005154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005156:	6a3a      	ldr	r2, [r7, #32]
 8005158:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	@ 0x3c
 8005160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005162:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 8005164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005166:	2200      	movs	r2, #0
 8005168:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 800516a:	7abb      	ldrb	r3, [r7, #10]
 800516c:	2b11      	cmp	r3, #17
 800516e:	d009      	beq.n	8005184 <SetSimpleData+0xa0>
 8005170:	2b11      	cmp	r3, #17
 8005172:	dc0f      	bgt.n	8005194 <SetSimpleData+0xb0>
 8005174:	2b03      	cmp	r3, #3
 8005176:	dc02      	bgt.n	800517e <SetSimpleData+0x9a>
 8005178:	2b00      	cmp	r3, #0
 800517a:	dc03      	bgt.n	8005184 <SetSimpleData+0xa0>
 800517c:	e00a      	b.n	8005194 <SetSimpleData+0xb0>
 800517e:	2b0d      	cmp	r3, #13
 8005180:	d004      	beq.n	800518c <SetSimpleData+0xa8>
 8005182:	e007      	b.n	8005194 <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8005184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005186:	2205      	movs	r2, #5
 8005188:	76da      	strb	r2, [r3, #27]
		break;
 800518a:	e006      	b.n	800519a <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 800518c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800518e:	220d      	movs	r2, #13
 8005190:	76da      	strb	r2, [r3, #27]
		break;
 8005192:	e002      	b.n	800519a <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8005194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005196:	2200      	movs	r2, #0
 8005198:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 800519a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800519c:	7edb      	ldrb	r3, [r3, #27]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d108      	bne.n	80051b4 <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 80051a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff ff4c 	bl	8005044 <ConvertStatusLite>
 80051ac:	4603      	mov	r3, r0
 80051ae:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 80051b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b2:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80051b8:	025b      	lsls	r3, r3, #9
 80051ba:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6a3a      	ldr	r2, [r7, #32]
 80051c0:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051c8:	025b      	lsls	r3, r3, #9
 80051ca:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a3a      	ldr	r2, [r7, #32]
 80051d0:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 80051d4:	f107 0314 	add.w	r3, r7, #20
 80051d8:	461a      	mov	r2, r3
 80051da:	2100      	movs	r1, #0
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f7ff fdb3 	bl	8004d48 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 80051e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80051e6:	2b06      	cmp	r3, #6
 80051e8:	bf0c      	ite	eq
 80051ea:	2301      	moveq	r3, #1
 80051ec:	2300      	movne	r3, #0
 80051ee:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 80051f0:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 80051f2:	f107 0319 	add.w	r3, r7, #25
 80051f6:	461a      	mov	r2, r3
 80051f8:	2100      	movs	r1, #0
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f7ff fd81 	bl	8004d02 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8005200:	7e7b      	ldrb	r3, [r7, #25]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d104      	bne.n	8005210 <SetSimpleData+0x12c>
 8005206:	7ffb      	ldrb	r3, [r7, #31]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d101      	bne.n	8005210 <SetSimpleData+0x12c>
 800520c:	2301      	movs	r3, #1
 800520e:	e000      	b.n	8005212 <SetSimpleData+0x12e>
 8005210:	2300      	movs	r3, #0
 8005212:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	7fba      	ldrb	r2, [r7, #30]
 8005218:	f883 2386 	strb.w	r2, [r3, #902]	@ 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 800521c:	f107 0314 	add.w	r3, r7, #20
 8005220:	461a      	mov	r2, r3
 8005222:	2101      	movs	r1, #1
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f7ff fd8f 	bl	8004d48 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 800522a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800522e:	2b04      	cmp	r3, #4
 8005230:	bf0c      	ite	eq
 8005232:	2301      	moveq	r3, #1
 8005234:	2300      	movne	r3, #0
 8005236:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8005238:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 800523a:	f107 0319 	add.w	r3, r7, #25
 800523e:	461a      	mov	r2, r3
 8005240:	2101      	movs	r1, #1
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f7ff fd5d 	bl	8004d02 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8005248:	7e7b      	ldrb	r3, [r7, #25]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d104      	bne.n	8005258 <SetSimpleData+0x174>
 800524e:	7f7b      	ldrb	r3, [r7, #29]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <SetSimpleData+0x174>
 8005254:	2301      	movs	r3, #1
 8005256:	e000      	b.n	800525a <SetSimpleData+0x176>
 8005258:	2300      	movs	r3, #0
 800525a:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	7fba      	ldrb	r2, [r7, #30]
 8005260:	f883 2387 	strb.w	r2, [r3, #903]	@ 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 8005264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005266:	8b1b      	ldrh	r3, [r3, #24]
 8005268:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 800526a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800526c:	7edb      	ldrb	r3, [r3, #27]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d110      	bne.n	8005294 <SetSimpleData+0x1b0>
 8005272:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005276:	2b00      	cmp	r3, #0
 8005278:	da0c      	bge.n	8005294 <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 800527a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800527e:	4b08      	ldr	r3, [pc, #32]	@ (80052a0 <SetSimpleData+0x1bc>)
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	429a      	cmp	r2, r3
 8005284:	da03      	bge.n	800528e <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 8005286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005288:	220e      	movs	r2, #14
 800528a:	76da      	strb	r2, [r3, #27]
 800528c:	e002      	b.n	8005294 <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800528e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005290:	2200      	movs	r2, #0
 8005292:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 8005294:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8005298:	4618      	mov	r0, r3
 800529a:	3730      	adds	r7, #48	@ 0x30
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	2000000c 	.word	0x2000000c

080052a4 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b0a8      	sub	sp, #160	@ 0xa0
 80052a8:	af02      	add	r7, sp, #8
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80052ae:	2300      	movs	r3, #0
 80052b0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	VL53L1_range_results_t results;
	VL53L1_range_results_t *presults = &results;
 80052b4:	f107 0308 	add.w	r3, r7, #8
 80052b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 80052bc:	221c      	movs	r2, #28
 80052be:	21ff      	movs	r1, #255	@ 0xff
 80052c0:	6838      	ldr	r0, [r7, #0]
 80052c2:	f005 fb08 	bl	800a8d6 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 80052c6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80052ca:	2102      	movs	r1, #2
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f001 f9f5 	bl	80066bc <VL53L1_get_device_results>
 80052d2:	4603      	mov	r3, r0
 80052d4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 80052d8:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d117      	bne.n	8005310 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 80052e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80052e4:	789a      	ldrb	r2, [r3, #2]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 80052ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80052ee:	3304      	adds	r3, #4
 80052f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		Status = SetSimpleData(Dev, 1,
 80052f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80052f8:	78da      	ldrb	r2, [r3, #3]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005302:	2101      	movs	r1, #1
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7ff feed 	bl	80050e4 <SetSimpleData>
 800530a:	4603      	mov	r3, r0
 800530c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005310:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 8005314:	4618      	mov	r0, r3
 8005316:	3798      	adds	r7, #152	@ 0x98
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <VL53L1_LoadPatch>:

/* End Group PAL IRQ Triggered events Functions */


static VL53L1_Error VL53L1_LoadPatch(VL53L1_DEV Dev)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b0c6      	sub	sp, #280	@ 0x118
 8005320:	af00      	add	r7, sp, #0
 8005322:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005326:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800532a:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800532c:	2300      	movs	r3, #0
 800532e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	uint32_t patch_tuning = 0;
 8005332:	2300      	movs	r3, #0
 8005334:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;
	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8005338:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10b      	bne.n	8005358 <VL53L1_LoadPatch+0x3c>
		status = VL53L1_WrByte(
 8005340:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005344:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005348:	2200      	movs	r2, #0
 800534a:	2185      	movs	r1, #133	@ 0x85
 800534c:	6818      	ldr	r0, [r3, #0]
 800534e:	f004 fb13 	bl	8009978 <VL53L1_WrByte>
 8005352:	4603      	mov	r3, r0
 8005354:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				0x00);
	/* Force GO1 on */
	if (status == VL53L1_ERROR_NONE)
 8005358:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 800535c:	2b00      	cmp	r3, #0
 800535e:	d106      	bne.n	800536e <VL53L1_LoadPatch+0x52>
		VL53L1_enable_powerforce(Dev);
 8005360:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005364:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005368:	6818      	ldr	r0, [r3, #0]
 800536a:	f002 fd90 	bl	8007e8e <VL53L1_enable_powerforce>

	patch_tuning = BDTable[VL53L1_TUNING_PHASECAL_PATCH_POWER];
 800536e:	4b7e      	ldr	r3, [pc, #504]	@ (8005568 <VL53L1_LoadPatch+0x24c>)
 8005370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005372:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	switch(patch_tuning) {
 8005376:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800537a:	2b03      	cmp	r3, #3
 800537c:	d81a      	bhi.n	80053b4 <VL53L1_LoadPatch+0x98>
 800537e:	a201      	add	r2, pc, #4	@ (adr r2, 8005384 <VL53L1_LoadPatch+0x68>)
 8005380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005384:	08005395 	.word	0x08005395
 8005388:	0800539d 	.word	0x0800539d
 800538c:	080053a5 	.word	0x080053a5
 8005390:	080053ad 	.word	0x080053ad
	case 0:
		patch_power = 0x00;
 8005394:	2300      	movs	r3, #0
 8005396:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 800539a:	e00e      	b.n	80053ba <VL53L1_LoadPatch+0x9e>
	case 1:
		patch_power = 0x10;
 800539c:	2310      	movs	r3, #16
 800539e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 80053a2:	e00a      	b.n	80053ba <VL53L1_LoadPatch+0x9e>
	case 2:
		patch_power = 0x20;
 80053a4:	2320      	movs	r3, #32
 80053a6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 80053aa:	e006      	b.n	80053ba <VL53L1_LoadPatch+0x9e>
	case 3:
		patch_power = 0x40;
 80053ac:	2340      	movs	r3, #64	@ 0x40
 80053ae:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 80053b2:	e002      	b.n	80053ba <VL53L1_LoadPatch+0x9e>
	default:
		patch_power = 0x00;
 80053b4:	2300      	movs	r3, #0
 80053b6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	}
	/* Set patch RAM offsets */
	if (status == VL53L1_ERROR_NONE) {
 80053ba:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d134      	bne.n	800542c <VL53L1_LoadPatch+0x110>
		/* Package up MultiByte transaction */
		comms_buffer[0] = 0x29;
 80053c2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80053c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80053ca:	2229      	movs	r2, #41	@ 0x29
 80053cc:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 80053ce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80053d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80053d6:	22c9      	movs	r2, #201	@ 0xc9
 80053d8:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 80053da:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80053de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80053e2:	220e      	movs	r2, #14
 80053e4:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 80053e6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80053ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80053ee:	2240      	movs	r2, #64	@ 0x40
 80053f0:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 80053f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80053f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80053fa:	2228      	movs	r2, #40	@ 0x28
 80053fc:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 80053fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005402:	b2da      	uxtb	r2, r3
 8005404:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005408:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800540c:	715a      	strb	r2, [r3, #5]
		/* 0x10 for 60ms, 0x20 for 240ms and 0x40 for 3580ms */
		status = VL53L1_WriteMulti(
 800540e:	f107 020c 	add.w	r2, r7, #12
 8005412:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005416:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 800541a:	2306      	movs	r3, #6
 800541c:	f240 4176 	movw	r1, #1142	@ 0x476
 8005420:	6800      	ldr	r0, [r0, #0]
 8005422:	f004 fa3d 	bl	80098a0 <VL53L1_WriteMulti>
 8005426:	4603      	mov	r3, r0
 8005428:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				VL53L1_PATCH__OFFSET_0,
				comms_buffer,
				6);
	}
	/* Set patch breakpoints */
	if (status == VL53L1_ERROR_NONE) {
 800542c:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8005430:	2b00      	cmp	r3, #0
 8005432:	d132      	bne.n	800549a <VL53L1_LoadPatch+0x17e>
		comms_buffer[0] = 0x03;
 8005434:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005438:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800543c:	2203      	movs	r2, #3
 800543e:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8005440:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005444:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005448:	226d      	movs	r2, #109	@ 0x6d
 800544a:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 800544c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005450:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005454:	2203      	movs	r2, #3
 8005456:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8005458:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800545c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005460:	226f      	movs	r2, #111	@ 0x6f
 8005462:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8005464:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005468:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800546c:	2207      	movs	r2, #7
 800546e:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8005470:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005474:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005478:	2229      	movs	r2, #41	@ 0x29
 800547a:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(
 800547c:	f107 020c 	add.w	r2, r7, #12
 8005480:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005484:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8005488:	2306      	movs	r3, #6
 800548a:	f240 4196 	movw	r1, #1174	@ 0x496
 800548e:	6800      	ldr	r0, [r0, #0]
 8005490:	f004 fa06 	bl	80098a0 <VL53L1_WriteMulti>
 8005494:	4603      	mov	r3, r0
 8005496:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				VL53L1_PATCH__ADDRESS_0,
				comms_buffer,
				6);
	}
	/* Enable patch JMP patches */
	if (status == VL53L1_ERROR_NONE) {
 800549a:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d11a      	bne.n	80054d8 <VL53L1_LoadPatch+0x1bc>
		comms_buffer[0] = 0x00;
 80054a2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80054a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80054aa:	2200      	movs	r2, #0
 80054ac:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80054ae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80054b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80054b6:	2207      	movs	r2, #7
 80054b8:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 80054ba:	f107 020c 	add.w	r2, r7, #12
 80054be:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80054c2:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 80054c6:	2302      	movs	r3, #2
 80054c8:	f240 4172 	movw	r1, #1138	@ 0x472
 80054cc:	6800      	ldr	r0, [r0, #0]
 80054ce:	f004 f9e7 	bl	80098a0 <VL53L1_WriteMulti>
 80054d2:	4603      	mov	r3, r0
 80054d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				VL53L1_PATCH__JMP_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable patch DATA patches */
	if (status == VL53L1_ERROR_NONE) {
 80054d8:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d11a      	bne.n	8005516 <VL53L1_LoadPatch+0x1fa>
		comms_buffer[0] = 0x00;
 80054e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80054e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80054e8:	2200      	movs	r2, #0
 80054ea:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80054ec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80054f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80054f4:	2207      	movs	r2, #7
 80054f6:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 80054f8:	f107 020c 	add.w	r2, r7, #12
 80054fc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005500:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8005504:	2302      	movs	r3, #2
 8005506:	f240 4174 	movw	r1, #1140	@ 0x474
 800550a:	6800      	ldr	r0, [r0, #0]
 800550c:	f004 f9c8 	bl	80098a0 <VL53L1_WriteMulti>
 8005510:	4603      	mov	r3, r0
 8005512:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				VL53L1_PATCH__DATA_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable firmware patching */
	if (status == VL53L1_ERROR_NONE)
 8005516:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10c      	bne.n	8005538 <VL53L1_LoadPatch+0x21c>
		status = VL53L1_WrByte(
 800551e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005522:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005526:	2201      	movs	r2, #1
 8005528:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 800552c:	6818      	ldr	r0, [r3, #0]
 800552e:	f004 fa23 	bl	8009978 <VL53L1_WrByte>
 8005532:	4603      	mov	r3, r0
 8005534:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				Dev,
				VL53L1_PATCH__CTRL,
				0x01);
	/* Enable Firmware */
	if (status == VL53L1_ERROR_NONE)
 8005538:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10b      	bne.n	8005558 <VL53L1_LoadPatch+0x23c>
		status = VL53L1_WrByte(
 8005540:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005544:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005548:	2201      	movs	r2, #1
 800554a:	2185      	movs	r1, #133	@ 0x85
 800554c:	6818      	ldr	r0, [r3, #0]
 800554e:	f004 fa13 	bl	8009978 <VL53L1_WrByte>
 8005552:	4603      	mov	r3, r0
 8005554:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				VL53L1_FIRMWARE__ENABLE,
				0x01);

	LOG_FUNCTION_END(status);

	return status;
 8005558:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
}
 800555c:	4618      	mov	r0, r3
 800555e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	2000000c 	.word	0x2000000c

0800556c <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800556c:	b5b0      	push	{r4, r5, r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af04      	add	r7, sp, #16
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	460b      	mov	r3, r1
 8005576:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8005578:	2300      	movs	r3, #0
 800557a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 8005580:	2162      	movs	r1, #98	@ 0x62
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f002 f93d 	bl	8007802 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2200      	movs	r2, #0
 800558c:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2201      	movs	r2, #1
 8005592:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2200      	movs	r2, #0
 8005598:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2201      	movs	r2, #1
 800559e:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2201      	movs	r2, #1
 80055a4:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80055ac:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80055b4:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 80055bc:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	2264      	movs	r2, #100	@ 0x64
 80055c2:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80055ca:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f240 72db 	movw	r2, #2011	@ 0x7db
 80055da:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f002 f8f3 	bl	80077ca <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d008      	beq.n	80055fc <VL53L1_data_init+0x90>
 80055ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d104      	bne.n	80055fc <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f857 	bl	80056a6 <VL53L1_read_p2p_data>
 80055f8:	4603      	mov	r3, r0
 80055fa:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8005602:	4618      	mov	r0, r3
 8005604:	f001 fc22 	bl	8006e4c <VL53L1_init_refspadchar_config_struct>
 8005608:	4603      	mov	r3, r0
 800560a:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8005612:	4618      	mov	r0, r3
 8005614:	f001 fc3e 	bl	8006e94 <VL53L1_init_ssc_config_struct>
 8005618:	4603      	mov	r3, r0
 800561a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f103 0242 	add.w	r2, r3, #66	@ 0x42
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8005628:	4619      	mov	r1, r3
 800562a:	4610      	mov	r0, r2
 800562c:	f001 fc53 	bl	8006ed6 <VL53L1_init_xtalk_config_struct>
 8005630:	4603      	mov	r3, r0
 8005632:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800563a:	4618      	mov	r0, r3
 800563c:	f001 fcad 	bl	8006f9a <VL53L1_init_offset_cal_config_struct>
 8005640:	4603      	mov	r3, r0
 8005642:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	33a4      	adds	r3, #164	@ 0xa4
 8005648:	4618      	mov	r0, r3
 800564a:	f001 fccd 	bl	8006fe8 <VL53L1_init_tuning_parm_storage_struct>
 800564e:	4603      	mov	r3, r0
 8005650:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 8005652:	2120      	movs	r1, #32
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 fcf3 	bl	8006040 <VL53L1_set_vhv_loopbound>
 800565a:	4603      	mov	r3, r0
 800565c:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 800565e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d116      	bne.n	8005694 <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	7858      	ldrb	r0, [r3, #1]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	8b1c      	ldrh	r4, [r3, #24]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	689d      	ldr	r5, [r3, #8]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	6912      	ldr	r2, [r2, #16]
 800567a:	68b9      	ldr	r1, [r7, #8]
 800567c:	6949      	ldr	r1, [r1, #20]
 800567e:	9102      	str	r1, [sp, #8]
 8005680:	9201      	str	r2, [sp, #4]
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	462b      	mov	r3, r5
 8005686:	4622      	mov	r2, r4
 8005688:	4601      	mov	r1, r0
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fb0a 	bl	8005ca4 <VL53L1_set_preset_mode>
 8005690:	4603      	mov	r3, r0
 8005692:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f002 fe33 	bl	8008300 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 800569a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bdb0      	pop	{r4, r5, r7, pc}

080056a6 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b084      	sub	sp, #16
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80056ae:	2300      	movs	r3, #0
 80056b0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80056b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d108      	bne.n	80056d0 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80056c4:	4619      	mov	r1, r3
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f002 ffb7 	bl	800863a <VL53L1_get_static_nvm_managed>
 80056cc:	4603      	mov	r3, r0
 80056ce:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 80056d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d107      	bne.n	80056e8 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	3342      	adds	r3, #66	@ 0x42
 80056dc:	4619      	mov	r1, r3
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f003 f8e9 	bl	80088b6 <VL53L1_get_customer_nvm_managed>
 80056e4:	4603      	mov	r3, r0
 80056e6:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 80056e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d115      	bne.n	800571c <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f503 73fd 	add.w	r3, r3, #506	@ 0x1fa
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f003 ff9b 	bl	8009634 <VL53L1_get_nvm_copy_data>
 80056fe:	4603      	mov	r3, r0
 8005700:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 8005702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d108      	bne.n	800571c <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f503 72fd 	add.w	r2, r3, #506	@ 0x1fa
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	33f0      	adds	r3, #240	@ 0xf0
 8005714:	4619      	mov	r1, r3
 8005716:	4610      	mov	r0, r2
 8005718:	f002 f9d5 	bl	8007ac6 <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 800571c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d109      	bne.n	8005738 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 800572a:	461a      	mov	r2, r3
 800572c:	21de      	movs	r1, #222	@ 0xde
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f004 f980 	bl	8009a34 <VL53L1_RdWord>
 8005734:	4603      	mov	r3, r0
 8005736:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 800573e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005742:	d204      	bcs.n	800574e <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f64b 42cc 	movw	r2, #48332	@ 0xbccc
 800574a:	f8a3 215e 	strh.w	r2, [r3, #350]	@ 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 800574e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d107      	bne.n	8005766 <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	339e      	adds	r3, #158	@ 0x9e
 800575a:	4619      	mov	r1, r3
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f9c3 	bl	8005ae8 <VL53L1_get_mode_mitigation_roi>
 8005762:	4603      	mov	r3, r0
 8005764:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d114      	bne.n	800579a <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10f      	bne.n	800579a <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 8005780:	011b      	lsls	r3, r3, #4
 8005782:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f893 309f 	ldrb.w	r3, [r3, #159]	@ 0x9f
 8005790:	011b      	lsls	r3, r3, #4
 8005792:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 800579a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <VL53L1_software_reset>:


VL53L1_Error VL53L1_software_reset(
	VL53L1_DEV    Dev)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b084      	sub	sp, #16
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
	/**
	 * Sets and clears the software reset register VL53L1_SOFT_RESET.
	 * and waits for the firmware to boot
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80057ae:	2300      	movs	r3, #0
 80057b0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* apply reset - note despite the name soft reset is active low! */
	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80057b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d106      	bne.n	80057c8 <VL53L1_software_reset+0x22>
		status = VL53L1_WrByte(
 80057ba:	2200      	movs	r2, #0
 80057bc:	2100      	movs	r1, #0
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f004 f8da 	bl	8009978 <VL53L1_WrByte>
 80057c4:	4603      	mov	r3, r0
 80057c6:	73fb      	strb	r3, [r7, #15]
						Dev,
						VL53L1_SOFT_RESET,
						0x00);

	/* wait for a while before releasing the reset */
	if (status == VL53L1_ERROR_NONE)
 80057c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d105      	bne.n	80057dc <VL53L1_software_reset+0x36>
		status =
			VL53L1_WaitUs(
 80057d0:	2164      	movs	r1, #100	@ 0x64
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f004 f98c 	bl	8009af0 <VL53L1_WaitUs>
 80057d8:	4603      	mov	r3, r0
 80057da:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53L1_SOFTWARE_RESET_DURATION_US);

	/* release reset */
	if (status == VL53L1_ERROR_NONE)
 80057dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d106      	bne.n	80057f2 <VL53L1_software_reset+0x4c>
		status = VL53L1_WrByte(
 80057e4:	2201      	movs	r2, #1
 80057e6:	2100      	movs	r1, #0
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f004 f8c5 	bl	8009978 <VL53L1_WrByte>
 80057ee:	4603      	mov	r3, r0
 80057f0:	73fb      	strb	r3, [r7, #15]
						Dev,
						VL53L1_SOFT_RESET,
						0x01);

	/* wait for firmware boot to complete */
	if (status == VL53L1_ERROR_NONE)
 80057f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d104      	bne.n	8005804 <VL53L1_software_reset+0x5e>
		status = VL53L1_wait_for_boot_completion(Dev);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f003 ff45 	bl	800968a <VL53L1_wait_for_boot_completion>
 8005800:	4603      	mov	r3, r0
 8005802:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8005804:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800581a:	2300      	movs	r3, #0
 800581c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800582c:	23f1      	movs	r3, #241	@ 0xf1
 800582e:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8005830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10c      	bne.n	8005852 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 8005844:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 8005852:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8005862:	b480      	push	{r7}
 8005864:	b085      	sub	sp, #20
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800586c:	2300      	movs	r3, #0
 800586e:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800587e:	23f1      	movs	r3, #241	@ 0xf1
 8005880:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8005882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d109      	bne.n	800589e <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	@ 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 8005896:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 800589e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b088      	sub	sp, #32
 80058b2:	af02      	add	r7, sp, #8
 80058b4:	60f8      	str	r0, [r7, #12]
 80058b6:	60b9      	str	r1, [r7, #8]
 80058b8:	607a      	str	r2, [r7, #4]
 80058ba:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80058bc:	2300      	movs	r3, #0
 80058be:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80058ce:	23f1      	movs	r3, #241	@ 0xf1
 80058d0:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 80058d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d11b      	bne.n	8005912 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f8b3 115e 	ldrh.w	r1, [r3, #350]	@ 0x15e
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	f502 72ce 	add.w	r2, r2, #412	@ 0x19c
 80058fe:	9201      	str	r2, [sp, #4]
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	460b      	mov	r3, r1
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	6879      	ldr	r1, [r7, #4]
 8005908:	68b8      	ldr	r0, [r7, #8]
 800590a:	f002 fc2b 	bl	8008164 <VL53L1_calc_timeout_register_values>
 800590e:	4603      	mov	r3, r0
 8005910:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8005912:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b088      	sub	sp, #32
 8005922:	af00      	add	r7, sp, #0
 8005924:	60f8      	str	r0, [r7, #12]
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	607a      	str	r2, [r7, #4]
 800592a:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800592c:	2300      	movs	r3, #0
 800592e:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8005934:	2300      	movs	r3, #0
 8005936:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8005938:	2300      	movs	r3, #0
 800593a:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005946:	23f1      	movs	r3, #241	@ 0xf1
 8005948:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 800594a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d148      	bne.n	80059e4 <VL53L1_get_timeouts_us+0xc6>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	f8b3 215e 	ldrh.w	r2, [r3, #350]	@ 0x15e
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	f893 31a2 	ldrb.w	r3, [r3, #418]	@ 0x1a2
 800595e:	4619      	mov	r1, r3
 8005960:	4610      	mov	r0, r2
 8005962:	f002 faa6 	bl	8007eb2 <VL53L1_calc_macro_period_us>
 8005966:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	f893 318b 	ldrb.w	r3, [r3, #395]	@ 0x18b
			VL53L1_calc_timeout_us(
 800596e:	6979      	ldr	r1, [r7, #20]
 8005970:	4618      	mov	r0, r3
 8005972:	f002 fb5e 	bl	8008032 <VL53L1_calc_timeout_us>
 8005976:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
		timeout_encoded =
 8005982:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8005984:	8a7b      	ldrh	r3, [r7, #18]
 8005986:	021b      	lsls	r3, r3, #8
 8005988:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	f892 219d 	ldrb.w	r2, [r2, #413]	@ 0x19d
		timeout_encoded = (timeout_encoded << 8) +
 8005990:	4413      	add	r3, r2
 8005992:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8005994:	8a7b      	ldrh	r3, [r7, #18]
 8005996:	6979      	ldr	r1, [r7, #20]
 8005998:	4618      	mov	r0, r3
 800599a:	f002 fb8a 	bl	80080b2 <VL53L1_calc_decoded_timeout_us>
 800599e:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
		timeout_encoded =
 80059aa:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 80059ac:	8a7b      	ldrh	r3, [r7, #18]
 80059ae:	021b      	lsls	r3, r3, #8
 80059b0:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	f892 21a1 	ldrb.w	r2, [r2, #417]	@ 0x1a1
		timeout_encoded = (timeout_encoded << 8) +
 80059b8:	4413      	add	r3, r2
 80059ba:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 80059bc:	8a7b      	ldrh	r3, [r7, #18]
 80059be:	6979      	ldr	r1, [r7, #20]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f002 fb76 	bl	80080b2 <VL53L1_calc_decoded_timeout_us>
 80059c6:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 80059e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3720      	adds	r7, #32
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	460b      	mov	r3, r1
 80059fa:	607a      	str	r2, [r7, #4]
 80059fc:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80059fe:	2300      	movs	r3, #0
 8005a00:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8005a06:	2301      	movs	r3, #1
 8005a08:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8005a0a:	7afb      	ldrb	r3, [r7, #11]
 8005a0c:	2b07      	cmp	r3, #7
 8005a0e:	d81c      	bhi.n	8005a4a <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 8005a10:	7afb      	ldrb	r3, [r7, #11]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d004      	beq.n	8005a20 <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 8005a16:	7afb      	ldrb	r3, [r7, #11]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1e:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f893 21c5 	ldrb.w	r2, [r3, #453]	@ 0x1c5
		*pvalue =
 8005a26:	7dbb      	ldrb	r3, [r7, #22]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 8005a30:	7afb      	ldrb	r3, [r7, #11]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00b      	beq.n	8005a4e <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	7afb      	ldrb	r3, [r7, #11]
 8005a3e:	fa42 f303 	asr.w	r3, r2, r3
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	701a      	strb	r2, [r3, #0]
 8005a48:	e001      	b.n	8005a4e <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005a4a:	23fc      	movs	r3, #252	@ 0xfc
 8005a4c:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8005a4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	371c      	adds	r7, #28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b084      	sub	sp, #16
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
 8005a66:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	7858      	ldrb	r0, [r3, #1]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	7819      	ldrb	r1, [r3, #0]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f203 13c3 	addw	r3, r3, #451	@ 0x1c3
 8005a7e:	461a      	mov	r2, r3
 8005a80:	f002 fbe9 	bl	8008256 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	7898      	ldrb	r0, [r3, #2]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	78d9      	ldrb	r1, [r3, #3]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8005a92:	461a      	mov	r2, r3
 8005a94:	f002 fc1e 	bl	80082d4 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 8005a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	f893 01c3 	ldrb.w	r0, [r3, #451]	@ 0x1c3
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	f002 fcd5 	bl	8008472 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f893 01c4 	ldrb.w	r0, [r3, #452]	@ 0x1c4
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	1c99      	adds	r1, r3, #2
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	3303      	adds	r3, #3
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f002 fbe4 	bl	80082a4 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 8005adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005af2:	2300      	movs	r3, #0
 8005af4:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8005afa:	2300      	movs	r3, #0
 8005afc:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8005afe:	2300      	movs	r3, #0
 8005b00:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f893 322a 	ldrb.w	r3, [r3, #554]	@ 0x22a
 8005b0c:	f107 020e 	add.w	r2, r7, #14
 8005b10:	f107 010d 	add.w	r1, r7, #13
 8005b14:	4618      	mov	r0, r3
 8005b16:	f002 fcac 	bl	8008472 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8005b1a:	7bba      	ldrb	r2, [r7, #14]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8005b20:	7b7a      	ldrb	r2, [r7, #13]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f893 322b 	ldrb.w	r3, [r3, #555]	@ 0x22b
 8005b2c:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8005b2e:	7bfb      	ldrb	r3, [r7, #15]
 8005b30:	091b      	lsrs	r3, r3, #4
 8005b32:	b2da      	uxtb	r2, r3
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
 8005b3a:	f003 030f 	and.w	r3, r3, #15
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8005b44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3718      	adds	r7, #24
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	607a      	str	r2, [r7, #4]
 8005b5a:	603b      	str	r3, [r7, #0]
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005b60:	2300      	movs	r3, #0
 8005b62:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8005b68:	7afb      	ldrb	r3, [r7, #11]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	2b25      	cmp	r3, #37	@ 0x25
 8005b6e:	f200 808e 	bhi.w	8005c8e <VL53L1_get_preset_mode_timing_cfg+0x13e>
 8005b72:	a201      	add	r2, pc, #4	@ (adr r2, 8005b78 <VL53L1_get_preset_mode_timing_cfg+0x28>)
 8005b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b78:	08005c11 	.word	0x08005c11
 8005b7c:	08005c11 	.word	0x08005c11
 8005b80:	08005c11 	.word	0x08005c11
 8005b84:	08005c11 	.word	0x08005c11
 8005b88:	08005c11 	.word	0x08005c11
 8005b8c:	08005c3b 	.word	0x08005c3b
 8005b90:	08005c3b 	.word	0x08005c3b
 8005b94:	08005c3b 	.word	0x08005c3b
 8005b98:	08005c8f 	.word	0x08005c8f
 8005b9c:	08005c8f 	.word	0x08005c8f
 8005ba0:	08005c8f 	.word	0x08005c8f
 8005ba4:	08005c8f 	.word	0x08005c8f
 8005ba8:	08005c8f 	.word	0x08005c8f
 8005bac:	08005c8f 	.word	0x08005c8f
 8005bb0:	08005c8f 	.word	0x08005c8f
 8005bb4:	08005c8f 	.word	0x08005c8f
 8005bb8:	08005c11 	.word	0x08005c11
 8005bbc:	08005c3b 	.word	0x08005c3b
 8005bc0:	08005c8f 	.word	0x08005c8f
 8005bc4:	08005c8f 	.word	0x08005c8f
 8005bc8:	08005c8f 	.word	0x08005c8f
 8005bcc:	08005c8f 	.word	0x08005c8f
 8005bd0:	08005c8f 	.word	0x08005c8f
 8005bd4:	08005c8f 	.word	0x08005c8f
 8005bd8:	08005c8f 	.word	0x08005c8f
 8005bdc:	08005c8f 	.word	0x08005c8f
 8005be0:	08005c8f 	.word	0x08005c8f
 8005be4:	08005c8f 	.word	0x08005c8f
 8005be8:	08005c8f 	.word	0x08005c8f
 8005bec:	08005c8f 	.word	0x08005c8f
 8005bf0:	08005c8f 	.word	0x08005c8f
 8005bf4:	08005c8f 	.word	0x08005c8f
 8005bf8:	08005c8f 	.word	0x08005c8f
 8005bfc:	08005c8f 	.word	0x08005c8f
 8005c00:	08005c8f 	.word	0x08005c8f
 8005c04:	08005c65 	.word	0x08005c65
 8005c08:	08005c65 	.word	0x08005c65
 8005c0c:	08005c65 	.word	0x08005c65
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	@ 0xca
		*pdss_config__target_total_rate_mcps =
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
		*pphasecal_config_timeout_us =
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
		*pmm_config_timeout_us =
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
		*prange_config_timeout_us =
 8005c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c36:	601a      	str	r2, [r3, #0]
	break;
 8005c38:	e02c      	b.n	8005c94 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
		*pdss_config__target_total_rate_mcps =
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
		*pphasecal_config_timeout_us =
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
		*pmm_config_timeout_us =
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
		*prange_config_timeout_us =
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c60:	601a      	str	r2, [r3, #0]
	break;
 8005c62:	e017      	b.n	8005c94 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
		*pdss_config__target_total_rate_mcps =
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
		*pphasecal_config_timeout_us =
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
		*pmm_config_timeout_us =
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
		*prange_config_timeout_us =
 8005c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8a:	601a      	str	r2, [r3, #0]
	break;
 8005c8c:	e002      	b.n	8005c94 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005c8e:	23fc      	movs	r3, #252	@ 0xfc
 8005c90:	75fb      	strb	r3, [r7, #23]
		break;
 8005c92:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8005c94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	371c      	adds	r7, #28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b092      	sub	sp, #72	@ 0x48
 8005ca8:	af04      	add	r7, sp, #16
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	607b      	str	r3, [r7, #4]
 8005cae:	460b      	mov	r3, r1
 8005cb0:	72fb      	strb	r3, [r7, #11]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53L1_LLDriverData_t *pdev =
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	633b      	str	r3, [r7, #48]	@ 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8005cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cca:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8005cce:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8005cd6:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cda:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8005cde:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce2:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8005ce6:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cea:	33a4      	adds	r3, #164	@ 0xa4
 8005cec:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8005cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf0:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8005cf4:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf8:	7afa      	ldrb	r2, [r7, #11]
 8005cfa:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d00:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8005d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d06:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8005d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d0c:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 8005d0e:	2103      	movs	r1, #3
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f001 fd76 	bl	8007802 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 8005d16:	7afb      	ldrb	r3, [r7, #11]
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	2b25      	cmp	r3, #37	@ 0x25
 8005d1c:	f200 810c 	bhi.w	8005f38 <VL53L1_set_preset_mode+0x294>
 8005d20:	a201      	add	r2, pc, #4	@ (adr r2, 8005d28 <VL53L1_set_preset_mode+0x84>)
 8005d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d26:	bf00      	nop
 8005d28:	08005dc1 	.word	0x08005dc1
 8005d2c:	08005ddd 	.word	0x08005ddd
 8005d30:	08005df9 	.word	0x08005df9
 8005d34:	08005e15 	.word	0x08005e15
 8005d38:	08005e31 	.word	0x08005e31
 8005d3c:	08005e4d 	.word	0x08005e4d
 8005d40:	08005e69 	.word	0x08005e69
 8005d44:	08005e85 	.word	0x08005e85
 8005d48:	08005f39 	.word	0x08005f39
 8005d4c:	08005f39 	.word	0x08005f39
 8005d50:	08005f39 	.word	0x08005f39
 8005d54:	08005f39 	.word	0x08005f39
 8005d58:	08005f39 	.word	0x08005f39
 8005d5c:	08005f39 	.word	0x08005f39
 8005d60:	08005f39 	.word	0x08005f39
 8005d64:	08005f39 	.word	0x08005f39
 8005d68:	08005ea1 	.word	0x08005ea1
 8005d6c:	08005ebd 	.word	0x08005ebd
 8005d70:	08005f39 	.word	0x08005f39
 8005d74:	08005f39 	.word	0x08005f39
 8005d78:	08005f39 	.word	0x08005f39
 8005d7c:	08005f39 	.word	0x08005f39
 8005d80:	08005f39 	.word	0x08005f39
 8005d84:	08005f39 	.word	0x08005f39
 8005d88:	08005f39 	.word	0x08005f39
 8005d8c:	08005f39 	.word	0x08005f39
 8005d90:	08005f39 	.word	0x08005f39
 8005d94:	08005f39 	.word	0x08005f39
 8005d98:	08005f39 	.word	0x08005f39
 8005d9c:	08005f39 	.word	0x08005f39
 8005da0:	08005f39 	.word	0x08005f39
 8005da4:	08005f39 	.word	0x08005f39
 8005da8:	08005f39 	.word	0x08005f39
 8005dac:	08005f39 	.word	0x08005f39
 8005db0:	08005f39 	.word	0x08005f39
 8005db4:	08005ed9 	.word	0x08005ed9
 8005db8:	08005ef9 	.word	0x08005ef9
 8005dbc:	08005f19 	.word	0x08005f19

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	9301      	str	r3, [sp, #4]
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
 8005dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005dd0:	f001 f999 	bl	8007106 <VL53L1_preset_mode_standard_ranging>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005dda:	e0b1      	b.n	8005f40 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	9301      	str	r3, [sp, #4]
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005de8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005dec:	f001 faa9 	bl	8007342 <VL53L1_preset_mode_standard_ranging_short_range>
 8005df0:	4603      	mov	r3, r0
 8005df2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005df6:	e0a3      	b.n	8005f40 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	9301      	str	r3, [sp, #4]
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005e08:	f001 fadc 	bl	80073c4 <VL53L1_preset_mode_standard_ranging_long_range>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005e12:	e095      	b.n	8005f40 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	9301      	str	r3, [sp, #4]
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005e24:	f001 fb0f 	bl	8007446 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005e2e:	e087      	b.n	8005f40 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	9301      	str	r3, [sp, #4]
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	6a3b      	ldr	r3, [r7, #32]
 8005e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005e40:	f001 fb26 	bl	8007490 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8005e44:	4603      	mov	r3, r0
 8005e46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005e4a:	e079      	b.n	8005f40 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	9301      	str	r3, [sp, #4]
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005e5c:	f001 fb3d 	bl	80074da <VL53L1_preset_mode_timed_ranging>
 8005e60:	4603      	mov	r3, r0
 8005e62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005e66:	e06b      	b.n	8005f40 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	9301      	str	r3, [sp, #4]
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005e78:	f001 fb69 	bl	800754e <VL53L1_preset_mode_timed_ranging_short_range>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005e82:	e05d      	b.n	8005f40 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	9301      	str	r3, [sp, #4]
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005e94:	f001 fb95 	bl	80075c2 <VL53L1_preset_mode_timed_ranging_long_range>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005e9e:	e04f      	b.n	8005f40 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	9301      	str	r3, [sp, #4]
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005eb0:	f001 fc69 	bl	8007786 <VL53L1_preset_mode_olt>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005eba:	e041      	b.n	8005f40 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	9301      	str	r3, [sp, #4]
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
 8005ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ec8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ecc:	f001 fc25 	bl	800771a <VL53L1_preset_mode_singleshot_ranging>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005ed6:	e033      	b.n	8005f40 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	9302      	str	r3, [sp, #8]
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	9301      	str	r3, [sp, #4]
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ee8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005eec:	f001 fbc9 	bl	8007682 <VL53L1_preset_mode_low_power_auto_short_ranging>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8005ef6:	e023      	b.n	8005f40 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	9302      	str	r3, [sp, #8]
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	9301      	str	r3, [sp, #4]
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f0c:	f001 fb93 	bl	8007636 <VL53L1_preset_mode_low_power_auto_ranging>
 8005f10:	4603      	mov	r3, r0
 8005f12:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8005f16:	e013      	b.n	8005f40 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	9302      	str	r3, [sp, #8]
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	9301      	str	r3, [sp, #4]
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f2c:	f001 fbcf 	bl	80076ce <VL53L1_preset_mode_low_power_auto_long_ranging>
 8005f30:	4603      	mov	r3, r0
 8005f32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8005f36:	e003      	b.n	8005f40 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005f38:	23fc      	movs	r3, #252	@ 0xfc
 8005f3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		break;
 8005f3e:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 8005f40:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d105      	bne.n	8005f54 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 8005f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f4a:	893a      	ldrh	r2, [r7, #8]
 8005f4c:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f50:	893a      	ldrh	r2, [r7, #8]
 8005f52:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 8005f54:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d108      	bne.n	8005f6e <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 8005f5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f60:	6879      	ldr	r1, [r7, #4]
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f7ff fca3 	bl	80058ae <VL53L1_set_timeouts_us>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8005f6e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 8005f76:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f7ff fc49 	bl	8005810 <VL53L1_set_inter_measurement_period_ms>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 8005f84:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3738      	adds	r7, #56	@ 0x38
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	@ 0x1a6
	*plite_sigma =
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8005fac:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	887a      	ldrh	r2, [r7, #2]
 8005fd4:	f8a3 21a6 	strh.w	r2, [r3, #422]	@ 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 8005fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	@ 0x1a8
	*plite_mincountrate =
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006004:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8006008:	4618      	mov	r0, r3
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006020:	2300      	movs	r3, #0
 8006022:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	887a      	ldrh	r2, [r7, #2]
 800602c:	f8a3 21a8 	strh.w	r2, [r3, #424]	@ 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 8006030:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8006034:	4618      	mov	r0, r3
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800604c:	2300      	movs	r3, #0
 800604e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800605a:	f003 0303 	and.w	r3, r3, #3
 800605e:	b2da      	uxtb	r2, r3
 8006060:	78fb      	ldrb	r3, [r7, #3]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	b2db      	uxtb	r3, r3
 8006066:	4413      	add	r3, r2
 8006068:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 8006070:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b0d0      	sub	sp, #320	@ 0x140
 8006084:	af00      	add	r7, sp, #0
 8006086:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800608a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800608e:	6018      	str	r0, [r3, #0]
 8006090:	4608      	mov	r0, r1
 8006092:	4611      	mov	r1, r2
 8006094:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006098:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800609c:	4602      	mov	r2, r0
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80060a4:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80060a8:	460a      	mov	r2, r1
 80060aa:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80060ac:	2300      	movs	r3, #0
 80060ae:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80060b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80060b6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 80060c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80060c4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80060c8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 80060cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80060d0:	3342      	adds	r3, #66	@ 0x42
 80060d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80060d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80060da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80060de:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80060e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80060e6:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80060ea:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80060ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80060f2:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80060f6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80060fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80060fe:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8006102:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8006106:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800610a:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800610e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8006112:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006116:	332c      	adds	r3, #44	@ 0x2c
 8006118:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 800611c:	f107 030c 	add.w	r3, r7, #12
 8006120:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	uint16_t i                          = 0;
 8006124:	2300      	movs	r3, #0
 8006126:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
	uint16_t i2c_index                  = 0;
 800612a:	2300      	movs	r3, #0
 800612c:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 8006130:	2300      	movs	r3, #0
 8006132:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8006136:	2300      	movs	r3, #0
 8006138:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 800613c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006140:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8006144:	f2a2 123d 	subw	r2, r2, #317	@ 0x13d
 8006148:	7812      	ldrb	r2, [r2, #0]
 800614a:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 800614c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006150:	791b      	ldrb	r3, [r3, #4]
 8006152:	b25b      	sxtb	r3, r3
 8006154:	f003 030f 	and.w	r3, r3, #15
 8006158:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800615a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800615e:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8006162:	f993 3000 	ldrsb.w	r3, [r3]
 8006166:	4313      	orrs	r3, r2
 8006168:	b25b      	sxtb	r3, r3
 800616a:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800616c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006170:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8006172:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006176:	f8b3 2142 	ldrh.w	r2, [r3, #322]	@ 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800617a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800617e:	f8a3 217c 	strh.w	r2, [r3, #380]	@ 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8006182:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006186:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 800618a:	2bff      	cmp	r3, #255	@ 0xff
 800618c:	d104      	bne.n	8006198 <VL53L1_init_and_start_range+0x118>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800618e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006192:	2200      	movs	r2, #0
 8006194:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8006198:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800619c:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d139      	bne.n	8006218 <VL53L1_init_and_start_range+0x198>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 80061a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80061a8:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d133      	bne.n	8006218 <VL53L1_init_and_start_range+0x198>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 80061b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80061b4:	f893 2186 	ldrb.w	r2, [r3, #390]	@ 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 80061b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80061bc:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 80061c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80061c4:	2220      	movs	r2, #32
 80061c6:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 80061ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80061ce:	f893 31c5 	ldrb.w	r3, [r3, #453]	@ 0x1c5
 80061d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10c      	bne.n	80061f4 <VL53L1_init_and_start_range+0x174>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 80061da:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80061de:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	@ 0x58
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 80061ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80061ee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 80061f2:	e004      	b.n	80061fe <VL53L1_init_and_start_range+0x17e>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 80061f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80061f8:	2200      	movs	r2, #0
 80061fa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 80061fe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006202:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	2b04      	cmp	r3, #4
 800620a:	d805      	bhi.n	8006218 <VL53L1_init_and_start_range+0x198>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800620c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006210:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8006214:	2205      	movs	r2, #5
 8006216:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8006218:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800621c:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8006220:	2b01      	cmp	r3, #1
 8006222:	d113      	bne.n	800624c <VL53L1_init_and_start_range+0x1cc>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8006224:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006228:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800622c:	2b01      	cmp	r3, #1
 800622e:	d10d      	bne.n	800624c <VL53L1_init_and_start_range+0x1cc>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8006230:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006234:	f893 22e7 	ldrb.w	r2, [r3, #743]	@ 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 8006238:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800623c:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8006240:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006244:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8006248:	2206      	movs	r2, #6
 800624a:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 800624c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006250:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	3b01      	subs	r3, #1
 8006258:	2b05      	cmp	r3, #5
 800625a:	d827      	bhi.n	80062ac <VL53L1_init_and_start_range+0x22c>
 800625c:	a201      	add	r2, pc, #4	@ (adr r2, 8006264 <VL53L1_init_and_start_range+0x1e4>)
 800625e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006262:	bf00      	nop
 8006264:	080062a5 	.word	0x080062a5
 8006268:	0800629d 	.word	0x0800629d
 800626c:	08006295 	.word	0x08006295
 8006270:	0800628d 	.word	0x0800628d
 8006274:	08006285 	.word	0x08006285
 8006278:	0800627d 	.word	0x0800627d
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 800627c:	2301      	movs	r3, #1
 800627e:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8006282:	e017      	b.n	80062b4 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8006284:	230d      	movs	r3, #13
 8006286:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 800628a:	e013      	b.n	80062b4 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800628c:	2324      	movs	r3, #36	@ 0x24
 800628e:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8006292:	e00f      	b.n	80062b4 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8006294:	2344      	movs	r3, #68	@ 0x44
 8006296:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 800629a:	e00b      	b.n	80062b4 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 800629c:	235a      	movs	r3, #90	@ 0x5a
 800629e:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80062a2:	e007      	b.n	80062b4 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 80062a4:	2371      	movs	r3, #113	@ 0x71
 80062a6:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80062aa:	e003      	b.n	80062b4 <VL53L1_init_and_start_range+0x234>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 80062ac:	2383      	movs	r3, #131	@ 0x83
 80062ae:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80062b2:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 80062b4:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80062b8:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
 80062bc:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 80062c0:	f107 030c 	add.w	r3, r7, #12
 80062c4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 80062c8:	2300      	movs	r3, #0
 80062ca:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 80062ce:	e00b      	b.n	80062e8 <VL53L1_init_and_start_range+0x268>
		*pbuffer++ = 0;
 80062d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80062d4:	1c5a      	adds	r2, r3, #1
 80062d6:	f8c7 2138 	str.w	r2, [r7, #312]	@ 0x138
 80062da:	2200      	movs	r2, #0
 80062dc:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 80062de:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80062e2:	3301      	adds	r3, #1
 80062e4:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 80062e8:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 80062ec:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d3ed      	bcc.n	80062d0 <VL53L1_init_and_start_range+0x250>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 80062f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80062f8:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	2b05      	cmp	r3, #5
 8006300:	d917      	bls.n	8006332 <VL53L1_init_and_start_range+0x2b2>
 8006302:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8006306:	2b00      	cmp	r3, #0
 8006308:	d113      	bne.n	8006332 <VL53L1_init_and_start_range+0x2b2>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800630a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 800630e:	f1c3 0301 	rsb	r3, r3, #1
 8006312:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006316:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 800631a:	f107 020c 	add.w	r2, r7, #12
 800631e:	4413      	add	r3, r2
 8006320:	461a      	mov	r2, r3
 8006322:	210b      	movs	r1, #11
 8006324:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8006328:	f002 f8d2 	bl	80084d0 <VL53L1_i2c_encode_static_nvm_managed>
 800632c:	4603      	mov	r3, r0
 800632e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8006332:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006336:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b04      	cmp	r3, #4
 800633e:	d917      	bls.n	8006370 <VL53L1_init_and_start_range+0x2f0>
 8006340:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8006344:	2b00      	cmp	r3, #0
 8006346:	d113      	bne.n	8006370 <VL53L1_init_and_start_range+0x2f0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8006348:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 800634c:	f1c3 030d 	rsb	r3, r3, #13
 8006350:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006354:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 8006358:	f107 020c 	add.w	r2, r7, #12
 800635c:	4413      	add	r3, r2
 800635e:	461a      	mov	r2, r3
 8006360:	2117      	movs	r1, #23
 8006362:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8006366:	f002 f98f 	bl	8008688 <VL53L1_i2c_encode_customer_nvm_managed>
 800636a:	4603      	mov	r3, r0
 800636c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8006370:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006374:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2b03      	cmp	r3, #3
 800637c:	d917      	bls.n	80063ae <VL53L1_init_and_start_range+0x32e>
 800637e:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8006382:	2b00      	cmp	r3, #0
 8006384:	d113      	bne.n	80063ae <VL53L1_init_and_start_range+0x32e>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8006386:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 800638a:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 800638e:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006392:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_config(
 8006396:	f107 020c 	add.w	r2, r7, #12
 800639a:	4413      	add	r3, r2
 800639c:	461a      	mov	r2, r3
 800639e:	2120      	movs	r1, #32
 80063a0:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 80063a4:	f002 faae 	bl	8008904 <VL53L1_i2c_encode_static_config>
 80063a8:	4603      	mov	r3, r0
 80063aa:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 80063ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80063b2:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d917      	bls.n	80063ec <VL53L1_init_and_start_range+0x36c>
 80063bc:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d113      	bne.n	80063ec <VL53L1_init_and_start_range+0x36c>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80063c4:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80063c8:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 80063cc:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80063d0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_general_config(
 80063d4:	f107 020c 	add.w	r2, r7, #12
 80063d8:	4413      	add	r3, r2
 80063da:	461a      	mov	r2, r3
 80063dc:	2116      	movs	r1, #22
 80063de:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80063e2:	f002 fb72 	bl	8008aca <VL53L1_i2c_encode_general_config>
 80063e6:	4603      	mov	r3, r0
 80063e8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 80063ec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80063f0:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d917      	bls.n	800642a <VL53L1_init_and_start_range+0x3aa>
 80063fa:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d113      	bne.n	800642a <VL53L1_init_and_start_range+0x3aa>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8006402:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8006406:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 800640a:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800640e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_timing_config(
 8006412:	f107 020c 	add.w	r2, r7, #12
 8006416:	4413      	add	r3, r2
 8006418:	461a      	mov	r2, r3
 800641a:	2117      	movs	r1, #23
 800641c:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8006420:	f002 fbd7 	bl	8008bd2 <VL53L1_i2c_encode_timing_config>
 8006424:	4603      	mov	r3, r0
 8006426:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800642a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800642e:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d036      	beq.n	80064a6 <VL53L1_init_and_start_range+0x426>
 8006438:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 800643c:	2b00      	cmp	r3, #0
 800643e:	d132      	bne.n	80064a6 <VL53L1_init_and_start_range+0x426>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8006440:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8006444:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 8006448:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 800644c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006450:	791b      	ldrb	r3, [r3, #4]
 8006452:	f003 0320 	and.w	r3, r3, #32
 8006456:	2b00      	cmp	r3, #0
 8006458:	d017      	beq.n	800648a <VL53L1_init_and_start_range+0x40a>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800645a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800645e:	789b      	ldrb	r3, [r3, #2]
 8006460:	f043 0301 	orr.w	r3, r3, #1
 8006464:	b2da      	uxtb	r2, r3
 8006466:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800646a:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800646c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006470:	789b      	ldrb	r3, [r3, #2]
 8006472:	f043 0301 	orr.w	r3, r3, #1
 8006476:	b2da      	uxtb	r2, r3
 8006478:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800647c:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800647e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006482:	789a      	ldrb	r2, [r3, #2]
 8006484:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006488:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800648a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800648e:	f107 020c 	add.w	r2, r7, #12
 8006492:	4413      	add	r3, r2
 8006494:	461a      	mov	r2, r3
 8006496:	2112      	movs	r1, #18
 8006498:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 800649c:	f002 fc1b 	bl	8008cd6 <VL53L1_i2c_encode_dynamic_config>
 80064a0:	4603      	mov	r3, r0
 80064a2:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 80064a6:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d113      	bne.n	80064d6 <VL53L1_init_and_start_range+0x456>

		i2c_buffer_offset_bytes = \
 80064ae:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80064b2:	f1c3 0383 	rsb	r3, r3, #131	@ 0x83
 80064b6:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80064ba:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_system_control(
 80064be:	f107 020c 	add.w	r2, r7, #12
 80064c2:	4413      	add	r3, r2
 80064c4:	461a      	mov	r2, r3
 80064c6:	2105      	movs	r1, #5
 80064c8:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80064cc:	f002 fc88 	bl	8008de0 <VL53L1_i2c_encode_system_control>
 80064d0:	4603      	mov	r3, r0
 80064d2:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 80064d6:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10f      	bne.n	80064fe <VL53L1_init_and_start_range+0x47e>
		status =
			VL53L1_WriteMulti(
 80064de:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 80064e2:	f107 020c 	add.w	r2, r7, #12
 80064e6:	f8b7 1134 	ldrh.w	r1, [r7, #308]	@ 0x134
 80064ea:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 80064ee:	f5a0 709e 	sub.w	r0, r0, #316	@ 0x13c
 80064f2:	6800      	ldr	r0, [r0, #0]
 80064f4:	f003 f9d4 	bl	80098a0 <VL53L1_WriteMulti>
 80064f8:	4603      	mov	r3, r0
 80064fa:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 80064fe:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8006502:	2b00      	cmp	r3, #0
 8006504:	d109      	bne.n	800651a <VL53L1_init_and_start_range+0x49a>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8006506:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800650a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800650e:	6818      	ldr	r0, [r3, #0]
 8006510:	f001 f9a0 	bl	8007854 <VL53L1_update_ll_driver_rd_state>
 8006514:	4603      	mov	r3, r0
 8006516:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	if (status == VL53L1_ERROR_NONE)
 800651a:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 800651e:	2b00      	cmp	r3, #0
 8006520:	d109      	bne.n	8006536 <VL53L1_init_and_start_range+0x4b6>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8006522:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006526:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800652a:	6818      	ldr	r0, [r3, #0]
 800652c:	f001 fa65 	bl	80079fa <VL53L1_update_ll_driver_cfg_state>
 8006530:	4603      	mov	r3, r0
 8006532:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	LOG_FUNCTION_END(status);

	return status;
 8006536:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
}
 800653a:	4618      	mov	r0, r3
 800653c:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b0c8      	sub	sp, #288	@ 0x120
 8006548:	af00      	add	r7, sp, #0
 800654a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800654e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006552:	6018      	str	r0, [r3, #0]
 8006554:	460a      	mov	r2, r1
 8006556:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800655a:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 800655e:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006560:	2300      	movs	r3, #0
 8006562:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006566:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800656a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 8006574:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006578:	f503 73e7 	add.w	r3, r3, #462	@ 0x1ce
 800657c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 8006580:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006584:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8006588:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800658c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006590:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8006594:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 8006598:	2388      	movs	r3, #136	@ 0x88
 800659a:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 800659e:	2300      	movs	r3, #0
 80065a0:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 80065a4:	2300      	movs	r3, #0
 80065a6:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 80065aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80065ae:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d008      	beq.n	80065ca <VL53L1_get_measurement_results+0x86>
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d10d      	bne.n	80065d8 <VL53L1_get_measurement_results+0x94>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 80065bc:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80065c0:	f5c3 7387 	rsb	r3, r3, #270	@ 0x10e
 80065c4:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80065c8:	e00a      	b.n	80065e0 <VL53L1_get_measurement_results+0x9c>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 80065ca:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80065ce:	f1c3 03d5 	rsb	r3, r3, #213	@ 0xd5
 80065d2:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80065d6:	e003      	b.n	80065e0 <VL53L1_get_measurement_results+0x9c>
	default:
		i2c_buffer_size_bytes =
 80065d8:	232c      	movs	r3, #44	@ 0x2c
 80065da:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 80065de:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80065e0:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10f      	bne.n	8006608 <VL53L1_get_measurement_results+0xc4>
		status =
			VL53L1_ReadMulti(
 80065e8:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 80065ec:	f107 0208 	add.w	r2, r7, #8
 80065f0:	f8b7 110a 	ldrh.w	r1, [r7, #266]	@ 0x10a
 80065f4:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 80065f8:	f5a0 708e 	sub.w	r0, r0, #284	@ 0x11c
 80065fc:	6800      	ldr	r0, [r0, #0]
 80065fe:	f003 f985 	bl	800990c <VL53L1_ReadMulti>
 8006602:	4603      	mov	r3, r0
 8006604:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8006608:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800660c:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d917      	bls.n	8006646 <VL53L1_get_measurement_results+0x102>
 8006616:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 800661a:	2b00      	cmp	r3, #0
 800661c:	d113      	bne.n	8006646 <VL53L1_get_measurement_results+0x102>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800661e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8006622:	f1c3 03d6 	rsb	r3, r3, #214	@ 0xd6
 8006626:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800662a:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_debug_results(
 800662e:	f107 0208 	add.w	r2, r7, #8
 8006632:	4413      	add	r3, r2
 8006634:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8006638:	4619      	mov	r1, r3
 800663a:	2038      	movs	r0, #56	@ 0x38
 800663c:	f002 fd62 	bl	8009104 <VL53L1_i2c_decode_debug_results>
 8006640:	4603      	mov	r3, r0
 8006642:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8006646:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800664a:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d017      	beq.n	8006684 <VL53L1_get_measurement_results+0x140>
 8006654:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8006658:	2b00      	cmp	r3, #0
 800665a:	d113      	bne.n	8006684 <VL53L1_get_measurement_results+0x140>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800665c:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8006660:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 8006664:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8006668:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_core_results(
 800666c:	f107 0208 	add.w	r2, r7, #8
 8006670:	4413      	add	r3, r2
 8006672:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8006676:	4619      	mov	r1, r3
 8006678:	2021      	movs	r0, #33	@ 0x21
 800667a:	f002 fce2 	bl	8009042 <VL53L1_i2c_decode_core_results>
 800667e:	4603      	mov	r3, r0
 8006680:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 8006684:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8006688:	2b00      	cmp	r3, #0
 800668a:	d110      	bne.n	80066ae <VL53L1_get_measurement_results+0x16a>

		i2c_buffer_offset_bytes = 0;
 800668c:	2300      	movs	r3, #0
 800668e:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8006692:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_system_results(
 8006696:	f107 0208 	add.w	r2, r7, #8
 800669a:	4413      	add	r3, r2
 800669c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80066a0:	4619      	mov	r1, r3
 80066a2:	202c      	movs	r0, #44	@ 0x2c
 80066a4:	f002 fbd7 	bl	8008e56 <VL53L1_i2c_decode_system_results>
 80066a8:	4603      	mov	r3, r0
 80066aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 80066ae:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b088      	sub	sp, #32
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	460b      	mov	r3, r1
 80066c6:	607a      	str	r2, [r7, #4]
 80066c8:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80066ca:	2300      	movs	r3, #0
 80066cc:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 80066d8:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80066de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d106      	bne.n	80066f4 <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 80066e6:	7afb      	ldrb	r3, [r7, #11]
 80066e8:	4619      	mov	r1, r3
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f7ff ff2a 	bl	8006544 <VL53L1_get_measurement_results>
 80066f0:	4603      	mov	r3, r0
 80066f2:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 80066f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10c      	bne.n	8006716 <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 8006702:	4618      	mov	r0, r3
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	f503 71e7 	add.w	r1, r3, #462	@ 0x1ce
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	f503 7222 	add.w	r2, r3, #648	@ 0x288
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	f000 f85d 	bl	80067d0 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 800671c:	2b01      	cmp	r3, #1
 800671e:	d11f      	bne.n	8006760 <VL53L1_get_device_results+0xa4>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 8006720:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10e      	bne.n	8006746 <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 800672e:	2b00      	cmp	r3, #0
 8006730:	d109      	bne.n	8006746 <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f001 fe31 	bl	800839a <VL53L1_low_power_auto_setup_manual_calibration>
 8006738:	4603      	mov	r3, r0
 800673a:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
 8006744:	e00c      	b.n	8006760 <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 8006746:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d108      	bne.n	8006760 <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 8006754:	2b01      	cmp	r3, #1
 8006756:	d103      	bne.n	8006760 <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 8006774:	2284      	movs	r2, #132	@ 0x84
 8006776:	6939      	ldr	r1, [r7, #16]
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f004 f93e 	bl	800a9fa <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 800677e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d104      	bne.n	8006790 <VL53L1_get_device_results+0xd4>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f001 f8ec 	bl	8007964 <VL53L1_check_ll_driver_rd_state>
 800678c:	4603      	mov	r3, r0
 800678e:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8006790:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3720      	adds	r7, #32
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80067a8:	2300      	movs	r3, #0
 80067aa:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80067ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d107      	bne.n	80067c4 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 80067b4:	78fb      	ldrb	r3, [r7, #3]
 80067b6:	2203      	movs	r2, #3
 80067b8:	4619      	mov	r1, r3
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f7ff fc60 	bl	8006080 <VL53L1_init_and_start_range>
 80067c0:	4603      	mov	r3, r0
 80067c2:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 80067c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b089      	sub	sp, #36	@ 0x24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
 80067dc:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 80067de:	2300      	movs	r3, #0
 80067e0:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 80067e2:	2300      	movs	r3, #0
 80067e4:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 80067e6:	2300      	movs	r3, #0
 80067e8:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	78da      	ldrb	r2, [r3, #3]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	3304      	adds	r3, #4
 80067f6:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 80067f8:	2300      	movs	r3, #0
 80067fa:	77fb      	strb	r3, [r7, #31]
 80067fc:	e0d0      	b.n	80069a0 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	7ffa      	ldrb	r2, [r7, #31]
 8006802:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	2200      	movs	r2, #0
 8006808:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	78db      	ldrb	r3, [r3, #3]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10a      	bne.n	8006828 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	785b      	ldrb	r3, [r3, #1]
 8006816:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800681a:	2b09      	cmp	r3, #9
 800681c:	d104      	bne.n	8006828 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	2213      	movs	r2, #19
 8006822:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006826:	e007      	b.n	8006838 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	785b      	ldrb	r3, [r3, #1]
 800682c:	f003 031f 	and.w	r3, r3, #31
 8006830:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		}

		switch (i) {
 8006838:	7ffb      	ldrb	r3, [r7, #31]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 800683e:	2b01      	cmp	r3, #1
 8006840:	d05d      	beq.n	80068fe <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 8006842:	e0a7      	b.n	8006994 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	789b      	ldrb	r3, [r3, #2]
 8006848:	2b07      	cmp	r3, #7
 800684a:	d104      	bne.n	8006856 <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	821a      	strh	r2, [r3, #16]
 8006854:	e00c      	b.n	8006870 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	789b      	ldrb	r3, [r3, #2]
 800685a:	2b08      	cmp	r3, #8
 800685c:	d104      	bne.n	8006868 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	821a      	strh	r2, [r3, #16]
 8006866:	e003      	b.n	8006870 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	859a      	strh	r2, [r3, #44]	@ 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	85da      	strh	r2, [r3, #46]	@ 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	861a      	strh	r2, [r3, #48]	@ 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	895b      	ldrh	r3, [r3, #10]
 800688c:	015b      	lsls	r3, r3, #5
 800688e:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006896:	d302      	bcc.n	800689e <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 8006898:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800689c:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	871a      	strh	r2, [r3, #56]	@ 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	875a      	strh	r2, [r3, #58]	@ 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 80068b2:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	fb02 f303 	mul.w	r3, r2, r3
 80068bc:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068c4:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	da01      	bge.n	80068d0 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 80068cc:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80068d0:	12db      	asrs	r3, r3, #11
 80068d2:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	b21a      	sxth	r2, r3
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	879a      	strh	r2, [r3, #60]	@ 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	621a      	str	r2, [r3, #32]

			break;
 80068fc:	e04a      	b.n	8006994 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	859a      	strh	r2, [r3, #44]	@ 0x2c
			pdata->avg_signal_count_rate_mcps =
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006914:	85da      	strh	r2, [r3, #46]	@ 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	861a      	strh	r2, [r3, #48]	@ 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	8bdb      	ldrh	r3, [r3, #30]
 8006922:	015b      	lsls	r3, r3, #5
 8006924:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800692c:	d302      	bcc.n	8006934 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 800692e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006932:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	b29a      	uxth	r2, r3
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	871a      	strh	r2, [r3, #56]	@ 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	875a      	strh	r2, [r3, #58]	@ 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
			range_mm =
 8006948:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	fb02 f303 	mul.w	r3, r2, r3
 8006952:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800695a:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	2b00      	cmp	r3, #0
 8006960:	da01      	bge.n	8006966 <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 8006962:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8006966:	12db      	asrs	r3, r3, #11
 8006968:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	b21a      	sxth	r2, r3
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	879a      	strh	r2, [r3, #60]	@ 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	621a      	str	r2, [r3, #32]

			break;
 8006992:	bf00      	nop
		}

		pdata++;
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	3340      	adds	r3, #64	@ 0x40
 8006998:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 800699a:	7ffb      	ldrb	r3, [r7, #31]
 800699c:	3301      	adds	r3, #1
 800699e:	77fb      	strb	r3, [r7, #31]
 80069a0:	7ffb      	ldrb	r3, [r7, #31]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	f67f af2b 	bls.w	80067fe <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	2200      	movs	r2, #0
 80069ac:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	785b      	ldrb	r3, [r3, #1]
 80069b2:	f003 031f 	and.w	r3, r3, #31
 80069b6:	2b11      	cmp	r3, #17
 80069b8:	bf8c      	ite	hi
 80069ba:	2201      	movhi	r2, #1
 80069bc:	2200      	movls	r2, #0
 80069be:	b2d2      	uxtb	r2, r2
 80069c0:	2a00      	cmp	r2, #0
 80069c2:	d117      	bne.n	80069f4 <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
 80069c4:	4a0e      	ldr	r2, [pc, #56]	@ (8006a00 <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 80069c6:	fa22 f303 	lsr.w	r3, r2, r3
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	bf14      	ite	ne
 80069d2:	2301      	movne	r3, #1
 80069d4:	2300      	moveq	r3, #0
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00b      	beq.n	80069f4 <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	785b      	ldrb	r3, [r3, #1]
 80069e0:	f003 031f 	and.w	r3, r3, #31
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	break;
 80069f2:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 80069f4:	bf00      	nop
 80069f6:	3724      	adds	r7, #36	@ 0x24
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	0002200e 	.word	0x0002200e

08006a04 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	607a      	str	r2, [r7, #4]
 8006a10:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a12:	2300      	movs	r3, #0
 8006a14:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8006a1a:	897b      	ldrh	r3, [r7, #10]
 8006a1c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8006a20:	2b38      	cmp	r3, #56	@ 0x38
 8006a22:	f200 8204 	bhi.w	8006e2e <VL53L1_get_tuning_parm+0x42a>
 8006a26:	a201      	add	r2, pc, #4	@ (adr r2, 8006a2c <VL53L1_get_tuning_parm+0x28>)
 8006a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2c:	08006b11 	.word	0x08006b11
 8006a30:	08006b1f 	.word	0x08006b1f
 8006a34:	08006b2d 	.word	0x08006b2d
 8006a38:	08006b3b 	.word	0x08006b3b
 8006a3c:	08006b49 	.word	0x08006b49
 8006a40:	08006b57 	.word	0x08006b57
 8006a44:	08006b65 	.word	0x08006b65
 8006a48:	08006b73 	.word	0x08006b73
 8006a4c:	08006b81 	.word	0x08006b81
 8006a50:	08006b8f 	.word	0x08006b8f
 8006a54:	08006b9d 	.word	0x08006b9d
 8006a58:	08006bab 	.word	0x08006bab
 8006a5c:	08006bb9 	.word	0x08006bb9
 8006a60:	08006bc7 	.word	0x08006bc7
 8006a64:	08006bd5 	.word	0x08006bd5
 8006a68:	08006be3 	.word	0x08006be3
 8006a6c:	08006bf1 	.word	0x08006bf1
 8006a70:	08006bff 	.word	0x08006bff
 8006a74:	08006c0d 	.word	0x08006c0d
 8006a78:	08006c1b 	.word	0x08006c1b
 8006a7c:	08006c29 	.word	0x08006c29
 8006a80:	08006c37 	.word	0x08006c37
 8006a84:	08006c45 	.word	0x08006c45
 8006a88:	08006c53 	.word	0x08006c53
 8006a8c:	08006c61 	.word	0x08006c61
 8006a90:	08006c6f 	.word	0x08006c6f
 8006a94:	08006c7d 	.word	0x08006c7d
 8006a98:	08006c8b 	.word	0x08006c8b
 8006a9c:	08006c99 	.word	0x08006c99
 8006aa0:	08006ca7 	.word	0x08006ca7
 8006aa4:	08006cb5 	.word	0x08006cb5
 8006aa8:	08006cc3 	.word	0x08006cc3
 8006aac:	08006cd1 	.word	0x08006cd1
 8006ab0:	08006cdf 	.word	0x08006cdf
 8006ab4:	08006ced 	.word	0x08006ced
 8006ab8:	08006cfb 	.word	0x08006cfb
 8006abc:	08006d09 	.word	0x08006d09
 8006ac0:	08006d17 	.word	0x08006d17
 8006ac4:	08006d25 	.word	0x08006d25
 8006ac8:	08006d33 	.word	0x08006d33
 8006acc:	08006d41 	.word	0x08006d41
 8006ad0:	08006d4f 	.word	0x08006d4f
 8006ad4:	08006d5d 	.word	0x08006d5d
 8006ad8:	08006d6b 	.word	0x08006d6b
 8006adc:	08006d79 	.word	0x08006d79
 8006ae0:	08006d87 	.word	0x08006d87
 8006ae4:	08006d95 	.word	0x08006d95
 8006ae8:	08006da3 	.word	0x08006da3
 8006aec:	08006db1 	.word	0x08006db1
 8006af0:	08006dbf 	.word	0x08006dbf
 8006af4:	08006dcd 	.word	0x08006dcd
 8006af8:	08006ddb 	.word	0x08006ddb
 8006afc:	08006de9 	.word	0x08006de9
 8006b00:	08006df7 	.word	0x08006df7
 8006b04:	08006e05 	.word	0x08006e05
 8006b08:	08006e13 	.word	0x08006e13
 8006b0c:	08006e21 	.word	0x08006e21

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8006b16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	601a      	str	r2, [r3, #0]
	break;
 8006b1c:	e18e      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8006b24:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	601a      	str	r2, [r3, #0]
	break;
 8006b2a:	e187      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 8006b32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	601a      	str	r2, [r3, #0]
	break;
 8006b38:	e180      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8006b40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	601a      	str	r2, [r3, #0]
	break;
 8006b46:	e179      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8006b4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	601a      	str	r2, [r3, #0]
	break;
 8006b54:	e172      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 8006b5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	601a      	str	r2, [r3, #0]
	break;
 8006b62:	e16b      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8006b6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	601a      	str	r2, [r3, #0]
	break;
 8006b70:	e164      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8006b78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	601a      	str	r2, [r3, #0]
	break;
 8006b7e:	e15d      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	@ 0xb6
 8006b86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	601a      	str	r2, [r3, #0]
	break;
 8006b8c:	e156      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8006b94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	601a      	str	r2, [r3, #0]
	break;
 8006b9a:	e14f      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8006ba2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	601a      	str	r2, [r3, #0]
	break;
 8006ba8:	e148      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8006bb0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	601a      	str	r2, [r3, #0]
	break;
 8006bb6:	e141      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 8006bbe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	601a      	str	r2, [r3, #0]
	break;
 8006bc4:	e13a      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 8006bcc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	601a      	str	r2, [r3, #0]
	break;
 8006bd2:	e133      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8006bda:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	601a      	str	r2, [r3, #0]
	break;
 8006be0:	e12c      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8006be8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	601a      	str	r2, [r3, #0]
	break;
 8006bee:	e125      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f893 30c4 	ldrb.w	r3, [r3, #196]	@ 0xc4
 8006bf6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	601a      	str	r2, [r3, #0]
	break;
 8006bfc:	e11e      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	f893 3140 	ldrb.w	r3, [r3, #320]	@ 0x140
 8006c04:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	601a      	str	r2, [r3, #0]
	break;
 8006c0a:	e117      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 8006c12:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	601a      	str	r2, [r3, #0]
	break;
 8006c18:	e110      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 8006c20:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	601a      	str	r2, [r3, #0]
	break;
 8006c26:	e109      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8006c2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	601a      	str	r2, [r3, #0]
	break;
 8006c34:	e102      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	@ 0x13e
 8006c3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	601a      	str	r2, [r3, #0]
	break;
 8006c42:	e0fb      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 8006c4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	601a      	str	r2, [r3, #0]
	break;
 8006c50:	e0f4      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f893 30ab 	ldrb.w	r3, [r3, #171]	@ 0xab
 8006c58:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	601a      	str	r2, [r3, #0]
	break;
 8006c5e:	e0ed      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8006c66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	601a      	str	r2, [r3, #0]
	break;
 8006c6c:	e0e6      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8006c74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	601a      	str	r2, [r3, #0]
	break;
 8006c7a:	e0df      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 8006c82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	601a      	str	r2, [r3, #0]
	break;
 8006c88:	e0d8      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 8006c90:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	601a      	str	r2, [r3, #0]
	break;
 8006c96:	e0d1      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	f893 30c6 	ldrb.w	r3, [r3, #198]	@ 0xc6
 8006c9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	601a      	str	r2, [r3, #0]
	break;
 8006ca4:	e0ca      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8006cac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	601a      	str	r2, [r3, #0]
	break;
 8006cb2:	e0c3      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8006cba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	601a      	str	r2, [r3, #0]
	break;
 8006cc0:	e0bc      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8006cc8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	601a      	str	r2, [r3, #0]
	break;
 8006cce:	e0b5      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006cd6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	601a      	str	r2, [r3, #0]
	break;
 8006cdc:	e0ae      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	f8b3 3118 	ldrh.w	r3, [r3, #280]	@ 0x118
 8006ce4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	601a      	str	r2, [r3, #0]
	break;
 8006cea:	e0a7      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 8006cf2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	601a      	str	r2, [r3, #0]
	break;
 8006cf8:	e0a0      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 8006d00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	601a      	str	r2, [r3, #0]
	break;
 8006d06:	e099      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8006d0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	601a      	str	r2, [r3, #0]
	break;
 8006d14:	e092      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8006d1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	601a      	str	r2, [r3, #0]
	break;
 8006d22:	e08b      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8006d2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	601a      	str	r2, [r3, #0]
	break;
 8006d30:	e084      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8006d38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	601a      	str	r2, [r3, #0]
	break;
 8006d3e:	e07d      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8006d46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	601a      	str	r2, [r3, #0]
	break;
 8006d4c:	e076      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 8006d54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	601a      	str	r2, [r3, #0]
	break;
 8006d5a:	e06f      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	f893 3156 	ldrb.w	r3, [r3, #342]	@ 0x156
 8006d62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	601a      	str	r2, [r3, #0]
	break;
 8006d68:	e068      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f893 3121 	ldrb.w	r3, [r3, #289]	@ 0x121
 8006d70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	601a      	str	r2, [r3, #0]
	break;
 8006d76:	e061      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 8006d7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	601a      	str	r2, [r3, #0]
	break;
 8006d84:	e05a      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f8b3 3128 	ldrh.w	r3, [r3, #296]	@ 0x128
 8006d8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	601a      	str	r2, [r3, #0]
	break;
 8006d92:	e053      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	@ 0xca
 8006d9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	601a      	str	r2, [r3, #0]
	break;
 8006da0:	e04c      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 8006da8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	601a      	str	r2, [r3, #0]
	break;
 8006dae:	e045      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006db6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	601a      	str	r2, [r3, #0]
	break;
 8006dbc:	e03e      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006dc4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	601a      	str	r2, [r3, #0]
	break;
 8006dca:	e037      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006dd2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	601a      	str	r2, [r3, #0]
	break;
 8006dd8:	e030      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006de0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	601a      	str	r2, [r3, #0]
	break;
 8006de6:	e029      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006dee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	601a      	str	r2, [r3, #0]
	break;
 8006df4:	e022      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006dfc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	601a      	str	r2, [r3, #0]
	break;
 8006e02:	e01b      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8006e0a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	601a      	str	r2, [r3, #0]
	break;
 8006e10:	e014      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	601a      	str	r2, [r3, #0]
	break;
 8006e1e:	e00d      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006e26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	601a      	str	r2, [r3, #0]
	break;
 8006e2c:	e006      	b.n	8006e3c <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8006e34:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8006e36:	23fc      	movs	r3, #252	@ 0xfc
 8006e38:	75fb      	strb	r3, [r7, #23]
	break;
 8006e3a:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8006e3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	371c      	adds	r7, #28
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e54:	2300      	movs	r3, #0
 8006e56:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2208      	movs	r2, #8
 8006e5c:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	220b      	movs	r2, #11
 8006e62:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006e6a:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006e72:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8006e7a:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8006e82:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2212      	movs	r2, #18
 8006eaa:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	220f      	movs	r2, #15
 8006eb0:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2202      	movs	r2, #2
 8006eb6:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8006ebe:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	220c      	movs	r2, #12
 8006ec4:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b084      	sub	sp, #16
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
 8006ede:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	895b      	ldrh	r3, [r3, #10]
 8006ee8:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	895b      	ldrh	r3, [r3, #10]
 8006f06:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	2200      	movs	r2, #0
 8006f24:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2240      	movs	r2, #64	@ 0x40
 8006f2a:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10d      	bne.n	8006f50 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d108      	bne.n	8006f50 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d103      	bne.n	8006f50 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	741a      	strb	r2, [r3, #16]
 8006f4e:	e002      	b.n	8006f56 <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	2201      	movs	r2, #1
 8006f54:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 8006f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d114      	bne.n	8006f88 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d110      	bne.n	8006f88 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	6818      	ldr	r0, [r3, #0]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	7d1b      	ldrb	r3, [r3, #20]
 8006f7a:	f000 ffc9 	bl	8007f10 <VL53L1_calc_range_ignore_threshold>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	82da      	strh	r2, [r3, #22]
 8006f86:	e002      	b.n	8006f8e <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 8006f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b085      	sub	sp, #20
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006fac:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006fb4:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8006fbc:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8006fc4:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2208      	movs	r2, #8
 8006fca:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2228      	movs	r2, #40	@ 0x28
 8006fd0:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2209      	movs	r2, #9
 8006fd6:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3714      	adds	r7, #20
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f248 0203 	movw	r2, #32771	@ 0x8003
 8006ffa:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f248 0201 	movw	r2, #32769	@ 0x8001
 8007002:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f248 0241 	movw	r2, #32833	@ 0x8041
 800700a:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	220e      	movs	r2, #14
 8007010:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	220a      	movs	r2, #10
 8007016:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2206      	movs	r2, #6
 800701c:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	220e      	movs	r2, #14
 8007022:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	220a      	movs	r2, #10
 8007028:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2206      	movs	r2, #6
 800702e:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2221      	movs	r2, #33	@ 0x21
 800703a:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800704e:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8007056:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800705e:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	22c0      	movs	r2, #192	@ 0xc0
 8007064:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	22c0      	movs	r2, #192	@ 0xc0
 800706a:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	22c0      	movs	r2, #192	@ 0xc0
 8007070:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2208      	movs	r2, #8
 8007076:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2210      	movs	r2, #16
 800707c:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2202      	movs	r2, #2
 800708a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2202      	movs	r2, #2
 800709a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80070ac:	84da      	strh	r2, [r3, #38]	@ 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80070b4:	851a      	strh	r2, [r3, #40]	@ 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f248 0230 	movw	r2, #32816	@ 0x8030
 80070bc:	62da      	str	r2, [r3, #44]	@ 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80070c4:	631a      	str	r2, [r3, #48]	@ 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80070cc:	635a      	str	r2, [r3, #52]	@ 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80070d4:	639a      	str	r2, [r3, #56]	@ 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f24f 6218 	movw	r2, #63000	@ 0xf618
 80070dc:	641a      	str	r2, [r3, #64]	@ 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 80070e4:	645a      	str	r2, [r3, #68]	@ 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 80070ec:	63da      	str	r2, [r3, #60]	@ 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80070f4:	649a      	str	r2, [r3, #72]	@ 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 80070f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8007106:	b480      	push	{r7}
 8007108:	b087      	sub	sp, #28
 800710a:	af00      	add	r7, sp, #0
 800710c:	60f8      	str	r0, [r7, #12]
 800710e:	60b9      	str	r1, [r7, #8]
 8007110:	607a      	str	r2, [r7, #4]
 8007112:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007114:	2300      	movs	r3, #0
 8007116:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 800711e:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2211      	movs	r2, #17
 8007160:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2202      	movs	r2, #2
 8007166:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2202      	movs	r2, #2
 8007172:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2208      	movs	r2, #8
 8007178:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8007180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007182:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8007188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718a:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8007190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007192:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2201      	movs	r2, #1
 800719e:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	22ff      	movs	r2, #255	@ 0xff
 80071b6:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 80071b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ba:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 80071c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c2:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2200      	movs	r2, #0
 80071de:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	2200      	movs	r2, #0
 80071e4:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2220      	movs	r2, #32
 80071ea:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	220b      	movs	r2, #11
 80071f0:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 80071f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f4:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	2202      	movs	r2, #2
 80071fe:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	220d      	movs	r2, #13
 8007204:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8007206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007208:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2200      	movs	r2, #0
 8007212:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	2201      	movs	r2, #1
 8007218:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	2200      	movs	r2, #0
 800721e:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	2200      	movs	r2, #0
 8007224:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	f44f 420c 	mov.w	r2, #35840	@ 0x8c00
 800722c:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2200      	movs	r2, #0
 8007232:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2238      	movs	r2, #56	@ 0x38
 8007238:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	22ff      	movs	r2, #255	@ 0xff
 800723e:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	2201      	movs	r2, #1
 8007244:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	221a      	movs	r2, #26
 8007250:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2220      	movs	r2, #32
 800725c:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	22cc      	movs	r2, #204	@ 0xcc
 8007268:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	220b      	movs	r2, #11
 800726e:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	22f5      	movs	r2, #245	@ 0xf5
 800727a:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2209      	movs	r2, #9
 8007280:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8007282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007284:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800728a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728c:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2208      	movs	r2, #8
 8007296:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2278      	movs	r2, #120	@ 0x78
 800729c:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	2201      	movs	r2, #1
 80072ae:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	2200      	movs	r2, #0
 80072b4:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2200      	movs	r2, #0
 80072ba:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2200      	movs	r2, #0
 80072c0:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 80072c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c4:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
	pdynamic->system__seed_config =
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	220b      	movs	r2, #11
 80072d0:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2209      	movs	r2, #9
 80072d6:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 80072d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072da:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 80072e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e2:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	2201      	movs	r2, #1
 80072ec:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 80072ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f0:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
	pdynamic->sd_config__first_order_select =
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 80072f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fa:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
	pdynamic->sd_config__quantifier         =
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	22c7      	movs	r2, #199	@ 0xc7
 8007306:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	22ff      	movs	r2, #255	@ 0xff
 800730c:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	22db      	movs	r2, #219	@ 0xdb
 8007312:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	2202      	movs	r2, #2
 8007318:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	2200      	movs	r2, #0
 800731e:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	2201      	movs	r2, #1
 8007324:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	2201      	movs	r2, #1
 800732a:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	2221      	movs	r2, #33	@ 0x21
 8007330:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8007332:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007336:	4618      	mov	r0, r3
 8007338:	371c      	adds	r7, #28
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b088      	sub	sp, #32
 8007346:	af02      	add	r7, sp, #8
 8007348:	60f8      	str	r0, [r7, #12]
 800734a:	60b9      	str	r1, [r7, #8]
 800734c:	607a      	str	r2, [r7, #4]
 800734e:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007350:	2300      	movs	r3, #0
 8007352:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8007354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007356:	9301      	str	r3, [sp, #4]
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	68b9      	ldr	r1, [r7, #8]
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f7ff fecf 	bl	8007106 <VL53L1_preset_mode_standard_ranging>
 8007368:	4603      	mov	r3, r0
 800736a:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800736c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d121      	bne.n	80073b8 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2207      	movs	r2, #7
 8007378:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2205      	movs	r2, #5
 800737e:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8007380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007382:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 8007388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738a:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2208      	movs	r2, #8
 8007394:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2238      	movs	r2, #56	@ 0x38
 800739a:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	2207      	movs	r2, #7
 80073a0:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	2205      	movs	r2, #5
 80073a6:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 80073a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073aa:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 80073b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b2:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 80073b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3718      	adds	r7, #24
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b088      	sub	sp, #32
 80073c8:	af02      	add	r7, sp, #8
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
 80073d0:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80073d2:	2300      	movs	r3, #0
 80073d4:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80073d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d8:	9301      	str	r3, [sp, #4]
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	68b9      	ldr	r1, [r7, #8]
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f7ff fe8e 	bl	8007106 <VL53L1_preset_mode_standard_ranging>
 80073ea:	4603      	mov	r3, r0
 80073ec:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80073ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d121      	bne.n	800743a <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	220f      	movs	r2, #15
 80073fa:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	220d      	movs	r2, #13
 8007400:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8007402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007404:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800740a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740c:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2208      	movs	r2, #8
 8007416:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	22b8      	movs	r2, #184	@ 0xb8
 800741c:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	220f      	movs	r2, #15
 8007422:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	220d      	movs	r2, #13
 8007428:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800742a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742c:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 8007432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007434:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800743a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b088      	sub	sp, #32
 800744a:	af02      	add	r7, sp, #8
 800744c:	60f8      	str	r0, [r7, #12]
 800744e:	60b9      	str	r1, [r7, #8]
 8007450:	607a      	str	r2, [r7, #4]
 8007452:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007454:	2300      	movs	r3, #0
 8007456:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8007458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745a:	9301      	str	r3, [sp, #4]
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	68b9      	ldr	r1, [r7, #8]
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f7ff fe4d 	bl	8007106 <VL53L1_preset_mode_standard_ranging>
 800746c:	4603      	mov	r3, r0
 800746e:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8007470:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d105      	bne.n	8007484 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	2202      	movs	r2, #2
 800747c:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	223b      	movs	r2, #59	@ 0x3b
 8007482:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007484:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3718      	adds	r7, #24
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b088      	sub	sp, #32
 8007494:	af02      	add	r7, sp, #8
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
 800749c:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800749e:	2300      	movs	r3, #0
 80074a0:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80074a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a4:	9301      	str	r3, [sp, #4]
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	68b9      	ldr	r1, [r7, #8]
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f7ff fe28 	bl	8007106 <VL53L1_preset_mode_standard_ranging>
 80074b6:	4603      	mov	r3, r0
 80074b8:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80074ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d105      	bne.n	80074ce <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2202      	movs	r2, #2
 80074c6:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	225b      	movs	r2, #91	@ 0x5b
 80074cc:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80074ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b088      	sub	sp, #32
 80074de:	af02      	add	r7, sp, #8
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	607a      	str	r2, [r7, #4]
 80074e6:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80074e8:	2300      	movs	r3, #0
 80074ea:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 80074ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ee:	9301      	str	r3, [sp, #4]
 80074f0:	6a3b      	ldr	r3, [r7, #32]
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	68b9      	ldr	r1, [r7, #8]
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f7ff fe03 	bl	8007106 <VL53L1_preset_mode_standard_ranging>
 8007500:	4603      	mov	r3, r0
 8007502:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8007504:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d11a      	bne.n	8007542 <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	2200      	movs	r2, #0
 8007510:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	22b1      	movs	r2, #177	@ 0xb1
 800751c:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	22d4      	movs	r2, #212	@ 0xd4
 8007528:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007530:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8007532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007534:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	2240      	movs	r2, #64	@ 0x40
 8007540:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007542:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3718      	adds	r7, #24
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b088      	sub	sp, #32
 8007552:	af02      	add	r7, sp, #8
 8007554:	60f8      	str	r0, [r7, #12]
 8007556:	60b9      	str	r1, [r7, #8]
 8007558:	607a      	str	r2, [r7, #4]
 800755a:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800755c:	2300      	movs	r3, #0
 800755e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 8007560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007562:	9301      	str	r3, [sp, #4]
 8007564:	6a3b      	ldr	r3, [r7, #32]
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	68b9      	ldr	r1, [r7, #8]
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f7ff fee7 	bl	8007342 <VL53L1_preset_mode_standard_ranging_short_range>
 8007574:	4603      	mov	r3, r0
 8007576:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8007578:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d11a      	bne.n	80075b6 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2200      	movs	r2, #0
 8007584:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2284      	movs	r2, #132	@ 0x84
 8007590:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	22b1      	movs	r2, #177	@ 0xb1
 800759c:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80075a4:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80075a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a8:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80075b0:	6a3b      	ldr	r3, [r7, #32]
 80075b2:	2240      	movs	r2, #64	@ 0x40
 80075b4:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80075b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b088      	sub	sp, #32
 80075c6:	af02      	add	r7, sp, #8
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	607a      	str	r2, [r7, #4]
 80075ce:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80075d0:	2300      	movs	r3, #0
 80075d2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 80075d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d6:	9301      	str	r3, [sp, #4]
 80075d8:	6a3b      	ldr	r3, [r7, #32]
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	68b9      	ldr	r1, [r7, #8]
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f7ff feee 	bl	80073c4 <VL53L1_preset_mode_standard_ranging_long_range>
 80075e8:	4603      	mov	r3, r0
 80075ea:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80075ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d11a      	bne.n	800762a <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	2200      	movs	r2, #0
 80075f8:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2297      	movs	r2, #151	@ 0x97
 8007604:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	22b1      	movs	r2, #177	@ 0xb1
 8007610:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007618:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800761a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761c:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8007624:	6a3b      	ldr	r3, [r7, #32]
 8007626:	2240      	movs	r2, #64	@ 0x40
 8007628:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800762a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b088      	sub	sp, #32
 800763a:	af02      	add	r7, sp, #8
 800763c:	60f8      	str	r0, [r7, #12]
 800763e:	60b9      	str	r1, [r7, #8]
 8007640:	607a      	str	r2, [r7, #4]
 8007642:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007644:	2300      	movs	r3, #0
 8007646:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 8007648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764a:	9301      	str	r3, [sp, #4]
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	68b9      	ldr	r1, [r7, #8]
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f7ff ff3f 	bl	80074da <VL53L1_preset_mode_timed_ranging>
 800765c:	4603      	mov	r3, r0
 800765e:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8007660:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d106      	bne.n	8007676 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8007668:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800766a:	6839      	ldr	r1, [r7, #0]
 800766c:	68b8      	ldr	r0, [r7, #8]
 800766e:	f000 fe7b 	bl	8008368 <VL53L1_config_low_power_auto_mode>
 8007672:	4603      	mov	r3, r0
 8007674:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8007676:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3718      	adds	r7, #24
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b088      	sub	sp, #32
 8007686:	af02      	add	r7, sp, #8
 8007688:	60f8      	str	r0, [r7, #12]
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	607a      	str	r2, [r7, #4]
 800768e:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007690:	2300      	movs	r3, #0
 8007692:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 8007694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007696:	9301      	str	r3, [sp, #4]
 8007698:	6a3b      	ldr	r3, [r7, #32]
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	68b9      	ldr	r1, [r7, #8]
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f7ff ff53 	bl	800754e <VL53L1_preset_mode_timed_ranging_short_range>
 80076a8:	4603      	mov	r3, r0
 80076aa:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 80076ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d106      	bne.n	80076c2 <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 80076b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	68b8      	ldr	r0, [r7, #8]
 80076ba:	f000 fe55 	bl	8008368 <VL53L1_config_low_power_auto_mode>
 80076be:	4603      	mov	r3, r0
 80076c0:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 80076c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3718      	adds	r7, #24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b088      	sub	sp, #32
 80076d2:	af02      	add	r7, sp, #8
 80076d4:	60f8      	str	r0, [r7, #12]
 80076d6:	60b9      	str	r1, [r7, #8]
 80076d8:	607a      	str	r2, [r7, #4]
 80076da:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80076dc:	2300      	movs	r3, #0
 80076de:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 80076e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e2:	9301      	str	r3, [sp, #4]
 80076e4:	6a3b      	ldr	r3, [r7, #32]
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	68b9      	ldr	r1, [r7, #8]
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f7ff ff67 	bl	80075c2 <VL53L1_preset_mode_timed_ranging_long_range>
 80076f4:	4603      	mov	r3, r0
 80076f6:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 80076f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d106      	bne.n	800770e <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8007700:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	68b8      	ldr	r0, [r7, #8]
 8007706:	f000 fe2f 	bl	8008368 <VL53L1_config_low_power_auto_mode>
 800770a:	4603      	mov	r3, r0
 800770c:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800770e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3718      	adds	r7, #24
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b088      	sub	sp, #32
 800771e:	af02      	add	r7, sp, #8
 8007720:	60f8      	str	r0, [r7, #12]
 8007722:	60b9      	str	r1, [r7, #8]
 8007724:	607a      	str	r2, [r7, #4]
 8007726:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007728:	2300      	movs	r3, #0
 800772a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800772c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772e:	9301      	str	r3, [sp, #4]
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	68b9      	ldr	r1, [r7, #8]
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f7ff fce3 	bl	8007106 <VL53L1_preset_mode_standard_ranging>
 8007740:	4603      	mov	r3, r0
 8007742:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8007744:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d116      	bne.n	800777a <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	2200      	movs	r2, #0
 8007750:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	22b1      	movs	r2, #177	@ 0xb1
 800775c:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	22d4      	movs	r2, #212	@ 0xd4
 8007768:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800776a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776c:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 8007774:	6a3b      	ldr	r3, [r7, #32]
 8007776:	2210      	movs	r2, #16
 8007778:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800777a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3718      	adds	r7, #24
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b088      	sub	sp, #32
 800778a:	af02      	add	r7, sp, #8
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	607a      	str	r2, [r7, #4]
 8007792:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007794:	2300      	movs	r3, #0
 8007796:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8007798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779a:	9301      	str	r3, [sp, #4]
 800779c:	6a3b      	ldr	r3, [r7, #32]
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	68b9      	ldr	r1, [r7, #8]
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f7ff fcad 	bl	8007106 <VL53L1_preset_mode_standard_ranging>
 80077ac:	4603      	mov	r3, r0
 80077ae:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80077b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d102      	bne.n	80077be <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	2201      	movs	r2, #1
 80077bc:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 80077be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3718      	adds	r7, #24
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b085      	sub	sp, #20
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2202      	movs	r2, #2
 80077e2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	220d      	movs	r2, #13
 80077ea:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f640 028e 	movw	r2, #2190	@ 0x88e
 80077f4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80077f6:	bf00      	nop
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 8007802:	b480      	push	{r7}
 8007804:	b085      	sub	sp, #20
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
 800780a:	460b      	mov	r3, r1
 800780c:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	332c      	adds	r3, #44	@ 0x2c
 8007816:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	78fa      	ldrb	r2, [r7, #3]
 800781c:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	2200      	movs	r2, #0
 8007822:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	2202      	movs	r2, #2
 8007828:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	2200      	movs	r2, #0
 800782e:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	78fa      	ldrb	r2, [r7, #3]
 8007834:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	2200      	movs	r2, #0
 800783a:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	2202      	movs	r2, #2
 8007840:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2200      	movs	r2, #0
 8007846:	71da      	strb	r2, [r3, #7]

}
 8007848:	bf00      	nop
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8007854:	b480      	push	{r7}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800785c:	2300      	movs	r3, #0
 800785e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	332c      	adds	r3, #44	@ 0x2c
 8007868:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8007870:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10c      	bne.n	8007892 <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2203      	movs	r2, #3
 800787c:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2202      	movs	r2, #2
 8007888:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	71da      	strb	r2, [r3, #7]
 8007890:	e060      	b.n	8007954 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	795b      	ldrb	r3, [r3, #5]
 8007896:	2bff      	cmp	r3, #255	@ 0xff
 8007898:	d103      	bne.n	80078a2 <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2280      	movs	r2, #128	@ 0x80
 800789e:	715a      	strb	r2, [r3, #5]
 80078a0:	e005      	b.n	80078ae <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	795b      	ldrb	r3, [r3, #5]
 80078a6:	3301      	adds	r3, #1
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	799b      	ldrb	r3, [r3, #6]
 80078b2:	f083 0302 	eor.w	r3, r3, #2
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	791b      	ldrb	r3, [r3, #4]
 80078c0:	3b03      	subs	r3, #3
 80078c2:	2b05      	cmp	r3, #5
 80078c4:	d839      	bhi.n	800793a <VL53L1_update_ll_driver_rd_state+0xe6>
 80078c6:	a201      	add	r2, pc, #4	@ (adr r2, 80078cc <VL53L1_update_ll_driver_rd_state+0x78>)
 80078c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078cc:	080078e5 	.word	0x080078e5
 80078d0:	0800793b 	.word	0x0800793b
 80078d4:	0800793b 	.word	0x0800793b
 80078d8:	0800790f 	.word	0x0800790f
 80078dc:	0800791d 	.word	0x0800791d
 80078e0:	08007925 	.word	0x08007925

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	f893 31c6 	ldrb.w	r3, [r3, #454]	@ 0x1c6
 80078ea:	f003 0302 	and.w	r3, r3, #2
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	dd03      	ble.n	80078fa <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2206      	movs	r2, #6
 80078f6:	711a      	strb	r2, [r3, #4]
 80078f8:	e002      	b.n	8007900 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2208      	movs	r2, #8
 80078fe:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	71da      	strb	r2, [r3, #7]

		break;
 800790c:	e022      	b.n	8007954 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2208      	movs	r2, #8
 8007918:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800791a:	e01b      	b.n	8007954 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2208      	movs	r2, #8
 8007920:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8007922:	e017      	b.n	8007954 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	79db      	ldrb	r3, [r3, #7]
 8007928:	f083 0301 	eor.w	r3, r3, #1
 800792c:	b2da      	uxtb	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2208      	movs	r2, #8
 8007936:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8007938:	e00c      	b.n	8007954 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2203      	movs	r2, #3
 800793e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2202      	movs	r2, #2
 800794a:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	71da      	strb	r2, [r3, #7]

		break;
 8007952:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8007954:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007958:	4618      	mov	r0, r3
 800795a:	371c      	adds	r7, #28
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8007964:	b480      	push	{r7}
 8007966:	b089      	sub	sp, #36	@ 0x24
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800796c:	2300      	movs	r3, #0
 800796e:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	332c      	adds	r3, #44	@ 0x2c
 8007978:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	f503 73e7 	add.w	r3, r3, #462	@ 0x1ce
 8007980:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 8007982:	2300      	movs	r3, #0
 8007984:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 8007986:	2300      	movs	r3, #0
 8007988:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 800798a:	2300      	movs	r3, #0
 800798c:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 8007992:	f003 031f 	and.w	r3, r3, #31
 8007996:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	78db      	ldrb	r3, [r3, #3]
 800799c:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 80079a2:	111b      	asrs	r3, r3, #4
 80079a4:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 80079a6:	f003 0302 	and.w	r3, r3, #2
 80079aa:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 80079b2:	f003 0320 	and.w	r3, r3, #32
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d017      	beq.n	80079ea <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	791b      	ldrb	r3, [r3, #4]
 80079be:	2b06      	cmp	r3, #6
 80079c0:	d105      	bne.n	80079ce <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
 80079c4:	2b12      	cmp	r3, #18
 80079c6:	d010      	beq.n	80079ea <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 80079c8:	23ef      	movs	r3, #239	@ 0xef
 80079ca:	77fb      	strb	r3, [r7, #31]
 80079cc:	e00d      	b.n	80079ea <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	795b      	ldrb	r3, [r3, #5]
 80079d2:	7bba      	ldrb	r2, [r7, #14]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d001      	beq.n	80079dc <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 80079d8:	23ee      	movs	r3, #238	@ 0xee
 80079da:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	799b      	ldrb	r3, [r3, #6]
 80079e0:	7b7a      	ldrb	r2, [r7, #13]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d001      	beq.n	80079ea <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 80079e6:	23ed      	movs	r3, #237	@ 0xed
 80079e8:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 80079ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3724      	adds	r7, #36	@ 0x24
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b087      	sub	sp, #28
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8007a02:	2300      	movs	r3, #0
 8007a04:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	332c      	adds	r3, #44	@ 0x2c
 8007a0e:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8007a16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10c      	bne.n	8007a38 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2203      	movs	r2, #3
 8007a22:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2202      	movs	r2, #2
 8007a2e:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	70da      	strb	r2, [r3, #3]
 8007a36:	e03e      	b.n	8007ab6 <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	785b      	ldrb	r3, [r3, #1]
 8007a3c:	2bff      	cmp	r3, #255	@ 0xff
 8007a3e:	d103      	bne.n	8007a48 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2280      	movs	r2, #128	@ 0x80
 8007a44:	705a      	strb	r2, [r3, #1]
 8007a46:	e005      	b.n	8007a54 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	785b      	ldrb	r3, [r3, #1]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	789b      	ldrb	r3, [r3, #2]
 8007a58:	f083 0302 	eor.w	r3, r3, #2
 8007a5c:	b2da      	uxtb	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	2b03      	cmp	r3, #3
 8007a68:	d002      	beq.n	8007a70 <VL53L1_update_ll_driver_cfg_state+0x76>
 8007a6a:	2b04      	cmp	r3, #4
 8007a6c:	d00e      	beq.n	8007a8c <VL53L1_update_ll_driver_cfg_state+0x92>
 8007a6e:	e015      	b.n	8007a9c <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	78db      	ldrb	r3, [r3, #3]
 8007a74:	f083 0301 	eor.w	r3, r3, #1
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2201      	movs	r2, #1
 8007a82:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2204      	movs	r2, #4
 8007a88:	701a      	strb	r2, [r3, #0]
		break;
 8007a8a:	e014      	b.n	8007ab6 <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	78db      	ldrb	r3, [r3, #3]
 8007a90:	f083 0301 	eor.w	r3, r3, #1
 8007a94:	b2da      	uxtb	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	70da      	strb	r2, [r3, #3]

		break;
 8007a9a:	e00c      	b.n	8007ab6 <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2203      	movs	r2, #3
 8007aa0:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2202      	movs	r2, #2
 8007aac:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	70da      	strb	r2, [r3, #3]

		break;
 8007ab4:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8007ab6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	371c      	adds	r7, #28
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b083      	sub	sp, #12
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	7c1a      	ldrb	r2, [r3, #16]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	3301      	adds	r3, #1
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	7c52      	ldrb	r2, [r2, #17]
 8007ae0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	3302      	adds	r3, #2
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	7c92      	ldrb	r2, [r2, #18]
 8007aea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	3303      	adds	r3, #3
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	7cd2      	ldrb	r2, [r2, #19]
 8007af4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	3304      	adds	r3, #4
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	7d12      	ldrb	r2, [r2, #20]
 8007afe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	3305      	adds	r3, #5
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	7d52      	ldrb	r2, [r2, #21]
 8007b08:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	3306      	adds	r3, #6
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	7d92      	ldrb	r2, [r2, #22]
 8007b12:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	3307      	adds	r3, #7
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	7dd2      	ldrb	r2, [r2, #23]
 8007b1c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	3308      	adds	r3, #8
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	7e12      	ldrb	r2, [r2, #24]
 8007b26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	3309      	adds	r3, #9
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	7e52      	ldrb	r2, [r2, #25]
 8007b30:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	330a      	adds	r3, #10
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	7e92      	ldrb	r2, [r2, #26]
 8007b3a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	330b      	adds	r3, #11
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	7ed2      	ldrb	r2, [r2, #27]
 8007b44:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	330c      	adds	r3, #12
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	7f12      	ldrb	r2, [r2, #28]
 8007b4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	330d      	adds	r3, #13
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	7f52      	ldrb	r2, [r2, #29]
 8007b58:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	330e      	adds	r3, #14
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	7f92      	ldrb	r2, [r2, #30]
 8007b62:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	330f      	adds	r3, #15
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	7fd2      	ldrb	r2, [r2, #31]
 8007b6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	3310      	adds	r3, #16
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007b78:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	3311      	adds	r3, #17
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 8007b84:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	3312      	adds	r3, #18
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8007b90:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	3313      	adds	r3, #19
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8007b9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	3314      	adds	r3, #20
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8007ba8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	3315      	adds	r3, #21
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 8007bb4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	3316      	adds	r3, #22
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8007bc0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	3317      	adds	r3, #23
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8007bcc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	3318      	adds	r3, #24
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8007bd8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	3319      	adds	r3, #25
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 8007be4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	331a      	adds	r3, #26
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8007bf0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	331b      	adds	r3, #27
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 8007bfc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	331c      	adds	r3, #28
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8007c08:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	331d      	adds	r3, #29
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	f892 202d 	ldrb.w	r2, [r2, #45]	@ 0x2d
 8007c14:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	331e      	adds	r3, #30
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8007c20:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	331f      	adds	r3, #31
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 8007c2c:	701a      	strb	r2, [r3, #0]
}
 8007c2e:	bf00      	nop
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b085      	sub	sp, #20
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	4603      	mov	r3, r0
 8007c42:	603a      	str	r2, [r7, #0]
 8007c44:	80fb      	strh	r3, [r7, #6]
 8007c46:	460b      	mov	r3, r1
 8007c48:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8007c52:	88fb      	ldrh	r3, [r7, #6]
 8007c54:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 8007c56:	2300      	movs	r3, #0
 8007c58:	81fb      	strh	r3, [r7, #14]
 8007c5a:	e00e      	b.n	8007c7a <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8007c5c:	88ba      	ldrh	r2, [r7, #4]
 8007c5e:	89fb      	ldrh	r3, [r7, #14]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	3b01      	subs	r3, #1
 8007c64:	683a      	ldr	r2, [r7, #0]
 8007c66:	4413      	add	r3, r2
 8007c68:	89ba      	ldrh	r2, [r7, #12]
 8007c6a:	b2d2      	uxtb	r2, r2
 8007c6c:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8007c6e:	89bb      	ldrh	r3, [r7, #12]
 8007c70:	0a1b      	lsrs	r3, r3, #8
 8007c72:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 8007c74:	89fb      	ldrh	r3, [r7, #14]
 8007c76:	3301      	adds	r3, #1
 8007c78:	81fb      	strh	r3, [r7, #14]
 8007c7a:	89fa      	ldrh	r2, [r7, #14]
 8007c7c:	88bb      	ldrh	r3, [r7, #4]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d3ec      	bcc.n	8007c5c <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 8007c82:	bf00      	nop
 8007c84:	bf00      	nop
 8007c86:	3714      	adds	r7, #20
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	4603      	mov	r3, r0
 8007c98:	6039      	str	r1, [r7, #0]
 8007c9a:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 8007ca0:	e00a      	b.n	8007cb8 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 8007ca2:	89fb      	ldrh	r3, [r7, #14]
 8007ca4:	021b      	lsls	r3, r3, #8
 8007ca6:	b21a      	sxth	r2, r3
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	1c59      	adds	r1, r3, #1
 8007cac:	6039      	str	r1, [r7, #0]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	b21b      	sxth	r3, r3
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	b21b      	sxth	r3, r3
 8007cb6:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 8007cb8:	88fb      	ldrh	r3, [r7, #6]
 8007cba:	1e5a      	subs	r2, r3, #1
 8007cbc:	80fa      	strh	r2, [r7, #6]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1ef      	bne.n	8007ca2 <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 8007cc2:	89fb      	ldrh	r3, [r7, #14]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	603a      	str	r2, [r7, #0]
 8007cda:	80fb      	strh	r3, [r7, #6]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8007ce8:	88fb      	ldrh	r3, [r7, #6]
 8007cea:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 8007cec:	2300      	movs	r3, #0
 8007cee:	81fb      	strh	r3, [r7, #14]
 8007cf0:	e00f      	b.n	8007d12 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8007cf2:	88ba      	ldrh	r2, [r7, #4]
 8007cf4:	89fb      	ldrh	r3, [r7, #14]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	683a      	ldr	r2, [r7, #0]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	89ba      	ldrh	r2, [r7, #12]
 8007d00:	b2d2      	uxtb	r2, r2
 8007d02:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8007d04:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007d08:	121b      	asrs	r3, r3, #8
 8007d0a:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 8007d0c:	89fb      	ldrh	r3, [r7, #14]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	81fb      	strh	r3, [r7, #14]
 8007d12:	89fa      	ldrh	r2, [r7, #14]
 8007d14:	88bb      	ldrh	r3, [r7, #4]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d3eb      	bcc.n	8007cf2 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 8007d1a:	bf00      	nop
 8007d1c:	bf00      	nop
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	4603      	mov	r3, r0
 8007d30:	6039      	str	r1, [r7, #0]
 8007d32:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 8007d34:	2300      	movs	r3, #0
 8007d36:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	b25b      	sxtb	r3, r3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	da0e      	bge.n	8007d60 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 8007d42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007d46:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 8007d48:	e00a      	b.n	8007d60 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 8007d4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d4e:	021b      	lsls	r3, r3, #8
 8007d50:	b21a      	sxth	r2, r3
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	1c59      	adds	r1, r3, #1
 8007d56:	6039      	str	r1, [r7, #0]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	b21b      	sxth	r3, r3
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 8007d60:	88fb      	ldrh	r3, [r7, #6]
 8007d62:	1e5a      	subs	r2, r3, #1
 8007d64:	80fa      	strh	r2, [r7, #6]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1ef      	bne.n	8007d4a <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 8007d6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b087      	sub	sp, #28
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	60f8      	str	r0, [r7, #12]
 8007d82:	460b      	mov	r3, r1
 8007d84:	607a      	str	r2, [r7, #4]
 8007d86:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 8007d94:	2300      	movs	r3, #0
 8007d96:	82fb      	strh	r3, [r7, #22]
 8007d98:	e00e      	b.n	8007db8 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8007d9a:	897a      	ldrh	r2, [r7, #10]
 8007d9c:	8afb      	ldrh	r3, [r7, #22]
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	3b01      	subs	r3, #1
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	4413      	add	r3, r2
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	b2d2      	uxtb	r2, r2
 8007daa:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	0a1b      	lsrs	r3, r3, #8
 8007db0:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 8007db2:	8afb      	ldrh	r3, [r7, #22]
 8007db4:	3301      	adds	r3, #1
 8007db6:	82fb      	strh	r3, [r7, #22]
 8007db8:	8afa      	ldrh	r2, [r7, #22]
 8007dba:	897b      	ldrh	r3, [r7, #10]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d3ec      	bcc.n	8007d9a <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 8007dc0:	bf00      	nop
 8007dc2:	bf00      	nop
 8007dc4:	371c      	adds	r7, #28
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b085      	sub	sp, #20
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	6039      	str	r1, [r7, #0]
 8007dd8:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 8007dde:	e007      	b.n	8007df0 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	021a      	lsls	r2, r3, #8
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	1c59      	adds	r1, r3, #1
 8007de8:	6039      	str	r1, [r7, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 8007df0:	88fb      	ldrh	r3, [r7, #6]
 8007df2:	1e5a      	subs	r2, r3, #1
 8007df4:	80fa      	strh	r2, [r7, #6]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1f2      	bne.n	8007de0 <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3714      	adds	r7, #20
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	4603      	mov	r3, r0
 8007e10:	6039      	str	r1, [r7, #0]
 8007e12:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 8007e14:	2300      	movs	r3, #0
 8007e16:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	b25b      	sxtb	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	da0b      	bge.n	8007e3a <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 8007e22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e26:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 8007e28:	e007      	b.n	8007e3a <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	021a      	lsls	r2, r3, #8
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	1c59      	adds	r1, r3, #1
 8007e32:	6039      	str	r1, [r7, #0]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 8007e3a:	88fb      	ldrh	r3, [r7, #6]
 8007e3c:	1e5a      	subs	r2, r3, #1
 8007e3e:	80fa      	strh	r2, [r7, #6]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1f2      	bne.n	8007e2a <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 8007e44:	68fb      	ldr	r3, [r7, #12]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b084      	sub	sp, #16
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set power force register
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	78fa      	ldrb	r2, [r7, #3]
 8007e6a:	f883 21c8 	strb.w	r2, [r3, #456]	@ 0x1c8

	status = VL53L1_WrByte(
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	f893 31c8 	ldrb.w	r3, [r3, #456]	@ 0x1c8
 8007e74:	461a      	mov	r2, r3
 8007e76:	2183      	movs	r1, #131	@ 0x83
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f001 fd7d 	bl	8009978 <VL53L1_WrByte>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 8007e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b084      	sub	sp, #16
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
	/*
	 * Enable power force
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8007e96:	2300      	movs	r3, #0
 8007e98:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 8007e9a:	2101      	movs	r1, #1
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f7ff ffd8 	bl	8007e52 <VL53L1_set_powerforce_register>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8007ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b086      	sub	sp, #24
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	4603      	mov	r3, r0
 8007eba:	460a      	mov	r2, r1
 8007ebc:	80fb      	strh	r3, [r7, #6]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 8007ece:	88fb      	ldrh	r3, [r7, #6]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 faa7 	bl	8008424 <VL53L1_calc_pll_period_us>
 8007ed6:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 8007ed8:	797b      	ldrb	r3, [r7, #5]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f000 fab6 	bl	800844c <VL53L1_decode_vcsel_period>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	00db      	lsls	r3, r3, #3
 8007eea:	4413      	add	r3, r2
 8007eec:	021b      	lsls	r3, r3, #8
 8007eee:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	099b      	lsrs	r3, r3, #6
 8007ef4:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 8007ef6:	7cfa      	ldrb	r2, [r7, #19]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	fb02 f303 	mul.w	r3, r2, r3
 8007efe:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	099b      	lsrs	r3, r3, #6
 8007f04:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 8007f06:	68fb      	ldr	r3, [r7, #12]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3718      	adds	r7, #24
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b089      	sub	sp, #36	@ 0x24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	4608      	mov	r0, r1
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	4603      	mov	r3, r0
 8007f20:	817b      	strh	r3, [r7, #10]
 8007f22:	460b      	mov	r3, r1
 8007f24:	813b      	strh	r3, [r7, #8]
 8007f26:	4613      	mov	r3, r2
 8007f28:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 8007f32:	2300      	movs	r3, #0
 8007f34:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 8007f36:	2300      	movs	r3, #0
 8007f38:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	011b      	lsls	r3, r3, #4
 8007f42:	4a23      	ldr	r2, [pc, #140]	@ (8007fd0 <VL53L1_calc_range_ignore_threshold+0xc0>)
 8007f44:	fb82 1203 	smull	r1, r2, r2, r3
 8007f48:	1192      	asrs	r2, r2, #6
 8007f4a:	17db      	asrs	r3, r3, #31
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 8007f50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	da03      	bge.n	8007f60 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8007f58:	897b      	ldrh	r3, [r7, #10]
 8007f5a:	425b      	negs	r3, r3
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 8007f60:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	da03      	bge.n	8007f70 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8007f68:	893b      	ldrh	r3, [r7, #8]
 8007f6a:	425b      	negs	r3, r3
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 8007f70:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8007f74:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007f78:	4413      	add	r3, r2
 8007f7a:	015b      	lsls	r3, r3, #5
 8007f7c:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	4a13      	ldr	r2, [pc, #76]	@ (8007fd0 <VL53L1_calc_range_ignore_threshold+0xc0>)
 8007f82:	fb82 1203 	smull	r1, r2, r2, r3
 8007f86:	1192      	asrs	r2, r2, #6
 8007f88:	17db      	asrs	r3, r3, #31
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	4413      	add	r3, r2
 8007f94:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8007f96:	79fa      	ldrb	r2, [r7, #7]
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	fb02 f303 	mul.w	r3, r2, r3
 8007f9e:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	3310      	adds	r3, #16
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	da00      	bge.n	8007faa <VL53L1_calc_range_ignore_threshold+0x9a>
 8007fa8:	331f      	adds	r3, #31
 8007faa:	115b      	asrs	r3, r3, #5
 8007fac:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fb4:	db03      	blt.n	8007fbe <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 8007fb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007fba:	83fb      	strh	r3, [r7, #30]
 8007fbc:	e001      	b.n	8007fc2 <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8007fc2:	8bfb      	ldrh	r3, [r7, #30]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3724      	adds	r7, #36	@ 0x24
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	10624dd3 	.word	0x10624dd3

08007fd4 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	031a      	lsls	r2, r3, #12
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	085b      	lsrs	r3, r3, #1
 8007fea:	441a      	add	r2, r3
	timeout_mclks   =
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff2:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b084      	sub	sp, #16
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800800c:	2300      	movs	r3, #0
 800800e:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8008010:	2300      	movs	r3, #0
 8008012:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7ff ffdc 	bl	8007fd4 <VL53L1_calc_timeout_mclks>
 800801c:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f000 f860 	bl	80080e4 <VL53L1_encode_timeout>
 8008024:	4603      	mov	r3, r0
 8008026:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 8008028:	897b      	ldrh	r3, [r7, #10]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 8008032:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008036:	b087      	sub	sp, #28
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 800803e:	2100      	movs	r1, #0
 8008040:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 8008042:	f04f 0000 	mov.w	r0, #0
 8008046:	f04f 0100 	mov.w	r1, #0
 800804a:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800804e:	6879      	ldr	r1, [r7, #4]
 8008050:	2000      	movs	r0, #0
 8008052:	4688      	mov	r8, r1
 8008054:	4681      	mov	r9, r0
 8008056:	6839      	ldr	r1, [r7, #0]
 8008058:	2000      	movs	r0, #0
 800805a:	460c      	mov	r4, r1
 800805c:	4605      	mov	r5, r0
 800805e:	fb04 f009 	mul.w	r0, r4, r9
 8008062:	fb08 f105 	mul.w	r1, r8, r5
 8008066:	4401      	add	r1, r0
 8008068:	fba8 2304 	umull	r2, r3, r8, r4
 800806c:	4419      	add	r1, r3
 800806e:	460b      	mov	r3, r1
 8008070:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008074:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 8008078:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800807c:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 8008080:	f143 0b00 	adc.w	fp, r3, #0
 8008084:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 8008088:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800808c:	f04f 0200 	mov.w	r2, #0
 8008090:	f04f 0300 	mov.w	r3, #0
 8008094:	0b02      	lsrs	r2, r0, #12
 8008096:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800809a:	0b0b      	lsrs	r3, r1, #12
 800809c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 80080a4:	697b      	ldr	r3, [r7, #20]
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	371c      	adds	r7, #28
 80080aa:	46bd      	mov	sp, r7
 80080ac:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80080b0:	4770      	bx	lr

080080b2 <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b084      	sub	sp, #16
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	4603      	mov	r3, r0
 80080ba:	6039      	str	r1, [r7, #0]
 80080bc:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 80080be:	2300      	movs	r3, #0
 80080c0:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 80080c2:	2300      	movs	r3, #0
 80080c4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 80080c6:	88fb      	ldrh	r3, [r7, #6]
 80080c8:	4618      	mov	r0, r3
 80080ca:	f000 f835 	bl	8008138 <VL53L1_decode_timeout>
 80080ce:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 80080d0:	6839      	ldr	r1, [r7, #0]
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f7ff ffad 	bl	8008032 <VL53L1_calc_timeout_us>
 80080d8:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 80080da:	68bb      	ldr	r3, [r7, #8]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b087      	sub	sp, #28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 80080ec:	2300      	movs	r3, #0
 80080ee:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 80080f0:	2300      	movs	r3, #0
 80080f2:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 80080f4:	2300      	movs	r3, #0
 80080f6:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d015      	beq.n	800812a <VL53L1_encode_timeout+0x46>
		ls_byte = timeout_mclks - 1;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	3b01      	subs	r3, #1
 8008102:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008104:	e005      	b.n	8008112 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	085b      	lsrs	r3, r3, #1
 800810a:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800810c:	89fb      	ldrh	r3, [r7, #14]
 800810e:	3301      	adds	r3, #1
 8008110:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	2bff      	cmp	r3, #255	@ 0xff
 8008116:	d8f6      	bhi.n	8008106 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8008118:	89fb      	ldrh	r3, [r7, #14]
 800811a:	021b      	lsls	r3, r3, #8
 800811c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	b29b      	uxth	r3, r3
 8008122:	b2db      	uxtb	r3, r3
 8008124:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8008126:	4413      	add	r3, r2
 8008128:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800812a:	8afb      	ldrh	r3, [r7, #22]
}
 800812c:	4618      	mov	r0, r3
 800812e:	371c      	adds	r7, #28
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	4603      	mov	r3, r0
 8008140:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008146:	88fb      	ldrh	r3, [r7, #6]
 8008148:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800814a:	88fa      	ldrh	r2, [r7, #6]
 800814c:	0a12      	lsrs	r2, r2, #8
 800814e:	b292      	uxth	r2, r2
 8008150:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008152:	3301      	adds	r3, #1
 8008154:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8008156:	68fb      	ldr	r3, [r7, #12]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3714      	adds	r7, #20
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b088      	sub	sp, #32
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
 8008170:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008172:	2300      	movs	r3, #0
 8008174:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 8008176:	2300      	movs	r3, #0
 8008178:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800817a:	2300      	movs	r3, #0
 800817c:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800817e:	2300      	movs	r3, #0
 8008180:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8008182:	887b      	ldrh	r3, [r7, #2]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d102      	bne.n	800818e <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8008188:	23f1      	movs	r3, #241	@ 0xf1
 800818a:	77fb      	strb	r3, [r7, #31]
 800818c:	e05d      	b.n	800824a <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800818e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008190:	799a      	ldrb	r2, [r3, #6]
 8008192:	887b      	ldrh	r3, [r7, #2]
 8008194:	4611      	mov	r1, r2
 8008196:	4618      	mov	r0, r3
 8008198:	f7ff fe8b 	bl	8007eb2 <VL53L1_calc_macro_period_us>
 800819c:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800819e:	6979      	ldr	r1, [r7, #20]
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f7ff ff17 	bl	8007fd4 <VL53L1_calc_timeout_mclks>
 80081a6:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	2bff      	cmp	r3, #255	@ 0xff
 80081ac:	d901      	bls.n	80081b2 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 80081ae:	23ff      	movs	r3, #255	@ 0xff
 80081b0:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 80081b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b8:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 80081ba:	6979      	ldr	r1, [r7, #20]
 80081bc:	68b8      	ldr	r0, [r7, #8]
 80081be:	f7ff ff20 	bl	8008002 <VL53L1_calc_encoded_timeout>
 80081c2:	4603      	mov	r3, r0
 80081c4:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80081c6:	8a7b      	ldrh	r3, [r7, #18]
 80081c8:	0a1b      	lsrs	r3, r3, #8
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 80081ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d0:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80081d2:	8a7b      	ldrh	r3, [r7, #18]
 80081d4:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 80081d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d8:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 80081da:	6979      	ldr	r1, [r7, #20]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7ff ff10 	bl	8008002 <VL53L1_calc_encoded_timeout>
 80081e2:	4603      	mov	r3, r0
 80081e4:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80081e6:	8a7b      	ldrh	r3, [r7, #18]
 80081e8:	0a1b      	lsrs	r3, r3, #8
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 80081ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f0:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80081f2:	8a7b      	ldrh	r3, [r7, #18]
 80081f4:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 80081f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f8:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 80081fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081fc:	7a5a      	ldrb	r2, [r3, #9]
 80081fe:	887b      	ldrh	r3, [r7, #2]
 8008200:	4611      	mov	r1, r2
 8008202:	4618      	mov	r0, r3
 8008204:	f7ff fe55 	bl	8007eb2 <VL53L1_calc_macro_period_us>
 8008208:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800820a:	6979      	ldr	r1, [r7, #20]
 800820c:	68b8      	ldr	r0, [r7, #8]
 800820e:	f7ff fef8 	bl	8008002 <VL53L1_calc_encoded_timeout>
 8008212:	4603      	mov	r3, r0
 8008214:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008216:	8a7b      	ldrh	r3, [r7, #18]
 8008218:	0a1b      	lsrs	r3, r3, #8
 800821a:	b29b      	uxth	r3, r3
 800821c:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800821e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008220:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008222:	8a7b      	ldrh	r3, [r7, #18]
 8008224:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 8008226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008228:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 800822a:	6979      	ldr	r1, [r7, #20]
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f7ff fee8 	bl	8008002 <VL53L1_calc_encoded_timeout>
 8008232:	4603      	mov	r3, r0
 8008234:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008236:	8a7b      	ldrh	r3, [r7, #18]
 8008238:	0a1b      	lsrs	r3, r3, #8
 800823a:	b29b      	uxth	r3, r3
 800823c:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800823e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008240:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008242:	8a7b      	ldrh	r3, [r7, #18]
 8008244:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 8008246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008248:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800824a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800824e:	4618      	mov	r0, r3
 8008250:	3720      	adds	r7, #32
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 8008256:	b480      	push	{r7}
 8008258:	b083      	sub	sp, #12
 800825a:	af00      	add	r7, sp, #0
 800825c:	4603      	mov	r3, r0
 800825e:	603a      	str	r2, [r7, #0]
 8008260:	71fb      	strb	r3, [r7, #7]
 8008262:	460b      	mov	r3, r1
 8008264:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 8008266:	79fb      	ldrb	r3, [r7, #7]
 8008268:	2b07      	cmp	r3, #7
 800826a:	d90a      	bls.n	8008282 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800826c:	79bb      	ldrb	r3, [r7, #6]
 800826e:	00db      	lsls	r3, r3, #3
 8008270:	b2da      	uxtb	r2, r3
 8008272:	79fb      	ldrb	r3, [r7, #7]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	b2db      	uxtb	r3, r3
 8008278:	3b71      	subs	r3, #113	@ 0x71
 800827a:	b2da      	uxtb	r2, r3
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 8008280:	e00a      	b.n	8008298 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 8008282:	79bb      	ldrb	r3, [r7, #6]
 8008284:	f1c3 030f 	rsb	r3, r3, #15
 8008288:	b2db      	uxtb	r3, r3
 800828a:	00db      	lsls	r3, r3, #3
 800828c:	b2da      	uxtb	r2, r3
 800828e:	79fb      	ldrb	r3, [r7, #7]
 8008290:	4413      	add	r3, r2
 8008292:	b2da      	uxtb	r2, r3
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	701a      	strb	r2, [r3, #0]
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	4603      	mov	r3, r0
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]
 80082b0:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 80082b2:	7bfb      	ldrb	r3, [r7, #15]
 80082b4:	091b      	lsrs	r3, r3, #4
 80082b6:	b2da      	uxtb	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
 80082be:	f003 030f 	and.w	r3, r3, #15
 80082c2:	b2da      	uxtb	r2, r3
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	701a      	strb	r2, [r3, #0]

}
 80082c8:	bf00      	nop
 80082ca:	3714      	adds	r7, #20
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	4603      	mov	r3, r0
 80082dc:	603a      	str	r2, [r7, #0]
 80082de:	71fb      	strb	r3, [r7, #7]
 80082e0:	460b      	mov	r3, r1
 80082e2:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 80082e4:	79bb      	ldrb	r3, [r7, #6]
 80082e6:	011b      	lsls	r3, r3, #4
 80082e8:	b2da      	uxtb	r2, r3
 80082ea:	79fb      	ldrb	r3, [r7, #7]
 80082ec:	4413      	add	r3, r2
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	701a      	strb	r2, [r3, #0]

}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008308:	2300      	movs	r3, #0
 800830a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	2203      	movs	r2, #3
 8008314:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	2200      	movs	r2, #0
 8008324:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2200      	movs	r2, #0
 800832c:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2200      	movs	r2, #0
 800833c:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	2200      	movs	r2, #0
 800834c:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2200      	movs	r2, #0
 8008354:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 8008358:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3714      	adds	r7, #20
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 8008368:	b480      	push	{r7}
 800836a:	b087      	sub	sp, #28
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008374:	2300      	movs	r3, #0
 8008376:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	229b      	movs	r2, #155	@ 0x9b
 8008388:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800838a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800838e:	4618      	mov	r0, r3
 8008390:	371c      	adds	r7, #28
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr

0800839a <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800839a:	b480      	push	{r7}
 800839c:	b085      	sub	sp, #20
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80083a6:	2300      	movs	r3, #0
 80083a8:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f893 2163 	ldrb.w	r2, [r3, #355]	@ 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f893 2160 	ldrb.w	r2, [r3, #352]	@ 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f893 3163 	ldrb.w	r3, [r3, #355]	@ 0x163
 80083c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083cc:	b2da      	uxtb	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 80083da:	f003 0303 	and.w	r3, r3, #3
 80083de:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 80083ea:	4413      	add	r3, r2
 80083ec:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 218d 	strb.w	r2, [r3, #397]	@ 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f893 22ae 	ldrb.w	r2, [r3, #686]	@ 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f893 22ea 	ldrb.w	r2, [r3, #746]	@ 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f883 2187 	strb.w	r2, [r3, #391]	@ 0x187

	LOG_FUNCTION_END(status);

	return status;
 8008414:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3714      	adds	r7, #20
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	4603      	mov	r3, r0
 800842c:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 800842e:	2300      	movs	r3, #0
 8008430:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8008432:	88fb      	ldrh	r3, [r7, #6]
 8008434:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008438:	fb92 f3f3 	sdiv	r3, r2, r3
 800843c:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 800843e:	68fb      	ldr	r3, [r7, #12]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3714      	adds	r7, #20
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	4603      	mov	r3, r0
 8008454:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8008456:	2300      	movs	r3, #0
 8008458:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800845a:	79fb      	ldrb	r3, [r7, #7]
 800845c:	3301      	adds	r3, #1
 800845e:	b2db      	uxtb	r3, r3
 8008460:	005b      	lsls	r3, r3, #1
 8008462:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8008464:	7bfb      	ldrb	r3, [r7, #15]
}
 8008466:	4618      	mov	r0, r3
 8008468:	3714      	adds	r7, #20
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 8008472:	b480      	push	{r7}
 8008474:	b085      	sub	sp, #20
 8008476:	af00      	add	r7, sp, #0
 8008478:	4603      	mov	r3, r0
 800847a:	60b9      	str	r1, [r7, #8]
 800847c:	607a      	str	r2, [r7, #4]
 800847e:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 8008480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008484:	2b00      	cmp	r3, #0
 8008486:	da10      	bge.n	80084aa <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 8008488:	7bfb      	ldrb	r3, [r7, #15]
 800848a:	43db      	mvns	r3, r3
 800848c:	b2db      	uxtb	r3, r3
 800848e:	f003 0307 	and.w	r3, r3, #7
 8008492:	b2db      	uxtb	r3, r3
 8008494:	3308      	adds	r3, #8
 8008496:	b2da      	uxtb	r2, r3
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800849c:	7bfb      	ldrb	r3, [r7, #15]
 800849e:	3b80      	subs	r3, #128	@ 0x80
 80084a0:	10db      	asrs	r3, r3, #3
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 80084a8:	e00c      	b.n	80084c4 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 80084aa:	7bfb      	ldrb	r3, [r7, #15]
 80084ac:	f003 0307 	and.w	r3, r3, #7
 80084b0:	b2da      	uxtb	r2, r3
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 80084b6:	7bfb      	ldrb	r3, [r7, #15]
 80084b8:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80084bc:	10db      	asrs	r3, r3, #3
 80084be:	b2da      	uxtb	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	701a      	strb	r2, [r3, #0]
}
 80084c4:	bf00      	nop
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	460b      	mov	r3, r1
 80084da:	607a      	str	r2, [r7, #4]
 80084dc:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80084de:	2300      	movs	r3, #0
 80084e0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80084e2:	897b      	ldrh	r3, [r7, #10]
 80084e4:	2b0a      	cmp	r3, #10
 80084e6:	d802      	bhi.n	80084ee <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80084e8:	f06f 0309 	mvn.w	r3, #9
 80084ec:	e047      	b.n	800857e <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084f6:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8008504:	f002 020f 	and.w	r2, r2, #15
 8008508:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800850a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8008514:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008518:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800851a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8008524:	f002 0203 	and.w	r2, r2, #3
 8008528:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800852a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 8008534:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008538:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800853a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	88d8      	ldrh	r0, [r3, #6]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	3305      	adds	r3, #5
 8008544:	461a      	mov	r2, r3
 8008546:	2102      	movs	r1, #2
 8008548:	f7ff fb77 	bl	8007c3a <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8008554:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800855e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 8008568:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800856c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800856e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 8008578:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800857a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3718      	adds	r7, #24
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b086      	sub	sp, #24
 800858a:	af00      	add	r7, sp, #0
 800858c:	4603      	mov	r3, r0
 800858e:	60b9      	str	r1, [r7, #8]
 8008590:	607a      	str	r2, [r7, #4]
 8008592:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008594:	2300      	movs	r3, #0
 8008596:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8008598:	89fb      	ldrh	r3, [r7, #14]
 800859a:	2b0a      	cmp	r3, #10
 800859c:	d802      	bhi.n	80085a4 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800859e:	f06f 0309 	mvn.w	r3, #9
 80085a2:	e046      	b.n	8008632 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085ac:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	3301      	adds	r3, #1
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	f003 030f 	and.w	r3, r3, #15
 80085bc:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	3302      	adds	r3, #2
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085cc:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	3303      	adds	r3, #3
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	f003 0303 	and.w	r3, r3, #3
 80085dc:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	3304      	adds	r3, #4
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085ec:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	3305      	adds	r3, #5
 80085f6:	4619      	mov	r1, r3
 80085f8:	2002      	movs	r0, #2
 80085fa:	f7ff fb49 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 80085fe:	4603      	mov	r3, r0
 8008600:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	79da      	ldrb	r2, [r3, #7]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	7a1a      	ldrb	r2, [r3, #8]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	3309      	adds	r3, #9
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008620:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	7a9a      	ldrb	r2, [r3, #10]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800862e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3718      	adds	r7, #24
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b086      	sub	sp, #24
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008644:	2300      	movs	r3, #0
 8008646:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8008648:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d108      	bne.n	8008662 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8008650:	f107 020c 	add.w	r2, r7, #12
 8008654:	230b      	movs	r3, #11
 8008656:	2101      	movs	r1, #1
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f001 f957 	bl	800990c <VL53L1_ReadMulti>
 800865e:	4603      	mov	r3, r0
 8008660:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8008662:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d108      	bne.n	800867c <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 800866a:	f107 030c 	add.w	r3, r7, #12
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	4619      	mov	r1, r3
 8008672:	200b      	movs	r0, #11
 8008674:	f7ff ff87 	bl	8008586 <VL53L1_i2c_decode_static_nvm_managed>
 8008678:	4603      	mov	r3, r0
 800867a:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800867c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3718      	adds	r7, #24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	460b      	mov	r3, r1
 8008692:	607a      	str	r2, [r7, #4]
 8008694:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008696:	2300      	movs	r3, #0
 8008698:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800869a:	897b      	ldrh	r3, [r7, #10]
 800869c:	2b16      	cmp	r3, #22
 800869e:	d802      	bhi.n	80086a6 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80086a0:	f06f 0309 	mvn.w	r3, #9
 80086a4:	e076      	b.n	8008794 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80086b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 80086c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 80086ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 80086d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80086de:	f002 020f 	and.w	r2, r2, #15
 80086e2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80086e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 80086ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 80086f8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80086fc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80086fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8008708:	f002 0203 	and.w	r2, r2, #3
 800870c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800870e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	8958      	ldrh	r0, [r3, #10]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	3309      	adds	r3, #9
 8008718:	461a      	mov	r2, r3
 800871a:	2102      	movs	r1, #2
 800871c:	f7ff fa8d 	bl	8007c3a <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	330b      	adds	r3, #11
 800872a:	461a      	mov	r2, r3
 800872c:	2102      	movs	r1, #2
 800872e:	f7ff facf 	bl	8007cd0 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	330d      	adds	r3, #13
 800873c:	461a      	mov	r2, r3
 800873e:	2102      	movs	r1, #2
 8008740:	f7ff fac6 	bl	8007cd0 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	8a18      	ldrh	r0, [r3, #16]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	330f      	adds	r3, #15
 800874c:	461a      	mov	r2, r3
 800874e:	2102      	movs	r1, #2
 8008750:	f7ff fa73 	bl	8007c3a <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 800875a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800875e:	b218      	sxth	r0, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	3311      	adds	r3, #17
 8008764:	461a      	mov	r2, r3
 8008766:	2102      	movs	r1, #2
 8008768:	f7ff fab2 	bl	8007cd0 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	3313      	adds	r3, #19
 8008776:	461a      	mov	r2, r3
 8008778:	2102      	movs	r1, #2
 800877a:	f7ff faa9 	bl	8007cd0 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	3315      	adds	r3, #21
 8008788:	461a      	mov	r2, r3
 800878a:	2102      	movs	r1, #2
 800878c:	f7ff faa0 	bl	8007cd0 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8008790:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3718      	adds	r7, #24
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b086      	sub	sp, #24
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	4603      	mov	r3, r0
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
 80087a8:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80087aa:	2300      	movs	r3, #0
 80087ac:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80087ae:	89fb      	ldrh	r3, [r7, #14]
 80087b0:	2b16      	cmp	r3, #22
 80087b2:	d802      	bhi.n	80087ba <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80087b4:	f06f 0309 	mvn.w	r3, #9
 80087b8:	e079      	b.n	80088ae <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	785a      	ldrb	r2, [r3, #1]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	789a      	ldrb	r2, [r3, #2]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	78da      	ldrb	r2, [r3, #3]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	791a      	ldrb	r2, [r3, #4]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	3305      	adds	r3, #5
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	f003 030f 	and.w	r3, r3, #15
 80087ec:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	799a      	ldrb	r2, [r3, #6]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	3307      	adds	r3, #7
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008804:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	3308      	adds	r3, #8
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	f003 0303 	and.w	r3, r3, #3
 8008814:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	3309      	adds	r3, #9
 800881e:	4619      	mov	r1, r3
 8008820:	2002      	movs	r0, #2
 8008822:	f7ff fa35 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 8008826:	4603      	mov	r3, r0
 8008828:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	330b      	adds	r3, #11
 8008832:	4619      	mov	r1, r3
 8008834:	2002      	movs	r0, #2
 8008836:	f7ff fa77 	bl	8007d28 <VL53L1_i2c_decode_int16_t>
 800883a:	4603      	mov	r3, r0
 800883c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	330d      	adds	r3, #13
 8008846:	4619      	mov	r1, r3
 8008848:	2002      	movs	r0, #2
 800884a:	f7ff fa6d 	bl	8007d28 <VL53L1_i2c_decode_int16_t>
 800884e:	4603      	mov	r3, r0
 8008850:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	330f      	adds	r3, #15
 800885a:	4619      	mov	r1, r3
 800885c:	2002      	movs	r0, #2
 800885e:	f7ff fa17 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 8008862:	4603      	mov	r3, r0
 8008864:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	3311      	adds	r3, #17
 800886e:	4619      	mov	r1, r3
 8008870:	2002      	movs	r0, #2
 8008872:	f7ff fa59 	bl	8007d28 <VL53L1_i2c_decode_int16_t>
 8008876:	4603      	mov	r3, r0
 8008878:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800887c:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	3313      	adds	r3, #19
 8008886:	4619      	mov	r1, r3
 8008888:	2002      	movs	r0, #2
 800888a:	f7ff fa4d 	bl	8007d28 <VL53L1_i2c_decode_int16_t>
 800888e:	4603      	mov	r3, r0
 8008890:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	3315      	adds	r3, #21
 800889a:	4619      	mov	r1, r3
 800889c:	2002      	movs	r0, #2
 800889e:	f7ff fa43 	bl	8007d28 <VL53L1_i2c_decode_int16_t>
 80088a2:	4603      	mov	r3, r0
 80088a4:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 80088aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3718      	adds	r7, #24
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b088      	sub	sp, #32
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80088c0:	2300      	movs	r3, #0
 80088c2:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80088c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d108      	bne.n	80088de <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 80088cc:	f107 0208 	add.w	r2, r7, #8
 80088d0:	2317      	movs	r3, #23
 80088d2:	210d      	movs	r1, #13
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f001 f819 	bl	800990c <VL53L1_ReadMulti>
 80088da:	4603      	mov	r3, r0
 80088dc:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80088de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d108      	bne.n	80088f8 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 80088e6:	f107 0308 	add.w	r3, r7, #8
 80088ea:	683a      	ldr	r2, [r7, #0]
 80088ec:	4619      	mov	r1, r3
 80088ee:	2017      	movs	r0, #23
 80088f0:	f7ff ff54 	bl	800879c <VL53L1_i2c_decode_customer_nvm_managed>
 80088f4:	4603      	mov	r3, r0
 80088f6:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80088f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3720      	adds	r7, #32
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	460b      	mov	r3, r1
 800890e:	607a      	str	r2, [r7, #4]
 8008910:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008912:	2300      	movs	r3, #0
 8008914:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8008916:	897b      	ldrh	r3, [r7, #10]
 8008918:	2b1f      	cmp	r3, #31
 800891a:	d802      	bhi.n	8008922 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800891c:	f06f 0309 	mvn.w	r3, #9
 8008920:	e0cf      	b.n	8008ac2 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	881b      	ldrh	r3, [r3, #0]
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	2102      	movs	r1, #2
 800892a:	4618      	mov	r0, r3
 800892c:	f7ff f985 	bl	8007c3a <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 8008938:	f002 0201 	and.w	r2, r2, #1
 800893c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800893e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8008948:	f002 020f 	and.w	r2, r2, #15
 800894c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800894e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 8008958:	f002 020f 	and.w	r2, r2, #15
 800895c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800895e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 8008968:	f002 021f 	and.w	r2, r2, #31
 800896c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800896e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8008978:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800897c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800897e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 8008988:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800898c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800898e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 8008998:	f002 0201 	and.w	r2, r2, #1
 800899c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800899e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 80089a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80089b2:	f002 0201 	and.w	r2, r2, #1
 80089b6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80089b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 80089c2:	f002 0203 	and.w	r2, r2, #3
 80089c6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80089c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80089d2:	f002 021f 	and.w	r2, r2, #31
 80089d6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 80089d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 80089e2:	f002 0203 	and.w	r2, r2, #3
 80089e6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 80089e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 80089f2:	f002 0203 	and.w	r2, r2, #3
 80089f6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 80089f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8008a02:	f002 0207 	and.w	r2, r2, #7
 8008a06:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8008a08:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8008a12:	f002 021f 	and.w	r2, r2, #31
 8008a16:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8008a18:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8008a22:	f002 0201 	and.w	r2, r2, #1
 8008a26:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8008a28:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8008a32:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8008a3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8008a46:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8008a50:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8008a5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 8008a64:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	8b18      	ldrh	r0, [r3, #24]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	3318      	adds	r3, #24
 8008a6e:	461a      	mov	r2, r3
 8008a70:	2102      	movs	r1, #2
 8008a72:	f7ff f8e2 	bl	8007c3a <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8008a7e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 8008a88:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 8008a92:	f002 020f 	and.w	r2, r2, #15
 8008a96:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 8008a98:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 8008aa2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 8008aac:	f002 020f 	and.w	r2, r2, #15
 8008ab0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 8008ab2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 8008abc:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8008abe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3718      	adds	r7, #24
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b086      	sub	sp, #24
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	60f8      	str	r0, [r7, #12]
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	607a      	str	r2, [r7, #4]
 8008ad6:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 8008adc:	897b      	ldrh	r3, [r7, #10]
 8008ade:	2b15      	cmp	r3, #21
 8008ae0:	d802      	bhi.n	8008ae8 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8008ae2:	f06f 0309 	mvn.w	r3, #9
 8008ae6:	e070      	b.n	8008bca <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8008af8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8008b02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8008b0c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008b10:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8008b12:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8008b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b1c:	b298      	uxth	r0, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	3304      	adds	r3, #4
 8008b22:	461a      	mov	r2, r3
 8008b24:	2102      	movs	r1, #2
 8008b26:	f7ff f888 	bl	8007c3a <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8008b32:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008b36:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8008b38:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8008b42:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8008b4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8008b56:	f002 0201 	and.w	r2, r2, #1
 8008b5a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8008b5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8008b66:	f002 0207 	and.w	r2, r2, #7
 8008b6a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8008b6c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	8998      	ldrh	r0, [r3, #12]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	330c      	adds	r3, #12
 8008b76:	461a      	mov	r2, r3
 8008b78:	2102      	movs	r1, #2
 8008b7a:	f7ff f85e 	bl	8007c3a <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	89d8      	ldrh	r0, [r3, #14]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	330e      	adds	r3, #14
 8008b86:	461a      	mov	r2, r3
 8008b88:	2102      	movs	r1, #2
 8008b8a:	f7ff f856 	bl	8007c3a <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	8a18      	ldrh	r0, [r3, #16]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	3310      	adds	r3, #16
 8008b96:	461a      	mov	r2, r3
 8008b98:	2102      	movs	r1, #2
 8008b9a:	f7ff f84e 	bl	8007c3a <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8008ba6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8008bb0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8008bba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8008bc4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8008bc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3718      	adds	r7, #24
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b086      	sub	sp, #24
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	60f8      	str	r0, [r7, #12]
 8008bda:	460b      	mov	r3, r1
 8008bdc:	607a      	str	r2, [r7, #4]
 8008bde:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008be0:	2300      	movs	r3, #0
 8008be2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 8008be4:	897b      	ldrh	r3, [r7, #10]
 8008be6:	2b16      	cmp	r3, #22
 8008be8:	d802      	bhi.n	8008bf0 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8008bea:	f06f 0309 	mvn.w	r3, #9
 8008bee:	e06e      	b.n	8008cce <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	f003 030f 	and.w	r3, r3, #15
 8008bf8:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8008c06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8008c10:	f002 020f 	and.w	r2, r2, #15
 8008c14:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8008c16:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8008c20:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8008c2a:	f002 020f 	and.w	r2, r2, #15
 8008c2e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8008c30:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8008c3a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8008c44:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008c48:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8008c4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8008c54:	f002 020f 	and.w	r2, r2, #15
 8008c58:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8008c5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8008c64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8008c6e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008c72:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8008c74:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	8958      	ldrh	r0, [r3, #10]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	330a      	adds	r3, #10
 8008c7e:	461a      	mov	r2, r3
 8008c80:	2102      	movs	r1, #2
 8008c82:	f7fe ffda 	bl	8007c3a <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	8998      	ldrh	r0, [r3, #12]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	330c      	adds	r3, #12
 8008c8e:	461a      	mov	r2, r3
 8008c90:	2102      	movs	r1, #2
 8008c92:	f7fe ffd2 	bl	8007c3a <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8008c9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8008ca8:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6918      	ldr	r0, [r3, #16]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	3312      	adds	r3, #18
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	2104      	movs	r1, #4
 8008cb6:	f7ff f860 	bl	8007d7a <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8008cc2:	f002 0201 	and.w	r2, r2, #1
 8008cc6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8008cc8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8008cca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3718      	adds	r7, #24
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b086      	sub	sp, #24
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	60f8      	str	r0, [r7, #12]
 8008cde:	460b      	mov	r3, r1
 8008ce0:	607a      	str	r2, [r7, #4]
 8008ce2:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8008ce8:	897b      	ldrh	r3, [r7, #10]
 8008cea:	2b11      	cmp	r3, #17
 8008cec:	d802      	bhi.n	8008cf4 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8008cee:	f06f 0309 	mvn.w	r3, #9
 8008cf2:	e071      	b.n	8008dd8 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	f003 0303 	and.w	r3, r3, #3
 8008cfc:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	8858      	ldrh	r0, [r3, #2]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	2102      	movs	r1, #2
 8008d0e:	f7fe ff94 	bl	8007c3a <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	8898      	ldrh	r0, [r3, #4]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	3303      	adds	r3, #3
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	2102      	movs	r1, #2
 8008d1e:	f7fe ff8c 	bl	8007c3a <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8008d2a:	f002 0201 	and.w	r2, r2, #1
 8008d2e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8008d30:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8008d3a:	f002 0207 	and.w	r2, r2, #7
 8008d3e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8008d40:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8008d4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8008d54:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8008d5e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008d62:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8008d64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8008d6e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008d72:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8008d74:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8008d7e:	f002 0203 	and.w	r2, r2, #3
 8008d82:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8008d84:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8008d8e:	f002 0203 	and.w	r2, r2, #3
 8008d92:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8008d94:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8008d9e:	f002 020f 	and.w	r2, r2, #15
 8008da2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8008da4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8008dae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8008db8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8008dbe:	68fa      	ldr	r2, [r7, #12]
 8008dc0:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8008dc2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8008dcc:	f002 0203 	and.w	r2, r2, #3
 8008dd0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8008dd2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8008dd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3718      	adds	r7, #24
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b087      	sub	sp, #28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	460b      	mov	r3, r1
 8008dea:	607a      	str	r2, [r7, #4]
 8008dec:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008dee:	2300      	movs	r3, #0
 8008df0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 8008df2:	897b      	ldrh	r3, [r7, #10]
 8008df4:	2b04      	cmp	r3, #4
 8008df6:	d802      	bhi.n	8008dfe <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8008df8:	f06f 0309 	mvn.w	r3, #9
 8008dfc:	e025      	b.n	8008e4a <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	f003 0301 	and.w	r3, r3, #1
 8008e06:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8008e14:	f002 0201 	and.w	r2, r2, #1
 8008e18:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8008e1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8008e24:	f002 0201 	and.w	r2, r2, #1
 8008e28:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8008e2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8008e34:	f002 0203 	and.w	r2, r2, #3
 8008e38:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8008e3a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8008e44:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8008e46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	371c      	adds	r7, #28
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr

08008e56 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b086      	sub	sp, #24
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	60b9      	str	r1, [r7, #8]
 8008e60:	607a      	str	r2, [r7, #4]
 8008e62:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008e64:	2300      	movs	r3, #0
 8008e66:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 8008e68:	89fb      	ldrh	r3, [r7, #14]
 8008e6a:	2b2b      	cmp	r3, #43	@ 0x2b
 8008e6c:	d802      	bhi.n	8008e74 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8008e6e:	f06f 0309 	mvn.w	r3, #9
 8008e72:	e0e2      	b.n	800903a <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e7c:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	785a      	ldrb	r2, [r3, #1]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	3302      	adds	r3, #2
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	f003 030f 	and.w	r3, r3, #15
 8008e94:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	78da      	ldrb	r2, [r3, #3]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	3304      	adds	r3, #4
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	2002      	movs	r0, #2
 8008eaa:	f7fe fef1 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	3306      	adds	r3, #6
 8008eba:	4619      	mov	r1, r3
 8008ebc:	2002      	movs	r0, #2
 8008ebe:	f7fe fee7 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	3308      	adds	r3, #8
 8008ece:	4619      	mov	r1, r3
 8008ed0:	2002      	movs	r0, #2
 8008ed2:	f7fe fedd 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	330a      	adds	r3, #10
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	2002      	movs	r0, #2
 8008ee6:	f7fe fed3 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 8008eea:	4603      	mov	r3, r0
 8008eec:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	330c      	adds	r3, #12
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	2002      	movs	r0, #2
 8008efa:	f7fe fec9 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 8008efe:	4603      	mov	r3, r0
 8008f00:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	330e      	adds	r3, #14
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	2002      	movs	r0, #2
 8008f0e:	f7fe febf 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 8008f12:	4603      	mov	r3, r0
 8008f14:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	3310      	adds	r3, #16
 8008f1e:	4619      	mov	r1, r3
 8008f20:	2002      	movs	r0, #2
 8008f22:	f7fe feb5 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 8008f26:	4603      	mov	r3, r0
 8008f28:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	3312      	adds	r3, #18
 8008f32:	4619      	mov	r1, r3
 8008f34:	2002      	movs	r0, #2
 8008f36:	f7fe feab 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	3314      	adds	r3, #20
 8008f46:	4619      	mov	r1, r3
 8008f48:	2002      	movs	r0, #2
 8008f4a:	f7fe fea1 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	3316      	adds	r3, #22
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	2002      	movs	r0, #2
 8008f5e:	f7fe fe97 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 8008f62:	4603      	mov	r3, r0
 8008f64:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	3318      	adds	r3, #24
 8008f6e:	4619      	mov	r1, r3
 8008f70:	2002      	movs	r0, #2
 8008f72:	f7fe fe8d 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 8008f76:	4603      	mov	r3, r0
 8008f78:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	331a      	adds	r3, #26
 8008f82:	4619      	mov	r1, r3
 8008f84:	2002      	movs	r0, #2
 8008f86:	f7fe fe83 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	331c      	adds	r3, #28
 8008f96:	4619      	mov	r1, r3
 8008f98:	2002      	movs	r0, #2
 8008f9a:	f7fe fe79 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	331e      	adds	r3, #30
 8008faa:	4619      	mov	r1, r3
 8008fac:	2002      	movs	r0, #2
 8008fae:	f7fe fe6f 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	3320      	adds	r3, #32
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	2002      	movs	r0, #2
 8008fc2:	f7fe fe65 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	3322      	adds	r3, #34	@ 0x22
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	2002      	movs	r0, #2
 8008fd6:	f7fe fe5b 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	3324      	adds	r3, #36	@ 0x24
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	2002      	movs	r0, #2
 8008fea:	f7fe fe51 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	3326      	adds	r3, #38	@ 0x26
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	2002      	movs	r0, #2
 8008ffe:	f7fe fe47 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 8009002:	4603      	mov	r3, r0
 8009004:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	3328      	adds	r3, #40	@ 0x28
 800900e:	4619      	mov	r1, r3
 8009010:	2002      	movs	r0, #2
 8009012:	f7fe fe3d 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 8009016:	4603      	mov	r3, r0
 8009018:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1 =
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8009036:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3718      	adds	r7, #24
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b086      	sub	sp, #24
 8009046:	af00      	add	r7, sp, #0
 8009048:	4603      	mov	r3, r0
 800904a:	60b9      	str	r1, [r7, #8]
 800904c:	607a      	str	r2, [r7, #4]
 800904e:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009050:	2300      	movs	r3, #0
 8009052:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 8009054:	89fb      	ldrh	r3, [r7, #14]
 8009056:	2b20      	cmp	r3, #32
 8009058:	d802      	bhi.n	8009060 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800905a:	f06f 0309 	mvn.w	r3, #9
 800905e:	e04d      	b.n	80090fc <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 8009060:	68b9      	ldr	r1, [r7, #8]
 8009062:	2004      	movs	r0, #4
 8009064:	f7fe feb3 	bl	8007dce <VL53L1_i2c_decode_uint32_t>
 8009068:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	3304      	adds	r3, #4
 8009072:	4619      	mov	r1, r3
 8009074:	2004      	movs	r0, #4
 8009076:	f7fe feaa 	bl	8007dce <VL53L1_i2c_decode_uint32_t>
 800907a:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	3308      	adds	r3, #8
 8009084:	4619      	mov	r1, r3
 8009086:	2004      	movs	r0, #4
 8009088:	f7fe febe 	bl	8007e08 <VL53L1_i2c_decode_int32_t>
 800908c:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	330c      	adds	r3, #12
 8009096:	4619      	mov	r1, r3
 8009098:	2004      	movs	r0, #4
 800909a:	f7fe fe98 	bl	8007dce <VL53L1_i2c_decode_uint32_t>
 800909e:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	3310      	adds	r3, #16
 80090a8:	4619      	mov	r1, r3
 80090aa:	2004      	movs	r0, #4
 80090ac:	f7fe fe8f 	bl	8007dce <VL53L1_i2c_decode_uint32_t>
 80090b0:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	3314      	adds	r3, #20
 80090ba:	4619      	mov	r1, r3
 80090bc:	2004      	movs	r0, #4
 80090be:	f7fe fe86 	bl	8007dce <VL53L1_i2c_decode_uint32_t>
 80090c2:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	3318      	adds	r3, #24
 80090cc:	4619      	mov	r1, r3
 80090ce:	2004      	movs	r0, #4
 80090d0:	f7fe fe9a 	bl	8007e08 <VL53L1_i2c_decode_int32_t>
 80090d4:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	331c      	adds	r3, #28
 80090de:	4619      	mov	r1, r3
 80090e0:	2004      	movs	r0, #4
 80090e2:	f7fe fe74 	bl	8007dce <VL53L1_i2c_decode_uint32_t>
 80090e6:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	f893 2020 	ldrb.w	r2, [r3, #32]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 80090f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3718      	adds	r7, #24
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	4603      	mov	r3, r0
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
 8009110:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009112:	2300      	movs	r3, #0
 8009114:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 8009116:	89fb      	ldrh	r3, [r7, #14]
 8009118:	2b37      	cmp	r3, #55	@ 0x37
 800911a:	d802      	bhi.n	8009122 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800911c:	f06f 0309 	mvn.w	r3, #9
 8009120:	e15e      	b.n	80093e0 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 8009122:	68b9      	ldr	r1, [r7, #8]
 8009124:	2002      	movs	r0, #2
 8009126:	f7fe fdb3 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 800912a:	4603      	mov	r3, r0
 800912c:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	3302      	adds	r3, #2
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800913c:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	3303      	adds	r3, #3
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800914c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	3304      	adds	r3, #4
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	f003 0303 	and.w	r3, r3, #3
 800915c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	3305      	adds	r3, #5
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	f003 0301 	and.w	r3, r3, #1
 800916c:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	3306      	adds	r3, #6
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800917c:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	3307      	adds	r3, #7
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800918c:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	3308      	adds	r3, #8
 8009196:	4619      	mov	r1, r3
 8009198:	2002      	movs	r0, #2
 800919a:	f7fe fd79 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 800919e:	4603      	mov	r3, r0
 80091a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091a4:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	330a      	adds	r3, #10
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	f003 0303 	and.w	r3, r3, #3
 80091b4:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	330b      	adds	r3, #11
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	f003 0303 	and.w	r3, r3, #3
 80091c4:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	330c      	adds	r3, #12
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	f003 030f 	and.w	r3, r3, #15
 80091d4:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	330d      	adds	r3, #13
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	f003 0307 	and.w	r3, r3, #7
 80091e4:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	330e      	adds	r3, #14
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	f003 0301 	and.w	r3, r3, #1
 80091f4:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	330f      	adds	r3, #15
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	f003 0303 	and.w	r3, r3, #3
 8009204:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	7c1a      	ldrb	r2, [r3, #16]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	7c5a      	ldrb	r2, [r3, #17]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	3312      	adds	r3, #18
 800921e:	4619      	mov	r1, r3
 8009220:	2002      	movs	r0, #2
 8009222:	f7fe fd35 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 8009226:	4603      	mov	r3, r0
 8009228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800922c:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	3316      	adds	r3, #22
 8009236:	4619      	mov	r1, r3
 8009238:	2002      	movs	r0, #2
 800923a:	f7fe fd29 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 800923e:	4603      	mov	r3, r0
 8009240:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	3318      	adds	r3, #24
 800924a:	4619      	mov	r1, r3
 800924c:	2002      	movs	r0, #2
 800924e:	f7fe fd1f 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 8009252:	4603      	mov	r3, r0
 8009254:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	331a      	adds	r3, #26
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	f003 0301 	and.w	r3, r3, #1
 8009264:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	331b      	adds	r3, #27
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	f003 0307 	and.w	r3, r3, #7
 8009274:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	7f1a      	ldrb	r2, [r3, #28]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	7f5a      	ldrb	r2, [r3, #29]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	331e      	adds	r3, #30
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009294:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	331f      	adds	r3, #31
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092a4:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	3320      	adds	r3, #32
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	f003 0303 	and.w	r3, r3, #3
 80092b4:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	3321      	adds	r3, #33	@ 0x21
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	f003 030f 	and.w	r3, r3, #15
 80092c4:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	3325      	adds	r3, #37	@ 0x25
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	f003 0301 	and.w	r3, r3, #1
 80092f8:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	3326      	adds	r3, #38	@ 0x26
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	f003 0303 	and.w	r3, r3, #3
 800930a:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	3327      	adds	r3, #39	@ 0x27
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	f003 031f 	and.w	r3, r3, #31
 800931c:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	3328      	adds	r3, #40	@ 0x28
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	f003 031f 	and.w	r3, r3, #31
 800932e:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	3329      	adds	r3, #41	@ 0x29
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	f003 031f 	and.w	r3, r3, #31
 8009340:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	332a      	adds	r3, #42	@ 0x2a
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	332b      	adds	r3, #43	@ 0x2b
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	f003 0301 	and.w	r3, r3, #1
 8009364:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	332c      	adds	r3, #44	@ 0x2c
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	f003 0303 	and.w	r3, r3, #3
 8009376:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	332d      	adds	r3, #45	@ 0x2d
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009388:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	332e      	adds	r3, #46	@ 0x2e
 8009394:	4619      	mov	r1, r3
 8009396:	2004      	movs	r0, #4
 8009398:	f7fe fd19 	bl	8007dce <VL53L1_i2c_decode_uint32_t>
 800939c:	4603      	mov	r3, r0
 800939e:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	3332      	adds	r3, #50	@ 0x32
 80093aa:	4619      	mov	r1, r3
 80093ac:	2004      	movs	r0, #4
 80093ae:	f7fe fd0e 	bl	8007dce <VL53L1_i2c_decode_uint32_t>
 80093b2:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	631a      	str	r2, [r3, #48]	@ 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	3336      	adds	r3, #54	@ 0x36
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	f003 0301 	and.w	r3, r3, #1
 80093c2:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	3337      	adds	r3, #55	@ 0x37
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	f003 0301 	and.w	r3, r3, #1
 80093d4:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	LOG_FUNCTION_END(status);

	return status;
 80093dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3718      	adds	r7, #24
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b086      	sub	sp, #24
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	4603      	mov	r3, r0
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	607a      	str	r2, [r7, #4]
 80093f4:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80093f6:	2300      	movs	r3, #0
 80093f8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 80093fa:	89fb      	ldrh	r3, [r7, #14]
 80093fc:	2b30      	cmp	r3, #48	@ 0x30
 80093fe:	d802      	bhi.n	8009406 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8009400:	f06f 0309 	mvn.w	r3, #9
 8009404:	e112      	b.n	800962c <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	785a      	ldrb	r2, [r3, #1]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	789a      	ldrb	r2, [r3, #2]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	3303      	adds	r3, #3
 8009422:	4619      	mov	r1, r3
 8009424:	2002      	movs	r0, #2
 8009426:	f7fe fc33 	bl	8007c90 <VL53L1_i2c_decode_uint16_t>
 800942a:	4603      	mov	r3, r0
 800942c:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	3305      	adds	r3, #5
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800943c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	3306      	adds	r3, #6
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	f003 0307 	and.w	r3, r3, #7
 800944c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	3307      	adds	r3, #7
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	f003 0307 	and.w	r3, r3, #7
 800945c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	3308      	adds	r3, #8
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800946c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	3309      	adds	r3, #9
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800947c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	330a      	adds	r3, #10
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	f003 0301 	and.w	r3, r3, #1
 800948c:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	330b      	adds	r3, #11
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800949c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	330c      	adds	r3, #12
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	f003 0301 	and.w	r3, r3, #1
 80094ac:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	330d      	adds	r3, #13
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80094bc:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	330e      	adds	r3, #14
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80094cc:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	7bda      	ldrb	r2, [r3, #15]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	7c1a      	ldrb	r2, [r3, #16]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	7c5a      	ldrb	r2, [r3, #17]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	7c9a      	ldrb	r2, [r3, #18]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	7cda      	ldrb	r2, [r3, #19]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	7d1a      	ldrb	r2, [r3, #20]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	7d5a      	ldrb	r2, [r3, #21]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	7d9a      	ldrb	r2, [r3, #22]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	7dda      	ldrb	r2, [r3, #23]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	7e1a      	ldrb	r2, [r3, #24]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	7e5a      	ldrb	r2, [r3, #25]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	7e9a      	ldrb	r2, [r3, #26]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	7eda      	ldrb	r2, [r3, #27]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	7f1a      	ldrb	r2, [r3, #28]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	7f5a      	ldrb	r2, [r3, #29]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	7f9a      	ldrb	r2, [r3, #30]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	7fda      	ldrb	r2, [r3, #31]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8009628:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800962c:	4618      	mov	r0, r3
 800962e:	3718      	adds	r7, #24
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b090      	sub	sp, #64	@ 0x40
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800963e:	2300      	movs	r3, #0
 8009640:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8009644:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10a      	bne.n	8009662 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 800964c:	f107 020c 	add.w	r2, r7, #12
 8009650:	2331      	movs	r3, #49	@ 0x31
 8009652:	f240 110f 	movw	r1, #271	@ 0x10f
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 f958 	bl	800990c <VL53L1_ReadMulti>
 800965c:	4603      	mov	r3, r0
 800965e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8009662:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009666:	2b00      	cmp	r3, #0
 8009668:	d109      	bne.n	800967e <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 800966a:	f107 030c 	add.w	r3, r7, #12
 800966e:	683a      	ldr	r2, [r7, #0]
 8009670:	4619      	mov	r1, r3
 8009672:	2031      	movs	r0, #49	@ 0x31
 8009674:	f7ff feb8 	bl	80093e8 <VL53L1_i2c_decode_nvm_copy_data>
 8009678:	4603      	mov	r3, r0
 800967a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800967e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8009682:	4618      	mov	r0, r3
 8009684:	3740      	adds	r7, #64	@ 0x40
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <VL53L1_wait_for_boot_completion>:
		fmt, ##__VA_ARGS__)


VL53L1_Error VL53L1_wait_for_boot_completion(
	VL53L1_DEV     Dev)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b086      	sub	sp, #24
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]

	/* Waits for firmware boot to finish
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009692:	2300      	movs	r3, #0
 8009694:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	613b      	str	r3, [r7, #16]

	uint8_t      fw_ready  = 0;
 800969a:	2300      	movs	r3, #0
 800969c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53L1_WAIT_METHOD_BLOCKING) {
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d107      	bne.n	80096b6 <VL53L1_wait_for_boot_completion+0x2c>

		/* blocking version */

		status =
			VL53L1_poll_for_boot_completion(
 80096a6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 f88a 	bl	80097c4 <VL53L1_poll_for_boot_completion>
 80096b0:	4603      	mov	r3, r0
 80096b2:	75fb      	strb	r3, [r7, #23]
 80096b4:	e01b      	b.n	80096ee <VL53L1_wait_for_boot_completion+0x64>

	} else {

		/* implement non blocking version below */

		fw_ready = 0;
 80096b6:	2300      	movs	r3, #0
 80096b8:	73fb      	strb	r3, [r7, #15]
		while (fw_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 80096ba:	e011      	b.n	80096e0 <VL53L1_wait_for_boot_completion+0x56>
			status = VL53L1_is_boot_complete(
 80096bc:	f107 030f 	add.w	r3, r7, #15
 80096c0:	4619      	mov	r1, r3
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 f819 	bl	80096fa <VL53L1_is_boot_complete>
 80096c8:	4603      	mov	r3, r0
 80096ca:	75fb      	strb	r3, [r7, #23]
				Dev,
				&fw_ready);

			if (status == VL53L1_ERROR_NONE) {
 80096cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d105      	bne.n	80096e0 <VL53L1_wait_for_boot_completion+0x56>
				status = VL53L1_WaitMs(
 80096d4:	2101      	movs	r1, #1
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f9fb 	bl	8009ad2 <VL53L1_WaitMs>
 80096dc:	4603      	mov	r3, r0
 80096de:	75fb      	strb	r3, [r7, #23]
		while (fw_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d103      	bne.n	80096ee <VL53L1_wait_for_boot_completion+0x64>
 80096e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d0e6      	beq.n	80096bc <VL53L1_wait_for_boot_completion+0x32>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 80096ee:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3718      	adds	r7, #24
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <VL53L1_is_boot_complete>:


VL53L1_Error VL53L1_is_boot_complete(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b084      	sub	sp, #16
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
 8009702:	6039      	str	r1, [r7, #0]
	/**
	 * Determines if the firmware finished booting by reading
	 * bit 0 of firmware__system_status register
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009704:	2300      	movs	r3, #0
 8009706:	73fb      	strb	r3, [r7, #15]
	uint8_t  firmware__system_status = 0;
 8009708:	2300      	movs	r3, #0
 800970a:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	/* read current range interrupt state */

	status =
		VL53L1_RdByte(
 800970c:	f107 030e 	add.w	r3, r7, #14
 8009710:	461a      	mov	r2, r3
 8009712:	21e5      	movs	r1, #229	@ 0xe5
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 f959 	bl	80099cc <VL53L1_RdByte>
 800971a:	4603      	mov	r3, r0
 800971c:	73fb      	strb	r3, [r7, #15]

	/* set *pready = 1 if new range data ready complete
	 * zero otherwise
	 */

	if ((firmware__system_status & 0x01) == 0x01) {
 800971e:	7bbb      	ldrb	r3, [r7, #14]
 8009720:	f003 0301 	and.w	r3, r3, #1
 8009724:	2b00      	cmp	r3, #0
 8009726:	d007      	beq.n	8009738 <VL53L1_is_boot_complete+0x3e>
		*pready = 0x01;
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	2201      	movs	r2, #1
 800972c:	701a      	strb	r2, [r3, #0]
		VL53L1_init_ll_driver_state(
 800972e:	2103      	movs	r1, #3
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f7fe f866 	bl	8007802 <VL53L1_init_ll_driver_state>
 8009736:	e006      	b.n	8009746 <VL53L1_is_boot_complete+0x4c>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);
	} else {
		*pready = 0x00;
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	2200      	movs	r2, #0
 800973c:	701a      	strb	r2, [r3, #0]
		VL53L1_init_ll_driver_state(
 800973e:	2102      	movs	r1, #2
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f7fe f85e 	bl	8007802 <VL53L1_init_ll_driver_state>
			VL53L1_DEVICESTATE_FW_COLDBOOT);
	}

	LOG_FUNCTION_END(status);

	return status;
 8009746:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b086      	sub	sp, #24
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
 800975a:	6039      	str	r1, [r7, #0]
	 * Determines if new range data is ready by reading bit 0 of
	 * VL53L1_GPIO__TIO_HV_STATUS to determine the current state
	 * of output interrupt pin
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800975c:	2300      	movs	r3, #0
 800975e:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8009764:	2300      	movs	r3, #0
 8009766:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8009768:	2300      	movs	r3, #0
 800976a:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 800976c:	2300      	movs	r3, #0
 800976e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	f893 3170 	ldrb.w	r3, [r3, #368]	@ 0x170
	gpio__mux_active_high_hv =
 8009776:	f003 0310 	and.w	r3, r3, #16
 800977a:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 800977c:	7bfb      	ldrb	r3, [r7, #15]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d102      	bne.n	8009788 <VL53L1_is_new_data_ready+0x36>
		interrupt_ready = 0x01;
 8009782:	2301      	movs	r3, #1
 8009784:	75fb      	strb	r3, [r7, #23]
 8009786:	e001      	b.n	800978c <VL53L1_is_new_data_ready+0x3a>
	else
		interrupt_ready = 0x00;
 8009788:	2300      	movs	r3, #0
 800978a:	75fb      	strb	r3, [r7, #23]

	/* read current range interrupt state */

	status = VL53L1_RdByte(
 800978c:	f107 030e 	add.w	r3, r7, #14
 8009790:	461a      	mov	r2, r3
 8009792:	2131      	movs	r1, #49	@ 0x31
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 f919 	bl	80099cc <VL53L1_RdByte>
 800979a:	4603      	mov	r3, r0
 800979c:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);

	/* set *pready = 1 if new range data ready complete zero otherwise */

	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 800979e:	7bbb      	ldrb	r3, [r7, #14]
 80097a0:	f003 0201 	and.w	r2, r3, #1
 80097a4:	7dfb      	ldrb	r3, [r7, #23]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d103      	bne.n	80097b2 <VL53L1_is_new_data_ready+0x60>
		*pready = 0x01;
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	2201      	movs	r2, #1
 80097ae:	701a      	strb	r2, [r3, #0]
 80097b0:	e002      	b.n	80097b8 <VL53L1_is_new_data_ready+0x66>
	else
		*pready = 0x00;
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	2200      	movs	r2, #0
 80097b6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80097b8:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3718      	adds	r7, #24
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b086      	sub	sp, #24
 80097c8:	af02      	add	r7, sp, #8
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80097ce:	2300      	movs	r3, #0
 80097d0:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 80097d2:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 f98a 	bl	8009af0 <VL53L1_WaitUs>
 80097dc:	4603      	mov	r3, r0
 80097de:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 80097e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10b      	bne.n	8009800 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 80097e8:	2301      	movs	r3, #1
 80097ea:	9301      	str	r3, [sp, #4]
 80097ec:	2301      	movs	r3, #1
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	2301      	movs	r3, #1
 80097f2:	22e5      	movs	r2, #229	@ 0xe5
 80097f4:	6839      	ldr	r1, [r7, #0]
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 f990 	bl	8009b1c <VL53L1_WaitValueMaskEx>
 80097fc:	4603      	mov	r3, r0
 80097fe:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8009800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d103      	bne.n	8009810 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8009808:	2103      	movs	r1, #3
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f7fd fff9 	bl	8007802 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8009810:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009814:	4618      	mov	r0, r3
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800981c:	b580      	push	{r7, lr}
 800981e:	b088      	sub	sp, #32
 8009820:	af02      	add	r7, sp, #8
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	330a      	adds	r3, #10
 800982c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f8d3 03a0 	ldr.w	r0, [r3, #928]	@ 0x3a0
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f893 3398 	ldrb.w	r3, [r3, #920]	@ 0x398
 800983a:	4619      	mov	r1, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	b29a      	uxth	r2, r3
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	4613      	mov	r3, r2
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	f7f8 f956 	bl	8001af8 <HAL_I2C_Master_Transmit>
 800984c:	4603      	mov	r3, r0
 800984e:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8009850:	693b      	ldr	r3, [r7, #16]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3718      	adds	r7, #24
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800985a:	b580      	push	{r7, lr}
 800985c:	b088      	sub	sp, #32
 800985e:	af02      	add	r7, sp, #8
 8009860:	60f8      	str	r0, [r7, #12]
 8009862:	60b9      	str	r1, [r7, #8]
 8009864:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	330a      	adds	r3, #10
 800986a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f8d3 03a0 	ldr.w	r0, [r3, #928]	@ 0x3a0
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f893 3398 	ldrb.w	r3, [r3, #920]	@ 0x398
 8009878:	f043 0301 	orr.w	r3, r3, #1
 800987c:	b2db      	uxtb	r3, r3
 800987e:	4619      	mov	r1, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	b29a      	uxth	r2, r3
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	4613      	mov	r3, r2
 800988a:	68ba      	ldr	r2, [r7, #8]
 800988c:	f7f8 fa28 	bl	8001ce0 <HAL_I2C_Master_Receive>
 8009890:	4603      	mov	r3, r0
 8009892:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8009894:	693b      	ldr	r3, [r7, #16]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3718      	adds	r7, #24
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
	...

080098a0 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b086      	sub	sp, #24
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	607a      	str	r2, [r7, #4]
 80098aa:	603b      	str	r3, [r7, #0]
 80098ac:	460b      	mov	r3, r1
 80098ae:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80098b0:	2300      	movs	r3, #0
 80098b2:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	2bff      	cmp	r3, #255	@ 0xff
 80098b8:	d902      	bls.n	80098c0 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 80098ba:	f06f 0303 	mvn.w	r3, #3
 80098be:	e01d      	b.n	80098fc <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 80098c0:	897b      	ldrh	r3, [r7, #10]
 80098c2:	0a1b      	lsrs	r3, r3, #8
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	b2da      	uxtb	r2, r3
 80098c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009904 <VL53L1_WriteMulti+0x64>)
 80098ca:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80098cc:	897b      	ldrh	r3, [r7, #10]
 80098ce:	b2da      	uxtb	r2, r3
 80098d0:	4b0c      	ldr	r3, [pc, #48]	@ (8009904 <VL53L1_WriteMulti+0x64>)
 80098d2:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 80098d4:	683a      	ldr	r2, [r7, #0]
 80098d6:	6879      	ldr	r1, [r7, #4]
 80098d8:	480b      	ldr	r0, [pc, #44]	@ (8009908 <VL53L1_WriteMulti+0x68>)
 80098da:	f001 f88e 	bl	800a9fa <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	3302      	adds	r3, #2
 80098e2:	461a      	mov	r2, r3
 80098e4:	4907      	ldr	r1, [pc, #28]	@ (8009904 <VL53L1_WriteMulti+0x64>)
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f7ff ff98 	bl	800981c <_I2CWrite>
 80098ec:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80098f4:	23f3      	movs	r3, #243	@ 0xf3
 80098f6:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 80098f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3718      	adds	r7, #24
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	20000304 	.word	0x20000304
 8009908:	20000306 	.word	0x20000306

0800990c <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800990c:	b580      	push	{r7, lr}
 800990e:	b086      	sub	sp, #24
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	607a      	str	r2, [r7, #4]
 8009916:	603b      	str	r3, [r7, #0]
 8009918:	460b      	mov	r3, r1
 800991a:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800991c:	2300      	movs	r3, #0
 800991e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8009920:	897b      	ldrh	r3, [r7, #10]
 8009922:	0a1b      	lsrs	r3, r3, #8
 8009924:	b29b      	uxth	r3, r3
 8009926:	b2da      	uxtb	r2, r3
 8009928:	4b12      	ldr	r3, [pc, #72]	@ (8009974 <VL53L1_ReadMulti+0x68>)
 800992a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800992c:	897b      	ldrh	r3, [r7, #10]
 800992e:	b2da      	uxtb	r2, r3
 8009930:	4b10      	ldr	r3, [pc, #64]	@ (8009974 <VL53L1_ReadMulti+0x68>)
 8009932:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8009934:	2202      	movs	r2, #2
 8009936:	490f      	ldr	r1, [pc, #60]	@ (8009974 <VL53L1_ReadMulti+0x68>)
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f7ff ff6f 	bl	800981c <_I2CWrite>
 800993e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d002      	beq.n	800994c <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8009946:	23f3      	movs	r3, #243	@ 0xf3
 8009948:	75fb      	strb	r3, [r7, #23]
        goto done;
 800994a:	e00c      	b.n	8009966 <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800994c:	683a      	ldr	r2, [r7, #0]
 800994e:	6879      	ldr	r1, [r7, #4]
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f7ff ff82 	bl	800985a <_I2CRead>
 8009956:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d002      	beq.n	8009964 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800995e:	23f3      	movs	r3, #243	@ 0xf3
 8009960:	75fb      	strb	r3, [r7, #23]
 8009962:	e000      	b.n	8009966 <VL53L1_ReadMulti+0x5a>
    }
done:
 8009964:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8009966:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3718      	adds	r7, #24
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	20000304 	.word	0x20000304

08009978 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	460b      	mov	r3, r1
 8009982:	807b      	strh	r3, [r7, #2]
 8009984:	4613      	mov	r3, r2
 8009986:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009988:	2300      	movs	r3, #0
 800998a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800998c:	887b      	ldrh	r3, [r7, #2]
 800998e:	0a1b      	lsrs	r3, r3, #8
 8009990:	b29b      	uxth	r3, r3
 8009992:	b2da      	uxtb	r2, r3
 8009994:	4b0c      	ldr	r3, [pc, #48]	@ (80099c8 <VL53L1_WrByte+0x50>)
 8009996:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8009998:	887b      	ldrh	r3, [r7, #2]
 800999a:	b2da      	uxtb	r2, r3
 800999c:	4b0a      	ldr	r3, [pc, #40]	@ (80099c8 <VL53L1_WrByte+0x50>)
 800999e:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 80099a0:	4a09      	ldr	r2, [pc, #36]	@ (80099c8 <VL53L1_WrByte+0x50>)
 80099a2:	787b      	ldrb	r3, [r7, #1]
 80099a4:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80099a6:	2203      	movs	r2, #3
 80099a8:	4907      	ldr	r1, [pc, #28]	@ (80099c8 <VL53L1_WrByte+0x50>)
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7ff ff36 	bl	800981c <_I2CWrite>
 80099b0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d001      	beq.n	80099bc <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80099b8:	23f3      	movs	r3, #243	@ 0xf3
 80099ba:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 80099bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	20000304 	.word	0x20000304

080099cc <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b086      	sub	sp, #24
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	460b      	mov	r3, r1
 80099d6:	607a      	str	r2, [r7, #4]
 80099d8:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80099da:	2300      	movs	r3, #0
 80099dc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 80099de:	897b      	ldrh	r3, [r7, #10]
 80099e0:	0a1b      	lsrs	r3, r3, #8
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	b2da      	uxtb	r2, r3
 80099e6:	4b12      	ldr	r3, [pc, #72]	@ (8009a30 <VL53L1_RdByte+0x64>)
 80099e8:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80099ea:	897b      	ldrh	r3, [r7, #10]
 80099ec:	b2da      	uxtb	r2, r3
 80099ee:	4b10      	ldr	r3, [pc, #64]	@ (8009a30 <VL53L1_RdByte+0x64>)
 80099f0:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80099f2:	2202      	movs	r2, #2
 80099f4:	490e      	ldr	r1, [pc, #56]	@ (8009a30 <VL53L1_RdByte+0x64>)
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f7ff ff10 	bl	800981c <_I2CWrite>
 80099fc:	6138      	str	r0, [r7, #16]
    if( status_int ){
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d002      	beq.n	8009a0a <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8009a04:	23f3      	movs	r3, #243	@ 0xf3
 8009a06:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009a08:	e00c      	b.n	8009a24 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	6879      	ldr	r1, [r7, #4]
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f7ff ff23 	bl	800985a <_I2CRead>
 8009a14:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d002      	beq.n	8009a22 <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8009a1c:	23f3      	movs	r3, #243	@ 0xf3
 8009a1e:	75fb      	strb	r3, [r7, #23]
 8009a20:	e000      	b.n	8009a24 <VL53L1_RdByte+0x58>
    }
done:
 8009a22:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8009a24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3718      	adds	r7, #24
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	20000304 	.word	0x20000304

08009a34 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	607a      	str	r2, [r7, #4]
 8009a40:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009a42:	2300      	movs	r3, #0
 8009a44:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8009a46:	897b      	ldrh	r3, [r7, #10]
 8009a48:	0a1b      	lsrs	r3, r3, #8
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	b2da      	uxtb	r2, r3
 8009a4e:	4b17      	ldr	r3, [pc, #92]	@ (8009aac <VL53L1_RdWord+0x78>)
 8009a50:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8009a52:	897b      	ldrh	r3, [r7, #10]
 8009a54:	b2da      	uxtb	r2, r3
 8009a56:	4b15      	ldr	r3, [pc, #84]	@ (8009aac <VL53L1_RdWord+0x78>)
 8009a58:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	4913      	ldr	r1, [pc, #76]	@ (8009aac <VL53L1_RdWord+0x78>)
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f7ff fedc 	bl	800981c <_I2CWrite>
 8009a64:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d002      	beq.n	8009a72 <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8009a6c:	23f3      	movs	r3, #243	@ 0xf3
 8009a6e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009a70:	e015      	b.n	8009a9e <VL53L1_RdWord+0x6a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8009a72:	2202      	movs	r2, #2
 8009a74:	490d      	ldr	r1, [pc, #52]	@ (8009aac <VL53L1_RdWord+0x78>)
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f7ff feef 	bl	800985a <_I2CRead>
 8009a7c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d002      	beq.n	8009a8a <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8009a84:	23f3      	movs	r3, #243	@ 0xf3
 8009a86:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009a88:	e009      	b.n	8009a9e <VL53L1_RdWord+0x6a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8009a8a:	4b08      	ldr	r3, [pc, #32]	@ (8009aac <VL53L1_RdWord+0x78>)
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	021b      	lsls	r3, r3, #8
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	4a06      	ldr	r2, [pc, #24]	@ (8009aac <VL53L1_RdWord+0x78>)
 8009a94:	7852      	ldrb	r2, [r2, #1]
 8009a96:	4413      	add	r3, r2
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8009a9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3718      	adds	r7, #24
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	20000304 	.word	0x20000304

08009ab0 <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b085      	sub	sp, #20
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8009ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3714      	adds	r7, #20
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr

08009ad2 <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b082      	sub	sp, #8
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7f7 fcfe 	bl	80014e0 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3708      	adds	r7, #8
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
	...

08009af0 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	4a06      	ldr	r2, [pc, #24]	@ (8009b18 <VL53L1_WaitUs+0x28>)
 8009afe:	fb82 1203 	smull	r1, r2, r2, r3
 8009b02:	1192      	asrs	r2, r2, #6
 8009b04:	17db      	asrs	r3, r3, #31
 8009b06:	1ad3      	subs	r3, r2, r3
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7f7 fce9 	bl	80014e0 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	10624dd3 	.word	0x10624dd3

08009b1c <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8009b1c:	b590      	push	{r4, r7, lr}
 8009b1e:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	f507 740a 	add.w	r4, r7, #552	@ 0x228
 8009b28:	f5a4 7407 	sub.w	r4, r4, #540	@ 0x21c
 8009b2c:	6020      	str	r0, [r4, #0]
 8009b2e:	f507 700a 	add.w	r0, r7, #552	@ 0x228
 8009b32:	f5a0 7008 	sub.w	r0, r0, #544	@ 0x220
 8009b36:	6001      	str	r1, [r0, #0]
 8009b38:	4619      	mov	r1, r3
 8009b3a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8009b3e:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 8009b42:	801a      	strh	r2, [r3, #0]
 8009b44:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8009b48:	f2a3 2323 	subw	r3, r3, #547	@ 0x223
 8009b4c:	460a      	mov	r2, r1
 8009b4e:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8009b50:	2300      	movs	r3, #0
 8009b52:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
	uint32_t     start_time_ms = 0;
 8009b56:	2300      	movs	r3, #0
 8009b58:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
	uint32_t     current_time_ms = 0;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	uint32_t     polling_time_ms = 0;
 8009b62:	2300      	movs	r3, #0
 8009b64:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
	uint8_t      byte_value      = 0;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
	uint8_t      found           = 0;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8009b74:	f107 0310 	add.w	r3, r7, #16
 8009b78:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009b7c:	493b      	ldr	r1, [pc, #236]	@ (8009c6c <VL53L1_WaitValueMaskEx+0x150>)
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f000 feb1 	bl	800a8e6 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 8009b84:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7ff ff91 	bl	8009ab0 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 8009b8e:	e049      	b.n	8009c24 <VL53L1_WaitValueMaskEx+0x108>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 8009b90:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d110      	bne.n	8009bba <VL53L1_WaitValueMaskEx+0x9e>
			status = VL53L1_RdByte(
 8009b98:	f207 2213 	addw	r2, r7, #531	@ 0x213
 8009b9c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8009ba0:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 8009ba4:	8819      	ldrh	r1, [r3, #0]
 8009ba6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8009baa:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8009bae:	6818      	ldr	r0, [r3, #0]
 8009bb0:	f7ff ff0c 	bl	80099cc <VL53L1_RdByte>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8009bba:	f897 2213 	ldrb.w	r2, [r7, #531]	@ 0x213
 8009bbe:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 8009bc2:	4013      	ands	r3, r2
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8009bca:	f2a2 2223 	subw	r2, r2, #547	@ 0x223
 8009bce:	7812      	ldrb	r2, [r2, #0]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d102      	bne.n	8009bda <VL53L1_WaitValueMaskEx+0xbe>
			found = 1;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 8009bda:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d114      	bne.n	8009c0c <VL53L1_WaitValueMaskEx+0xf0>
 8009be2:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d110      	bne.n	8009c0c <VL53L1_WaitValueMaskEx+0xf0>
			found == 0 &&
 8009bea:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00c      	beq.n	8009c0c <VL53L1_WaitValueMaskEx+0xf0>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 8009bf2:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8009bf6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8009bfa:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8009bfe:	4611      	mov	r1, r2
 8009c00:	6818      	ldr	r0, [r3, #0]
 8009c02:	f7ff ff66 	bl	8009ad2 <VL53L1_WaitMs>
 8009c06:	4603      	mov	r3, r0
 8009c08:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 8009c0c:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7ff ff4d 	bl	8009ab0 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8009c16:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8009c1a:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8009c1e:	1ad3      	subs	r3, r2, r3
 8009c20:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
		   (polling_time_ms < timeout_ms) &&
 8009c24:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d10c      	bne.n	8009c46 <VL53L1_WaitValueMaskEx+0x12a>
	while ((status == VL53L1_ERROR_NONE) &&
 8009c2c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8009c30:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8009c34:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d203      	bcs.n	8009c46 <VL53L1_WaitValueMaskEx+0x12a>
		   (polling_time_ms < timeout_ms) &&
 8009c3e:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d0a4      	beq.n	8009b90 <VL53L1_WaitValueMaskEx+0x74>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 8009c46:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d106      	bne.n	8009c5c <VL53L1_WaitValueMaskEx+0x140>
 8009c4e:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d102      	bne.n	8009c5c <VL53L1_WaitValueMaskEx+0x140>
		status = VL53L1_ERROR_TIME_OUT;
 8009c56:	23f9      	movs	r3, #249	@ 0xf9
 8009c58:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227

	return status;
 8009c5c:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	f507 770b 	add.w	r7, r7, #556	@ 0x22c
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd90      	pop	{r4, r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	0800c8ac 	.word	0x0800c8ac

08009c70 <__cvt>:
 8009c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c74:	ec57 6b10 	vmov	r6, r7, d0
 8009c78:	2f00      	cmp	r7, #0
 8009c7a:	460c      	mov	r4, r1
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	463b      	mov	r3, r7
 8009c80:	bfbb      	ittet	lt
 8009c82:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009c86:	461f      	movlt	r7, r3
 8009c88:	2300      	movge	r3, #0
 8009c8a:	232d      	movlt	r3, #45	@ 0x2d
 8009c8c:	700b      	strb	r3, [r1, #0]
 8009c8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c90:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009c94:	4691      	mov	r9, r2
 8009c96:	f023 0820 	bic.w	r8, r3, #32
 8009c9a:	bfbc      	itt	lt
 8009c9c:	4632      	movlt	r2, r6
 8009c9e:	4616      	movlt	r6, r2
 8009ca0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009ca4:	d005      	beq.n	8009cb2 <__cvt+0x42>
 8009ca6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009caa:	d100      	bne.n	8009cae <__cvt+0x3e>
 8009cac:	3401      	adds	r4, #1
 8009cae:	2102      	movs	r1, #2
 8009cb0:	e000      	b.n	8009cb4 <__cvt+0x44>
 8009cb2:	2103      	movs	r1, #3
 8009cb4:	ab03      	add	r3, sp, #12
 8009cb6:	9301      	str	r3, [sp, #4]
 8009cb8:	ab02      	add	r3, sp, #8
 8009cba:	9300      	str	r3, [sp, #0]
 8009cbc:	ec47 6b10 	vmov	d0, r6, r7
 8009cc0:	4653      	mov	r3, sl
 8009cc2:	4622      	mov	r2, r4
 8009cc4:	f000 ff30 	bl	800ab28 <_dtoa_r>
 8009cc8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009ccc:	4605      	mov	r5, r0
 8009cce:	d119      	bne.n	8009d04 <__cvt+0x94>
 8009cd0:	f019 0f01 	tst.w	r9, #1
 8009cd4:	d00e      	beq.n	8009cf4 <__cvt+0x84>
 8009cd6:	eb00 0904 	add.w	r9, r0, r4
 8009cda:	2200      	movs	r2, #0
 8009cdc:	2300      	movs	r3, #0
 8009cde:	4630      	mov	r0, r6
 8009ce0:	4639      	mov	r1, r7
 8009ce2:	f7f6 fef1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ce6:	b108      	cbz	r0, 8009cec <__cvt+0x7c>
 8009ce8:	f8cd 900c 	str.w	r9, [sp, #12]
 8009cec:	2230      	movs	r2, #48	@ 0x30
 8009cee:	9b03      	ldr	r3, [sp, #12]
 8009cf0:	454b      	cmp	r3, r9
 8009cf2:	d31e      	bcc.n	8009d32 <__cvt+0xc2>
 8009cf4:	9b03      	ldr	r3, [sp, #12]
 8009cf6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cf8:	1b5b      	subs	r3, r3, r5
 8009cfa:	4628      	mov	r0, r5
 8009cfc:	6013      	str	r3, [r2, #0]
 8009cfe:	b004      	add	sp, #16
 8009d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009d08:	eb00 0904 	add.w	r9, r0, r4
 8009d0c:	d1e5      	bne.n	8009cda <__cvt+0x6a>
 8009d0e:	7803      	ldrb	r3, [r0, #0]
 8009d10:	2b30      	cmp	r3, #48	@ 0x30
 8009d12:	d10a      	bne.n	8009d2a <__cvt+0xba>
 8009d14:	2200      	movs	r2, #0
 8009d16:	2300      	movs	r3, #0
 8009d18:	4630      	mov	r0, r6
 8009d1a:	4639      	mov	r1, r7
 8009d1c:	f7f6 fed4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d20:	b918      	cbnz	r0, 8009d2a <__cvt+0xba>
 8009d22:	f1c4 0401 	rsb	r4, r4, #1
 8009d26:	f8ca 4000 	str.w	r4, [sl]
 8009d2a:	f8da 3000 	ldr.w	r3, [sl]
 8009d2e:	4499      	add	r9, r3
 8009d30:	e7d3      	b.n	8009cda <__cvt+0x6a>
 8009d32:	1c59      	adds	r1, r3, #1
 8009d34:	9103      	str	r1, [sp, #12]
 8009d36:	701a      	strb	r2, [r3, #0]
 8009d38:	e7d9      	b.n	8009cee <__cvt+0x7e>

08009d3a <__exponent>:
 8009d3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d3c:	2900      	cmp	r1, #0
 8009d3e:	bfba      	itte	lt
 8009d40:	4249      	neglt	r1, r1
 8009d42:	232d      	movlt	r3, #45	@ 0x2d
 8009d44:	232b      	movge	r3, #43	@ 0x2b
 8009d46:	2909      	cmp	r1, #9
 8009d48:	7002      	strb	r2, [r0, #0]
 8009d4a:	7043      	strb	r3, [r0, #1]
 8009d4c:	dd29      	ble.n	8009da2 <__exponent+0x68>
 8009d4e:	f10d 0307 	add.w	r3, sp, #7
 8009d52:	461d      	mov	r5, r3
 8009d54:	270a      	movs	r7, #10
 8009d56:	461a      	mov	r2, r3
 8009d58:	fbb1 f6f7 	udiv	r6, r1, r7
 8009d5c:	fb07 1416 	mls	r4, r7, r6, r1
 8009d60:	3430      	adds	r4, #48	@ 0x30
 8009d62:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009d66:	460c      	mov	r4, r1
 8009d68:	2c63      	cmp	r4, #99	@ 0x63
 8009d6a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009d6e:	4631      	mov	r1, r6
 8009d70:	dcf1      	bgt.n	8009d56 <__exponent+0x1c>
 8009d72:	3130      	adds	r1, #48	@ 0x30
 8009d74:	1e94      	subs	r4, r2, #2
 8009d76:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009d7a:	1c41      	adds	r1, r0, #1
 8009d7c:	4623      	mov	r3, r4
 8009d7e:	42ab      	cmp	r3, r5
 8009d80:	d30a      	bcc.n	8009d98 <__exponent+0x5e>
 8009d82:	f10d 0309 	add.w	r3, sp, #9
 8009d86:	1a9b      	subs	r3, r3, r2
 8009d88:	42ac      	cmp	r4, r5
 8009d8a:	bf88      	it	hi
 8009d8c:	2300      	movhi	r3, #0
 8009d8e:	3302      	adds	r3, #2
 8009d90:	4403      	add	r3, r0
 8009d92:	1a18      	subs	r0, r3, r0
 8009d94:	b003      	add	sp, #12
 8009d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d98:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009d9c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009da0:	e7ed      	b.n	8009d7e <__exponent+0x44>
 8009da2:	2330      	movs	r3, #48	@ 0x30
 8009da4:	3130      	adds	r1, #48	@ 0x30
 8009da6:	7083      	strb	r3, [r0, #2]
 8009da8:	70c1      	strb	r1, [r0, #3]
 8009daa:	1d03      	adds	r3, r0, #4
 8009dac:	e7f1      	b.n	8009d92 <__exponent+0x58>
	...

08009db0 <_printf_float>:
 8009db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db4:	b08d      	sub	sp, #52	@ 0x34
 8009db6:	460c      	mov	r4, r1
 8009db8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009dbc:	4616      	mov	r6, r2
 8009dbe:	461f      	mov	r7, r3
 8009dc0:	4605      	mov	r5, r0
 8009dc2:	f000 fda3 	bl	800a90c <_localeconv_r>
 8009dc6:	6803      	ldr	r3, [r0, #0]
 8009dc8:	9304      	str	r3, [sp, #16]
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7f6 fa50 	bl	8000270 <strlen>
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8009dd8:	9005      	str	r0, [sp, #20]
 8009dda:	3307      	adds	r3, #7
 8009ddc:	f023 0307 	bic.w	r3, r3, #7
 8009de0:	f103 0208 	add.w	r2, r3, #8
 8009de4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009de8:	f8d4 b000 	ldr.w	fp, [r4]
 8009dec:	f8c8 2000 	str.w	r2, [r8]
 8009df0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009df4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009df8:	9307      	str	r3, [sp, #28]
 8009dfa:	f8cd 8018 	str.w	r8, [sp, #24]
 8009dfe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009e02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e06:	4b9c      	ldr	r3, [pc, #624]	@ (800a078 <_printf_float+0x2c8>)
 8009e08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e0c:	f7f6 fe8e 	bl	8000b2c <__aeabi_dcmpun>
 8009e10:	bb70      	cbnz	r0, 8009e70 <_printf_float+0xc0>
 8009e12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e16:	4b98      	ldr	r3, [pc, #608]	@ (800a078 <_printf_float+0x2c8>)
 8009e18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e1c:	f7f6 fe68 	bl	8000af0 <__aeabi_dcmple>
 8009e20:	bb30      	cbnz	r0, 8009e70 <_printf_float+0xc0>
 8009e22:	2200      	movs	r2, #0
 8009e24:	2300      	movs	r3, #0
 8009e26:	4640      	mov	r0, r8
 8009e28:	4649      	mov	r1, r9
 8009e2a:	f7f6 fe57 	bl	8000adc <__aeabi_dcmplt>
 8009e2e:	b110      	cbz	r0, 8009e36 <_printf_float+0x86>
 8009e30:	232d      	movs	r3, #45	@ 0x2d
 8009e32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e36:	4a91      	ldr	r2, [pc, #580]	@ (800a07c <_printf_float+0x2cc>)
 8009e38:	4b91      	ldr	r3, [pc, #580]	@ (800a080 <_printf_float+0x2d0>)
 8009e3a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009e3e:	bf94      	ite	ls
 8009e40:	4690      	movls	r8, r2
 8009e42:	4698      	movhi	r8, r3
 8009e44:	2303      	movs	r3, #3
 8009e46:	6123      	str	r3, [r4, #16]
 8009e48:	f02b 0304 	bic.w	r3, fp, #4
 8009e4c:	6023      	str	r3, [r4, #0]
 8009e4e:	f04f 0900 	mov.w	r9, #0
 8009e52:	9700      	str	r7, [sp, #0]
 8009e54:	4633      	mov	r3, r6
 8009e56:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009e58:	4621      	mov	r1, r4
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	f000 f9d2 	bl	800a204 <_printf_common>
 8009e60:	3001      	adds	r0, #1
 8009e62:	f040 808d 	bne.w	8009f80 <_printf_float+0x1d0>
 8009e66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e6a:	b00d      	add	sp, #52	@ 0x34
 8009e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e70:	4642      	mov	r2, r8
 8009e72:	464b      	mov	r3, r9
 8009e74:	4640      	mov	r0, r8
 8009e76:	4649      	mov	r1, r9
 8009e78:	f7f6 fe58 	bl	8000b2c <__aeabi_dcmpun>
 8009e7c:	b140      	cbz	r0, 8009e90 <_printf_float+0xe0>
 8009e7e:	464b      	mov	r3, r9
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	bfbc      	itt	lt
 8009e84:	232d      	movlt	r3, #45	@ 0x2d
 8009e86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009e8a:	4a7e      	ldr	r2, [pc, #504]	@ (800a084 <_printf_float+0x2d4>)
 8009e8c:	4b7e      	ldr	r3, [pc, #504]	@ (800a088 <_printf_float+0x2d8>)
 8009e8e:	e7d4      	b.n	8009e3a <_printf_float+0x8a>
 8009e90:	6863      	ldr	r3, [r4, #4]
 8009e92:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009e96:	9206      	str	r2, [sp, #24]
 8009e98:	1c5a      	adds	r2, r3, #1
 8009e9a:	d13b      	bne.n	8009f14 <_printf_float+0x164>
 8009e9c:	2306      	movs	r3, #6
 8009e9e:	6063      	str	r3, [r4, #4]
 8009ea0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	6022      	str	r2, [r4, #0]
 8009ea8:	9303      	str	r3, [sp, #12]
 8009eaa:	ab0a      	add	r3, sp, #40	@ 0x28
 8009eac:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009eb0:	ab09      	add	r3, sp, #36	@ 0x24
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	6861      	ldr	r1, [r4, #4]
 8009eb6:	ec49 8b10 	vmov	d0, r8, r9
 8009eba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	f7ff fed6 	bl	8009c70 <__cvt>
 8009ec4:	9b06      	ldr	r3, [sp, #24]
 8009ec6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ec8:	2b47      	cmp	r3, #71	@ 0x47
 8009eca:	4680      	mov	r8, r0
 8009ecc:	d129      	bne.n	8009f22 <_printf_float+0x172>
 8009ece:	1cc8      	adds	r0, r1, #3
 8009ed0:	db02      	blt.n	8009ed8 <_printf_float+0x128>
 8009ed2:	6863      	ldr	r3, [r4, #4]
 8009ed4:	4299      	cmp	r1, r3
 8009ed6:	dd41      	ble.n	8009f5c <_printf_float+0x1ac>
 8009ed8:	f1aa 0a02 	sub.w	sl, sl, #2
 8009edc:	fa5f fa8a 	uxtb.w	sl, sl
 8009ee0:	3901      	subs	r1, #1
 8009ee2:	4652      	mov	r2, sl
 8009ee4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009ee8:	9109      	str	r1, [sp, #36]	@ 0x24
 8009eea:	f7ff ff26 	bl	8009d3a <__exponent>
 8009eee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ef0:	1813      	adds	r3, r2, r0
 8009ef2:	2a01      	cmp	r2, #1
 8009ef4:	4681      	mov	r9, r0
 8009ef6:	6123      	str	r3, [r4, #16]
 8009ef8:	dc02      	bgt.n	8009f00 <_printf_float+0x150>
 8009efa:	6822      	ldr	r2, [r4, #0]
 8009efc:	07d2      	lsls	r2, r2, #31
 8009efe:	d501      	bpl.n	8009f04 <_printf_float+0x154>
 8009f00:	3301      	adds	r3, #1
 8009f02:	6123      	str	r3, [r4, #16]
 8009f04:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d0a2      	beq.n	8009e52 <_printf_float+0xa2>
 8009f0c:	232d      	movs	r3, #45	@ 0x2d
 8009f0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f12:	e79e      	b.n	8009e52 <_printf_float+0xa2>
 8009f14:	9a06      	ldr	r2, [sp, #24]
 8009f16:	2a47      	cmp	r2, #71	@ 0x47
 8009f18:	d1c2      	bne.n	8009ea0 <_printf_float+0xf0>
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d1c0      	bne.n	8009ea0 <_printf_float+0xf0>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e7bd      	b.n	8009e9e <_printf_float+0xee>
 8009f22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009f26:	d9db      	bls.n	8009ee0 <_printf_float+0x130>
 8009f28:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009f2c:	d118      	bne.n	8009f60 <_printf_float+0x1b0>
 8009f2e:	2900      	cmp	r1, #0
 8009f30:	6863      	ldr	r3, [r4, #4]
 8009f32:	dd0b      	ble.n	8009f4c <_printf_float+0x19c>
 8009f34:	6121      	str	r1, [r4, #16]
 8009f36:	b913      	cbnz	r3, 8009f3e <_printf_float+0x18e>
 8009f38:	6822      	ldr	r2, [r4, #0]
 8009f3a:	07d0      	lsls	r0, r2, #31
 8009f3c:	d502      	bpl.n	8009f44 <_printf_float+0x194>
 8009f3e:	3301      	adds	r3, #1
 8009f40:	440b      	add	r3, r1
 8009f42:	6123      	str	r3, [r4, #16]
 8009f44:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009f46:	f04f 0900 	mov.w	r9, #0
 8009f4a:	e7db      	b.n	8009f04 <_printf_float+0x154>
 8009f4c:	b913      	cbnz	r3, 8009f54 <_printf_float+0x1a4>
 8009f4e:	6822      	ldr	r2, [r4, #0]
 8009f50:	07d2      	lsls	r2, r2, #31
 8009f52:	d501      	bpl.n	8009f58 <_printf_float+0x1a8>
 8009f54:	3302      	adds	r3, #2
 8009f56:	e7f4      	b.n	8009f42 <_printf_float+0x192>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e7f2      	b.n	8009f42 <_printf_float+0x192>
 8009f5c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009f60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f62:	4299      	cmp	r1, r3
 8009f64:	db05      	blt.n	8009f72 <_printf_float+0x1c2>
 8009f66:	6823      	ldr	r3, [r4, #0]
 8009f68:	6121      	str	r1, [r4, #16]
 8009f6a:	07d8      	lsls	r0, r3, #31
 8009f6c:	d5ea      	bpl.n	8009f44 <_printf_float+0x194>
 8009f6e:	1c4b      	adds	r3, r1, #1
 8009f70:	e7e7      	b.n	8009f42 <_printf_float+0x192>
 8009f72:	2900      	cmp	r1, #0
 8009f74:	bfd4      	ite	le
 8009f76:	f1c1 0202 	rsble	r2, r1, #2
 8009f7a:	2201      	movgt	r2, #1
 8009f7c:	4413      	add	r3, r2
 8009f7e:	e7e0      	b.n	8009f42 <_printf_float+0x192>
 8009f80:	6823      	ldr	r3, [r4, #0]
 8009f82:	055a      	lsls	r2, r3, #21
 8009f84:	d407      	bmi.n	8009f96 <_printf_float+0x1e6>
 8009f86:	6923      	ldr	r3, [r4, #16]
 8009f88:	4642      	mov	r2, r8
 8009f8a:	4631      	mov	r1, r6
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	47b8      	blx	r7
 8009f90:	3001      	adds	r0, #1
 8009f92:	d12b      	bne.n	8009fec <_printf_float+0x23c>
 8009f94:	e767      	b.n	8009e66 <_printf_float+0xb6>
 8009f96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009f9a:	f240 80dd 	bls.w	800a158 <_printf_float+0x3a8>
 8009f9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	f7f6 fd8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009faa:	2800      	cmp	r0, #0
 8009fac:	d033      	beq.n	800a016 <_printf_float+0x266>
 8009fae:	4a37      	ldr	r2, [pc, #220]	@ (800a08c <_printf_float+0x2dc>)
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	4631      	mov	r1, r6
 8009fb4:	4628      	mov	r0, r5
 8009fb6:	47b8      	blx	r7
 8009fb8:	3001      	adds	r0, #1
 8009fba:	f43f af54 	beq.w	8009e66 <_printf_float+0xb6>
 8009fbe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009fc2:	4543      	cmp	r3, r8
 8009fc4:	db02      	blt.n	8009fcc <_printf_float+0x21c>
 8009fc6:	6823      	ldr	r3, [r4, #0]
 8009fc8:	07d8      	lsls	r0, r3, #31
 8009fca:	d50f      	bpl.n	8009fec <_printf_float+0x23c>
 8009fcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fd0:	4631      	mov	r1, r6
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	47b8      	blx	r7
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	f43f af45 	beq.w	8009e66 <_printf_float+0xb6>
 8009fdc:	f04f 0900 	mov.w	r9, #0
 8009fe0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009fe4:	f104 0a1a 	add.w	sl, r4, #26
 8009fe8:	45c8      	cmp	r8, r9
 8009fea:	dc09      	bgt.n	800a000 <_printf_float+0x250>
 8009fec:	6823      	ldr	r3, [r4, #0]
 8009fee:	079b      	lsls	r3, r3, #30
 8009ff0:	f100 8103 	bmi.w	800a1fa <_printf_float+0x44a>
 8009ff4:	68e0      	ldr	r0, [r4, #12]
 8009ff6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ff8:	4298      	cmp	r0, r3
 8009ffa:	bfb8      	it	lt
 8009ffc:	4618      	movlt	r0, r3
 8009ffe:	e734      	b.n	8009e6a <_printf_float+0xba>
 800a000:	2301      	movs	r3, #1
 800a002:	4652      	mov	r2, sl
 800a004:	4631      	mov	r1, r6
 800a006:	4628      	mov	r0, r5
 800a008:	47b8      	blx	r7
 800a00a:	3001      	adds	r0, #1
 800a00c:	f43f af2b 	beq.w	8009e66 <_printf_float+0xb6>
 800a010:	f109 0901 	add.w	r9, r9, #1
 800a014:	e7e8      	b.n	8009fe8 <_printf_float+0x238>
 800a016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a018:	2b00      	cmp	r3, #0
 800a01a:	dc39      	bgt.n	800a090 <_printf_float+0x2e0>
 800a01c:	4a1b      	ldr	r2, [pc, #108]	@ (800a08c <_printf_float+0x2dc>)
 800a01e:	2301      	movs	r3, #1
 800a020:	4631      	mov	r1, r6
 800a022:	4628      	mov	r0, r5
 800a024:	47b8      	blx	r7
 800a026:	3001      	adds	r0, #1
 800a028:	f43f af1d 	beq.w	8009e66 <_printf_float+0xb6>
 800a02c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a030:	ea59 0303 	orrs.w	r3, r9, r3
 800a034:	d102      	bne.n	800a03c <_printf_float+0x28c>
 800a036:	6823      	ldr	r3, [r4, #0]
 800a038:	07d9      	lsls	r1, r3, #31
 800a03a:	d5d7      	bpl.n	8009fec <_printf_float+0x23c>
 800a03c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a040:	4631      	mov	r1, r6
 800a042:	4628      	mov	r0, r5
 800a044:	47b8      	blx	r7
 800a046:	3001      	adds	r0, #1
 800a048:	f43f af0d 	beq.w	8009e66 <_printf_float+0xb6>
 800a04c:	f04f 0a00 	mov.w	sl, #0
 800a050:	f104 0b1a 	add.w	fp, r4, #26
 800a054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a056:	425b      	negs	r3, r3
 800a058:	4553      	cmp	r3, sl
 800a05a:	dc01      	bgt.n	800a060 <_printf_float+0x2b0>
 800a05c:	464b      	mov	r3, r9
 800a05e:	e793      	b.n	8009f88 <_printf_float+0x1d8>
 800a060:	2301      	movs	r3, #1
 800a062:	465a      	mov	r2, fp
 800a064:	4631      	mov	r1, r6
 800a066:	4628      	mov	r0, r5
 800a068:	47b8      	blx	r7
 800a06a:	3001      	adds	r0, #1
 800a06c:	f43f aefb 	beq.w	8009e66 <_printf_float+0xb6>
 800a070:	f10a 0a01 	add.w	sl, sl, #1
 800a074:	e7ee      	b.n	800a054 <_printf_float+0x2a4>
 800a076:	bf00      	nop
 800a078:	7fefffff 	.word	0x7fefffff
 800a07c:	0800c8e8 	.word	0x0800c8e8
 800a080:	0800c8ec 	.word	0x0800c8ec
 800a084:	0800c8f0 	.word	0x0800c8f0
 800a088:	0800c8f4 	.word	0x0800c8f4
 800a08c:	0800c8f8 	.word	0x0800c8f8
 800a090:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a092:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a096:	4553      	cmp	r3, sl
 800a098:	bfa8      	it	ge
 800a09a:	4653      	movge	r3, sl
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	4699      	mov	r9, r3
 800a0a0:	dc36      	bgt.n	800a110 <_printf_float+0x360>
 800a0a2:	f04f 0b00 	mov.w	fp, #0
 800a0a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0aa:	f104 021a 	add.w	r2, r4, #26
 800a0ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a0b0:	9306      	str	r3, [sp, #24]
 800a0b2:	eba3 0309 	sub.w	r3, r3, r9
 800a0b6:	455b      	cmp	r3, fp
 800a0b8:	dc31      	bgt.n	800a11e <_printf_float+0x36e>
 800a0ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0bc:	459a      	cmp	sl, r3
 800a0be:	dc3a      	bgt.n	800a136 <_printf_float+0x386>
 800a0c0:	6823      	ldr	r3, [r4, #0]
 800a0c2:	07da      	lsls	r2, r3, #31
 800a0c4:	d437      	bmi.n	800a136 <_printf_float+0x386>
 800a0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0c8:	ebaa 0903 	sub.w	r9, sl, r3
 800a0cc:	9b06      	ldr	r3, [sp, #24]
 800a0ce:	ebaa 0303 	sub.w	r3, sl, r3
 800a0d2:	4599      	cmp	r9, r3
 800a0d4:	bfa8      	it	ge
 800a0d6:	4699      	movge	r9, r3
 800a0d8:	f1b9 0f00 	cmp.w	r9, #0
 800a0dc:	dc33      	bgt.n	800a146 <_printf_float+0x396>
 800a0de:	f04f 0800 	mov.w	r8, #0
 800a0e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0e6:	f104 0b1a 	add.w	fp, r4, #26
 800a0ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0ec:	ebaa 0303 	sub.w	r3, sl, r3
 800a0f0:	eba3 0309 	sub.w	r3, r3, r9
 800a0f4:	4543      	cmp	r3, r8
 800a0f6:	f77f af79 	ble.w	8009fec <_printf_float+0x23c>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	465a      	mov	r2, fp
 800a0fe:	4631      	mov	r1, r6
 800a100:	4628      	mov	r0, r5
 800a102:	47b8      	blx	r7
 800a104:	3001      	adds	r0, #1
 800a106:	f43f aeae 	beq.w	8009e66 <_printf_float+0xb6>
 800a10a:	f108 0801 	add.w	r8, r8, #1
 800a10e:	e7ec      	b.n	800a0ea <_printf_float+0x33a>
 800a110:	4642      	mov	r2, r8
 800a112:	4631      	mov	r1, r6
 800a114:	4628      	mov	r0, r5
 800a116:	47b8      	blx	r7
 800a118:	3001      	adds	r0, #1
 800a11a:	d1c2      	bne.n	800a0a2 <_printf_float+0x2f2>
 800a11c:	e6a3      	b.n	8009e66 <_printf_float+0xb6>
 800a11e:	2301      	movs	r3, #1
 800a120:	4631      	mov	r1, r6
 800a122:	4628      	mov	r0, r5
 800a124:	9206      	str	r2, [sp, #24]
 800a126:	47b8      	blx	r7
 800a128:	3001      	adds	r0, #1
 800a12a:	f43f ae9c 	beq.w	8009e66 <_printf_float+0xb6>
 800a12e:	9a06      	ldr	r2, [sp, #24]
 800a130:	f10b 0b01 	add.w	fp, fp, #1
 800a134:	e7bb      	b.n	800a0ae <_printf_float+0x2fe>
 800a136:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a13a:	4631      	mov	r1, r6
 800a13c:	4628      	mov	r0, r5
 800a13e:	47b8      	blx	r7
 800a140:	3001      	adds	r0, #1
 800a142:	d1c0      	bne.n	800a0c6 <_printf_float+0x316>
 800a144:	e68f      	b.n	8009e66 <_printf_float+0xb6>
 800a146:	9a06      	ldr	r2, [sp, #24]
 800a148:	464b      	mov	r3, r9
 800a14a:	4442      	add	r2, r8
 800a14c:	4631      	mov	r1, r6
 800a14e:	4628      	mov	r0, r5
 800a150:	47b8      	blx	r7
 800a152:	3001      	adds	r0, #1
 800a154:	d1c3      	bne.n	800a0de <_printf_float+0x32e>
 800a156:	e686      	b.n	8009e66 <_printf_float+0xb6>
 800a158:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a15c:	f1ba 0f01 	cmp.w	sl, #1
 800a160:	dc01      	bgt.n	800a166 <_printf_float+0x3b6>
 800a162:	07db      	lsls	r3, r3, #31
 800a164:	d536      	bpl.n	800a1d4 <_printf_float+0x424>
 800a166:	2301      	movs	r3, #1
 800a168:	4642      	mov	r2, r8
 800a16a:	4631      	mov	r1, r6
 800a16c:	4628      	mov	r0, r5
 800a16e:	47b8      	blx	r7
 800a170:	3001      	adds	r0, #1
 800a172:	f43f ae78 	beq.w	8009e66 <_printf_float+0xb6>
 800a176:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a17a:	4631      	mov	r1, r6
 800a17c:	4628      	mov	r0, r5
 800a17e:	47b8      	blx	r7
 800a180:	3001      	adds	r0, #1
 800a182:	f43f ae70 	beq.w	8009e66 <_printf_float+0xb6>
 800a186:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a18a:	2200      	movs	r2, #0
 800a18c:	2300      	movs	r3, #0
 800a18e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a192:	f7f6 fc99 	bl	8000ac8 <__aeabi_dcmpeq>
 800a196:	b9c0      	cbnz	r0, 800a1ca <_printf_float+0x41a>
 800a198:	4653      	mov	r3, sl
 800a19a:	f108 0201 	add.w	r2, r8, #1
 800a19e:	4631      	mov	r1, r6
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	47b8      	blx	r7
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	d10c      	bne.n	800a1c2 <_printf_float+0x412>
 800a1a8:	e65d      	b.n	8009e66 <_printf_float+0xb6>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	465a      	mov	r2, fp
 800a1ae:	4631      	mov	r1, r6
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	47b8      	blx	r7
 800a1b4:	3001      	adds	r0, #1
 800a1b6:	f43f ae56 	beq.w	8009e66 <_printf_float+0xb6>
 800a1ba:	f108 0801 	add.w	r8, r8, #1
 800a1be:	45d0      	cmp	r8, sl
 800a1c0:	dbf3      	blt.n	800a1aa <_printf_float+0x3fa>
 800a1c2:	464b      	mov	r3, r9
 800a1c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a1c8:	e6df      	b.n	8009f8a <_printf_float+0x1da>
 800a1ca:	f04f 0800 	mov.w	r8, #0
 800a1ce:	f104 0b1a 	add.w	fp, r4, #26
 800a1d2:	e7f4      	b.n	800a1be <_printf_float+0x40e>
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	4642      	mov	r2, r8
 800a1d8:	e7e1      	b.n	800a19e <_printf_float+0x3ee>
 800a1da:	2301      	movs	r3, #1
 800a1dc:	464a      	mov	r2, r9
 800a1de:	4631      	mov	r1, r6
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	47b8      	blx	r7
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	f43f ae3e 	beq.w	8009e66 <_printf_float+0xb6>
 800a1ea:	f108 0801 	add.w	r8, r8, #1
 800a1ee:	68e3      	ldr	r3, [r4, #12]
 800a1f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a1f2:	1a5b      	subs	r3, r3, r1
 800a1f4:	4543      	cmp	r3, r8
 800a1f6:	dcf0      	bgt.n	800a1da <_printf_float+0x42a>
 800a1f8:	e6fc      	b.n	8009ff4 <_printf_float+0x244>
 800a1fa:	f04f 0800 	mov.w	r8, #0
 800a1fe:	f104 0919 	add.w	r9, r4, #25
 800a202:	e7f4      	b.n	800a1ee <_printf_float+0x43e>

0800a204 <_printf_common>:
 800a204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a208:	4616      	mov	r6, r2
 800a20a:	4698      	mov	r8, r3
 800a20c:	688a      	ldr	r2, [r1, #8]
 800a20e:	690b      	ldr	r3, [r1, #16]
 800a210:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a214:	4293      	cmp	r3, r2
 800a216:	bfb8      	it	lt
 800a218:	4613      	movlt	r3, r2
 800a21a:	6033      	str	r3, [r6, #0]
 800a21c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a220:	4607      	mov	r7, r0
 800a222:	460c      	mov	r4, r1
 800a224:	b10a      	cbz	r2, 800a22a <_printf_common+0x26>
 800a226:	3301      	adds	r3, #1
 800a228:	6033      	str	r3, [r6, #0]
 800a22a:	6823      	ldr	r3, [r4, #0]
 800a22c:	0699      	lsls	r1, r3, #26
 800a22e:	bf42      	ittt	mi
 800a230:	6833      	ldrmi	r3, [r6, #0]
 800a232:	3302      	addmi	r3, #2
 800a234:	6033      	strmi	r3, [r6, #0]
 800a236:	6825      	ldr	r5, [r4, #0]
 800a238:	f015 0506 	ands.w	r5, r5, #6
 800a23c:	d106      	bne.n	800a24c <_printf_common+0x48>
 800a23e:	f104 0a19 	add.w	sl, r4, #25
 800a242:	68e3      	ldr	r3, [r4, #12]
 800a244:	6832      	ldr	r2, [r6, #0]
 800a246:	1a9b      	subs	r3, r3, r2
 800a248:	42ab      	cmp	r3, r5
 800a24a:	dc26      	bgt.n	800a29a <_printf_common+0x96>
 800a24c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a250:	6822      	ldr	r2, [r4, #0]
 800a252:	3b00      	subs	r3, #0
 800a254:	bf18      	it	ne
 800a256:	2301      	movne	r3, #1
 800a258:	0692      	lsls	r2, r2, #26
 800a25a:	d42b      	bmi.n	800a2b4 <_printf_common+0xb0>
 800a25c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a260:	4641      	mov	r1, r8
 800a262:	4638      	mov	r0, r7
 800a264:	47c8      	blx	r9
 800a266:	3001      	adds	r0, #1
 800a268:	d01e      	beq.n	800a2a8 <_printf_common+0xa4>
 800a26a:	6823      	ldr	r3, [r4, #0]
 800a26c:	6922      	ldr	r2, [r4, #16]
 800a26e:	f003 0306 	and.w	r3, r3, #6
 800a272:	2b04      	cmp	r3, #4
 800a274:	bf02      	ittt	eq
 800a276:	68e5      	ldreq	r5, [r4, #12]
 800a278:	6833      	ldreq	r3, [r6, #0]
 800a27a:	1aed      	subeq	r5, r5, r3
 800a27c:	68a3      	ldr	r3, [r4, #8]
 800a27e:	bf0c      	ite	eq
 800a280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a284:	2500      	movne	r5, #0
 800a286:	4293      	cmp	r3, r2
 800a288:	bfc4      	itt	gt
 800a28a:	1a9b      	subgt	r3, r3, r2
 800a28c:	18ed      	addgt	r5, r5, r3
 800a28e:	2600      	movs	r6, #0
 800a290:	341a      	adds	r4, #26
 800a292:	42b5      	cmp	r5, r6
 800a294:	d11a      	bne.n	800a2cc <_printf_common+0xc8>
 800a296:	2000      	movs	r0, #0
 800a298:	e008      	b.n	800a2ac <_printf_common+0xa8>
 800a29a:	2301      	movs	r3, #1
 800a29c:	4652      	mov	r2, sl
 800a29e:	4641      	mov	r1, r8
 800a2a0:	4638      	mov	r0, r7
 800a2a2:	47c8      	blx	r9
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	d103      	bne.n	800a2b0 <_printf_common+0xac>
 800a2a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b0:	3501      	adds	r5, #1
 800a2b2:	e7c6      	b.n	800a242 <_printf_common+0x3e>
 800a2b4:	18e1      	adds	r1, r4, r3
 800a2b6:	1c5a      	adds	r2, r3, #1
 800a2b8:	2030      	movs	r0, #48	@ 0x30
 800a2ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a2be:	4422      	add	r2, r4
 800a2c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a2c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a2c8:	3302      	adds	r3, #2
 800a2ca:	e7c7      	b.n	800a25c <_printf_common+0x58>
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	4622      	mov	r2, r4
 800a2d0:	4641      	mov	r1, r8
 800a2d2:	4638      	mov	r0, r7
 800a2d4:	47c8      	blx	r9
 800a2d6:	3001      	adds	r0, #1
 800a2d8:	d0e6      	beq.n	800a2a8 <_printf_common+0xa4>
 800a2da:	3601      	adds	r6, #1
 800a2dc:	e7d9      	b.n	800a292 <_printf_common+0x8e>
	...

0800a2e0 <_printf_i>:
 800a2e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2e4:	7e0f      	ldrb	r7, [r1, #24]
 800a2e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a2e8:	2f78      	cmp	r7, #120	@ 0x78
 800a2ea:	4691      	mov	r9, r2
 800a2ec:	4680      	mov	r8, r0
 800a2ee:	460c      	mov	r4, r1
 800a2f0:	469a      	mov	sl, r3
 800a2f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a2f6:	d807      	bhi.n	800a308 <_printf_i+0x28>
 800a2f8:	2f62      	cmp	r7, #98	@ 0x62
 800a2fa:	d80a      	bhi.n	800a312 <_printf_i+0x32>
 800a2fc:	2f00      	cmp	r7, #0
 800a2fe:	f000 80d2 	beq.w	800a4a6 <_printf_i+0x1c6>
 800a302:	2f58      	cmp	r7, #88	@ 0x58
 800a304:	f000 80b9 	beq.w	800a47a <_printf_i+0x19a>
 800a308:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a30c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a310:	e03a      	b.n	800a388 <_printf_i+0xa8>
 800a312:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a316:	2b15      	cmp	r3, #21
 800a318:	d8f6      	bhi.n	800a308 <_printf_i+0x28>
 800a31a:	a101      	add	r1, pc, #4	@ (adr r1, 800a320 <_printf_i+0x40>)
 800a31c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a320:	0800a379 	.word	0x0800a379
 800a324:	0800a38d 	.word	0x0800a38d
 800a328:	0800a309 	.word	0x0800a309
 800a32c:	0800a309 	.word	0x0800a309
 800a330:	0800a309 	.word	0x0800a309
 800a334:	0800a309 	.word	0x0800a309
 800a338:	0800a38d 	.word	0x0800a38d
 800a33c:	0800a309 	.word	0x0800a309
 800a340:	0800a309 	.word	0x0800a309
 800a344:	0800a309 	.word	0x0800a309
 800a348:	0800a309 	.word	0x0800a309
 800a34c:	0800a48d 	.word	0x0800a48d
 800a350:	0800a3b7 	.word	0x0800a3b7
 800a354:	0800a447 	.word	0x0800a447
 800a358:	0800a309 	.word	0x0800a309
 800a35c:	0800a309 	.word	0x0800a309
 800a360:	0800a4af 	.word	0x0800a4af
 800a364:	0800a309 	.word	0x0800a309
 800a368:	0800a3b7 	.word	0x0800a3b7
 800a36c:	0800a309 	.word	0x0800a309
 800a370:	0800a309 	.word	0x0800a309
 800a374:	0800a44f 	.word	0x0800a44f
 800a378:	6833      	ldr	r3, [r6, #0]
 800a37a:	1d1a      	adds	r2, r3, #4
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	6032      	str	r2, [r6, #0]
 800a380:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a384:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a388:	2301      	movs	r3, #1
 800a38a:	e09d      	b.n	800a4c8 <_printf_i+0x1e8>
 800a38c:	6833      	ldr	r3, [r6, #0]
 800a38e:	6820      	ldr	r0, [r4, #0]
 800a390:	1d19      	adds	r1, r3, #4
 800a392:	6031      	str	r1, [r6, #0]
 800a394:	0606      	lsls	r6, r0, #24
 800a396:	d501      	bpl.n	800a39c <_printf_i+0xbc>
 800a398:	681d      	ldr	r5, [r3, #0]
 800a39a:	e003      	b.n	800a3a4 <_printf_i+0xc4>
 800a39c:	0645      	lsls	r5, r0, #25
 800a39e:	d5fb      	bpl.n	800a398 <_printf_i+0xb8>
 800a3a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a3a4:	2d00      	cmp	r5, #0
 800a3a6:	da03      	bge.n	800a3b0 <_printf_i+0xd0>
 800a3a8:	232d      	movs	r3, #45	@ 0x2d
 800a3aa:	426d      	negs	r5, r5
 800a3ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3b0:	4859      	ldr	r0, [pc, #356]	@ (800a518 <_printf_i+0x238>)
 800a3b2:	230a      	movs	r3, #10
 800a3b4:	e011      	b.n	800a3da <_printf_i+0xfa>
 800a3b6:	6821      	ldr	r1, [r4, #0]
 800a3b8:	6833      	ldr	r3, [r6, #0]
 800a3ba:	0608      	lsls	r0, r1, #24
 800a3bc:	f853 5b04 	ldr.w	r5, [r3], #4
 800a3c0:	d402      	bmi.n	800a3c8 <_printf_i+0xe8>
 800a3c2:	0649      	lsls	r1, r1, #25
 800a3c4:	bf48      	it	mi
 800a3c6:	b2ad      	uxthmi	r5, r5
 800a3c8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a3ca:	4853      	ldr	r0, [pc, #332]	@ (800a518 <_printf_i+0x238>)
 800a3cc:	6033      	str	r3, [r6, #0]
 800a3ce:	bf14      	ite	ne
 800a3d0:	230a      	movne	r3, #10
 800a3d2:	2308      	moveq	r3, #8
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a3da:	6866      	ldr	r6, [r4, #4]
 800a3dc:	60a6      	str	r6, [r4, #8]
 800a3de:	2e00      	cmp	r6, #0
 800a3e0:	bfa2      	ittt	ge
 800a3e2:	6821      	ldrge	r1, [r4, #0]
 800a3e4:	f021 0104 	bicge.w	r1, r1, #4
 800a3e8:	6021      	strge	r1, [r4, #0]
 800a3ea:	b90d      	cbnz	r5, 800a3f0 <_printf_i+0x110>
 800a3ec:	2e00      	cmp	r6, #0
 800a3ee:	d04b      	beq.n	800a488 <_printf_i+0x1a8>
 800a3f0:	4616      	mov	r6, r2
 800a3f2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a3f6:	fb03 5711 	mls	r7, r3, r1, r5
 800a3fa:	5dc7      	ldrb	r7, [r0, r7]
 800a3fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a400:	462f      	mov	r7, r5
 800a402:	42bb      	cmp	r3, r7
 800a404:	460d      	mov	r5, r1
 800a406:	d9f4      	bls.n	800a3f2 <_printf_i+0x112>
 800a408:	2b08      	cmp	r3, #8
 800a40a:	d10b      	bne.n	800a424 <_printf_i+0x144>
 800a40c:	6823      	ldr	r3, [r4, #0]
 800a40e:	07df      	lsls	r7, r3, #31
 800a410:	d508      	bpl.n	800a424 <_printf_i+0x144>
 800a412:	6923      	ldr	r3, [r4, #16]
 800a414:	6861      	ldr	r1, [r4, #4]
 800a416:	4299      	cmp	r1, r3
 800a418:	bfde      	ittt	le
 800a41a:	2330      	movle	r3, #48	@ 0x30
 800a41c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a420:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a424:	1b92      	subs	r2, r2, r6
 800a426:	6122      	str	r2, [r4, #16]
 800a428:	f8cd a000 	str.w	sl, [sp]
 800a42c:	464b      	mov	r3, r9
 800a42e:	aa03      	add	r2, sp, #12
 800a430:	4621      	mov	r1, r4
 800a432:	4640      	mov	r0, r8
 800a434:	f7ff fee6 	bl	800a204 <_printf_common>
 800a438:	3001      	adds	r0, #1
 800a43a:	d14a      	bne.n	800a4d2 <_printf_i+0x1f2>
 800a43c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a440:	b004      	add	sp, #16
 800a442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a446:	6823      	ldr	r3, [r4, #0]
 800a448:	f043 0320 	orr.w	r3, r3, #32
 800a44c:	6023      	str	r3, [r4, #0]
 800a44e:	4833      	ldr	r0, [pc, #204]	@ (800a51c <_printf_i+0x23c>)
 800a450:	2778      	movs	r7, #120	@ 0x78
 800a452:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a456:	6823      	ldr	r3, [r4, #0]
 800a458:	6831      	ldr	r1, [r6, #0]
 800a45a:	061f      	lsls	r7, r3, #24
 800a45c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a460:	d402      	bmi.n	800a468 <_printf_i+0x188>
 800a462:	065f      	lsls	r7, r3, #25
 800a464:	bf48      	it	mi
 800a466:	b2ad      	uxthmi	r5, r5
 800a468:	6031      	str	r1, [r6, #0]
 800a46a:	07d9      	lsls	r1, r3, #31
 800a46c:	bf44      	itt	mi
 800a46e:	f043 0320 	orrmi.w	r3, r3, #32
 800a472:	6023      	strmi	r3, [r4, #0]
 800a474:	b11d      	cbz	r5, 800a47e <_printf_i+0x19e>
 800a476:	2310      	movs	r3, #16
 800a478:	e7ac      	b.n	800a3d4 <_printf_i+0xf4>
 800a47a:	4827      	ldr	r0, [pc, #156]	@ (800a518 <_printf_i+0x238>)
 800a47c:	e7e9      	b.n	800a452 <_printf_i+0x172>
 800a47e:	6823      	ldr	r3, [r4, #0]
 800a480:	f023 0320 	bic.w	r3, r3, #32
 800a484:	6023      	str	r3, [r4, #0]
 800a486:	e7f6      	b.n	800a476 <_printf_i+0x196>
 800a488:	4616      	mov	r6, r2
 800a48a:	e7bd      	b.n	800a408 <_printf_i+0x128>
 800a48c:	6833      	ldr	r3, [r6, #0]
 800a48e:	6825      	ldr	r5, [r4, #0]
 800a490:	6961      	ldr	r1, [r4, #20]
 800a492:	1d18      	adds	r0, r3, #4
 800a494:	6030      	str	r0, [r6, #0]
 800a496:	062e      	lsls	r6, r5, #24
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	d501      	bpl.n	800a4a0 <_printf_i+0x1c0>
 800a49c:	6019      	str	r1, [r3, #0]
 800a49e:	e002      	b.n	800a4a6 <_printf_i+0x1c6>
 800a4a0:	0668      	lsls	r0, r5, #25
 800a4a2:	d5fb      	bpl.n	800a49c <_printf_i+0x1bc>
 800a4a4:	8019      	strh	r1, [r3, #0]
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	6123      	str	r3, [r4, #16]
 800a4aa:	4616      	mov	r6, r2
 800a4ac:	e7bc      	b.n	800a428 <_printf_i+0x148>
 800a4ae:	6833      	ldr	r3, [r6, #0]
 800a4b0:	1d1a      	adds	r2, r3, #4
 800a4b2:	6032      	str	r2, [r6, #0]
 800a4b4:	681e      	ldr	r6, [r3, #0]
 800a4b6:	6862      	ldr	r2, [r4, #4]
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	f7f5 fe88 	bl	80001d0 <memchr>
 800a4c0:	b108      	cbz	r0, 800a4c6 <_printf_i+0x1e6>
 800a4c2:	1b80      	subs	r0, r0, r6
 800a4c4:	6060      	str	r0, [r4, #4]
 800a4c6:	6863      	ldr	r3, [r4, #4]
 800a4c8:	6123      	str	r3, [r4, #16]
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4d0:	e7aa      	b.n	800a428 <_printf_i+0x148>
 800a4d2:	6923      	ldr	r3, [r4, #16]
 800a4d4:	4632      	mov	r2, r6
 800a4d6:	4649      	mov	r1, r9
 800a4d8:	4640      	mov	r0, r8
 800a4da:	47d0      	blx	sl
 800a4dc:	3001      	adds	r0, #1
 800a4de:	d0ad      	beq.n	800a43c <_printf_i+0x15c>
 800a4e0:	6823      	ldr	r3, [r4, #0]
 800a4e2:	079b      	lsls	r3, r3, #30
 800a4e4:	d413      	bmi.n	800a50e <_printf_i+0x22e>
 800a4e6:	68e0      	ldr	r0, [r4, #12]
 800a4e8:	9b03      	ldr	r3, [sp, #12]
 800a4ea:	4298      	cmp	r0, r3
 800a4ec:	bfb8      	it	lt
 800a4ee:	4618      	movlt	r0, r3
 800a4f0:	e7a6      	b.n	800a440 <_printf_i+0x160>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	4632      	mov	r2, r6
 800a4f6:	4649      	mov	r1, r9
 800a4f8:	4640      	mov	r0, r8
 800a4fa:	47d0      	blx	sl
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	d09d      	beq.n	800a43c <_printf_i+0x15c>
 800a500:	3501      	adds	r5, #1
 800a502:	68e3      	ldr	r3, [r4, #12]
 800a504:	9903      	ldr	r1, [sp, #12]
 800a506:	1a5b      	subs	r3, r3, r1
 800a508:	42ab      	cmp	r3, r5
 800a50a:	dcf2      	bgt.n	800a4f2 <_printf_i+0x212>
 800a50c:	e7eb      	b.n	800a4e6 <_printf_i+0x206>
 800a50e:	2500      	movs	r5, #0
 800a510:	f104 0619 	add.w	r6, r4, #25
 800a514:	e7f5      	b.n	800a502 <_printf_i+0x222>
 800a516:	bf00      	nop
 800a518:	0800c8fa 	.word	0x0800c8fa
 800a51c:	0800c90b 	.word	0x0800c90b

0800a520 <std>:
 800a520:	2300      	movs	r3, #0
 800a522:	b510      	push	{r4, lr}
 800a524:	4604      	mov	r4, r0
 800a526:	e9c0 3300 	strd	r3, r3, [r0]
 800a52a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a52e:	6083      	str	r3, [r0, #8]
 800a530:	8181      	strh	r1, [r0, #12]
 800a532:	6643      	str	r3, [r0, #100]	@ 0x64
 800a534:	81c2      	strh	r2, [r0, #14]
 800a536:	6183      	str	r3, [r0, #24]
 800a538:	4619      	mov	r1, r3
 800a53a:	2208      	movs	r2, #8
 800a53c:	305c      	adds	r0, #92	@ 0x5c
 800a53e:	f000 f9ca 	bl	800a8d6 <memset>
 800a542:	4b0d      	ldr	r3, [pc, #52]	@ (800a578 <std+0x58>)
 800a544:	6263      	str	r3, [r4, #36]	@ 0x24
 800a546:	4b0d      	ldr	r3, [pc, #52]	@ (800a57c <std+0x5c>)
 800a548:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a54a:	4b0d      	ldr	r3, [pc, #52]	@ (800a580 <std+0x60>)
 800a54c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a54e:	4b0d      	ldr	r3, [pc, #52]	@ (800a584 <std+0x64>)
 800a550:	6323      	str	r3, [r4, #48]	@ 0x30
 800a552:	4b0d      	ldr	r3, [pc, #52]	@ (800a588 <std+0x68>)
 800a554:	6224      	str	r4, [r4, #32]
 800a556:	429c      	cmp	r4, r3
 800a558:	d006      	beq.n	800a568 <std+0x48>
 800a55a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a55e:	4294      	cmp	r4, r2
 800a560:	d002      	beq.n	800a568 <std+0x48>
 800a562:	33d0      	adds	r3, #208	@ 0xd0
 800a564:	429c      	cmp	r4, r3
 800a566:	d105      	bne.n	800a574 <std+0x54>
 800a568:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a570:	f000 ba40 	b.w	800a9f4 <__retarget_lock_init_recursive>
 800a574:	bd10      	pop	{r4, pc}
 800a576:	bf00      	nop
 800a578:	0800a851 	.word	0x0800a851
 800a57c:	0800a873 	.word	0x0800a873
 800a580:	0800a8ab 	.word	0x0800a8ab
 800a584:	0800a8cf 	.word	0x0800a8cf
 800a588:	20000404 	.word	0x20000404

0800a58c <stdio_exit_handler>:
 800a58c:	4a02      	ldr	r2, [pc, #8]	@ (800a598 <stdio_exit_handler+0xc>)
 800a58e:	4903      	ldr	r1, [pc, #12]	@ (800a59c <stdio_exit_handler+0x10>)
 800a590:	4803      	ldr	r0, [pc, #12]	@ (800a5a0 <stdio_exit_handler+0x14>)
 800a592:	f000 b869 	b.w	800a668 <_fwalk_sglue>
 800a596:	bf00      	nop
 800a598:	2000003c 	.word	0x2000003c
 800a59c:	0800c341 	.word	0x0800c341
 800a5a0:	2000004c 	.word	0x2000004c

0800a5a4 <cleanup_stdio>:
 800a5a4:	6841      	ldr	r1, [r0, #4]
 800a5a6:	4b0c      	ldr	r3, [pc, #48]	@ (800a5d8 <cleanup_stdio+0x34>)
 800a5a8:	4299      	cmp	r1, r3
 800a5aa:	b510      	push	{r4, lr}
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	d001      	beq.n	800a5b4 <cleanup_stdio+0x10>
 800a5b0:	f001 fec6 	bl	800c340 <_fflush_r>
 800a5b4:	68a1      	ldr	r1, [r4, #8]
 800a5b6:	4b09      	ldr	r3, [pc, #36]	@ (800a5dc <cleanup_stdio+0x38>)
 800a5b8:	4299      	cmp	r1, r3
 800a5ba:	d002      	beq.n	800a5c2 <cleanup_stdio+0x1e>
 800a5bc:	4620      	mov	r0, r4
 800a5be:	f001 febf 	bl	800c340 <_fflush_r>
 800a5c2:	68e1      	ldr	r1, [r4, #12]
 800a5c4:	4b06      	ldr	r3, [pc, #24]	@ (800a5e0 <cleanup_stdio+0x3c>)
 800a5c6:	4299      	cmp	r1, r3
 800a5c8:	d004      	beq.n	800a5d4 <cleanup_stdio+0x30>
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5d0:	f001 beb6 	b.w	800c340 <_fflush_r>
 800a5d4:	bd10      	pop	{r4, pc}
 800a5d6:	bf00      	nop
 800a5d8:	20000404 	.word	0x20000404
 800a5dc:	2000046c 	.word	0x2000046c
 800a5e0:	200004d4 	.word	0x200004d4

0800a5e4 <global_stdio_init.part.0>:
 800a5e4:	b510      	push	{r4, lr}
 800a5e6:	4b0b      	ldr	r3, [pc, #44]	@ (800a614 <global_stdio_init.part.0+0x30>)
 800a5e8:	4c0b      	ldr	r4, [pc, #44]	@ (800a618 <global_stdio_init.part.0+0x34>)
 800a5ea:	4a0c      	ldr	r2, [pc, #48]	@ (800a61c <global_stdio_init.part.0+0x38>)
 800a5ec:	601a      	str	r2, [r3, #0]
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	2104      	movs	r1, #4
 800a5f4:	f7ff ff94 	bl	800a520 <std>
 800a5f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	2109      	movs	r1, #9
 800a600:	f7ff ff8e 	bl	800a520 <std>
 800a604:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a608:	2202      	movs	r2, #2
 800a60a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a60e:	2112      	movs	r1, #18
 800a610:	f7ff bf86 	b.w	800a520 <std>
 800a614:	2000053c 	.word	0x2000053c
 800a618:	20000404 	.word	0x20000404
 800a61c:	0800a58d 	.word	0x0800a58d

0800a620 <__sfp_lock_acquire>:
 800a620:	4801      	ldr	r0, [pc, #4]	@ (800a628 <__sfp_lock_acquire+0x8>)
 800a622:	f000 b9e8 	b.w	800a9f6 <__retarget_lock_acquire_recursive>
 800a626:	bf00      	nop
 800a628:	20000545 	.word	0x20000545

0800a62c <__sfp_lock_release>:
 800a62c:	4801      	ldr	r0, [pc, #4]	@ (800a634 <__sfp_lock_release+0x8>)
 800a62e:	f000 b9e3 	b.w	800a9f8 <__retarget_lock_release_recursive>
 800a632:	bf00      	nop
 800a634:	20000545 	.word	0x20000545

0800a638 <__sinit>:
 800a638:	b510      	push	{r4, lr}
 800a63a:	4604      	mov	r4, r0
 800a63c:	f7ff fff0 	bl	800a620 <__sfp_lock_acquire>
 800a640:	6a23      	ldr	r3, [r4, #32]
 800a642:	b11b      	cbz	r3, 800a64c <__sinit+0x14>
 800a644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a648:	f7ff bff0 	b.w	800a62c <__sfp_lock_release>
 800a64c:	4b04      	ldr	r3, [pc, #16]	@ (800a660 <__sinit+0x28>)
 800a64e:	6223      	str	r3, [r4, #32]
 800a650:	4b04      	ldr	r3, [pc, #16]	@ (800a664 <__sinit+0x2c>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d1f5      	bne.n	800a644 <__sinit+0xc>
 800a658:	f7ff ffc4 	bl	800a5e4 <global_stdio_init.part.0>
 800a65c:	e7f2      	b.n	800a644 <__sinit+0xc>
 800a65e:	bf00      	nop
 800a660:	0800a5a5 	.word	0x0800a5a5
 800a664:	2000053c 	.word	0x2000053c

0800a668 <_fwalk_sglue>:
 800a668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a66c:	4607      	mov	r7, r0
 800a66e:	4688      	mov	r8, r1
 800a670:	4614      	mov	r4, r2
 800a672:	2600      	movs	r6, #0
 800a674:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a678:	f1b9 0901 	subs.w	r9, r9, #1
 800a67c:	d505      	bpl.n	800a68a <_fwalk_sglue+0x22>
 800a67e:	6824      	ldr	r4, [r4, #0]
 800a680:	2c00      	cmp	r4, #0
 800a682:	d1f7      	bne.n	800a674 <_fwalk_sglue+0xc>
 800a684:	4630      	mov	r0, r6
 800a686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a68a:	89ab      	ldrh	r3, [r5, #12]
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d907      	bls.n	800a6a0 <_fwalk_sglue+0x38>
 800a690:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a694:	3301      	adds	r3, #1
 800a696:	d003      	beq.n	800a6a0 <_fwalk_sglue+0x38>
 800a698:	4629      	mov	r1, r5
 800a69a:	4638      	mov	r0, r7
 800a69c:	47c0      	blx	r8
 800a69e:	4306      	orrs	r6, r0
 800a6a0:	3568      	adds	r5, #104	@ 0x68
 800a6a2:	e7e9      	b.n	800a678 <_fwalk_sglue+0x10>

0800a6a4 <iprintf>:
 800a6a4:	b40f      	push	{r0, r1, r2, r3}
 800a6a6:	b507      	push	{r0, r1, r2, lr}
 800a6a8:	4906      	ldr	r1, [pc, #24]	@ (800a6c4 <iprintf+0x20>)
 800a6aa:	ab04      	add	r3, sp, #16
 800a6ac:	6808      	ldr	r0, [r1, #0]
 800a6ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6b2:	6881      	ldr	r1, [r0, #8]
 800a6b4:	9301      	str	r3, [sp, #4]
 800a6b6:	f001 fca7 	bl	800c008 <_vfiprintf_r>
 800a6ba:	b003      	add	sp, #12
 800a6bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6c0:	b004      	add	sp, #16
 800a6c2:	4770      	bx	lr
 800a6c4:	20000048 	.word	0x20000048

0800a6c8 <putchar>:
 800a6c8:	4b02      	ldr	r3, [pc, #8]	@ (800a6d4 <putchar+0xc>)
 800a6ca:	4601      	mov	r1, r0
 800a6cc:	6818      	ldr	r0, [r3, #0]
 800a6ce:	6882      	ldr	r2, [r0, #8]
 800a6d0:	f001 bec0 	b.w	800c454 <_putc_r>
 800a6d4:	20000048 	.word	0x20000048

0800a6d8 <setbuf>:
 800a6d8:	fab1 f281 	clz	r2, r1
 800a6dc:	0952      	lsrs	r2, r2, #5
 800a6de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6e2:	0052      	lsls	r2, r2, #1
 800a6e4:	f000 b800 	b.w	800a6e8 <setvbuf>

0800a6e8 <setvbuf>:
 800a6e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a6ec:	461d      	mov	r5, r3
 800a6ee:	4b57      	ldr	r3, [pc, #348]	@ (800a84c <setvbuf+0x164>)
 800a6f0:	681f      	ldr	r7, [r3, #0]
 800a6f2:	4604      	mov	r4, r0
 800a6f4:	460e      	mov	r6, r1
 800a6f6:	4690      	mov	r8, r2
 800a6f8:	b127      	cbz	r7, 800a704 <setvbuf+0x1c>
 800a6fa:	6a3b      	ldr	r3, [r7, #32]
 800a6fc:	b913      	cbnz	r3, 800a704 <setvbuf+0x1c>
 800a6fe:	4638      	mov	r0, r7
 800a700:	f7ff ff9a 	bl	800a638 <__sinit>
 800a704:	f1b8 0f02 	cmp.w	r8, #2
 800a708:	d006      	beq.n	800a718 <setvbuf+0x30>
 800a70a:	f1b8 0f01 	cmp.w	r8, #1
 800a70e:	f200 809a 	bhi.w	800a846 <setvbuf+0x15e>
 800a712:	2d00      	cmp	r5, #0
 800a714:	f2c0 8097 	blt.w	800a846 <setvbuf+0x15e>
 800a718:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a71a:	07d9      	lsls	r1, r3, #31
 800a71c:	d405      	bmi.n	800a72a <setvbuf+0x42>
 800a71e:	89a3      	ldrh	r3, [r4, #12]
 800a720:	059a      	lsls	r2, r3, #22
 800a722:	d402      	bmi.n	800a72a <setvbuf+0x42>
 800a724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a726:	f000 f966 	bl	800a9f6 <__retarget_lock_acquire_recursive>
 800a72a:	4621      	mov	r1, r4
 800a72c:	4638      	mov	r0, r7
 800a72e:	f001 fe07 	bl	800c340 <_fflush_r>
 800a732:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a734:	b141      	cbz	r1, 800a748 <setvbuf+0x60>
 800a736:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a73a:	4299      	cmp	r1, r3
 800a73c:	d002      	beq.n	800a744 <setvbuf+0x5c>
 800a73e:	4638      	mov	r0, r7
 800a740:	f000 ffb6 	bl	800b6b0 <_free_r>
 800a744:	2300      	movs	r3, #0
 800a746:	6363      	str	r3, [r4, #52]	@ 0x34
 800a748:	2300      	movs	r3, #0
 800a74a:	61a3      	str	r3, [r4, #24]
 800a74c:	6063      	str	r3, [r4, #4]
 800a74e:	89a3      	ldrh	r3, [r4, #12]
 800a750:	061b      	lsls	r3, r3, #24
 800a752:	d503      	bpl.n	800a75c <setvbuf+0x74>
 800a754:	6921      	ldr	r1, [r4, #16]
 800a756:	4638      	mov	r0, r7
 800a758:	f000 ffaa 	bl	800b6b0 <_free_r>
 800a75c:	89a3      	ldrh	r3, [r4, #12]
 800a75e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800a762:	f023 0303 	bic.w	r3, r3, #3
 800a766:	f1b8 0f02 	cmp.w	r8, #2
 800a76a:	81a3      	strh	r3, [r4, #12]
 800a76c:	d061      	beq.n	800a832 <setvbuf+0x14a>
 800a76e:	ab01      	add	r3, sp, #4
 800a770:	466a      	mov	r2, sp
 800a772:	4621      	mov	r1, r4
 800a774:	4638      	mov	r0, r7
 800a776:	f001 fe0b 	bl	800c390 <__swhatbuf_r>
 800a77a:	89a3      	ldrh	r3, [r4, #12]
 800a77c:	4318      	orrs	r0, r3
 800a77e:	81a0      	strh	r0, [r4, #12]
 800a780:	bb2d      	cbnz	r5, 800a7ce <setvbuf+0xe6>
 800a782:	9d00      	ldr	r5, [sp, #0]
 800a784:	4628      	mov	r0, r5
 800a786:	f000 ffdd 	bl	800b744 <malloc>
 800a78a:	4606      	mov	r6, r0
 800a78c:	2800      	cmp	r0, #0
 800a78e:	d152      	bne.n	800a836 <setvbuf+0x14e>
 800a790:	f8dd 9000 	ldr.w	r9, [sp]
 800a794:	45a9      	cmp	r9, r5
 800a796:	d140      	bne.n	800a81a <setvbuf+0x132>
 800a798:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a79c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7a0:	f043 0202 	orr.w	r2, r3, #2
 800a7a4:	81a2      	strh	r2, [r4, #12]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	60a2      	str	r2, [r4, #8]
 800a7aa:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800a7ae:	6022      	str	r2, [r4, #0]
 800a7b0:	6122      	str	r2, [r4, #16]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	6162      	str	r2, [r4, #20]
 800a7b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a7b8:	07d6      	lsls	r6, r2, #31
 800a7ba:	d404      	bmi.n	800a7c6 <setvbuf+0xde>
 800a7bc:	0598      	lsls	r0, r3, #22
 800a7be:	d402      	bmi.n	800a7c6 <setvbuf+0xde>
 800a7c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7c2:	f000 f919 	bl	800a9f8 <__retarget_lock_release_recursive>
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	b003      	add	sp, #12
 800a7ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7ce:	2e00      	cmp	r6, #0
 800a7d0:	d0d8      	beq.n	800a784 <setvbuf+0x9c>
 800a7d2:	6a3b      	ldr	r3, [r7, #32]
 800a7d4:	b913      	cbnz	r3, 800a7dc <setvbuf+0xf4>
 800a7d6:	4638      	mov	r0, r7
 800a7d8:	f7ff ff2e 	bl	800a638 <__sinit>
 800a7dc:	f1b8 0f01 	cmp.w	r8, #1
 800a7e0:	bf08      	it	eq
 800a7e2:	89a3      	ldrheq	r3, [r4, #12]
 800a7e4:	6026      	str	r6, [r4, #0]
 800a7e6:	bf04      	itt	eq
 800a7e8:	f043 0301 	orreq.w	r3, r3, #1
 800a7ec:	81a3      	strheq	r3, [r4, #12]
 800a7ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7f2:	f013 0208 	ands.w	r2, r3, #8
 800a7f6:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800a7fa:	d01e      	beq.n	800a83a <setvbuf+0x152>
 800a7fc:	07d9      	lsls	r1, r3, #31
 800a7fe:	bf41      	itttt	mi
 800a800:	2200      	movmi	r2, #0
 800a802:	426d      	negmi	r5, r5
 800a804:	60a2      	strmi	r2, [r4, #8]
 800a806:	61a5      	strmi	r5, [r4, #24]
 800a808:	bf58      	it	pl
 800a80a:	60a5      	strpl	r5, [r4, #8]
 800a80c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a80e:	07d2      	lsls	r2, r2, #31
 800a810:	d401      	bmi.n	800a816 <setvbuf+0x12e>
 800a812:	059b      	lsls	r3, r3, #22
 800a814:	d513      	bpl.n	800a83e <setvbuf+0x156>
 800a816:	2500      	movs	r5, #0
 800a818:	e7d5      	b.n	800a7c6 <setvbuf+0xde>
 800a81a:	4648      	mov	r0, r9
 800a81c:	f000 ff92 	bl	800b744 <malloc>
 800a820:	4606      	mov	r6, r0
 800a822:	2800      	cmp	r0, #0
 800a824:	d0b8      	beq.n	800a798 <setvbuf+0xb0>
 800a826:	89a3      	ldrh	r3, [r4, #12]
 800a828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a82c:	81a3      	strh	r3, [r4, #12]
 800a82e:	464d      	mov	r5, r9
 800a830:	e7cf      	b.n	800a7d2 <setvbuf+0xea>
 800a832:	2500      	movs	r5, #0
 800a834:	e7b2      	b.n	800a79c <setvbuf+0xb4>
 800a836:	46a9      	mov	r9, r5
 800a838:	e7f5      	b.n	800a826 <setvbuf+0x13e>
 800a83a:	60a2      	str	r2, [r4, #8]
 800a83c:	e7e6      	b.n	800a80c <setvbuf+0x124>
 800a83e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a840:	f000 f8da 	bl	800a9f8 <__retarget_lock_release_recursive>
 800a844:	e7e7      	b.n	800a816 <setvbuf+0x12e>
 800a846:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a84a:	e7bc      	b.n	800a7c6 <setvbuf+0xde>
 800a84c:	20000048 	.word	0x20000048

0800a850 <__sread>:
 800a850:	b510      	push	{r4, lr}
 800a852:	460c      	mov	r4, r1
 800a854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a858:	f000 f87e 	bl	800a958 <_read_r>
 800a85c:	2800      	cmp	r0, #0
 800a85e:	bfab      	itete	ge
 800a860:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a862:	89a3      	ldrhlt	r3, [r4, #12]
 800a864:	181b      	addge	r3, r3, r0
 800a866:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a86a:	bfac      	ite	ge
 800a86c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a86e:	81a3      	strhlt	r3, [r4, #12]
 800a870:	bd10      	pop	{r4, pc}

0800a872 <__swrite>:
 800a872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a876:	461f      	mov	r7, r3
 800a878:	898b      	ldrh	r3, [r1, #12]
 800a87a:	05db      	lsls	r3, r3, #23
 800a87c:	4605      	mov	r5, r0
 800a87e:	460c      	mov	r4, r1
 800a880:	4616      	mov	r6, r2
 800a882:	d505      	bpl.n	800a890 <__swrite+0x1e>
 800a884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a888:	2302      	movs	r3, #2
 800a88a:	2200      	movs	r2, #0
 800a88c:	f000 f852 	bl	800a934 <_lseek_r>
 800a890:	89a3      	ldrh	r3, [r4, #12]
 800a892:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a896:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a89a:	81a3      	strh	r3, [r4, #12]
 800a89c:	4632      	mov	r2, r6
 800a89e:	463b      	mov	r3, r7
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a6:	f000 b869 	b.w	800a97c <_write_r>

0800a8aa <__sseek>:
 800a8aa:	b510      	push	{r4, lr}
 800a8ac:	460c      	mov	r4, r1
 800a8ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8b2:	f000 f83f 	bl	800a934 <_lseek_r>
 800a8b6:	1c43      	adds	r3, r0, #1
 800a8b8:	89a3      	ldrh	r3, [r4, #12]
 800a8ba:	bf15      	itete	ne
 800a8bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a8be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a8c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a8c6:	81a3      	strheq	r3, [r4, #12]
 800a8c8:	bf18      	it	ne
 800a8ca:	81a3      	strhne	r3, [r4, #12]
 800a8cc:	bd10      	pop	{r4, pc}

0800a8ce <__sclose>:
 800a8ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d2:	f000 b81f 	b.w	800a914 <_close_r>

0800a8d6 <memset>:
 800a8d6:	4402      	add	r2, r0
 800a8d8:	4603      	mov	r3, r0
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d100      	bne.n	800a8e0 <memset+0xa>
 800a8de:	4770      	bx	lr
 800a8e0:	f803 1b01 	strb.w	r1, [r3], #1
 800a8e4:	e7f9      	b.n	800a8da <memset+0x4>

0800a8e6 <strncpy>:
 800a8e6:	b510      	push	{r4, lr}
 800a8e8:	3901      	subs	r1, #1
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	b132      	cbz	r2, 800a8fc <strncpy+0x16>
 800a8ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a8f2:	f803 4b01 	strb.w	r4, [r3], #1
 800a8f6:	3a01      	subs	r2, #1
 800a8f8:	2c00      	cmp	r4, #0
 800a8fa:	d1f7      	bne.n	800a8ec <strncpy+0x6>
 800a8fc:	441a      	add	r2, r3
 800a8fe:	2100      	movs	r1, #0
 800a900:	4293      	cmp	r3, r2
 800a902:	d100      	bne.n	800a906 <strncpy+0x20>
 800a904:	bd10      	pop	{r4, pc}
 800a906:	f803 1b01 	strb.w	r1, [r3], #1
 800a90a:	e7f9      	b.n	800a900 <strncpy+0x1a>

0800a90c <_localeconv_r>:
 800a90c:	4800      	ldr	r0, [pc, #0]	@ (800a910 <_localeconv_r+0x4>)
 800a90e:	4770      	bx	lr
 800a910:	20000188 	.word	0x20000188

0800a914 <_close_r>:
 800a914:	b538      	push	{r3, r4, r5, lr}
 800a916:	4d06      	ldr	r5, [pc, #24]	@ (800a930 <_close_r+0x1c>)
 800a918:	2300      	movs	r3, #0
 800a91a:	4604      	mov	r4, r0
 800a91c:	4608      	mov	r0, r1
 800a91e:	602b      	str	r3, [r5, #0]
 800a920:	f7f6 fcd1 	bl	80012c6 <_close>
 800a924:	1c43      	adds	r3, r0, #1
 800a926:	d102      	bne.n	800a92e <_close_r+0x1a>
 800a928:	682b      	ldr	r3, [r5, #0]
 800a92a:	b103      	cbz	r3, 800a92e <_close_r+0x1a>
 800a92c:	6023      	str	r3, [r4, #0]
 800a92e:	bd38      	pop	{r3, r4, r5, pc}
 800a930:	20000540 	.word	0x20000540

0800a934 <_lseek_r>:
 800a934:	b538      	push	{r3, r4, r5, lr}
 800a936:	4d07      	ldr	r5, [pc, #28]	@ (800a954 <_lseek_r+0x20>)
 800a938:	4604      	mov	r4, r0
 800a93a:	4608      	mov	r0, r1
 800a93c:	4611      	mov	r1, r2
 800a93e:	2200      	movs	r2, #0
 800a940:	602a      	str	r2, [r5, #0]
 800a942:	461a      	mov	r2, r3
 800a944:	f7f6 fce6 	bl	8001314 <_lseek>
 800a948:	1c43      	adds	r3, r0, #1
 800a94a:	d102      	bne.n	800a952 <_lseek_r+0x1e>
 800a94c:	682b      	ldr	r3, [r5, #0]
 800a94e:	b103      	cbz	r3, 800a952 <_lseek_r+0x1e>
 800a950:	6023      	str	r3, [r4, #0]
 800a952:	bd38      	pop	{r3, r4, r5, pc}
 800a954:	20000540 	.word	0x20000540

0800a958 <_read_r>:
 800a958:	b538      	push	{r3, r4, r5, lr}
 800a95a:	4d07      	ldr	r5, [pc, #28]	@ (800a978 <_read_r+0x20>)
 800a95c:	4604      	mov	r4, r0
 800a95e:	4608      	mov	r0, r1
 800a960:	4611      	mov	r1, r2
 800a962:	2200      	movs	r2, #0
 800a964:	602a      	str	r2, [r5, #0]
 800a966:	461a      	mov	r2, r3
 800a968:	f7f6 fc90 	bl	800128c <_read>
 800a96c:	1c43      	adds	r3, r0, #1
 800a96e:	d102      	bne.n	800a976 <_read_r+0x1e>
 800a970:	682b      	ldr	r3, [r5, #0]
 800a972:	b103      	cbz	r3, 800a976 <_read_r+0x1e>
 800a974:	6023      	str	r3, [r4, #0]
 800a976:	bd38      	pop	{r3, r4, r5, pc}
 800a978:	20000540 	.word	0x20000540

0800a97c <_write_r>:
 800a97c:	b538      	push	{r3, r4, r5, lr}
 800a97e:	4d07      	ldr	r5, [pc, #28]	@ (800a99c <_write_r+0x20>)
 800a980:	4604      	mov	r4, r0
 800a982:	4608      	mov	r0, r1
 800a984:	4611      	mov	r1, r2
 800a986:	2200      	movs	r2, #0
 800a988:	602a      	str	r2, [r5, #0]
 800a98a:	461a      	mov	r2, r3
 800a98c:	f7f6 f9a6 	bl	8000cdc <_write>
 800a990:	1c43      	adds	r3, r0, #1
 800a992:	d102      	bne.n	800a99a <_write_r+0x1e>
 800a994:	682b      	ldr	r3, [r5, #0]
 800a996:	b103      	cbz	r3, 800a99a <_write_r+0x1e>
 800a998:	6023      	str	r3, [r4, #0]
 800a99a:	bd38      	pop	{r3, r4, r5, pc}
 800a99c:	20000540 	.word	0x20000540

0800a9a0 <__errno>:
 800a9a0:	4b01      	ldr	r3, [pc, #4]	@ (800a9a8 <__errno+0x8>)
 800a9a2:	6818      	ldr	r0, [r3, #0]
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	20000048 	.word	0x20000048

0800a9ac <__libc_init_array>:
 800a9ac:	b570      	push	{r4, r5, r6, lr}
 800a9ae:	4d0d      	ldr	r5, [pc, #52]	@ (800a9e4 <__libc_init_array+0x38>)
 800a9b0:	4c0d      	ldr	r4, [pc, #52]	@ (800a9e8 <__libc_init_array+0x3c>)
 800a9b2:	1b64      	subs	r4, r4, r5
 800a9b4:	10a4      	asrs	r4, r4, #2
 800a9b6:	2600      	movs	r6, #0
 800a9b8:	42a6      	cmp	r6, r4
 800a9ba:	d109      	bne.n	800a9d0 <__libc_init_array+0x24>
 800a9bc:	4d0b      	ldr	r5, [pc, #44]	@ (800a9ec <__libc_init_array+0x40>)
 800a9be:	4c0c      	ldr	r4, [pc, #48]	@ (800a9f0 <__libc_init_array+0x44>)
 800a9c0:	f001 fef2 	bl	800c7a8 <_init>
 800a9c4:	1b64      	subs	r4, r4, r5
 800a9c6:	10a4      	asrs	r4, r4, #2
 800a9c8:	2600      	movs	r6, #0
 800a9ca:	42a6      	cmp	r6, r4
 800a9cc:	d105      	bne.n	800a9da <__libc_init_array+0x2e>
 800a9ce:	bd70      	pop	{r4, r5, r6, pc}
 800a9d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9d4:	4798      	blx	r3
 800a9d6:	3601      	adds	r6, #1
 800a9d8:	e7ee      	b.n	800a9b8 <__libc_init_array+0xc>
 800a9da:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9de:	4798      	blx	r3
 800a9e0:	3601      	adds	r6, #1
 800a9e2:	e7f2      	b.n	800a9ca <__libc_init_array+0x1e>
 800a9e4:	0800cc60 	.word	0x0800cc60
 800a9e8:	0800cc60 	.word	0x0800cc60
 800a9ec:	0800cc60 	.word	0x0800cc60
 800a9f0:	0800cc64 	.word	0x0800cc64

0800a9f4 <__retarget_lock_init_recursive>:
 800a9f4:	4770      	bx	lr

0800a9f6 <__retarget_lock_acquire_recursive>:
 800a9f6:	4770      	bx	lr

0800a9f8 <__retarget_lock_release_recursive>:
 800a9f8:	4770      	bx	lr

0800a9fa <memcpy>:
 800a9fa:	440a      	add	r2, r1
 800a9fc:	4291      	cmp	r1, r2
 800a9fe:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800aa02:	d100      	bne.n	800aa06 <memcpy+0xc>
 800aa04:	4770      	bx	lr
 800aa06:	b510      	push	{r4, lr}
 800aa08:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa10:	4291      	cmp	r1, r2
 800aa12:	d1f9      	bne.n	800aa08 <memcpy+0xe>
 800aa14:	bd10      	pop	{r4, pc}

0800aa16 <quorem>:
 800aa16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1a:	6903      	ldr	r3, [r0, #16]
 800aa1c:	690c      	ldr	r4, [r1, #16]
 800aa1e:	42a3      	cmp	r3, r4
 800aa20:	4607      	mov	r7, r0
 800aa22:	db7e      	blt.n	800ab22 <quorem+0x10c>
 800aa24:	3c01      	subs	r4, #1
 800aa26:	f101 0814 	add.w	r8, r1, #20
 800aa2a:	00a3      	lsls	r3, r4, #2
 800aa2c:	f100 0514 	add.w	r5, r0, #20
 800aa30:	9300      	str	r3, [sp, #0]
 800aa32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa36:	9301      	str	r3, [sp, #4]
 800aa38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa40:	3301      	adds	r3, #1
 800aa42:	429a      	cmp	r2, r3
 800aa44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa48:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa4c:	d32e      	bcc.n	800aaac <quorem+0x96>
 800aa4e:	f04f 0a00 	mov.w	sl, #0
 800aa52:	46c4      	mov	ip, r8
 800aa54:	46ae      	mov	lr, r5
 800aa56:	46d3      	mov	fp, sl
 800aa58:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa5c:	b298      	uxth	r0, r3
 800aa5e:	fb06 a000 	mla	r0, r6, r0, sl
 800aa62:	0c02      	lsrs	r2, r0, #16
 800aa64:	0c1b      	lsrs	r3, r3, #16
 800aa66:	fb06 2303 	mla	r3, r6, r3, r2
 800aa6a:	f8de 2000 	ldr.w	r2, [lr]
 800aa6e:	b280      	uxth	r0, r0
 800aa70:	b292      	uxth	r2, r2
 800aa72:	1a12      	subs	r2, r2, r0
 800aa74:	445a      	add	r2, fp
 800aa76:	f8de 0000 	ldr.w	r0, [lr]
 800aa7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800aa84:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800aa88:	b292      	uxth	r2, r2
 800aa8a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aa8e:	45e1      	cmp	r9, ip
 800aa90:	f84e 2b04 	str.w	r2, [lr], #4
 800aa94:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aa98:	d2de      	bcs.n	800aa58 <quorem+0x42>
 800aa9a:	9b00      	ldr	r3, [sp, #0]
 800aa9c:	58eb      	ldr	r3, [r5, r3]
 800aa9e:	b92b      	cbnz	r3, 800aaac <quorem+0x96>
 800aaa0:	9b01      	ldr	r3, [sp, #4]
 800aaa2:	3b04      	subs	r3, #4
 800aaa4:	429d      	cmp	r5, r3
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	d32f      	bcc.n	800ab0a <quorem+0xf4>
 800aaaa:	613c      	str	r4, [r7, #16]
 800aaac:	4638      	mov	r0, r7
 800aaae:	f001 f979 	bl	800bda4 <__mcmp>
 800aab2:	2800      	cmp	r0, #0
 800aab4:	db25      	blt.n	800ab02 <quorem+0xec>
 800aab6:	4629      	mov	r1, r5
 800aab8:	2000      	movs	r0, #0
 800aaba:	f858 2b04 	ldr.w	r2, [r8], #4
 800aabe:	f8d1 c000 	ldr.w	ip, [r1]
 800aac2:	fa1f fe82 	uxth.w	lr, r2
 800aac6:	fa1f f38c 	uxth.w	r3, ip
 800aaca:	eba3 030e 	sub.w	r3, r3, lr
 800aace:	4403      	add	r3, r0
 800aad0:	0c12      	lsrs	r2, r2, #16
 800aad2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800aad6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800aada:	b29b      	uxth	r3, r3
 800aadc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aae0:	45c1      	cmp	r9, r8
 800aae2:	f841 3b04 	str.w	r3, [r1], #4
 800aae6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aaea:	d2e6      	bcs.n	800aaba <quorem+0xa4>
 800aaec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aaf0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aaf4:	b922      	cbnz	r2, 800ab00 <quorem+0xea>
 800aaf6:	3b04      	subs	r3, #4
 800aaf8:	429d      	cmp	r5, r3
 800aafa:	461a      	mov	r2, r3
 800aafc:	d30b      	bcc.n	800ab16 <quorem+0x100>
 800aafe:	613c      	str	r4, [r7, #16]
 800ab00:	3601      	adds	r6, #1
 800ab02:	4630      	mov	r0, r6
 800ab04:	b003      	add	sp, #12
 800ab06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab0a:	6812      	ldr	r2, [r2, #0]
 800ab0c:	3b04      	subs	r3, #4
 800ab0e:	2a00      	cmp	r2, #0
 800ab10:	d1cb      	bne.n	800aaaa <quorem+0x94>
 800ab12:	3c01      	subs	r4, #1
 800ab14:	e7c6      	b.n	800aaa4 <quorem+0x8e>
 800ab16:	6812      	ldr	r2, [r2, #0]
 800ab18:	3b04      	subs	r3, #4
 800ab1a:	2a00      	cmp	r2, #0
 800ab1c:	d1ef      	bne.n	800aafe <quorem+0xe8>
 800ab1e:	3c01      	subs	r4, #1
 800ab20:	e7ea      	b.n	800aaf8 <quorem+0xe2>
 800ab22:	2000      	movs	r0, #0
 800ab24:	e7ee      	b.n	800ab04 <quorem+0xee>
	...

0800ab28 <_dtoa_r>:
 800ab28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2c:	69c7      	ldr	r7, [r0, #28]
 800ab2e:	b099      	sub	sp, #100	@ 0x64
 800ab30:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ab34:	ec55 4b10 	vmov	r4, r5, d0
 800ab38:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ab3a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ab3c:	4683      	mov	fp, r0
 800ab3e:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab40:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ab42:	b97f      	cbnz	r7, 800ab64 <_dtoa_r+0x3c>
 800ab44:	2010      	movs	r0, #16
 800ab46:	f000 fdfd 	bl	800b744 <malloc>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	f8cb 001c 	str.w	r0, [fp, #28]
 800ab50:	b920      	cbnz	r0, 800ab5c <_dtoa_r+0x34>
 800ab52:	4ba7      	ldr	r3, [pc, #668]	@ (800adf0 <_dtoa_r+0x2c8>)
 800ab54:	21ef      	movs	r1, #239	@ 0xef
 800ab56:	48a7      	ldr	r0, [pc, #668]	@ (800adf4 <_dtoa_r+0x2cc>)
 800ab58:	f001 fd76 	bl	800c648 <__assert_func>
 800ab5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ab60:	6007      	str	r7, [r0, #0]
 800ab62:	60c7      	str	r7, [r0, #12]
 800ab64:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ab68:	6819      	ldr	r1, [r3, #0]
 800ab6a:	b159      	cbz	r1, 800ab84 <_dtoa_r+0x5c>
 800ab6c:	685a      	ldr	r2, [r3, #4]
 800ab6e:	604a      	str	r2, [r1, #4]
 800ab70:	2301      	movs	r3, #1
 800ab72:	4093      	lsls	r3, r2
 800ab74:	608b      	str	r3, [r1, #8]
 800ab76:	4658      	mov	r0, fp
 800ab78:	f000 feda 	bl	800b930 <_Bfree>
 800ab7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ab80:	2200      	movs	r2, #0
 800ab82:	601a      	str	r2, [r3, #0]
 800ab84:	1e2b      	subs	r3, r5, #0
 800ab86:	bfb9      	ittee	lt
 800ab88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ab8c:	9303      	strlt	r3, [sp, #12]
 800ab8e:	2300      	movge	r3, #0
 800ab90:	6033      	strge	r3, [r6, #0]
 800ab92:	9f03      	ldr	r7, [sp, #12]
 800ab94:	4b98      	ldr	r3, [pc, #608]	@ (800adf8 <_dtoa_r+0x2d0>)
 800ab96:	bfbc      	itt	lt
 800ab98:	2201      	movlt	r2, #1
 800ab9a:	6032      	strlt	r2, [r6, #0]
 800ab9c:	43bb      	bics	r3, r7
 800ab9e:	d112      	bne.n	800abc6 <_dtoa_r+0x9e>
 800aba0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aba2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aba6:	6013      	str	r3, [r2, #0]
 800aba8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800abac:	4323      	orrs	r3, r4
 800abae:	f000 854d 	beq.w	800b64c <_dtoa_r+0xb24>
 800abb2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800abb4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ae0c <_dtoa_r+0x2e4>
 800abb8:	2b00      	cmp	r3, #0
 800abba:	f000 854f 	beq.w	800b65c <_dtoa_r+0xb34>
 800abbe:	f10a 0303 	add.w	r3, sl, #3
 800abc2:	f000 bd49 	b.w	800b658 <_dtoa_r+0xb30>
 800abc6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800abca:	2200      	movs	r2, #0
 800abcc:	ec51 0b17 	vmov	r0, r1, d7
 800abd0:	2300      	movs	r3, #0
 800abd2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800abd6:	f7f5 ff77 	bl	8000ac8 <__aeabi_dcmpeq>
 800abda:	4680      	mov	r8, r0
 800abdc:	b158      	cbz	r0, 800abf6 <_dtoa_r+0xce>
 800abde:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800abe0:	2301      	movs	r3, #1
 800abe2:	6013      	str	r3, [r2, #0]
 800abe4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800abe6:	b113      	cbz	r3, 800abee <_dtoa_r+0xc6>
 800abe8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800abea:	4b84      	ldr	r3, [pc, #528]	@ (800adfc <_dtoa_r+0x2d4>)
 800abec:	6013      	str	r3, [r2, #0]
 800abee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ae10 <_dtoa_r+0x2e8>
 800abf2:	f000 bd33 	b.w	800b65c <_dtoa_r+0xb34>
 800abf6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800abfa:	aa16      	add	r2, sp, #88	@ 0x58
 800abfc:	a917      	add	r1, sp, #92	@ 0x5c
 800abfe:	4658      	mov	r0, fp
 800ac00:	f001 f980 	bl	800bf04 <__d2b>
 800ac04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ac08:	4681      	mov	r9, r0
 800ac0a:	2e00      	cmp	r6, #0
 800ac0c:	d077      	beq.n	800acfe <_dtoa_r+0x1d6>
 800ac0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ac14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ac20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ac24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ac28:	4619      	mov	r1, r3
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	4b74      	ldr	r3, [pc, #464]	@ (800ae00 <_dtoa_r+0x2d8>)
 800ac2e:	f7f5 fb2b 	bl	8000288 <__aeabi_dsub>
 800ac32:	a369      	add	r3, pc, #420	@ (adr r3, 800add8 <_dtoa_r+0x2b0>)
 800ac34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac38:	f7f5 fcde 	bl	80005f8 <__aeabi_dmul>
 800ac3c:	a368      	add	r3, pc, #416	@ (adr r3, 800ade0 <_dtoa_r+0x2b8>)
 800ac3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac42:	f7f5 fb23 	bl	800028c <__adddf3>
 800ac46:	4604      	mov	r4, r0
 800ac48:	4630      	mov	r0, r6
 800ac4a:	460d      	mov	r5, r1
 800ac4c:	f7f5 fc6a 	bl	8000524 <__aeabi_i2d>
 800ac50:	a365      	add	r3, pc, #404	@ (adr r3, 800ade8 <_dtoa_r+0x2c0>)
 800ac52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac56:	f7f5 fccf 	bl	80005f8 <__aeabi_dmul>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	4620      	mov	r0, r4
 800ac60:	4629      	mov	r1, r5
 800ac62:	f7f5 fb13 	bl	800028c <__adddf3>
 800ac66:	4604      	mov	r4, r0
 800ac68:	460d      	mov	r5, r1
 800ac6a:	f7f5 ff75 	bl	8000b58 <__aeabi_d2iz>
 800ac6e:	2200      	movs	r2, #0
 800ac70:	4607      	mov	r7, r0
 800ac72:	2300      	movs	r3, #0
 800ac74:	4620      	mov	r0, r4
 800ac76:	4629      	mov	r1, r5
 800ac78:	f7f5 ff30 	bl	8000adc <__aeabi_dcmplt>
 800ac7c:	b140      	cbz	r0, 800ac90 <_dtoa_r+0x168>
 800ac7e:	4638      	mov	r0, r7
 800ac80:	f7f5 fc50 	bl	8000524 <__aeabi_i2d>
 800ac84:	4622      	mov	r2, r4
 800ac86:	462b      	mov	r3, r5
 800ac88:	f7f5 ff1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac8c:	b900      	cbnz	r0, 800ac90 <_dtoa_r+0x168>
 800ac8e:	3f01      	subs	r7, #1
 800ac90:	2f16      	cmp	r7, #22
 800ac92:	d851      	bhi.n	800ad38 <_dtoa_r+0x210>
 800ac94:	4b5b      	ldr	r3, [pc, #364]	@ (800ae04 <_dtoa_r+0x2dc>)
 800ac96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ac9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aca2:	f7f5 ff1b 	bl	8000adc <__aeabi_dcmplt>
 800aca6:	2800      	cmp	r0, #0
 800aca8:	d048      	beq.n	800ad3c <_dtoa_r+0x214>
 800acaa:	3f01      	subs	r7, #1
 800acac:	2300      	movs	r3, #0
 800acae:	9312      	str	r3, [sp, #72]	@ 0x48
 800acb0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800acb2:	1b9b      	subs	r3, r3, r6
 800acb4:	1e5a      	subs	r2, r3, #1
 800acb6:	bf44      	itt	mi
 800acb8:	f1c3 0801 	rsbmi	r8, r3, #1
 800acbc:	2300      	movmi	r3, #0
 800acbe:	9208      	str	r2, [sp, #32]
 800acc0:	bf54      	ite	pl
 800acc2:	f04f 0800 	movpl.w	r8, #0
 800acc6:	9308      	strmi	r3, [sp, #32]
 800acc8:	2f00      	cmp	r7, #0
 800acca:	db39      	blt.n	800ad40 <_dtoa_r+0x218>
 800accc:	9b08      	ldr	r3, [sp, #32]
 800acce:	970f      	str	r7, [sp, #60]	@ 0x3c
 800acd0:	443b      	add	r3, r7
 800acd2:	9308      	str	r3, [sp, #32]
 800acd4:	2300      	movs	r3, #0
 800acd6:	930a      	str	r3, [sp, #40]	@ 0x28
 800acd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acda:	2b09      	cmp	r3, #9
 800acdc:	d864      	bhi.n	800ada8 <_dtoa_r+0x280>
 800acde:	2b05      	cmp	r3, #5
 800ace0:	bfc4      	itt	gt
 800ace2:	3b04      	subgt	r3, #4
 800ace4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ace6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ace8:	f1a3 0302 	sub.w	r3, r3, #2
 800acec:	bfcc      	ite	gt
 800acee:	2400      	movgt	r4, #0
 800acf0:	2401      	movle	r4, #1
 800acf2:	2b03      	cmp	r3, #3
 800acf4:	d863      	bhi.n	800adbe <_dtoa_r+0x296>
 800acf6:	e8df f003 	tbb	[pc, r3]
 800acfa:	372a      	.short	0x372a
 800acfc:	5535      	.short	0x5535
 800acfe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ad02:	441e      	add	r6, r3
 800ad04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ad08:	2b20      	cmp	r3, #32
 800ad0a:	bfc1      	itttt	gt
 800ad0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ad10:	409f      	lslgt	r7, r3
 800ad12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ad16:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ad1a:	bfd6      	itet	le
 800ad1c:	f1c3 0320 	rsble	r3, r3, #32
 800ad20:	ea47 0003 	orrgt.w	r0, r7, r3
 800ad24:	fa04 f003 	lslle.w	r0, r4, r3
 800ad28:	f7f5 fbec 	bl	8000504 <__aeabi_ui2d>
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ad32:	3e01      	subs	r6, #1
 800ad34:	9214      	str	r2, [sp, #80]	@ 0x50
 800ad36:	e777      	b.n	800ac28 <_dtoa_r+0x100>
 800ad38:	2301      	movs	r3, #1
 800ad3a:	e7b8      	b.n	800acae <_dtoa_r+0x186>
 800ad3c:	9012      	str	r0, [sp, #72]	@ 0x48
 800ad3e:	e7b7      	b.n	800acb0 <_dtoa_r+0x188>
 800ad40:	427b      	negs	r3, r7
 800ad42:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad44:	2300      	movs	r3, #0
 800ad46:	eba8 0807 	sub.w	r8, r8, r7
 800ad4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ad4c:	e7c4      	b.n	800acd8 <_dtoa_r+0x1b0>
 800ad4e:	2300      	movs	r3, #0
 800ad50:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	dc35      	bgt.n	800adc4 <_dtoa_r+0x29c>
 800ad58:	2301      	movs	r3, #1
 800ad5a:	9300      	str	r3, [sp, #0]
 800ad5c:	9307      	str	r3, [sp, #28]
 800ad5e:	461a      	mov	r2, r3
 800ad60:	920e      	str	r2, [sp, #56]	@ 0x38
 800ad62:	e00b      	b.n	800ad7c <_dtoa_r+0x254>
 800ad64:	2301      	movs	r3, #1
 800ad66:	e7f3      	b.n	800ad50 <_dtoa_r+0x228>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad6e:	18fb      	adds	r3, r7, r3
 800ad70:	9300      	str	r3, [sp, #0]
 800ad72:	3301      	adds	r3, #1
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	9307      	str	r3, [sp, #28]
 800ad78:	bfb8      	it	lt
 800ad7a:	2301      	movlt	r3, #1
 800ad7c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ad80:	2100      	movs	r1, #0
 800ad82:	2204      	movs	r2, #4
 800ad84:	f102 0514 	add.w	r5, r2, #20
 800ad88:	429d      	cmp	r5, r3
 800ad8a:	d91f      	bls.n	800adcc <_dtoa_r+0x2a4>
 800ad8c:	6041      	str	r1, [r0, #4]
 800ad8e:	4658      	mov	r0, fp
 800ad90:	f000 fd8e 	bl	800b8b0 <_Balloc>
 800ad94:	4682      	mov	sl, r0
 800ad96:	2800      	cmp	r0, #0
 800ad98:	d13c      	bne.n	800ae14 <_dtoa_r+0x2ec>
 800ad9a:	4b1b      	ldr	r3, [pc, #108]	@ (800ae08 <_dtoa_r+0x2e0>)
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	f240 11af 	movw	r1, #431	@ 0x1af
 800ada2:	e6d8      	b.n	800ab56 <_dtoa_r+0x2e>
 800ada4:	2301      	movs	r3, #1
 800ada6:	e7e0      	b.n	800ad6a <_dtoa_r+0x242>
 800ada8:	2401      	movs	r4, #1
 800adaa:	2300      	movs	r3, #0
 800adac:	9309      	str	r3, [sp, #36]	@ 0x24
 800adae:	940b      	str	r4, [sp, #44]	@ 0x2c
 800adb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800adb4:	9300      	str	r3, [sp, #0]
 800adb6:	9307      	str	r3, [sp, #28]
 800adb8:	2200      	movs	r2, #0
 800adba:	2312      	movs	r3, #18
 800adbc:	e7d0      	b.n	800ad60 <_dtoa_r+0x238>
 800adbe:	2301      	movs	r3, #1
 800adc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800adc2:	e7f5      	b.n	800adb0 <_dtoa_r+0x288>
 800adc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800adc6:	9300      	str	r3, [sp, #0]
 800adc8:	9307      	str	r3, [sp, #28]
 800adca:	e7d7      	b.n	800ad7c <_dtoa_r+0x254>
 800adcc:	3101      	adds	r1, #1
 800adce:	0052      	lsls	r2, r2, #1
 800add0:	e7d8      	b.n	800ad84 <_dtoa_r+0x25c>
 800add2:	bf00      	nop
 800add4:	f3af 8000 	nop.w
 800add8:	636f4361 	.word	0x636f4361
 800addc:	3fd287a7 	.word	0x3fd287a7
 800ade0:	8b60c8b3 	.word	0x8b60c8b3
 800ade4:	3fc68a28 	.word	0x3fc68a28
 800ade8:	509f79fb 	.word	0x509f79fb
 800adec:	3fd34413 	.word	0x3fd34413
 800adf0:	0800c929 	.word	0x0800c929
 800adf4:	0800c940 	.word	0x0800c940
 800adf8:	7ff00000 	.word	0x7ff00000
 800adfc:	0800c8f9 	.word	0x0800c8f9
 800ae00:	3ff80000 	.word	0x3ff80000
 800ae04:	0800ca38 	.word	0x0800ca38
 800ae08:	0800c998 	.word	0x0800c998
 800ae0c:	0800c925 	.word	0x0800c925
 800ae10:	0800c8f8 	.word	0x0800c8f8
 800ae14:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ae18:	6018      	str	r0, [r3, #0]
 800ae1a:	9b07      	ldr	r3, [sp, #28]
 800ae1c:	2b0e      	cmp	r3, #14
 800ae1e:	f200 80a4 	bhi.w	800af6a <_dtoa_r+0x442>
 800ae22:	2c00      	cmp	r4, #0
 800ae24:	f000 80a1 	beq.w	800af6a <_dtoa_r+0x442>
 800ae28:	2f00      	cmp	r7, #0
 800ae2a:	dd33      	ble.n	800ae94 <_dtoa_r+0x36c>
 800ae2c:	4bad      	ldr	r3, [pc, #692]	@ (800b0e4 <_dtoa_r+0x5bc>)
 800ae2e:	f007 020f 	and.w	r2, r7, #15
 800ae32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae36:	ed93 7b00 	vldr	d7, [r3]
 800ae3a:	05f8      	lsls	r0, r7, #23
 800ae3c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ae40:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ae44:	d516      	bpl.n	800ae74 <_dtoa_r+0x34c>
 800ae46:	4ba8      	ldr	r3, [pc, #672]	@ (800b0e8 <_dtoa_r+0x5c0>)
 800ae48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae50:	f7f5 fcfc 	bl	800084c <__aeabi_ddiv>
 800ae54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae58:	f004 040f 	and.w	r4, r4, #15
 800ae5c:	2603      	movs	r6, #3
 800ae5e:	4da2      	ldr	r5, [pc, #648]	@ (800b0e8 <_dtoa_r+0x5c0>)
 800ae60:	b954      	cbnz	r4, 800ae78 <_dtoa_r+0x350>
 800ae62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae6a:	f7f5 fcef 	bl	800084c <__aeabi_ddiv>
 800ae6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae72:	e028      	b.n	800aec6 <_dtoa_r+0x39e>
 800ae74:	2602      	movs	r6, #2
 800ae76:	e7f2      	b.n	800ae5e <_dtoa_r+0x336>
 800ae78:	07e1      	lsls	r1, r4, #31
 800ae7a:	d508      	bpl.n	800ae8e <_dtoa_r+0x366>
 800ae7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae80:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae84:	f7f5 fbb8 	bl	80005f8 <__aeabi_dmul>
 800ae88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae8c:	3601      	adds	r6, #1
 800ae8e:	1064      	asrs	r4, r4, #1
 800ae90:	3508      	adds	r5, #8
 800ae92:	e7e5      	b.n	800ae60 <_dtoa_r+0x338>
 800ae94:	f000 80d2 	beq.w	800b03c <_dtoa_r+0x514>
 800ae98:	427c      	negs	r4, r7
 800ae9a:	4b92      	ldr	r3, [pc, #584]	@ (800b0e4 <_dtoa_r+0x5bc>)
 800ae9c:	4d92      	ldr	r5, [pc, #584]	@ (800b0e8 <_dtoa_r+0x5c0>)
 800ae9e:	f004 020f 	and.w	r2, r4, #15
 800aea2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeaa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aeae:	f7f5 fba3 	bl	80005f8 <__aeabi_dmul>
 800aeb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aeb6:	1124      	asrs	r4, r4, #4
 800aeb8:	2300      	movs	r3, #0
 800aeba:	2602      	movs	r6, #2
 800aebc:	2c00      	cmp	r4, #0
 800aebe:	f040 80b2 	bne.w	800b026 <_dtoa_r+0x4fe>
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d1d3      	bne.n	800ae6e <_dtoa_r+0x346>
 800aec6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aec8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	f000 80b7 	beq.w	800b040 <_dtoa_r+0x518>
 800aed2:	4b86      	ldr	r3, [pc, #536]	@ (800b0ec <_dtoa_r+0x5c4>)
 800aed4:	2200      	movs	r2, #0
 800aed6:	4620      	mov	r0, r4
 800aed8:	4629      	mov	r1, r5
 800aeda:	f7f5 fdff 	bl	8000adc <__aeabi_dcmplt>
 800aede:	2800      	cmp	r0, #0
 800aee0:	f000 80ae 	beq.w	800b040 <_dtoa_r+0x518>
 800aee4:	9b07      	ldr	r3, [sp, #28]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	f000 80aa 	beq.w	800b040 <_dtoa_r+0x518>
 800aeec:	9b00      	ldr	r3, [sp, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	dd37      	ble.n	800af62 <_dtoa_r+0x43a>
 800aef2:	1e7b      	subs	r3, r7, #1
 800aef4:	9304      	str	r3, [sp, #16]
 800aef6:	4620      	mov	r0, r4
 800aef8:	4b7d      	ldr	r3, [pc, #500]	@ (800b0f0 <_dtoa_r+0x5c8>)
 800aefa:	2200      	movs	r2, #0
 800aefc:	4629      	mov	r1, r5
 800aefe:	f7f5 fb7b 	bl	80005f8 <__aeabi_dmul>
 800af02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af06:	9c00      	ldr	r4, [sp, #0]
 800af08:	3601      	adds	r6, #1
 800af0a:	4630      	mov	r0, r6
 800af0c:	f7f5 fb0a 	bl	8000524 <__aeabi_i2d>
 800af10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af14:	f7f5 fb70 	bl	80005f8 <__aeabi_dmul>
 800af18:	4b76      	ldr	r3, [pc, #472]	@ (800b0f4 <_dtoa_r+0x5cc>)
 800af1a:	2200      	movs	r2, #0
 800af1c:	f7f5 f9b6 	bl	800028c <__adddf3>
 800af20:	4605      	mov	r5, r0
 800af22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800af26:	2c00      	cmp	r4, #0
 800af28:	f040 808d 	bne.w	800b046 <_dtoa_r+0x51e>
 800af2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af30:	4b71      	ldr	r3, [pc, #452]	@ (800b0f8 <_dtoa_r+0x5d0>)
 800af32:	2200      	movs	r2, #0
 800af34:	f7f5 f9a8 	bl	8000288 <__aeabi_dsub>
 800af38:	4602      	mov	r2, r0
 800af3a:	460b      	mov	r3, r1
 800af3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af40:	462a      	mov	r2, r5
 800af42:	4633      	mov	r3, r6
 800af44:	f7f5 fde8 	bl	8000b18 <__aeabi_dcmpgt>
 800af48:	2800      	cmp	r0, #0
 800af4a:	f040 828b 	bne.w	800b464 <_dtoa_r+0x93c>
 800af4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af52:	462a      	mov	r2, r5
 800af54:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800af58:	f7f5 fdc0 	bl	8000adc <__aeabi_dcmplt>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	f040 8128 	bne.w	800b1b2 <_dtoa_r+0x68a>
 800af62:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800af66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800af6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f2c0 815a 	blt.w	800b226 <_dtoa_r+0x6fe>
 800af72:	2f0e      	cmp	r7, #14
 800af74:	f300 8157 	bgt.w	800b226 <_dtoa_r+0x6fe>
 800af78:	4b5a      	ldr	r3, [pc, #360]	@ (800b0e4 <_dtoa_r+0x5bc>)
 800af7a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800af7e:	ed93 7b00 	vldr	d7, [r3]
 800af82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af84:	2b00      	cmp	r3, #0
 800af86:	ed8d 7b00 	vstr	d7, [sp]
 800af8a:	da03      	bge.n	800af94 <_dtoa_r+0x46c>
 800af8c:	9b07      	ldr	r3, [sp, #28]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	f340 8101 	ble.w	800b196 <_dtoa_r+0x66e>
 800af94:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800af98:	4656      	mov	r6, sl
 800af9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af9e:	4620      	mov	r0, r4
 800afa0:	4629      	mov	r1, r5
 800afa2:	f7f5 fc53 	bl	800084c <__aeabi_ddiv>
 800afa6:	f7f5 fdd7 	bl	8000b58 <__aeabi_d2iz>
 800afaa:	4680      	mov	r8, r0
 800afac:	f7f5 faba 	bl	8000524 <__aeabi_i2d>
 800afb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800afb4:	f7f5 fb20 	bl	80005f8 <__aeabi_dmul>
 800afb8:	4602      	mov	r2, r0
 800afba:	460b      	mov	r3, r1
 800afbc:	4620      	mov	r0, r4
 800afbe:	4629      	mov	r1, r5
 800afc0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800afc4:	f7f5 f960 	bl	8000288 <__aeabi_dsub>
 800afc8:	f806 4b01 	strb.w	r4, [r6], #1
 800afcc:	9d07      	ldr	r5, [sp, #28]
 800afce:	eba6 040a 	sub.w	r4, r6, sl
 800afd2:	42a5      	cmp	r5, r4
 800afd4:	4602      	mov	r2, r0
 800afd6:	460b      	mov	r3, r1
 800afd8:	f040 8117 	bne.w	800b20a <_dtoa_r+0x6e2>
 800afdc:	f7f5 f956 	bl	800028c <__adddf3>
 800afe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800afe4:	4604      	mov	r4, r0
 800afe6:	460d      	mov	r5, r1
 800afe8:	f7f5 fd96 	bl	8000b18 <__aeabi_dcmpgt>
 800afec:	2800      	cmp	r0, #0
 800afee:	f040 80f9 	bne.w	800b1e4 <_dtoa_r+0x6bc>
 800aff2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aff6:	4620      	mov	r0, r4
 800aff8:	4629      	mov	r1, r5
 800affa:	f7f5 fd65 	bl	8000ac8 <__aeabi_dcmpeq>
 800affe:	b118      	cbz	r0, 800b008 <_dtoa_r+0x4e0>
 800b000:	f018 0f01 	tst.w	r8, #1
 800b004:	f040 80ee 	bne.w	800b1e4 <_dtoa_r+0x6bc>
 800b008:	4649      	mov	r1, r9
 800b00a:	4658      	mov	r0, fp
 800b00c:	f000 fc90 	bl	800b930 <_Bfree>
 800b010:	2300      	movs	r3, #0
 800b012:	7033      	strb	r3, [r6, #0]
 800b014:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b016:	3701      	adds	r7, #1
 800b018:	601f      	str	r7, [r3, #0]
 800b01a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f000 831d 	beq.w	800b65c <_dtoa_r+0xb34>
 800b022:	601e      	str	r6, [r3, #0]
 800b024:	e31a      	b.n	800b65c <_dtoa_r+0xb34>
 800b026:	07e2      	lsls	r2, r4, #31
 800b028:	d505      	bpl.n	800b036 <_dtoa_r+0x50e>
 800b02a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b02e:	f7f5 fae3 	bl	80005f8 <__aeabi_dmul>
 800b032:	3601      	adds	r6, #1
 800b034:	2301      	movs	r3, #1
 800b036:	1064      	asrs	r4, r4, #1
 800b038:	3508      	adds	r5, #8
 800b03a:	e73f      	b.n	800aebc <_dtoa_r+0x394>
 800b03c:	2602      	movs	r6, #2
 800b03e:	e742      	b.n	800aec6 <_dtoa_r+0x39e>
 800b040:	9c07      	ldr	r4, [sp, #28]
 800b042:	9704      	str	r7, [sp, #16]
 800b044:	e761      	b.n	800af0a <_dtoa_r+0x3e2>
 800b046:	4b27      	ldr	r3, [pc, #156]	@ (800b0e4 <_dtoa_r+0x5bc>)
 800b048:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b04a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b04e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b052:	4454      	add	r4, sl
 800b054:	2900      	cmp	r1, #0
 800b056:	d053      	beq.n	800b100 <_dtoa_r+0x5d8>
 800b058:	4928      	ldr	r1, [pc, #160]	@ (800b0fc <_dtoa_r+0x5d4>)
 800b05a:	2000      	movs	r0, #0
 800b05c:	f7f5 fbf6 	bl	800084c <__aeabi_ddiv>
 800b060:	4633      	mov	r3, r6
 800b062:	462a      	mov	r2, r5
 800b064:	f7f5 f910 	bl	8000288 <__aeabi_dsub>
 800b068:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b06c:	4656      	mov	r6, sl
 800b06e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b072:	f7f5 fd71 	bl	8000b58 <__aeabi_d2iz>
 800b076:	4605      	mov	r5, r0
 800b078:	f7f5 fa54 	bl	8000524 <__aeabi_i2d>
 800b07c:	4602      	mov	r2, r0
 800b07e:	460b      	mov	r3, r1
 800b080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b084:	f7f5 f900 	bl	8000288 <__aeabi_dsub>
 800b088:	3530      	adds	r5, #48	@ 0x30
 800b08a:	4602      	mov	r2, r0
 800b08c:	460b      	mov	r3, r1
 800b08e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b092:	f806 5b01 	strb.w	r5, [r6], #1
 800b096:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b09a:	f7f5 fd1f 	bl	8000adc <__aeabi_dcmplt>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	d171      	bne.n	800b186 <_dtoa_r+0x65e>
 800b0a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0a6:	4911      	ldr	r1, [pc, #68]	@ (800b0ec <_dtoa_r+0x5c4>)
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	f7f5 f8ed 	bl	8000288 <__aeabi_dsub>
 800b0ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b0b2:	f7f5 fd13 	bl	8000adc <__aeabi_dcmplt>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	f040 8095 	bne.w	800b1e6 <_dtoa_r+0x6be>
 800b0bc:	42a6      	cmp	r6, r4
 800b0be:	f43f af50 	beq.w	800af62 <_dtoa_r+0x43a>
 800b0c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b0c6:	4b0a      	ldr	r3, [pc, #40]	@ (800b0f0 <_dtoa_r+0x5c8>)
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f7f5 fa95 	bl	80005f8 <__aeabi_dmul>
 800b0ce:	4b08      	ldr	r3, [pc, #32]	@ (800b0f0 <_dtoa_r+0x5c8>)
 800b0d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0da:	f7f5 fa8d 	bl	80005f8 <__aeabi_dmul>
 800b0de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0e2:	e7c4      	b.n	800b06e <_dtoa_r+0x546>
 800b0e4:	0800ca38 	.word	0x0800ca38
 800b0e8:	0800ca10 	.word	0x0800ca10
 800b0ec:	3ff00000 	.word	0x3ff00000
 800b0f0:	40240000 	.word	0x40240000
 800b0f4:	401c0000 	.word	0x401c0000
 800b0f8:	40140000 	.word	0x40140000
 800b0fc:	3fe00000 	.word	0x3fe00000
 800b100:	4631      	mov	r1, r6
 800b102:	4628      	mov	r0, r5
 800b104:	f7f5 fa78 	bl	80005f8 <__aeabi_dmul>
 800b108:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b10c:	9415      	str	r4, [sp, #84]	@ 0x54
 800b10e:	4656      	mov	r6, sl
 800b110:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b114:	f7f5 fd20 	bl	8000b58 <__aeabi_d2iz>
 800b118:	4605      	mov	r5, r0
 800b11a:	f7f5 fa03 	bl	8000524 <__aeabi_i2d>
 800b11e:	4602      	mov	r2, r0
 800b120:	460b      	mov	r3, r1
 800b122:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b126:	f7f5 f8af 	bl	8000288 <__aeabi_dsub>
 800b12a:	3530      	adds	r5, #48	@ 0x30
 800b12c:	f806 5b01 	strb.w	r5, [r6], #1
 800b130:	4602      	mov	r2, r0
 800b132:	460b      	mov	r3, r1
 800b134:	42a6      	cmp	r6, r4
 800b136:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b13a:	f04f 0200 	mov.w	r2, #0
 800b13e:	d124      	bne.n	800b18a <_dtoa_r+0x662>
 800b140:	4bac      	ldr	r3, [pc, #688]	@ (800b3f4 <_dtoa_r+0x8cc>)
 800b142:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b146:	f7f5 f8a1 	bl	800028c <__adddf3>
 800b14a:	4602      	mov	r2, r0
 800b14c:	460b      	mov	r3, r1
 800b14e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b152:	f7f5 fce1 	bl	8000b18 <__aeabi_dcmpgt>
 800b156:	2800      	cmp	r0, #0
 800b158:	d145      	bne.n	800b1e6 <_dtoa_r+0x6be>
 800b15a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b15e:	49a5      	ldr	r1, [pc, #660]	@ (800b3f4 <_dtoa_r+0x8cc>)
 800b160:	2000      	movs	r0, #0
 800b162:	f7f5 f891 	bl	8000288 <__aeabi_dsub>
 800b166:	4602      	mov	r2, r0
 800b168:	460b      	mov	r3, r1
 800b16a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b16e:	f7f5 fcb5 	bl	8000adc <__aeabi_dcmplt>
 800b172:	2800      	cmp	r0, #0
 800b174:	f43f aef5 	beq.w	800af62 <_dtoa_r+0x43a>
 800b178:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b17a:	1e73      	subs	r3, r6, #1
 800b17c:	9315      	str	r3, [sp, #84]	@ 0x54
 800b17e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b182:	2b30      	cmp	r3, #48	@ 0x30
 800b184:	d0f8      	beq.n	800b178 <_dtoa_r+0x650>
 800b186:	9f04      	ldr	r7, [sp, #16]
 800b188:	e73e      	b.n	800b008 <_dtoa_r+0x4e0>
 800b18a:	4b9b      	ldr	r3, [pc, #620]	@ (800b3f8 <_dtoa_r+0x8d0>)
 800b18c:	f7f5 fa34 	bl	80005f8 <__aeabi_dmul>
 800b190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b194:	e7bc      	b.n	800b110 <_dtoa_r+0x5e8>
 800b196:	d10c      	bne.n	800b1b2 <_dtoa_r+0x68a>
 800b198:	4b98      	ldr	r3, [pc, #608]	@ (800b3fc <_dtoa_r+0x8d4>)
 800b19a:	2200      	movs	r2, #0
 800b19c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1a0:	f7f5 fa2a 	bl	80005f8 <__aeabi_dmul>
 800b1a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1a8:	f7f5 fcac 	bl	8000b04 <__aeabi_dcmpge>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	f000 8157 	beq.w	800b460 <_dtoa_r+0x938>
 800b1b2:	2400      	movs	r4, #0
 800b1b4:	4625      	mov	r5, r4
 800b1b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1b8:	43db      	mvns	r3, r3
 800b1ba:	9304      	str	r3, [sp, #16]
 800b1bc:	4656      	mov	r6, sl
 800b1be:	2700      	movs	r7, #0
 800b1c0:	4621      	mov	r1, r4
 800b1c2:	4658      	mov	r0, fp
 800b1c4:	f000 fbb4 	bl	800b930 <_Bfree>
 800b1c8:	2d00      	cmp	r5, #0
 800b1ca:	d0dc      	beq.n	800b186 <_dtoa_r+0x65e>
 800b1cc:	b12f      	cbz	r7, 800b1da <_dtoa_r+0x6b2>
 800b1ce:	42af      	cmp	r7, r5
 800b1d0:	d003      	beq.n	800b1da <_dtoa_r+0x6b2>
 800b1d2:	4639      	mov	r1, r7
 800b1d4:	4658      	mov	r0, fp
 800b1d6:	f000 fbab 	bl	800b930 <_Bfree>
 800b1da:	4629      	mov	r1, r5
 800b1dc:	4658      	mov	r0, fp
 800b1de:	f000 fba7 	bl	800b930 <_Bfree>
 800b1e2:	e7d0      	b.n	800b186 <_dtoa_r+0x65e>
 800b1e4:	9704      	str	r7, [sp, #16]
 800b1e6:	4633      	mov	r3, r6
 800b1e8:	461e      	mov	r6, r3
 800b1ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1ee:	2a39      	cmp	r2, #57	@ 0x39
 800b1f0:	d107      	bne.n	800b202 <_dtoa_r+0x6da>
 800b1f2:	459a      	cmp	sl, r3
 800b1f4:	d1f8      	bne.n	800b1e8 <_dtoa_r+0x6c0>
 800b1f6:	9a04      	ldr	r2, [sp, #16]
 800b1f8:	3201      	adds	r2, #1
 800b1fa:	9204      	str	r2, [sp, #16]
 800b1fc:	2230      	movs	r2, #48	@ 0x30
 800b1fe:	f88a 2000 	strb.w	r2, [sl]
 800b202:	781a      	ldrb	r2, [r3, #0]
 800b204:	3201      	adds	r2, #1
 800b206:	701a      	strb	r2, [r3, #0]
 800b208:	e7bd      	b.n	800b186 <_dtoa_r+0x65e>
 800b20a:	4b7b      	ldr	r3, [pc, #492]	@ (800b3f8 <_dtoa_r+0x8d0>)
 800b20c:	2200      	movs	r2, #0
 800b20e:	f7f5 f9f3 	bl	80005f8 <__aeabi_dmul>
 800b212:	2200      	movs	r2, #0
 800b214:	2300      	movs	r3, #0
 800b216:	4604      	mov	r4, r0
 800b218:	460d      	mov	r5, r1
 800b21a:	f7f5 fc55 	bl	8000ac8 <__aeabi_dcmpeq>
 800b21e:	2800      	cmp	r0, #0
 800b220:	f43f aebb 	beq.w	800af9a <_dtoa_r+0x472>
 800b224:	e6f0      	b.n	800b008 <_dtoa_r+0x4e0>
 800b226:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b228:	2a00      	cmp	r2, #0
 800b22a:	f000 80db 	beq.w	800b3e4 <_dtoa_r+0x8bc>
 800b22e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b230:	2a01      	cmp	r2, #1
 800b232:	f300 80bf 	bgt.w	800b3b4 <_dtoa_r+0x88c>
 800b236:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b238:	2a00      	cmp	r2, #0
 800b23a:	f000 80b7 	beq.w	800b3ac <_dtoa_r+0x884>
 800b23e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b242:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b244:	4646      	mov	r6, r8
 800b246:	9a08      	ldr	r2, [sp, #32]
 800b248:	2101      	movs	r1, #1
 800b24a:	441a      	add	r2, r3
 800b24c:	4658      	mov	r0, fp
 800b24e:	4498      	add	r8, r3
 800b250:	9208      	str	r2, [sp, #32]
 800b252:	f000 fc21 	bl	800ba98 <__i2b>
 800b256:	4605      	mov	r5, r0
 800b258:	b15e      	cbz	r6, 800b272 <_dtoa_r+0x74a>
 800b25a:	9b08      	ldr	r3, [sp, #32]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	dd08      	ble.n	800b272 <_dtoa_r+0x74a>
 800b260:	42b3      	cmp	r3, r6
 800b262:	9a08      	ldr	r2, [sp, #32]
 800b264:	bfa8      	it	ge
 800b266:	4633      	movge	r3, r6
 800b268:	eba8 0803 	sub.w	r8, r8, r3
 800b26c:	1af6      	subs	r6, r6, r3
 800b26e:	1ad3      	subs	r3, r2, r3
 800b270:	9308      	str	r3, [sp, #32]
 800b272:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b274:	b1f3      	cbz	r3, 800b2b4 <_dtoa_r+0x78c>
 800b276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b278:	2b00      	cmp	r3, #0
 800b27a:	f000 80b7 	beq.w	800b3ec <_dtoa_r+0x8c4>
 800b27e:	b18c      	cbz	r4, 800b2a4 <_dtoa_r+0x77c>
 800b280:	4629      	mov	r1, r5
 800b282:	4622      	mov	r2, r4
 800b284:	4658      	mov	r0, fp
 800b286:	f000 fcc7 	bl	800bc18 <__pow5mult>
 800b28a:	464a      	mov	r2, r9
 800b28c:	4601      	mov	r1, r0
 800b28e:	4605      	mov	r5, r0
 800b290:	4658      	mov	r0, fp
 800b292:	f000 fc17 	bl	800bac4 <__multiply>
 800b296:	4649      	mov	r1, r9
 800b298:	9004      	str	r0, [sp, #16]
 800b29a:	4658      	mov	r0, fp
 800b29c:	f000 fb48 	bl	800b930 <_Bfree>
 800b2a0:	9b04      	ldr	r3, [sp, #16]
 800b2a2:	4699      	mov	r9, r3
 800b2a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2a6:	1b1a      	subs	r2, r3, r4
 800b2a8:	d004      	beq.n	800b2b4 <_dtoa_r+0x78c>
 800b2aa:	4649      	mov	r1, r9
 800b2ac:	4658      	mov	r0, fp
 800b2ae:	f000 fcb3 	bl	800bc18 <__pow5mult>
 800b2b2:	4681      	mov	r9, r0
 800b2b4:	2101      	movs	r1, #1
 800b2b6:	4658      	mov	r0, fp
 800b2b8:	f000 fbee 	bl	800ba98 <__i2b>
 800b2bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2be:	4604      	mov	r4, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	f000 81cf 	beq.w	800b664 <_dtoa_r+0xb3c>
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	4601      	mov	r1, r0
 800b2ca:	4658      	mov	r0, fp
 800b2cc:	f000 fca4 	bl	800bc18 <__pow5mult>
 800b2d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	4604      	mov	r4, r0
 800b2d6:	f300 8095 	bgt.w	800b404 <_dtoa_r+0x8dc>
 800b2da:	9b02      	ldr	r3, [sp, #8]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f040 8087 	bne.w	800b3f0 <_dtoa_r+0x8c8>
 800b2e2:	9b03      	ldr	r3, [sp, #12]
 800b2e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	f040 8089 	bne.w	800b400 <_dtoa_r+0x8d8>
 800b2ee:	9b03      	ldr	r3, [sp, #12]
 800b2f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b2f4:	0d1b      	lsrs	r3, r3, #20
 800b2f6:	051b      	lsls	r3, r3, #20
 800b2f8:	b12b      	cbz	r3, 800b306 <_dtoa_r+0x7de>
 800b2fa:	9b08      	ldr	r3, [sp, #32]
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	9308      	str	r3, [sp, #32]
 800b300:	f108 0801 	add.w	r8, r8, #1
 800b304:	2301      	movs	r3, #1
 800b306:	930a      	str	r3, [sp, #40]	@ 0x28
 800b308:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	f000 81b0 	beq.w	800b670 <_dtoa_r+0xb48>
 800b310:	6923      	ldr	r3, [r4, #16]
 800b312:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b316:	6918      	ldr	r0, [r3, #16]
 800b318:	f000 fb72 	bl	800ba00 <__hi0bits>
 800b31c:	f1c0 0020 	rsb	r0, r0, #32
 800b320:	9b08      	ldr	r3, [sp, #32]
 800b322:	4418      	add	r0, r3
 800b324:	f010 001f 	ands.w	r0, r0, #31
 800b328:	d077      	beq.n	800b41a <_dtoa_r+0x8f2>
 800b32a:	f1c0 0320 	rsb	r3, r0, #32
 800b32e:	2b04      	cmp	r3, #4
 800b330:	dd6b      	ble.n	800b40a <_dtoa_r+0x8e2>
 800b332:	9b08      	ldr	r3, [sp, #32]
 800b334:	f1c0 001c 	rsb	r0, r0, #28
 800b338:	4403      	add	r3, r0
 800b33a:	4480      	add	r8, r0
 800b33c:	4406      	add	r6, r0
 800b33e:	9308      	str	r3, [sp, #32]
 800b340:	f1b8 0f00 	cmp.w	r8, #0
 800b344:	dd05      	ble.n	800b352 <_dtoa_r+0x82a>
 800b346:	4649      	mov	r1, r9
 800b348:	4642      	mov	r2, r8
 800b34a:	4658      	mov	r0, fp
 800b34c:	f000 fcbe 	bl	800bccc <__lshift>
 800b350:	4681      	mov	r9, r0
 800b352:	9b08      	ldr	r3, [sp, #32]
 800b354:	2b00      	cmp	r3, #0
 800b356:	dd05      	ble.n	800b364 <_dtoa_r+0x83c>
 800b358:	4621      	mov	r1, r4
 800b35a:	461a      	mov	r2, r3
 800b35c:	4658      	mov	r0, fp
 800b35e:	f000 fcb5 	bl	800bccc <__lshift>
 800b362:	4604      	mov	r4, r0
 800b364:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b366:	2b00      	cmp	r3, #0
 800b368:	d059      	beq.n	800b41e <_dtoa_r+0x8f6>
 800b36a:	4621      	mov	r1, r4
 800b36c:	4648      	mov	r0, r9
 800b36e:	f000 fd19 	bl	800bda4 <__mcmp>
 800b372:	2800      	cmp	r0, #0
 800b374:	da53      	bge.n	800b41e <_dtoa_r+0x8f6>
 800b376:	1e7b      	subs	r3, r7, #1
 800b378:	9304      	str	r3, [sp, #16]
 800b37a:	4649      	mov	r1, r9
 800b37c:	2300      	movs	r3, #0
 800b37e:	220a      	movs	r2, #10
 800b380:	4658      	mov	r0, fp
 800b382:	f000 faf7 	bl	800b974 <__multadd>
 800b386:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b388:	4681      	mov	r9, r0
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	f000 8172 	beq.w	800b674 <_dtoa_r+0xb4c>
 800b390:	2300      	movs	r3, #0
 800b392:	4629      	mov	r1, r5
 800b394:	220a      	movs	r2, #10
 800b396:	4658      	mov	r0, fp
 800b398:	f000 faec 	bl	800b974 <__multadd>
 800b39c:	9b00      	ldr	r3, [sp, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	4605      	mov	r5, r0
 800b3a2:	dc67      	bgt.n	800b474 <_dtoa_r+0x94c>
 800b3a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3a6:	2b02      	cmp	r3, #2
 800b3a8:	dc41      	bgt.n	800b42e <_dtoa_r+0x906>
 800b3aa:	e063      	b.n	800b474 <_dtoa_r+0x94c>
 800b3ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b3ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b3b2:	e746      	b.n	800b242 <_dtoa_r+0x71a>
 800b3b4:	9b07      	ldr	r3, [sp, #28]
 800b3b6:	1e5c      	subs	r4, r3, #1
 800b3b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3ba:	42a3      	cmp	r3, r4
 800b3bc:	bfbf      	itttt	lt
 800b3be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b3c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b3c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b3c4:	1ae3      	sublt	r3, r4, r3
 800b3c6:	bfb4      	ite	lt
 800b3c8:	18d2      	addlt	r2, r2, r3
 800b3ca:	1b1c      	subge	r4, r3, r4
 800b3cc:	9b07      	ldr	r3, [sp, #28]
 800b3ce:	bfbc      	itt	lt
 800b3d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b3d2:	2400      	movlt	r4, #0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	bfb5      	itete	lt
 800b3d8:	eba8 0603 	sublt.w	r6, r8, r3
 800b3dc:	9b07      	ldrge	r3, [sp, #28]
 800b3de:	2300      	movlt	r3, #0
 800b3e0:	4646      	movge	r6, r8
 800b3e2:	e730      	b.n	800b246 <_dtoa_r+0x71e>
 800b3e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b3e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b3e8:	4646      	mov	r6, r8
 800b3ea:	e735      	b.n	800b258 <_dtoa_r+0x730>
 800b3ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3ee:	e75c      	b.n	800b2aa <_dtoa_r+0x782>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	e788      	b.n	800b306 <_dtoa_r+0x7de>
 800b3f4:	3fe00000 	.word	0x3fe00000
 800b3f8:	40240000 	.word	0x40240000
 800b3fc:	40140000 	.word	0x40140000
 800b400:	9b02      	ldr	r3, [sp, #8]
 800b402:	e780      	b.n	800b306 <_dtoa_r+0x7de>
 800b404:	2300      	movs	r3, #0
 800b406:	930a      	str	r3, [sp, #40]	@ 0x28
 800b408:	e782      	b.n	800b310 <_dtoa_r+0x7e8>
 800b40a:	d099      	beq.n	800b340 <_dtoa_r+0x818>
 800b40c:	9a08      	ldr	r2, [sp, #32]
 800b40e:	331c      	adds	r3, #28
 800b410:	441a      	add	r2, r3
 800b412:	4498      	add	r8, r3
 800b414:	441e      	add	r6, r3
 800b416:	9208      	str	r2, [sp, #32]
 800b418:	e792      	b.n	800b340 <_dtoa_r+0x818>
 800b41a:	4603      	mov	r3, r0
 800b41c:	e7f6      	b.n	800b40c <_dtoa_r+0x8e4>
 800b41e:	9b07      	ldr	r3, [sp, #28]
 800b420:	9704      	str	r7, [sp, #16]
 800b422:	2b00      	cmp	r3, #0
 800b424:	dc20      	bgt.n	800b468 <_dtoa_r+0x940>
 800b426:	9300      	str	r3, [sp, #0]
 800b428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b42a:	2b02      	cmp	r3, #2
 800b42c:	dd1e      	ble.n	800b46c <_dtoa_r+0x944>
 800b42e:	9b00      	ldr	r3, [sp, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	f47f aec0 	bne.w	800b1b6 <_dtoa_r+0x68e>
 800b436:	4621      	mov	r1, r4
 800b438:	2205      	movs	r2, #5
 800b43a:	4658      	mov	r0, fp
 800b43c:	f000 fa9a 	bl	800b974 <__multadd>
 800b440:	4601      	mov	r1, r0
 800b442:	4604      	mov	r4, r0
 800b444:	4648      	mov	r0, r9
 800b446:	f000 fcad 	bl	800bda4 <__mcmp>
 800b44a:	2800      	cmp	r0, #0
 800b44c:	f77f aeb3 	ble.w	800b1b6 <_dtoa_r+0x68e>
 800b450:	4656      	mov	r6, sl
 800b452:	2331      	movs	r3, #49	@ 0x31
 800b454:	f806 3b01 	strb.w	r3, [r6], #1
 800b458:	9b04      	ldr	r3, [sp, #16]
 800b45a:	3301      	adds	r3, #1
 800b45c:	9304      	str	r3, [sp, #16]
 800b45e:	e6ae      	b.n	800b1be <_dtoa_r+0x696>
 800b460:	9c07      	ldr	r4, [sp, #28]
 800b462:	9704      	str	r7, [sp, #16]
 800b464:	4625      	mov	r5, r4
 800b466:	e7f3      	b.n	800b450 <_dtoa_r+0x928>
 800b468:	9b07      	ldr	r3, [sp, #28]
 800b46a:	9300      	str	r3, [sp, #0]
 800b46c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b46e:	2b00      	cmp	r3, #0
 800b470:	f000 8104 	beq.w	800b67c <_dtoa_r+0xb54>
 800b474:	2e00      	cmp	r6, #0
 800b476:	dd05      	ble.n	800b484 <_dtoa_r+0x95c>
 800b478:	4629      	mov	r1, r5
 800b47a:	4632      	mov	r2, r6
 800b47c:	4658      	mov	r0, fp
 800b47e:	f000 fc25 	bl	800bccc <__lshift>
 800b482:	4605      	mov	r5, r0
 800b484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b486:	2b00      	cmp	r3, #0
 800b488:	d05a      	beq.n	800b540 <_dtoa_r+0xa18>
 800b48a:	6869      	ldr	r1, [r5, #4]
 800b48c:	4658      	mov	r0, fp
 800b48e:	f000 fa0f 	bl	800b8b0 <_Balloc>
 800b492:	4606      	mov	r6, r0
 800b494:	b928      	cbnz	r0, 800b4a2 <_dtoa_r+0x97a>
 800b496:	4b84      	ldr	r3, [pc, #528]	@ (800b6a8 <_dtoa_r+0xb80>)
 800b498:	4602      	mov	r2, r0
 800b49a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b49e:	f7ff bb5a 	b.w	800ab56 <_dtoa_r+0x2e>
 800b4a2:	692a      	ldr	r2, [r5, #16]
 800b4a4:	3202      	adds	r2, #2
 800b4a6:	0092      	lsls	r2, r2, #2
 800b4a8:	f105 010c 	add.w	r1, r5, #12
 800b4ac:	300c      	adds	r0, #12
 800b4ae:	f7ff faa4 	bl	800a9fa <memcpy>
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	4631      	mov	r1, r6
 800b4b6:	4658      	mov	r0, fp
 800b4b8:	f000 fc08 	bl	800bccc <__lshift>
 800b4bc:	f10a 0301 	add.w	r3, sl, #1
 800b4c0:	9307      	str	r3, [sp, #28]
 800b4c2:	9b00      	ldr	r3, [sp, #0]
 800b4c4:	4453      	add	r3, sl
 800b4c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4c8:	9b02      	ldr	r3, [sp, #8]
 800b4ca:	f003 0301 	and.w	r3, r3, #1
 800b4ce:	462f      	mov	r7, r5
 800b4d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4d2:	4605      	mov	r5, r0
 800b4d4:	9b07      	ldr	r3, [sp, #28]
 800b4d6:	4621      	mov	r1, r4
 800b4d8:	3b01      	subs	r3, #1
 800b4da:	4648      	mov	r0, r9
 800b4dc:	9300      	str	r3, [sp, #0]
 800b4de:	f7ff fa9a 	bl	800aa16 <quorem>
 800b4e2:	4639      	mov	r1, r7
 800b4e4:	9002      	str	r0, [sp, #8]
 800b4e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b4ea:	4648      	mov	r0, r9
 800b4ec:	f000 fc5a 	bl	800bda4 <__mcmp>
 800b4f0:	462a      	mov	r2, r5
 800b4f2:	9008      	str	r0, [sp, #32]
 800b4f4:	4621      	mov	r1, r4
 800b4f6:	4658      	mov	r0, fp
 800b4f8:	f000 fc70 	bl	800bddc <__mdiff>
 800b4fc:	68c2      	ldr	r2, [r0, #12]
 800b4fe:	4606      	mov	r6, r0
 800b500:	bb02      	cbnz	r2, 800b544 <_dtoa_r+0xa1c>
 800b502:	4601      	mov	r1, r0
 800b504:	4648      	mov	r0, r9
 800b506:	f000 fc4d 	bl	800bda4 <__mcmp>
 800b50a:	4602      	mov	r2, r0
 800b50c:	4631      	mov	r1, r6
 800b50e:	4658      	mov	r0, fp
 800b510:	920e      	str	r2, [sp, #56]	@ 0x38
 800b512:	f000 fa0d 	bl	800b930 <_Bfree>
 800b516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b518:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b51a:	9e07      	ldr	r6, [sp, #28]
 800b51c:	ea43 0102 	orr.w	r1, r3, r2
 800b520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b522:	4319      	orrs	r1, r3
 800b524:	d110      	bne.n	800b548 <_dtoa_r+0xa20>
 800b526:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b52a:	d029      	beq.n	800b580 <_dtoa_r+0xa58>
 800b52c:	9b08      	ldr	r3, [sp, #32]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	dd02      	ble.n	800b538 <_dtoa_r+0xa10>
 800b532:	9b02      	ldr	r3, [sp, #8]
 800b534:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b538:	9b00      	ldr	r3, [sp, #0]
 800b53a:	f883 8000 	strb.w	r8, [r3]
 800b53e:	e63f      	b.n	800b1c0 <_dtoa_r+0x698>
 800b540:	4628      	mov	r0, r5
 800b542:	e7bb      	b.n	800b4bc <_dtoa_r+0x994>
 800b544:	2201      	movs	r2, #1
 800b546:	e7e1      	b.n	800b50c <_dtoa_r+0x9e4>
 800b548:	9b08      	ldr	r3, [sp, #32]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	db04      	blt.n	800b558 <_dtoa_r+0xa30>
 800b54e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b550:	430b      	orrs	r3, r1
 800b552:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b554:	430b      	orrs	r3, r1
 800b556:	d120      	bne.n	800b59a <_dtoa_r+0xa72>
 800b558:	2a00      	cmp	r2, #0
 800b55a:	dded      	ble.n	800b538 <_dtoa_r+0xa10>
 800b55c:	4649      	mov	r1, r9
 800b55e:	2201      	movs	r2, #1
 800b560:	4658      	mov	r0, fp
 800b562:	f000 fbb3 	bl	800bccc <__lshift>
 800b566:	4621      	mov	r1, r4
 800b568:	4681      	mov	r9, r0
 800b56a:	f000 fc1b 	bl	800bda4 <__mcmp>
 800b56e:	2800      	cmp	r0, #0
 800b570:	dc03      	bgt.n	800b57a <_dtoa_r+0xa52>
 800b572:	d1e1      	bne.n	800b538 <_dtoa_r+0xa10>
 800b574:	f018 0f01 	tst.w	r8, #1
 800b578:	d0de      	beq.n	800b538 <_dtoa_r+0xa10>
 800b57a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b57e:	d1d8      	bne.n	800b532 <_dtoa_r+0xa0a>
 800b580:	9a00      	ldr	r2, [sp, #0]
 800b582:	2339      	movs	r3, #57	@ 0x39
 800b584:	7013      	strb	r3, [r2, #0]
 800b586:	4633      	mov	r3, r6
 800b588:	461e      	mov	r6, r3
 800b58a:	3b01      	subs	r3, #1
 800b58c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b590:	2a39      	cmp	r2, #57	@ 0x39
 800b592:	d052      	beq.n	800b63a <_dtoa_r+0xb12>
 800b594:	3201      	adds	r2, #1
 800b596:	701a      	strb	r2, [r3, #0]
 800b598:	e612      	b.n	800b1c0 <_dtoa_r+0x698>
 800b59a:	2a00      	cmp	r2, #0
 800b59c:	dd07      	ble.n	800b5ae <_dtoa_r+0xa86>
 800b59e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b5a2:	d0ed      	beq.n	800b580 <_dtoa_r+0xa58>
 800b5a4:	9a00      	ldr	r2, [sp, #0]
 800b5a6:	f108 0301 	add.w	r3, r8, #1
 800b5aa:	7013      	strb	r3, [r2, #0]
 800b5ac:	e608      	b.n	800b1c0 <_dtoa_r+0x698>
 800b5ae:	9b07      	ldr	r3, [sp, #28]
 800b5b0:	9a07      	ldr	r2, [sp, #28]
 800b5b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b5b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d028      	beq.n	800b60e <_dtoa_r+0xae6>
 800b5bc:	4649      	mov	r1, r9
 800b5be:	2300      	movs	r3, #0
 800b5c0:	220a      	movs	r2, #10
 800b5c2:	4658      	mov	r0, fp
 800b5c4:	f000 f9d6 	bl	800b974 <__multadd>
 800b5c8:	42af      	cmp	r7, r5
 800b5ca:	4681      	mov	r9, r0
 800b5cc:	f04f 0300 	mov.w	r3, #0
 800b5d0:	f04f 020a 	mov.w	r2, #10
 800b5d4:	4639      	mov	r1, r7
 800b5d6:	4658      	mov	r0, fp
 800b5d8:	d107      	bne.n	800b5ea <_dtoa_r+0xac2>
 800b5da:	f000 f9cb 	bl	800b974 <__multadd>
 800b5de:	4607      	mov	r7, r0
 800b5e0:	4605      	mov	r5, r0
 800b5e2:	9b07      	ldr	r3, [sp, #28]
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	9307      	str	r3, [sp, #28]
 800b5e8:	e774      	b.n	800b4d4 <_dtoa_r+0x9ac>
 800b5ea:	f000 f9c3 	bl	800b974 <__multadd>
 800b5ee:	4629      	mov	r1, r5
 800b5f0:	4607      	mov	r7, r0
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	220a      	movs	r2, #10
 800b5f6:	4658      	mov	r0, fp
 800b5f8:	f000 f9bc 	bl	800b974 <__multadd>
 800b5fc:	4605      	mov	r5, r0
 800b5fe:	e7f0      	b.n	800b5e2 <_dtoa_r+0xaba>
 800b600:	9b00      	ldr	r3, [sp, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	bfcc      	ite	gt
 800b606:	461e      	movgt	r6, r3
 800b608:	2601      	movle	r6, #1
 800b60a:	4456      	add	r6, sl
 800b60c:	2700      	movs	r7, #0
 800b60e:	4649      	mov	r1, r9
 800b610:	2201      	movs	r2, #1
 800b612:	4658      	mov	r0, fp
 800b614:	f000 fb5a 	bl	800bccc <__lshift>
 800b618:	4621      	mov	r1, r4
 800b61a:	4681      	mov	r9, r0
 800b61c:	f000 fbc2 	bl	800bda4 <__mcmp>
 800b620:	2800      	cmp	r0, #0
 800b622:	dcb0      	bgt.n	800b586 <_dtoa_r+0xa5e>
 800b624:	d102      	bne.n	800b62c <_dtoa_r+0xb04>
 800b626:	f018 0f01 	tst.w	r8, #1
 800b62a:	d1ac      	bne.n	800b586 <_dtoa_r+0xa5e>
 800b62c:	4633      	mov	r3, r6
 800b62e:	461e      	mov	r6, r3
 800b630:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b634:	2a30      	cmp	r2, #48	@ 0x30
 800b636:	d0fa      	beq.n	800b62e <_dtoa_r+0xb06>
 800b638:	e5c2      	b.n	800b1c0 <_dtoa_r+0x698>
 800b63a:	459a      	cmp	sl, r3
 800b63c:	d1a4      	bne.n	800b588 <_dtoa_r+0xa60>
 800b63e:	9b04      	ldr	r3, [sp, #16]
 800b640:	3301      	adds	r3, #1
 800b642:	9304      	str	r3, [sp, #16]
 800b644:	2331      	movs	r3, #49	@ 0x31
 800b646:	f88a 3000 	strb.w	r3, [sl]
 800b64a:	e5b9      	b.n	800b1c0 <_dtoa_r+0x698>
 800b64c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b64e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b6ac <_dtoa_r+0xb84>
 800b652:	b11b      	cbz	r3, 800b65c <_dtoa_r+0xb34>
 800b654:	f10a 0308 	add.w	r3, sl, #8
 800b658:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b65a:	6013      	str	r3, [r2, #0]
 800b65c:	4650      	mov	r0, sl
 800b65e:	b019      	add	sp, #100	@ 0x64
 800b660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b666:	2b01      	cmp	r3, #1
 800b668:	f77f ae37 	ble.w	800b2da <_dtoa_r+0x7b2>
 800b66c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b66e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b670:	2001      	movs	r0, #1
 800b672:	e655      	b.n	800b320 <_dtoa_r+0x7f8>
 800b674:	9b00      	ldr	r3, [sp, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	f77f aed6 	ble.w	800b428 <_dtoa_r+0x900>
 800b67c:	4656      	mov	r6, sl
 800b67e:	4621      	mov	r1, r4
 800b680:	4648      	mov	r0, r9
 800b682:	f7ff f9c8 	bl	800aa16 <quorem>
 800b686:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b68a:	f806 8b01 	strb.w	r8, [r6], #1
 800b68e:	9b00      	ldr	r3, [sp, #0]
 800b690:	eba6 020a 	sub.w	r2, r6, sl
 800b694:	4293      	cmp	r3, r2
 800b696:	ddb3      	ble.n	800b600 <_dtoa_r+0xad8>
 800b698:	4649      	mov	r1, r9
 800b69a:	2300      	movs	r3, #0
 800b69c:	220a      	movs	r2, #10
 800b69e:	4658      	mov	r0, fp
 800b6a0:	f000 f968 	bl	800b974 <__multadd>
 800b6a4:	4681      	mov	r9, r0
 800b6a6:	e7ea      	b.n	800b67e <_dtoa_r+0xb56>
 800b6a8:	0800c998 	.word	0x0800c998
 800b6ac:	0800c91c 	.word	0x0800c91c

0800b6b0 <_free_r>:
 800b6b0:	b538      	push	{r3, r4, r5, lr}
 800b6b2:	4605      	mov	r5, r0
 800b6b4:	2900      	cmp	r1, #0
 800b6b6:	d041      	beq.n	800b73c <_free_r+0x8c>
 800b6b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6bc:	1f0c      	subs	r4, r1, #4
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	bfb8      	it	lt
 800b6c2:	18e4      	addlt	r4, r4, r3
 800b6c4:	f000 f8e8 	bl	800b898 <__malloc_lock>
 800b6c8:	4a1d      	ldr	r2, [pc, #116]	@ (800b740 <_free_r+0x90>)
 800b6ca:	6813      	ldr	r3, [r2, #0]
 800b6cc:	b933      	cbnz	r3, 800b6dc <_free_r+0x2c>
 800b6ce:	6063      	str	r3, [r4, #4]
 800b6d0:	6014      	str	r4, [r2, #0]
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6d8:	f000 b8e4 	b.w	800b8a4 <__malloc_unlock>
 800b6dc:	42a3      	cmp	r3, r4
 800b6de:	d908      	bls.n	800b6f2 <_free_r+0x42>
 800b6e0:	6820      	ldr	r0, [r4, #0]
 800b6e2:	1821      	adds	r1, r4, r0
 800b6e4:	428b      	cmp	r3, r1
 800b6e6:	bf01      	itttt	eq
 800b6e8:	6819      	ldreq	r1, [r3, #0]
 800b6ea:	685b      	ldreq	r3, [r3, #4]
 800b6ec:	1809      	addeq	r1, r1, r0
 800b6ee:	6021      	streq	r1, [r4, #0]
 800b6f0:	e7ed      	b.n	800b6ce <_free_r+0x1e>
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	b10b      	cbz	r3, 800b6fc <_free_r+0x4c>
 800b6f8:	42a3      	cmp	r3, r4
 800b6fa:	d9fa      	bls.n	800b6f2 <_free_r+0x42>
 800b6fc:	6811      	ldr	r1, [r2, #0]
 800b6fe:	1850      	adds	r0, r2, r1
 800b700:	42a0      	cmp	r0, r4
 800b702:	d10b      	bne.n	800b71c <_free_r+0x6c>
 800b704:	6820      	ldr	r0, [r4, #0]
 800b706:	4401      	add	r1, r0
 800b708:	1850      	adds	r0, r2, r1
 800b70a:	4283      	cmp	r3, r0
 800b70c:	6011      	str	r1, [r2, #0]
 800b70e:	d1e0      	bne.n	800b6d2 <_free_r+0x22>
 800b710:	6818      	ldr	r0, [r3, #0]
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	6053      	str	r3, [r2, #4]
 800b716:	4408      	add	r0, r1
 800b718:	6010      	str	r0, [r2, #0]
 800b71a:	e7da      	b.n	800b6d2 <_free_r+0x22>
 800b71c:	d902      	bls.n	800b724 <_free_r+0x74>
 800b71e:	230c      	movs	r3, #12
 800b720:	602b      	str	r3, [r5, #0]
 800b722:	e7d6      	b.n	800b6d2 <_free_r+0x22>
 800b724:	6820      	ldr	r0, [r4, #0]
 800b726:	1821      	adds	r1, r4, r0
 800b728:	428b      	cmp	r3, r1
 800b72a:	bf04      	itt	eq
 800b72c:	6819      	ldreq	r1, [r3, #0]
 800b72e:	685b      	ldreq	r3, [r3, #4]
 800b730:	6063      	str	r3, [r4, #4]
 800b732:	bf04      	itt	eq
 800b734:	1809      	addeq	r1, r1, r0
 800b736:	6021      	streq	r1, [r4, #0]
 800b738:	6054      	str	r4, [r2, #4]
 800b73a:	e7ca      	b.n	800b6d2 <_free_r+0x22>
 800b73c:	bd38      	pop	{r3, r4, r5, pc}
 800b73e:	bf00      	nop
 800b740:	2000054c 	.word	0x2000054c

0800b744 <malloc>:
 800b744:	4b02      	ldr	r3, [pc, #8]	@ (800b750 <malloc+0xc>)
 800b746:	4601      	mov	r1, r0
 800b748:	6818      	ldr	r0, [r3, #0]
 800b74a:	f000 b825 	b.w	800b798 <_malloc_r>
 800b74e:	bf00      	nop
 800b750:	20000048 	.word	0x20000048

0800b754 <sbrk_aligned>:
 800b754:	b570      	push	{r4, r5, r6, lr}
 800b756:	4e0f      	ldr	r6, [pc, #60]	@ (800b794 <sbrk_aligned+0x40>)
 800b758:	460c      	mov	r4, r1
 800b75a:	6831      	ldr	r1, [r6, #0]
 800b75c:	4605      	mov	r5, r0
 800b75e:	b911      	cbnz	r1, 800b766 <sbrk_aligned+0x12>
 800b760:	f000 ff62 	bl	800c628 <_sbrk_r>
 800b764:	6030      	str	r0, [r6, #0]
 800b766:	4621      	mov	r1, r4
 800b768:	4628      	mov	r0, r5
 800b76a:	f000 ff5d 	bl	800c628 <_sbrk_r>
 800b76e:	1c43      	adds	r3, r0, #1
 800b770:	d103      	bne.n	800b77a <sbrk_aligned+0x26>
 800b772:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b776:	4620      	mov	r0, r4
 800b778:	bd70      	pop	{r4, r5, r6, pc}
 800b77a:	1cc4      	adds	r4, r0, #3
 800b77c:	f024 0403 	bic.w	r4, r4, #3
 800b780:	42a0      	cmp	r0, r4
 800b782:	d0f8      	beq.n	800b776 <sbrk_aligned+0x22>
 800b784:	1a21      	subs	r1, r4, r0
 800b786:	4628      	mov	r0, r5
 800b788:	f000 ff4e 	bl	800c628 <_sbrk_r>
 800b78c:	3001      	adds	r0, #1
 800b78e:	d1f2      	bne.n	800b776 <sbrk_aligned+0x22>
 800b790:	e7ef      	b.n	800b772 <sbrk_aligned+0x1e>
 800b792:	bf00      	nop
 800b794:	20000548 	.word	0x20000548

0800b798 <_malloc_r>:
 800b798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b79c:	1ccd      	adds	r5, r1, #3
 800b79e:	f025 0503 	bic.w	r5, r5, #3
 800b7a2:	3508      	adds	r5, #8
 800b7a4:	2d0c      	cmp	r5, #12
 800b7a6:	bf38      	it	cc
 800b7a8:	250c      	movcc	r5, #12
 800b7aa:	2d00      	cmp	r5, #0
 800b7ac:	4606      	mov	r6, r0
 800b7ae:	db01      	blt.n	800b7b4 <_malloc_r+0x1c>
 800b7b0:	42a9      	cmp	r1, r5
 800b7b2:	d904      	bls.n	800b7be <_malloc_r+0x26>
 800b7b4:	230c      	movs	r3, #12
 800b7b6:	6033      	str	r3, [r6, #0]
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b894 <_malloc_r+0xfc>
 800b7c2:	f000 f869 	bl	800b898 <__malloc_lock>
 800b7c6:	f8d8 3000 	ldr.w	r3, [r8]
 800b7ca:	461c      	mov	r4, r3
 800b7cc:	bb44      	cbnz	r4, 800b820 <_malloc_r+0x88>
 800b7ce:	4629      	mov	r1, r5
 800b7d0:	4630      	mov	r0, r6
 800b7d2:	f7ff ffbf 	bl	800b754 <sbrk_aligned>
 800b7d6:	1c43      	adds	r3, r0, #1
 800b7d8:	4604      	mov	r4, r0
 800b7da:	d158      	bne.n	800b88e <_malloc_r+0xf6>
 800b7dc:	f8d8 4000 	ldr.w	r4, [r8]
 800b7e0:	4627      	mov	r7, r4
 800b7e2:	2f00      	cmp	r7, #0
 800b7e4:	d143      	bne.n	800b86e <_malloc_r+0xd6>
 800b7e6:	2c00      	cmp	r4, #0
 800b7e8:	d04b      	beq.n	800b882 <_malloc_r+0xea>
 800b7ea:	6823      	ldr	r3, [r4, #0]
 800b7ec:	4639      	mov	r1, r7
 800b7ee:	4630      	mov	r0, r6
 800b7f0:	eb04 0903 	add.w	r9, r4, r3
 800b7f4:	f000 ff18 	bl	800c628 <_sbrk_r>
 800b7f8:	4581      	cmp	r9, r0
 800b7fa:	d142      	bne.n	800b882 <_malloc_r+0xea>
 800b7fc:	6821      	ldr	r1, [r4, #0]
 800b7fe:	1a6d      	subs	r5, r5, r1
 800b800:	4629      	mov	r1, r5
 800b802:	4630      	mov	r0, r6
 800b804:	f7ff ffa6 	bl	800b754 <sbrk_aligned>
 800b808:	3001      	adds	r0, #1
 800b80a:	d03a      	beq.n	800b882 <_malloc_r+0xea>
 800b80c:	6823      	ldr	r3, [r4, #0]
 800b80e:	442b      	add	r3, r5
 800b810:	6023      	str	r3, [r4, #0]
 800b812:	f8d8 3000 	ldr.w	r3, [r8]
 800b816:	685a      	ldr	r2, [r3, #4]
 800b818:	bb62      	cbnz	r2, 800b874 <_malloc_r+0xdc>
 800b81a:	f8c8 7000 	str.w	r7, [r8]
 800b81e:	e00f      	b.n	800b840 <_malloc_r+0xa8>
 800b820:	6822      	ldr	r2, [r4, #0]
 800b822:	1b52      	subs	r2, r2, r5
 800b824:	d420      	bmi.n	800b868 <_malloc_r+0xd0>
 800b826:	2a0b      	cmp	r2, #11
 800b828:	d917      	bls.n	800b85a <_malloc_r+0xc2>
 800b82a:	1961      	adds	r1, r4, r5
 800b82c:	42a3      	cmp	r3, r4
 800b82e:	6025      	str	r5, [r4, #0]
 800b830:	bf18      	it	ne
 800b832:	6059      	strne	r1, [r3, #4]
 800b834:	6863      	ldr	r3, [r4, #4]
 800b836:	bf08      	it	eq
 800b838:	f8c8 1000 	streq.w	r1, [r8]
 800b83c:	5162      	str	r2, [r4, r5]
 800b83e:	604b      	str	r3, [r1, #4]
 800b840:	4630      	mov	r0, r6
 800b842:	f000 f82f 	bl	800b8a4 <__malloc_unlock>
 800b846:	f104 000b 	add.w	r0, r4, #11
 800b84a:	1d23      	adds	r3, r4, #4
 800b84c:	f020 0007 	bic.w	r0, r0, #7
 800b850:	1ac2      	subs	r2, r0, r3
 800b852:	bf1c      	itt	ne
 800b854:	1a1b      	subne	r3, r3, r0
 800b856:	50a3      	strne	r3, [r4, r2]
 800b858:	e7af      	b.n	800b7ba <_malloc_r+0x22>
 800b85a:	6862      	ldr	r2, [r4, #4]
 800b85c:	42a3      	cmp	r3, r4
 800b85e:	bf0c      	ite	eq
 800b860:	f8c8 2000 	streq.w	r2, [r8]
 800b864:	605a      	strne	r2, [r3, #4]
 800b866:	e7eb      	b.n	800b840 <_malloc_r+0xa8>
 800b868:	4623      	mov	r3, r4
 800b86a:	6864      	ldr	r4, [r4, #4]
 800b86c:	e7ae      	b.n	800b7cc <_malloc_r+0x34>
 800b86e:	463c      	mov	r4, r7
 800b870:	687f      	ldr	r7, [r7, #4]
 800b872:	e7b6      	b.n	800b7e2 <_malloc_r+0x4a>
 800b874:	461a      	mov	r2, r3
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	42a3      	cmp	r3, r4
 800b87a:	d1fb      	bne.n	800b874 <_malloc_r+0xdc>
 800b87c:	2300      	movs	r3, #0
 800b87e:	6053      	str	r3, [r2, #4]
 800b880:	e7de      	b.n	800b840 <_malloc_r+0xa8>
 800b882:	230c      	movs	r3, #12
 800b884:	6033      	str	r3, [r6, #0]
 800b886:	4630      	mov	r0, r6
 800b888:	f000 f80c 	bl	800b8a4 <__malloc_unlock>
 800b88c:	e794      	b.n	800b7b8 <_malloc_r+0x20>
 800b88e:	6005      	str	r5, [r0, #0]
 800b890:	e7d6      	b.n	800b840 <_malloc_r+0xa8>
 800b892:	bf00      	nop
 800b894:	2000054c 	.word	0x2000054c

0800b898 <__malloc_lock>:
 800b898:	4801      	ldr	r0, [pc, #4]	@ (800b8a0 <__malloc_lock+0x8>)
 800b89a:	f7ff b8ac 	b.w	800a9f6 <__retarget_lock_acquire_recursive>
 800b89e:	bf00      	nop
 800b8a0:	20000544 	.word	0x20000544

0800b8a4 <__malloc_unlock>:
 800b8a4:	4801      	ldr	r0, [pc, #4]	@ (800b8ac <__malloc_unlock+0x8>)
 800b8a6:	f7ff b8a7 	b.w	800a9f8 <__retarget_lock_release_recursive>
 800b8aa:	bf00      	nop
 800b8ac:	20000544 	.word	0x20000544

0800b8b0 <_Balloc>:
 800b8b0:	b570      	push	{r4, r5, r6, lr}
 800b8b2:	69c6      	ldr	r6, [r0, #28]
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	460d      	mov	r5, r1
 800b8b8:	b976      	cbnz	r6, 800b8d8 <_Balloc+0x28>
 800b8ba:	2010      	movs	r0, #16
 800b8bc:	f7ff ff42 	bl	800b744 <malloc>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	61e0      	str	r0, [r4, #28]
 800b8c4:	b920      	cbnz	r0, 800b8d0 <_Balloc+0x20>
 800b8c6:	4b18      	ldr	r3, [pc, #96]	@ (800b928 <_Balloc+0x78>)
 800b8c8:	4818      	ldr	r0, [pc, #96]	@ (800b92c <_Balloc+0x7c>)
 800b8ca:	216b      	movs	r1, #107	@ 0x6b
 800b8cc:	f000 febc 	bl	800c648 <__assert_func>
 800b8d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8d4:	6006      	str	r6, [r0, #0]
 800b8d6:	60c6      	str	r6, [r0, #12]
 800b8d8:	69e6      	ldr	r6, [r4, #28]
 800b8da:	68f3      	ldr	r3, [r6, #12]
 800b8dc:	b183      	cbz	r3, 800b900 <_Balloc+0x50>
 800b8de:	69e3      	ldr	r3, [r4, #28]
 800b8e0:	68db      	ldr	r3, [r3, #12]
 800b8e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8e6:	b9b8      	cbnz	r0, 800b918 <_Balloc+0x68>
 800b8e8:	2101      	movs	r1, #1
 800b8ea:	fa01 f605 	lsl.w	r6, r1, r5
 800b8ee:	1d72      	adds	r2, r6, #5
 800b8f0:	0092      	lsls	r2, r2, #2
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	f000 fec6 	bl	800c684 <_calloc_r>
 800b8f8:	b160      	cbz	r0, 800b914 <_Balloc+0x64>
 800b8fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8fe:	e00e      	b.n	800b91e <_Balloc+0x6e>
 800b900:	2221      	movs	r2, #33	@ 0x21
 800b902:	2104      	movs	r1, #4
 800b904:	4620      	mov	r0, r4
 800b906:	f000 febd 	bl	800c684 <_calloc_r>
 800b90a:	69e3      	ldr	r3, [r4, #28]
 800b90c:	60f0      	str	r0, [r6, #12]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d1e4      	bne.n	800b8de <_Balloc+0x2e>
 800b914:	2000      	movs	r0, #0
 800b916:	bd70      	pop	{r4, r5, r6, pc}
 800b918:	6802      	ldr	r2, [r0, #0]
 800b91a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b91e:	2300      	movs	r3, #0
 800b920:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b924:	e7f7      	b.n	800b916 <_Balloc+0x66>
 800b926:	bf00      	nop
 800b928:	0800c929 	.word	0x0800c929
 800b92c:	0800c9a9 	.word	0x0800c9a9

0800b930 <_Bfree>:
 800b930:	b570      	push	{r4, r5, r6, lr}
 800b932:	69c6      	ldr	r6, [r0, #28]
 800b934:	4605      	mov	r5, r0
 800b936:	460c      	mov	r4, r1
 800b938:	b976      	cbnz	r6, 800b958 <_Bfree+0x28>
 800b93a:	2010      	movs	r0, #16
 800b93c:	f7ff ff02 	bl	800b744 <malloc>
 800b940:	4602      	mov	r2, r0
 800b942:	61e8      	str	r0, [r5, #28]
 800b944:	b920      	cbnz	r0, 800b950 <_Bfree+0x20>
 800b946:	4b09      	ldr	r3, [pc, #36]	@ (800b96c <_Bfree+0x3c>)
 800b948:	4809      	ldr	r0, [pc, #36]	@ (800b970 <_Bfree+0x40>)
 800b94a:	218f      	movs	r1, #143	@ 0x8f
 800b94c:	f000 fe7c 	bl	800c648 <__assert_func>
 800b950:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b954:	6006      	str	r6, [r0, #0]
 800b956:	60c6      	str	r6, [r0, #12]
 800b958:	b13c      	cbz	r4, 800b96a <_Bfree+0x3a>
 800b95a:	69eb      	ldr	r3, [r5, #28]
 800b95c:	6862      	ldr	r2, [r4, #4]
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b964:	6021      	str	r1, [r4, #0]
 800b966:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b96a:	bd70      	pop	{r4, r5, r6, pc}
 800b96c:	0800c929 	.word	0x0800c929
 800b970:	0800c9a9 	.word	0x0800c9a9

0800b974 <__multadd>:
 800b974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b978:	690d      	ldr	r5, [r1, #16]
 800b97a:	4607      	mov	r7, r0
 800b97c:	460c      	mov	r4, r1
 800b97e:	461e      	mov	r6, r3
 800b980:	f101 0c14 	add.w	ip, r1, #20
 800b984:	2000      	movs	r0, #0
 800b986:	f8dc 3000 	ldr.w	r3, [ip]
 800b98a:	b299      	uxth	r1, r3
 800b98c:	fb02 6101 	mla	r1, r2, r1, r6
 800b990:	0c1e      	lsrs	r6, r3, #16
 800b992:	0c0b      	lsrs	r3, r1, #16
 800b994:	fb02 3306 	mla	r3, r2, r6, r3
 800b998:	b289      	uxth	r1, r1
 800b99a:	3001      	adds	r0, #1
 800b99c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b9a0:	4285      	cmp	r5, r0
 800b9a2:	f84c 1b04 	str.w	r1, [ip], #4
 800b9a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b9aa:	dcec      	bgt.n	800b986 <__multadd+0x12>
 800b9ac:	b30e      	cbz	r6, 800b9f2 <__multadd+0x7e>
 800b9ae:	68a3      	ldr	r3, [r4, #8]
 800b9b0:	42ab      	cmp	r3, r5
 800b9b2:	dc19      	bgt.n	800b9e8 <__multadd+0x74>
 800b9b4:	6861      	ldr	r1, [r4, #4]
 800b9b6:	4638      	mov	r0, r7
 800b9b8:	3101      	adds	r1, #1
 800b9ba:	f7ff ff79 	bl	800b8b0 <_Balloc>
 800b9be:	4680      	mov	r8, r0
 800b9c0:	b928      	cbnz	r0, 800b9ce <__multadd+0x5a>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	4b0c      	ldr	r3, [pc, #48]	@ (800b9f8 <__multadd+0x84>)
 800b9c6:	480d      	ldr	r0, [pc, #52]	@ (800b9fc <__multadd+0x88>)
 800b9c8:	21ba      	movs	r1, #186	@ 0xba
 800b9ca:	f000 fe3d 	bl	800c648 <__assert_func>
 800b9ce:	6922      	ldr	r2, [r4, #16]
 800b9d0:	3202      	adds	r2, #2
 800b9d2:	f104 010c 	add.w	r1, r4, #12
 800b9d6:	0092      	lsls	r2, r2, #2
 800b9d8:	300c      	adds	r0, #12
 800b9da:	f7ff f80e 	bl	800a9fa <memcpy>
 800b9de:	4621      	mov	r1, r4
 800b9e0:	4638      	mov	r0, r7
 800b9e2:	f7ff ffa5 	bl	800b930 <_Bfree>
 800b9e6:	4644      	mov	r4, r8
 800b9e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9ec:	3501      	adds	r5, #1
 800b9ee:	615e      	str	r6, [r3, #20]
 800b9f0:	6125      	str	r5, [r4, #16]
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9f8:	0800c998 	.word	0x0800c998
 800b9fc:	0800c9a9 	.word	0x0800c9a9

0800ba00 <__hi0bits>:
 800ba00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ba04:	4603      	mov	r3, r0
 800ba06:	bf36      	itet	cc
 800ba08:	0403      	lslcc	r3, r0, #16
 800ba0a:	2000      	movcs	r0, #0
 800ba0c:	2010      	movcc	r0, #16
 800ba0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba12:	bf3c      	itt	cc
 800ba14:	021b      	lslcc	r3, r3, #8
 800ba16:	3008      	addcc	r0, #8
 800ba18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba1c:	bf3c      	itt	cc
 800ba1e:	011b      	lslcc	r3, r3, #4
 800ba20:	3004      	addcc	r0, #4
 800ba22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba26:	bf3c      	itt	cc
 800ba28:	009b      	lslcc	r3, r3, #2
 800ba2a:	3002      	addcc	r0, #2
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	db05      	blt.n	800ba3c <__hi0bits+0x3c>
 800ba30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ba34:	f100 0001 	add.w	r0, r0, #1
 800ba38:	bf08      	it	eq
 800ba3a:	2020      	moveq	r0, #32
 800ba3c:	4770      	bx	lr

0800ba3e <__lo0bits>:
 800ba3e:	6803      	ldr	r3, [r0, #0]
 800ba40:	4602      	mov	r2, r0
 800ba42:	f013 0007 	ands.w	r0, r3, #7
 800ba46:	d00b      	beq.n	800ba60 <__lo0bits+0x22>
 800ba48:	07d9      	lsls	r1, r3, #31
 800ba4a:	d421      	bmi.n	800ba90 <__lo0bits+0x52>
 800ba4c:	0798      	lsls	r0, r3, #30
 800ba4e:	bf49      	itett	mi
 800ba50:	085b      	lsrmi	r3, r3, #1
 800ba52:	089b      	lsrpl	r3, r3, #2
 800ba54:	2001      	movmi	r0, #1
 800ba56:	6013      	strmi	r3, [r2, #0]
 800ba58:	bf5c      	itt	pl
 800ba5a:	6013      	strpl	r3, [r2, #0]
 800ba5c:	2002      	movpl	r0, #2
 800ba5e:	4770      	bx	lr
 800ba60:	b299      	uxth	r1, r3
 800ba62:	b909      	cbnz	r1, 800ba68 <__lo0bits+0x2a>
 800ba64:	0c1b      	lsrs	r3, r3, #16
 800ba66:	2010      	movs	r0, #16
 800ba68:	b2d9      	uxtb	r1, r3
 800ba6a:	b909      	cbnz	r1, 800ba70 <__lo0bits+0x32>
 800ba6c:	3008      	adds	r0, #8
 800ba6e:	0a1b      	lsrs	r3, r3, #8
 800ba70:	0719      	lsls	r1, r3, #28
 800ba72:	bf04      	itt	eq
 800ba74:	091b      	lsreq	r3, r3, #4
 800ba76:	3004      	addeq	r0, #4
 800ba78:	0799      	lsls	r1, r3, #30
 800ba7a:	bf04      	itt	eq
 800ba7c:	089b      	lsreq	r3, r3, #2
 800ba7e:	3002      	addeq	r0, #2
 800ba80:	07d9      	lsls	r1, r3, #31
 800ba82:	d403      	bmi.n	800ba8c <__lo0bits+0x4e>
 800ba84:	085b      	lsrs	r3, r3, #1
 800ba86:	f100 0001 	add.w	r0, r0, #1
 800ba8a:	d003      	beq.n	800ba94 <__lo0bits+0x56>
 800ba8c:	6013      	str	r3, [r2, #0]
 800ba8e:	4770      	bx	lr
 800ba90:	2000      	movs	r0, #0
 800ba92:	4770      	bx	lr
 800ba94:	2020      	movs	r0, #32
 800ba96:	4770      	bx	lr

0800ba98 <__i2b>:
 800ba98:	b510      	push	{r4, lr}
 800ba9a:	460c      	mov	r4, r1
 800ba9c:	2101      	movs	r1, #1
 800ba9e:	f7ff ff07 	bl	800b8b0 <_Balloc>
 800baa2:	4602      	mov	r2, r0
 800baa4:	b928      	cbnz	r0, 800bab2 <__i2b+0x1a>
 800baa6:	4b05      	ldr	r3, [pc, #20]	@ (800babc <__i2b+0x24>)
 800baa8:	4805      	ldr	r0, [pc, #20]	@ (800bac0 <__i2b+0x28>)
 800baaa:	f240 1145 	movw	r1, #325	@ 0x145
 800baae:	f000 fdcb 	bl	800c648 <__assert_func>
 800bab2:	2301      	movs	r3, #1
 800bab4:	6144      	str	r4, [r0, #20]
 800bab6:	6103      	str	r3, [r0, #16]
 800bab8:	bd10      	pop	{r4, pc}
 800baba:	bf00      	nop
 800babc:	0800c998 	.word	0x0800c998
 800bac0:	0800c9a9 	.word	0x0800c9a9

0800bac4 <__multiply>:
 800bac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac8:	4614      	mov	r4, r2
 800baca:	690a      	ldr	r2, [r1, #16]
 800bacc:	6923      	ldr	r3, [r4, #16]
 800bace:	429a      	cmp	r2, r3
 800bad0:	bfa8      	it	ge
 800bad2:	4623      	movge	r3, r4
 800bad4:	460f      	mov	r7, r1
 800bad6:	bfa4      	itt	ge
 800bad8:	460c      	movge	r4, r1
 800bada:	461f      	movge	r7, r3
 800badc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bae0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bae4:	68a3      	ldr	r3, [r4, #8]
 800bae6:	6861      	ldr	r1, [r4, #4]
 800bae8:	eb0a 0609 	add.w	r6, sl, r9
 800baec:	42b3      	cmp	r3, r6
 800baee:	b085      	sub	sp, #20
 800baf0:	bfb8      	it	lt
 800baf2:	3101      	addlt	r1, #1
 800baf4:	f7ff fedc 	bl	800b8b0 <_Balloc>
 800baf8:	b930      	cbnz	r0, 800bb08 <__multiply+0x44>
 800bafa:	4602      	mov	r2, r0
 800bafc:	4b44      	ldr	r3, [pc, #272]	@ (800bc10 <__multiply+0x14c>)
 800bafe:	4845      	ldr	r0, [pc, #276]	@ (800bc14 <__multiply+0x150>)
 800bb00:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bb04:	f000 fda0 	bl	800c648 <__assert_func>
 800bb08:	f100 0514 	add.w	r5, r0, #20
 800bb0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bb10:	462b      	mov	r3, r5
 800bb12:	2200      	movs	r2, #0
 800bb14:	4543      	cmp	r3, r8
 800bb16:	d321      	bcc.n	800bb5c <__multiply+0x98>
 800bb18:	f107 0114 	add.w	r1, r7, #20
 800bb1c:	f104 0214 	add.w	r2, r4, #20
 800bb20:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bb24:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bb28:	9302      	str	r3, [sp, #8]
 800bb2a:	1b13      	subs	r3, r2, r4
 800bb2c:	3b15      	subs	r3, #21
 800bb2e:	f023 0303 	bic.w	r3, r3, #3
 800bb32:	3304      	adds	r3, #4
 800bb34:	f104 0715 	add.w	r7, r4, #21
 800bb38:	42ba      	cmp	r2, r7
 800bb3a:	bf38      	it	cc
 800bb3c:	2304      	movcc	r3, #4
 800bb3e:	9301      	str	r3, [sp, #4]
 800bb40:	9b02      	ldr	r3, [sp, #8]
 800bb42:	9103      	str	r1, [sp, #12]
 800bb44:	428b      	cmp	r3, r1
 800bb46:	d80c      	bhi.n	800bb62 <__multiply+0x9e>
 800bb48:	2e00      	cmp	r6, #0
 800bb4a:	dd03      	ble.n	800bb54 <__multiply+0x90>
 800bb4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d05b      	beq.n	800bc0c <__multiply+0x148>
 800bb54:	6106      	str	r6, [r0, #16]
 800bb56:	b005      	add	sp, #20
 800bb58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb5c:	f843 2b04 	str.w	r2, [r3], #4
 800bb60:	e7d8      	b.n	800bb14 <__multiply+0x50>
 800bb62:	f8b1 a000 	ldrh.w	sl, [r1]
 800bb66:	f1ba 0f00 	cmp.w	sl, #0
 800bb6a:	d024      	beq.n	800bbb6 <__multiply+0xf2>
 800bb6c:	f104 0e14 	add.w	lr, r4, #20
 800bb70:	46a9      	mov	r9, r5
 800bb72:	f04f 0c00 	mov.w	ip, #0
 800bb76:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bb7a:	f8d9 3000 	ldr.w	r3, [r9]
 800bb7e:	fa1f fb87 	uxth.w	fp, r7
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	fb0a 330b 	mla	r3, sl, fp, r3
 800bb88:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bb8c:	f8d9 7000 	ldr.w	r7, [r9]
 800bb90:	4463      	add	r3, ip
 800bb92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bb96:	fb0a c70b 	mla	r7, sl, fp, ip
 800bb9a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bba4:	4572      	cmp	r2, lr
 800bba6:	f849 3b04 	str.w	r3, [r9], #4
 800bbaa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bbae:	d8e2      	bhi.n	800bb76 <__multiply+0xb2>
 800bbb0:	9b01      	ldr	r3, [sp, #4]
 800bbb2:	f845 c003 	str.w	ip, [r5, r3]
 800bbb6:	9b03      	ldr	r3, [sp, #12]
 800bbb8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bbbc:	3104      	adds	r1, #4
 800bbbe:	f1b9 0f00 	cmp.w	r9, #0
 800bbc2:	d021      	beq.n	800bc08 <__multiply+0x144>
 800bbc4:	682b      	ldr	r3, [r5, #0]
 800bbc6:	f104 0c14 	add.w	ip, r4, #20
 800bbca:	46ae      	mov	lr, r5
 800bbcc:	f04f 0a00 	mov.w	sl, #0
 800bbd0:	f8bc b000 	ldrh.w	fp, [ip]
 800bbd4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bbd8:	fb09 770b 	mla	r7, r9, fp, r7
 800bbdc:	4457      	add	r7, sl
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bbe4:	f84e 3b04 	str.w	r3, [lr], #4
 800bbe8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bbec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbf0:	f8be 3000 	ldrh.w	r3, [lr]
 800bbf4:	fb09 330a 	mla	r3, r9, sl, r3
 800bbf8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bbfc:	4562      	cmp	r2, ip
 800bbfe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc02:	d8e5      	bhi.n	800bbd0 <__multiply+0x10c>
 800bc04:	9f01      	ldr	r7, [sp, #4]
 800bc06:	51eb      	str	r3, [r5, r7]
 800bc08:	3504      	adds	r5, #4
 800bc0a:	e799      	b.n	800bb40 <__multiply+0x7c>
 800bc0c:	3e01      	subs	r6, #1
 800bc0e:	e79b      	b.n	800bb48 <__multiply+0x84>
 800bc10:	0800c998 	.word	0x0800c998
 800bc14:	0800c9a9 	.word	0x0800c9a9

0800bc18 <__pow5mult>:
 800bc18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc1c:	4615      	mov	r5, r2
 800bc1e:	f012 0203 	ands.w	r2, r2, #3
 800bc22:	4607      	mov	r7, r0
 800bc24:	460e      	mov	r6, r1
 800bc26:	d007      	beq.n	800bc38 <__pow5mult+0x20>
 800bc28:	4c25      	ldr	r4, [pc, #148]	@ (800bcc0 <__pow5mult+0xa8>)
 800bc2a:	3a01      	subs	r2, #1
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc32:	f7ff fe9f 	bl	800b974 <__multadd>
 800bc36:	4606      	mov	r6, r0
 800bc38:	10ad      	asrs	r5, r5, #2
 800bc3a:	d03d      	beq.n	800bcb8 <__pow5mult+0xa0>
 800bc3c:	69fc      	ldr	r4, [r7, #28]
 800bc3e:	b97c      	cbnz	r4, 800bc60 <__pow5mult+0x48>
 800bc40:	2010      	movs	r0, #16
 800bc42:	f7ff fd7f 	bl	800b744 <malloc>
 800bc46:	4602      	mov	r2, r0
 800bc48:	61f8      	str	r0, [r7, #28]
 800bc4a:	b928      	cbnz	r0, 800bc58 <__pow5mult+0x40>
 800bc4c:	4b1d      	ldr	r3, [pc, #116]	@ (800bcc4 <__pow5mult+0xac>)
 800bc4e:	481e      	ldr	r0, [pc, #120]	@ (800bcc8 <__pow5mult+0xb0>)
 800bc50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bc54:	f000 fcf8 	bl	800c648 <__assert_func>
 800bc58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc5c:	6004      	str	r4, [r0, #0]
 800bc5e:	60c4      	str	r4, [r0, #12]
 800bc60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bc64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc68:	b94c      	cbnz	r4, 800bc7e <__pow5mult+0x66>
 800bc6a:	f240 2171 	movw	r1, #625	@ 0x271
 800bc6e:	4638      	mov	r0, r7
 800bc70:	f7ff ff12 	bl	800ba98 <__i2b>
 800bc74:	2300      	movs	r3, #0
 800bc76:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc7a:	4604      	mov	r4, r0
 800bc7c:	6003      	str	r3, [r0, #0]
 800bc7e:	f04f 0900 	mov.w	r9, #0
 800bc82:	07eb      	lsls	r3, r5, #31
 800bc84:	d50a      	bpl.n	800bc9c <__pow5mult+0x84>
 800bc86:	4631      	mov	r1, r6
 800bc88:	4622      	mov	r2, r4
 800bc8a:	4638      	mov	r0, r7
 800bc8c:	f7ff ff1a 	bl	800bac4 <__multiply>
 800bc90:	4631      	mov	r1, r6
 800bc92:	4680      	mov	r8, r0
 800bc94:	4638      	mov	r0, r7
 800bc96:	f7ff fe4b 	bl	800b930 <_Bfree>
 800bc9a:	4646      	mov	r6, r8
 800bc9c:	106d      	asrs	r5, r5, #1
 800bc9e:	d00b      	beq.n	800bcb8 <__pow5mult+0xa0>
 800bca0:	6820      	ldr	r0, [r4, #0]
 800bca2:	b938      	cbnz	r0, 800bcb4 <__pow5mult+0x9c>
 800bca4:	4622      	mov	r2, r4
 800bca6:	4621      	mov	r1, r4
 800bca8:	4638      	mov	r0, r7
 800bcaa:	f7ff ff0b 	bl	800bac4 <__multiply>
 800bcae:	6020      	str	r0, [r4, #0]
 800bcb0:	f8c0 9000 	str.w	r9, [r0]
 800bcb4:	4604      	mov	r4, r0
 800bcb6:	e7e4      	b.n	800bc82 <__pow5mult+0x6a>
 800bcb8:	4630      	mov	r0, r6
 800bcba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcbe:	bf00      	nop
 800bcc0:	0800ca04 	.word	0x0800ca04
 800bcc4:	0800c929 	.word	0x0800c929
 800bcc8:	0800c9a9 	.word	0x0800c9a9

0800bccc <__lshift>:
 800bccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcd0:	460c      	mov	r4, r1
 800bcd2:	6849      	ldr	r1, [r1, #4]
 800bcd4:	6923      	ldr	r3, [r4, #16]
 800bcd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bcda:	68a3      	ldr	r3, [r4, #8]
 800bcdc:	4607      	mov	r7, r0
 800bcde:	4691      	mov	r9, r2
 800bce0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bce4:	f108 0601 	add.w	r6, r8, #1
 800bce8:	42b3      	cmp	r3, r6
 800bcea:	db0b      	blt.n	800bd04 <__lshift+0x38>
 800bcec:	4638      	mov	r0, r7
 800bcee:	f7ff fddf 	bl	800b8b0 <_Balloc>
 800bcf2:	4605      	mov	r5, r0
 800bcf4:	b948      	cbnz	r0, 800bd0a <__lshift+0x3e>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	4b28      	ldr	r3, [pc, #160]	@ (800bd9c <__lshift+0xd0>)
 800bcfa:	4829      	ldr	r0, [pc, #164]	@ (800bda0 <__lshift+0xd4>)
 800bcfc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bd00:	f000 fca2 	bl	800c648 <__assert_func>
 800bd04:	3101      	adds	r1, #1
 800bd06:	005b      	lsls	r3, r3, #1
 800bd08:	e7ee      	b.n	800bce8 <__lshift+0x1c>
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	f100 0114 	add.w	r1, r0, #20
 800bd10:	f100 0210 	add.w	r2, r0, #16
 800bd14:	4618      	mov	r0, r3
 800bd16:	4553      	cmp	r3, sl
 800bd18:	db33      	blt.n	800bd82 <__lshift+0xb6>
 800bd1a:	6920      	ldr	r0, [r4, #16]
 800bd1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd20:	f104 0314 	add.w	r3, r4, #20
 800bd24:	f019 091f 	ands.w	r9, r9, #31
 800bd28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd30:	d02b      	beq.n	800bd8a <__lshift+0xbe>
 800bd32:	f1c9 0e20 	rsb	lr, r9, #32
 800bd36:	468a      	mov	sl, r1
 800bd38:	2200      	movs	r2, #0
 800bd3a:	6818      	ldr	r0, [r3, #0]
 800bd3c:	fa00 f009 	lsl.w	r0, r0, r9
 800bd40:	4310      	orrs	r0, r2
 800bd42:	f84a 0b04 	str.w	r0, [sl], #4
 800bd46:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd4a:	459c      	cmp	ip, r3
 800bd4c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd50:	d8f3      	bhi.n	800bd3a <__lshift+0x6e>
 800bd52:	ebac 0304 	sub.w	r3, ip, r4
 800bd56:	3b15      	subs	r3, #21
 800bd58:	f023 0303 	bic.w	r3, r3, #3
 800bd5c:	3304      	adds	r3, #4
 800bd5e:	f104 0015 	add.w	r0, r4, #21
 800bd62:	4584      	cmp	ip, r0
 800bd64:	bf38      	it	cc
 800bd66:	2304      	movcc	r3, #4
 800bd68:	50ca      	str	r2, [r1, r3]
 800bd6a:	b10a      	cbz	r2, 800bd70 <__lshift+0xa4>
 800bd6c:	f108 0602 	add.w	r6, r8, #2
 800bd70:	3e01      	subs	r6, #1
 800bd72:	4638      	mov	r0, r7
 800bd74:	612e      	str	r6, [r5, #16]
 800bd76:	4621      	mov	r1, r4
 800bd78:	f7ff fdda 	bl	800b930 <_Bfree>
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd82:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd86:	3301      	adds	r3, #1
 800bd88:	e7c5      	b.n	800bd16 <__lshift+0x4a>
 800bd8a:	3904      	subs	r1, #4
 800bd8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd90:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd94:	459c      	cmp	ip, r3
 800bd96:	d8f9      	bhi.n	800bd8c <__lshift+0xc0>
 800bd98:	e7ea      	b.n	800bd70 <__lshift+0xa4>
 800bd9a:	bf00      	nop
 800bd9c:	0800c998 	.word	0x0800c998
 800bda0:	0800c9a9 	.word	0x0800c9a9

0800bda4 <__mcmp>:
 800bda4:	690a      	ldr	r2, [r1, #16]
 800bda6:	4603      	mov	r3, r0
 800bda8:	6900      	ldr	r0, [r0, #16]
 800bdaa:	1a80      	subs	r0, r0, r2
 800bdac:	b530      	push	{r4, r5, lr}
 800bdae:	d10e      	bne.n	800bdce <__mcmp+0x2a>
 800bdb0:	3314      	adds	r3, #20
 800bdb2:	3114      	adds	r1, #20
 800bdb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bdb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bdbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bdc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bdc4:	4295      	cmp	r5, r2
 800bdc6:	d003      	beq.n	800bdd0 <__mcmp+0x2c>
 800bdc8:	d205      	bcs.n	800bdd6 <__mcmp+0x32>
 800bdca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bdce:	bd30      	pop	{r4, r5, pc}
 800bdd0:	42a3      	cmp	r3, r4
 800bdd2:	d3f3      	bcc.n	800bdbc <__mcmp+0x18>
 800bdd4:	e7fb      	b.n	800bdce <__mcmp+0x2a>
 800bdd6:	2001      	movs	r0, #1
 800bdd8:	e7f9      	b.n	800bdce <__mcmp+0x2a>
	...

0800bddc <__mdiff>:
 800bddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde0:	4689      	mov	r9, r1
 800bde2:	4606      	mov	r6, r0
 800bde4:	4611      	mov	r1, r2
 800bde6:	4648      	mov	r0, r9
 800bde8:	4614      	mov	r4, r2
 800bdea:	f7ff ffdb 	bl	800bda4 <__mcmp>
 800bdee:	1e05      	subs	r5, r0, #0
 800bdf0:	d112      	bne.n	800be18 <__mdiff+0x3c>
 800bdf2:	4629      	mov	r1, r5
 800bdf4:	4630      	mov	r0, r6
 800bdf6:	f7ff fd5b 	bl	800b8b0 <_Balloc>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	b928      	cbnz	r0, 800be0a <__mdiff+0x2e>
 800bdfe:	4b3f      	ldr	r3, [pc, #252]	@ (800befc <__mdiff+0x120>)
 800be00:	f240 2137 	movw	r1, #567	@ 0x237
 800be04:	483e      	ldr	r0, [pc, #248]	@ (800bf00 <__mdiff+0x124>)
 800be06:	f000 fc1f 	bl	800c648 <__assert_func>
 800be0a:	2301      	movs	r3, #1
 800be0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be10:	4610      	mov	r0, r2
 800be12:	b003      	add	sp, #12
 800be14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be18:	bfbc      	itt	lt
 800be1a:	464b      	movlt	r3, r9
 800be1c:	46a1      	movlt	r9, r4
 800be1e:	4630      	mov	r0, r6
 800be20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800be24:	bfba      	itte	lt
 800be26:	461c      	movlt	r4, r3
 800be28:	2501      	movlt	r5, #1
 800be2a:	2500      	movge	r5, #0
 800be2c:	f7ff fd40 	bl	800b8b0 <_Balloc>
 800be30:	4602      	mov	r2, r0
 800be32:	b918      	cbnz	r0, 800be3c <__mdiff+0x60>
 800be34:	4b31      	ldr	r3, [pc, #196]	@ (800befc <__mdiff+0x120>)
 800be36:	f240 2145 	movw	r1, #581	@ 0x245
 800be3a:	e7e3      	b.n	800be04 <__mdiff+0x28>
 800be3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800be40:	6926      	ldr	r6, [r4, #16]
 800be42:	60c5      	str	r5, [r0, #12]
 800be44:	f109 0310 	add.w	r3, r9, #16
 800be48:	f109 0514 	add.w	r5, r9, #20
 800be4c:	f104 0e14 	add.w	lr, r4, #20
 800be50:	f100 0b14 	add.w	fp, r0, #20
 800be54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800be58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800be5c:	9301      	str	r3, [sp, #4]
 800be5e:	46d9      	mov	r9, fp
 800be60:	f04f 0c00 	mov.w	ip, #0
 800be64:	9b01      	ldr	r3, [sp, #4]
 800be66:	f85e 0b04 	ldr.w	r0, [lr], #4
 800be6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800be6e:	9301      	str	r3, [sp, #4]
 800be70:	fa1f f38a 	uxth.w	r3, sl
 800be74:	4619      	mov	r1, r3
 800be76:	b283      	uxth	r3, r0
 800be78:	1acb      	subs	r3, r1, r3
 800be7a:	0c00      	lsrs	r0, r0, #16
 800be7c:	4463      	add	r3, ip
 800be7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800be82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800be86:	b29b      	uxth	r3, r3
 800be88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800be8c:	4576      	cmp	r6, lr
 800be8e:	f849 3b04 	str.w	r3, [r9], #4
 800be92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be96:	d8e5      	bhi.n	800be64 <__mdiff+0x88>
 800be98:	1b33      	subs	r3, r6, r4
 800be9a:	3b15      	subs	r3, #21
 800be9c:	f023 0303 	bic.w	r3, r3, #3
 800bea0:	3415      	adds	r4, #21
 800bea2:	3304      	adds	r3, #4
 800bea4:	42a6      	cmp	r6, r4
 800bea6:	bf38      	it	cc
 800bea8:	2304      	movcc	r3, #4
 800beaa:	441d      	add	r5, r3
 800beac:	445b      	add	r3, fp
 800beae:	461e      	mov	r6, r3
 800beb0:	462c      	mov	r4, r5
 800beb2:	4544      	cmp	r4, r8
 800beb4:	d30e      	bcc.n	800bed4 <__mdiff+0xf8>
 800beb6:	f108 0103 	add.w	r1, r8, #3
 800beba:	1b49      	subs	r1, r1, r5
 800bebc:	f021 0103 	bic.w	r1, r1, #3
 800bec0:	3d03      	subs	r5, #3
 800bec2:	45a8      	cmp	r8, r5
 800bec4:	bf38      	it	cc
 800bec6:	2100      	movcc	r1, #0
 800bec8:	440b      	add	r3, r1
 800beca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bece:	b191      	cbz	r1, 800bef6 <__mdiff+0x11a>
 800bed0:	6117      	str	r7, [r2, #16]
 800bed2:	e79d      	b.n	800be10 <__mdiff+0x34>
 800bed4:	f854 1b04 	ldr.w	r1, [r4], #4
 800bed8:	46e6      	mov	lr, ip
 800beda:	0c08      	lsrs	r0, r1, #16
 800bedc:	fa1c fc81 	uxtah	ip, ip, r1
 800bee0:	4471      	add	r1, lr
 800bee2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bee6:	b289      	uxth	r1, r1
 800bee8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800beec:	f846 1b04 	str.w	r1, [r6], #4
 800bef0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bef4:	e7dd      	b.n	800beb2 <__mdiff+0xd6>
 800bef6:	3f01      	subs	r7, #1
 800bef8:	e7e7      	b.n	800beca <__mdiff+0xee>
 800befa:	bf00      	nop
 800befc:	0800c998 	.word	0x0800c998
 800bf00:	0800c9a9 	.word	0x0800c9a9

0800bf04 <__d2b>:
 800bf04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf08:	460f      	mov	r7, r1
 800bf0a:	2101      	movs	r1, #1
 800bf0c:	ec59 8b10 	vmov	r8, r9, d0
 800bf10:	4616      	mov	r6, r2
 800bf12:	f7ff fccd 	bl	800b8b0 <_Balloc>
 800bf16:	4604      	mov	r4, r0
 800bf18:	b930      	cbnz	r0, 800bf28 <__d2b+0x24>
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	4b23      	ldr	r3, [pc, #140]	@ (800bfac <__d2b+0xa8>)
 800bf1e:	4824      	ldr	r0, [pc, #144]	@ (800bfb0 <__d2b+0xac>)
 800bf20:	f240 310f 	movw	r1, #783	@ 0x30f
 800bf24:	f000 fb90 	bl	800c648 <__assert_func>
 800bf28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf30:	b10d      	cbz	r5, 800bf36 <__d2b+0x32>
 800bf32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf36:	9301      	str	r3, [sp, #4]
 800bf38:	f1b8 0300 	subs.w	r3, r8, #0
 800bf3c:	d023      	beq.n	800bf86 <__d2b+0x82>
 800bf3e:	4668      	mov	r0, sp
 800bf40:	9300      	str	r3, [sp, #0]
 800bf42:	f7ff fd7c 	bl	800ba3e <__lo0bits>
 800bf46:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf4a:	b1d0      	cbz	r0, 800bf82 <__d2b+0x7e>
 800bf4c:	f1c0 0320 	rsb	r3, r0, #32
 800bf50:	fa02 f303 	lsl.w	r3, r2, r3
 800bf54:	430b      	orrs	r3, r1
 800bf56:	40c2      	lsrs	r2, r0
 800bf58:	6163      	str	r3, [r4, #20]
 800bf5a:	9201      	str	r2, [sp, #4]
 800bf5c:	9b01      	ldr	r3, [sp, #4]
 800bf5e:	61a3      	str	r3, [r4, #24]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	bf0c      	ite	eq
 800bf64:	2201      	moveq	r2, #1
 800bf66:	2202      	movne	r2, #2
 800bf68:	6122      	str	r2, [r4, #16]
 800bf6a:	b1a5      	cbz	r5, 800bf96 <__d2b+0x92>
 800bf6c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bf70:	4405      	add	r5, r0
 800bf72:	603d      	str	r5, [r7, #0]
 800bf74:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bf78:	6030      	str	r0, [r6, #0]
 800bf7a:	4620      	mov	r0, r4
 800bf7c:	b003      	add	sp, #12
 800bf7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf82:	6161      	str	r1, [r4, #20]
 800bf84:	e7ea      	b.n	800bf5c <__d2b+0x58>
 800bf86:	a801      	add	r0, sp, #4
 800bf88:	f7ff fd59 	bl	800ba3e <__lo0bits>
 800bf8c:	9b01      	ldr	r3, [sp, #4]
 800bf8e:	6163      	str	r3, [r4, #20]
 800bf90:	3020      	adds	r0, #32
 800bf92:	2201      	movs	r2, #1
 800bf94:	e7e8      	b.n	800bf68 <__d2b+0x64>
 800bf96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf9a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bf9e:	6038      	str	r0, [r7, #0]
 800bfa0:	6918      	ldr	r0, [r3, #16]
 800bfa2:	f7ff fd2d 	bl	800ba00 <__hi0bits>
 800bfa6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bfaa:	e7e5      	b.n	800bf78 <__d2b+0x74>
 800bfac:	0800c998 	.word	0x0800c998
 800bfb0:	0800c9a9 	.word	0x0800c9a9

0800bfb4 <__sfputc_r>:
 800bfb4:	6893      	ldr	r3, [r2, #8]
 800bfb6:	3b01      	subs	r3, #1
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	b410      	push	{r4}
 800bfbc:	6093      	str	r3, [r2, #8]
 800bfbe:	da08      	bge.n	800bfd2 <__sfputc_r+0x1e>
 800bfc0:	6994      	ldr	r4, [r2, #24]
 800bfc2:	42a3      	cmp	r3, r4
 800bfc4:	db01      	blt.n	800bfca <__sfputc_r+0x16>
 800bfc6:	290a      	cmp	r1, #10
 800bfc8:	d103      	bne.n	800bfd2 <__sfputc_r+0x1e>
 800bfca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfce:	f000 ba75 	b.w	800c4bc <__swbuf_r>
 800bfd2:	6813      	ldr	r3, [r2, #0]
 800bfd4:	1c58      	adds	r0, r3, #1
 800bfd6:	6010      	str	r0, [r2, #0]
 800bfd8:	7019      	strb	r1, [r3, #0]
 800bfda:	4608      	mov	r0, r1
 800bfdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfe0:	4770      	bx	lr

0800bfe2 <__sfputs_r>:
 800bfe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfe4:	4606      	mov	r6, r0
 800bfe6:	460f      	mov	r7, r1
 800bfe8:	4614      	mov	r4, r2
 800bfea:	18d5      	adds	r5, r2, r3
 800bfec:	42ac      	cmp	r4, r5
 800bfee:	d101      	bne.n	800bff4 <__sfputs_r+0x12>
 800bff0:	2000      	movs	r0, #0
 800bff2:	e007      	b.n	800c004 <__sfputs_r+0x22>
 800bff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bff8:	463a      	mov	r2, r7
 800bffa:	4630      	mov	r0, r6
 800bffc:	f7ff ffda 	bl	800bfb4 <__sfputc_r>
 800c000:	1c43      	adds	r3, r0, #1
 800c002:	d1f3      	bne.n	800bfec <__sfputs_r+0xa>
 800c004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c008 <_vfiprintf_r>:
 800c008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c00c:	460d      	mov	r5, r1
 800c00e:	b09d      	sub	sp, #116	@ 0x74
 800c010:	4614      	mov	r4, r2
 800c012:	4698      	mov	r8, r3
 800c014:	4606      	mov	r6, r0
 800c016:	b118      	cbz	r0, 800c020 <_vfiprintf_r+0x18>
 800c018:	6a03      	ldr	r3, [r0, #32]
 800c01a:	b90b      	cbnz	r3, 800c020 <_vfiprintf_r+0x18>
 800c01c:	f7fe fb0c 	bl	800a638 <__sinit>
 800c020:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c022:	07d9      	lsls	r1, r3, #31
 800c024:	d405      	bmi.n	800c032 <_vfiprintf_r+0x2a>
 800c026:	89ab      	ldrh	r3, [r5, #12]
 800c028:	059a      	lsls	r2, r3, #22
 800c02a:	d402      	bmi.n	800c032 <_vfiprintf_r+0x2a>
 800c02c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c02e:	f7fe fce2 	bl	800a9f6 <__retarget_lock_acquire_recursive>
 800c032:	89ab      	ldrh	r3, [r5, #12]
 800c034:	071b      	lsls	r3, r3, #28
 800c036:	d501      	bpl.n	800c03c <_vfiprintf_r+0x34>
 800c038:	692b      	ldr	r3, [r5, #16]
 800c03a:	b99b      	cbnz	r3, 800c064 <_vfiprintf_r+0x5c>
 800c03c:	4629      	mov	r1, r5
 800c03e:	4630      	mov	r0, r6
 800c040:	f000 fa7a 	bl	800c538 <__swsetup_r>
 800c044:	b170      	cbz	r0, 800c064 <_vfiprintf_r+0x5c>
 800c046:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c048:	07dc      	lsls	r4, r3, #31
 800c04a:	d504      	bpl.n	800c056 <_vfiprintf_r+0x4e>
 800c04c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c050:	b01d      	add	sp, #116	@ 0x74
 800c052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c056:	89ab      	ldrh	r3, [r5, #12]
 800c058:	0598      	lsls	r0, r3, #22
 800c05a:	d4f7      	bmi.n	800c04c <_vfiprintf_r+0x44>
 800c05c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c05e:	f7fe fccb 	bl	800a9f8 <__retarget_lock_release_recursive>
 800c062:	e7f3      	b.n	800c04c <_vfiprintf_r+0x44>
 800c064:	2300      	movs	r3, #0
 800c066:	9309      	str	r3, [sp, #36]	@ 0x24
 800c068:	2320      	movs	r3, #32
 800c06a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c06e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c072:	2330      	movs	r3, #48	@ 0x30
 800c074:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c224 <_vfiprintf_r+0x21c>
 800c078:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c07c:	f04f 0901 	mov.w	r9, #1
 800c080:	4623      	mov	r3, r4
 800c082:	469a      	mov	sl, r3
 800c084:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c088:	b10a      	cbz	r2, 800c08e <_vfiprintf_r+0x86>
 800c08a:	2a25      	cmp	r2, #37	@ 0x25
 800c08c:	d1f9      	bne.n	800c082 <_vfiprintf_r+0x7a>
 800c08e:	ebba 0b04 	subs.w	fp, sl, r4
 800c092:	d00b      	beq.n	800c0ac <_vfiprintf_r+0xa4>
 800c094:	465b      	mov	r3, fp
 800c096:	4622      	mov	r2, r4
 800c098:	4629      	mov	r1, r5
 800c09a:	4630      	mov	r0, r6
 800c09c:	f7ff ffa1 	bl	800bfe2 <__sfputs_r>
 800c0a0:	3001      	adds	r0, #1
 800c0a2:	f000 80a7 	beq.w	800c1f4 <_vfiprintf_r+0x1ec>
 800c0a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0a8:	445a      	add	r2, fp
 800c0aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0ac:	f89a 3000 	ldrb.w	r3, [sl]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	f000 809f 	beq.w	800c1f4 <_vfiprintf_r+0x1ec>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c0bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0c0:	f10a 0a01 	add.w	sl, sl, #1
 800c0c4:	9304      	str	r3, [sp, #16]
 800c0c6:	9307      	str	r3, [sp, #28]
 800c0c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c0cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800c0ce:	4654      	mov	r4, sl
 800c0d0:	2205      	movs	r2, #5
 800c0d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0d6:	4853      	ldr	r0, [pc, #332]	@ (800c224 <_vfiprintf_r+0x21c>)
 800c0d8:	f7f4 f87a 	bl	80001d0 <memchr>
 800c0dc:	9a04      	ldr	r2, [sp, #16]
 800c0de:	b9d8      	cbnz	r0, 800c118 <_vfiprintf_r+0x110>
 800c0e0:	06d1      	lsls	r1, r2, #27
 800c0e2:	bf44      	itt	mi
 800c0e4:	2320      	movmi	r3, #32
 800c0e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0ea:	0713      	lsls	r3, r2, #28
 800c0ec:	bf44      	itt	mi
 800c0ee:	232b      	movmi	r3, #43	@ 0x2b
 800c0f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0f4:	f89a 3000 	ldrb.w	r3, [sl]
 800c0f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0fa:	d015      	beq.n	800c128 <_vfiprintf_r+0x120>
 800c0fc:	9a07      	ldr	r2, [sp, #28]
 800c0fe:	4654      	mov	r4, sl
 800c100:	2000      	movs	r0, #0
 800c102:	f04f 0c0a 	mov.w	ip, #10
 800c106:	4621      	mov	r1, r4
 800c108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c10c:	3b30      	subs	r3, #48	@ 0x30
 800c10e:	2b09      	cmp	r3, #9
 800c110:	d94b      	bls.n	800c1aa <_vfiprintf_r+0x1a2>
 800c112:	b1b0      	cbz	r0, 800c142 <_vfiprintf_r+0x13a>
 800c114:	9207      	str	r2, [sp, #28]
 800c116:	e014      	b.n	800c142 <_vfiprintf_r+0x13a>
 800c118:	eba0 0308 	sub.w	r3, r0, r8
 800c11c:	fa09 f303 	lsl.w	r3, r9, r3
 800c120:	4313      	orrs	r3, r2
 800c122:	9304      	str	r3, [sp, #16]
 800c124:	46a2      	mov	sl, r4
 800c126:	e7d2      	b.n	800c0ce <_vfiprintf_r+0xc6>
 800c128:	9b03      	ldr	r3, [sp, #12]
 800c12a:	1d19      	adds	r1, r3, #4
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	9103      	str	r1, [sp, #12]
 800c130:	2b00      	cmp	r3, #0
 800c132:	bfbb      	ittet	lt
 800c134:	425b      	neglt	r3, r3
 800c136:	f042 0202 	orrlt.w	r2, r2, #2
 800c13a:	9307      	strge	r3, [sp, #28]
 800c13c:	9307      	strlt	r3, [sp, #28]
 800c13e:	bfb8      	it	lt
 800c140:	9204      	strlt	r2, [sp, #16]
 800c142:	7823      	ldrb	r3, [r4, #0]
 800c144:	2b2e      	cmp	r3, #46	@ 0x2e
 800c146:	d10a      	bne.n	800c15e <_vfiprintf_r+0x156>
 800c148:	7863      	ldrb	r3, [r4, #1]
 800c14a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c14c:	d132      	bne.n	800c1b4 <_vfiprintf_r+0x1ac>
 800c14e:	9b03      	ldr	r3, [sp, #12]
 800c150:	1d1a      	adds	r2, r3, #4
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	9203      	str	r2, [sp, #12]
 800c156:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c15a:	3402      	adds	r4, #2
 800c15c:	9305      	str	r3, [sp, #20]
 800c15e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c234 <_vfiprintf_r+0x22c>
 800c162:	7821      	ldrb	r1, [r4, #0]
 800c164:	2203      	movs	r2, #3
 800c166:	4650      	mov	r0, sl
 800c168:	f7f4 f832 	bl	80001d0 <memchr>
 800c16c:	b138      	cbz	r0, 800c17e <_vfiprintf_r+0x176>
 800c16e:	9b04      	ldr	r3, [sp, #16]
 800c170:	eba0 000a 	sub.w	r0, r0, sl
 800c174:	2240      	movs	r2, #64	@ 0x40
 800c176:	4082      	lsls	r2, r0
 800c178:	4313      	orrs	r3, r2
 800c17a:	3401      	adds	r4, #1
 800c17c:	9304      	str	r3, [sp, #16]
 800c17e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c182:	4829      	ldr	r0, [pc, #164]	@ (800c228 <_vfiprintf_r+0x220>)
 800c184:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c188:	2206      	movs	r2, #6
 800c18a:	f7f4 f821 	bl	80001d0 <memchr>
 800c18e:	2800      	cmp	r0, #0
 800c190:	d03f      	beq.n	800c212 <_vfiprintf_r+0x20a>
 800c192:	4b26      	ldr	r3, [pc, #152]	@ (800c22c <_vfiprintf_r+0x224>)
 800c194:	bb1b      	cbnz	r3, 800c1de <_vfiprintf_r+0x1d6>
 800c196:	9b03      	ldr	r3, [sp, #12]
 800c198:	3307      	adds	r3, #7
 800c19a:	f023 0307 	bic.w	r3, r3, #7
 800c19e:	3308      	adds	r3, #8
 800c1a0:	9303      	str	r3, [sp, #12]
 800c1a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1a4:	443b      	add	r3, r7
 800c1a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1a8:	e76a      	b.n	800c080 <_vfiprintf_r+0x78>
 800c1aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1ae:	460c      	mov	r4, r1
 800c1b0:	2001      	movs	r0, #1
 800c1b2:	e7a8      	b.n	800c106 <_vfiprintf_r+0xfe>
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	3401      	adds	r4, #1
 800c1b8:	9305      	str	r3, [sp, #20]
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	f04f 0c0a 	mov.w	ip, #10
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1c6:	3a30      	subs	r2, #48	@ 0x30
 800c1c8:	2a09      	cmp	r2, #9
 800c1ca:	d903      	bls.n	800c1d4 <_vfiprintf_r+0x1cc>
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d0c6      	beq.n	800c15e <_vfiprintf_r+0x156>
 800c1d0:	9105      	str	r1, [sp, #20]
 800c1d2:	e7c4      	b.n	800c15e <_vfiprintf_r+0x156>
 800c1d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1d8:	4604      	mov	r4, r0
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e7f0      	b.n	800c1c0 <_vfiprintf_r+0x1b8>
 800c1de:	ab03      	add	r3, sp, #12
 800c1e0:	9300      	str	r3, [sp, #0]
 800c1e2:	462a      	mov	r2, r5
 800c1e4:	4b12      	ldr	r3, [pc, #72]	@ (800c230 <_vfiprintf_r+0x228>)
 800c1e6:	a904      	add	r1, sp, #16
 800c1e8:	4630      	mov	r0, r6
 800c1ea:	f7fd fde1 	bl	8009db0 <_printf_float>
 800c1ee:	4607      	mov	r7, r0
 800c1f0:	1c78      	adds	r0, r7, #1
 800c1f2:	d1d6      	bne.n	800c1a2 <_vfiprintf_r+0x19a>
 800c1f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1f6:	07d9      	lsls	r1, r3, #31
 800c1f8:	d405      	bmi.n	800c206 <_vfiprintf_r+0x1fe>
 800c1fa:	89ab      	ldrh	r3, [r5, #12]
 800c1fc:	059a      	lsls	r2, r3, #22
 800c1fe:	d402      	bmi.n	800c206 <_vfiprintf_r+0x1fe>
 800c200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c202:	f7fe fbf9 	bl	800a9f8 <__retarget_lock_release_recursive>
 800c206:	89ab      	ldrh	r3, [r5, #12]
 800c208:	065b      	lsls	r3, r3, #25
 800c20a:	f53f af1f 	bmi.w	800c04c <_vfiprintf_r+0x44>
 800c20e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c210:	e71e      	b.n	800c050 <_vfiprintf_r+0x48>
 800c212:	ab03      	add	r3, sp, #12
 800c214:	9300      	str	r3, [sp, #0]
 800c216:	462a      	mov	r2, r5
 800c218:	4b05      	ldr	r3, [pc, #20]	@ (800c230 <_vfiprintf_r+0x228>)
 800c21a:	a904      	add	r1, sp, #16
 800c21c:	4630      	mov	r0, r6
 800c21e:	f7fe f85f 	bl	800a2e0 <_printf_i>
 800c222:	e7e4      	b.n	800c1ee <_vfiprintf_r+0x1e6>
 800c224:	0800cb00 	.word	0x0800cb00
 800c228:	0800cb0a 	.word	0x0800cb0a
 800c22c:	08009db1 	.word	0x08009db1
 800c230:	0800bfe3 	.word	0x0800bfe3
 800c234:	0800cb06 	.word	0x0800cb06

0800c238 <__sflush_r>:
 800c238:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c240:	0716      	lsls	r6, r2, #28
 800c242:	4605      	mov	r5, r0
 800c244:	460c      	mov	r4, r1
 800c246:	d454      	bmi.n	800c2f2 <__sflush_r+0xba>
 800c248:	684b      	ldr	r3, [r1, #4]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	dc02      	bgt.n	800c254 <__sflush_r+0x1c>
 800c24e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c250:	2b00      	cmp	r3, #0
 800c252:	dd48      	ble.n	800c2e6 <__sflush_r+0xae>
 800c254:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c256:	2e00      	cmp	r6, #0
 800c258:	d045      	beq.n	800c2e6 <__sflush_r+0xae>
 800c25a:	2300      	movs	r3, #0
 800c25c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c260:	682f      	ldr	r7, [r5, #0]
 800c262:	6a21      	ldr	r1, [r4, #32]
 800c264:	602b      	str	r3, [r5, #0]
 800c266:	d030      	beq.n	800c2ca <__sflush_r+0x92>
 800c268:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c26a:	89a3      	ldrh	r3, [r4, #12]
 800c26c:	0759      	lsls	r1, r3, #29
 800c26e:	d505      	bpl.n	800c27c <__sflush_r+0x44>
 800c270:	6863      	ldr	r3, [r4, #4]
 800c272:	1ad2      	subs	r2, r2, r3
 800c274:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c276:	b10b      	cbz	r3, 800c27c <__sflush_r+0x44>
 800c278:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c27a:	1ad2      	subs	r2, r2, r3
 800c27c:	2300      	movs	r3, #0
 800c27e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c280:	6a21      	ldr	r1, [r4, #32]
 800c282:	4628      	mov	r0, r5
 800c284:	47b0      	blx	r6
 800c286:	1c43      	adds	r3, r0, #1
 800c288:	89a3      	ldrh	r3, [r4, #12]
 800c28a:	d106      	bne.n	800c29a <__sflush_r+0x62>
 800c28c:	6829      	ldr	r1, [r5, #0]
 800c28e:	291d      	cmp	r1, #29
 800c290:	d82b      	bhi.n	800c2ea <__sflush_r+0xb2>
 800c292:	4a2a      	ldr	r2, [pc, #168]	@ (800c33c <__sflush_r+0x104>)
 800c294:	410a      	asrs	r2, r1
 800c296:	07d6      	lsls	r6, r2, #31
 800c298:	d427      	bmi.n	800c2ea <__sflush_r+0xb2>
 800c29a:	2200      	movs	r2, #0
 800c29c:	6062      	str	r2, [r4, #4]
 800c29e:	04d9      	lsls	r1, r3, #19
 800c2a0:	6922      	ldr	r2, [r4, #16]
 800c2a2:	6022      	str	r2, [r4, #0]
 800c2a4:	d504      	bpl.n	800c2b0 <__sflush_r+0x78>
 800c2a6:	1c42      	adds	r2, r0, #1
 800c2a8:	d101      	bne.n	800c2ae <__sflush_r+0x76>
 800c2aa:	682b      	ldr	r3, [r5, #0]
 800c2ac:	b903      	cbnz	r3, 800c2b0 <__sflush_r+0x78>
 800c2ae:	6560      	str	r0, [r4, #84]	@ 0x54
 800c2b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c2b2:	602f      	str	r7, [r5, #0]
 800c2b4:	b1b9      	cbz	r1, 800c2e6 <__sflush_r+0xae>
 800c2b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2ba:	4299      	cmp	r1, r3
 800c2bc:	d002      	beq.n	800c2c4 <__sflush_r+0x8c>
 800c2be:	4628      	mov	r0, r5
 800c2c0:	f7ff f9f6 	bl	800b6b0 <_free_r>
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2c8:	e00d      	b.n	800c2e6 <__sflush_r+0xae>
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	4628      	mov	r0, r5
 800c2ce:	47b0      	blx	r6
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	1c50      	adds	r0, r2, #1
 800c2d4:	d1c9      	bne.n	800c26a <__sflush_r+0x32>
 800c2d6:	682b      	ldr	r3, [r5, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d0c6      	beq.n	800c26a <__sflush_r+0x32>
 800c2dc:	2b1d      	cmp	r3, #29
 800c2de:	d001      	beq.n	800c2e4 <__sflush_r+0xac>
 800c2e0:	2b16      	cmp	r3, #22
 800c2e2:	d11e      	bne.n	800c322 <__sflush_r+0xea>
 800c2e4:	602f      	str	r7, [r5, #0]
 800c2e6:	2000      	movs	r0, #0
 800c2e8:	e022      	b.n	800c330 <__sflush_r+0xf8>
 800c2ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2ee:	b21b      	sxth	r3, r3
 800c2f0:	e01b      	b.n	800c32a <__sflush_r+0xf2>
 800c2f2:	690f      	ldr	r7, [r1, #16]
 800c2f4:	2f00      	cmp	r7, #0
 800c2f6:	d0f6      	beq.n	800c2e6 <__sflush_r+0xae>
 800c2f8:	0793      	lsls	r3, r2, #30
 800c2fa:	680e      	ldr	r6, [r1, #0]
 800c2fc:	bf08      	it	eq
 800c2fe:	694b      	ldreq	r3, [r1, #20]
 800c300:	600f      	str	r7, [r1, #0]
 800c302:	bf18      	it	ne
 800c304:	2300      	movne	r3, #0
 800c306:	eba6 0807 	sub.w	r8, r6, r7
 800c30a:	608b      	str	r3, [r1, #8]
 800c30c:	f1b8 0f00 	cmp.w	r8, #0
 800c310:	dde9      	ble.n	800c2e6 <__sflush_r+0xae>
 800c312:	6a21      	ldr	r1, [r4, #32]
 800c314:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c316:	4643      	mov	r3, r8
 800c318:	463a      	mov	r2, r7
 800c31a:	4628      	mov	r0, r5
 800c31c:	47b0      	blx	r6
 800c31e:	2800      	cmp	r0, #0
 800c320:	dc08      	bgt.n	800c334 <__sflush_r+0xfc>
 800c322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c32a:	81a3      	strh	r3, [r4, #12]
 800c32c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c334:	4407      	add	r7, r0
 800c336:	eba8 0800 	sub.w	r8, r8, r0
 800c33a:	e7e7      	b.n	800c30c <__sflush_r+0xd4>
 800c33c:	dfbffffe 	.word	0xdfbffffe

0800c340 <_fflush_r>:
 800c340:	b538      	push	{r3, r4, r5, lr}
 800c342:	690b      	ldr	r3, [r1, #16]
 800c344:	4605      	mov	r5, r0
 800c346:	460c      	mov	r4, r1
 800c348:	b913      	cbnz	r3, 800c350 <_fflush_r+0x10>
 800c34a:	2500      	movs	r5, #0
 800c34c:	4628      	mov	r0, r5
 800c34e:	bd38      	pop	{r3, r4, r5, pc}
 800c350:	b118      	cbz	r0, 800c35a <_fflush_r+0x1a>
 800c352:	6a03      	ldr	r3, [r0, #32]
 800c354:	b90b      	cbnz	r3, 800c35a <_fflush_r+0x1a>
 800c356:	f7fe f96f 	bl	800a638 <__sinit>
 800c35a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d0f3      	beq.n	800c34a <_fflush_r+0xa>
 800c362:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c364:	07d0      	lsls	r0, r2, #31
 800c366:	d404      	bmi.n	800c372 <_fflush_r+0x32>
 800c368:	0599      	lsls	r1, r3, #22
 800c36a:	d402      	bmi.n	800c372 <_fflush_r+0x32>
 800c36c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c36e:	f7fe fb42 	bl	800a9f6 <__retarget_lock_acquire_recursive>
 800c372:	4628      	mov	r0, r5
 800c374:	4621      	mov	r1, r4
 800c376:	f7ff ff5f 	bl	800c238 <__sflush_r>
 800c37a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c37c:	07da      	lsls	r2, r3, #31
 800c37e:	4605      	mov	r5, r0
 800c380:	d4e4      	bmi.n	800c34c <_fflush_r+0xc>
 800c382:	89a3      	ldrh	r3, [r4, #12]
 800c384:	059b      	lsls	r3, r3, #22
 800c386:	d4e1      	bmi.n	800c34c <_fflush_r+0xc>
 800c388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c38a:	f7fe fb35 	bl	800a9f8 <__retarget_lock_release_recursive>
 800c38e:	e7dd      	b.n	800c34c <_fflush_r+0xc>

0800c390 <__swhatbuf_r>:
 800c390:	b570      	push	{r4, r5, r6, lr}
 800c392:	460c      	mov	r4, r1
 800c394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c398:	2900      	cmp	r1, #0
 800c39a:	b096      	sub	sp, #88	@ 0x58
 800c39c:	4615      	mov	r5, r2
 800c39e:	461e      	mov	r6, r3
 800c3a0:	da0d      	bge.n	800c3be <__swhatbuf_r+0x2e>
 800c3a2:	89a3      	ldrh	r3, [r4, #12]
 800c3a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c3a8:	f04f 0100 	mov.w	r1, #0
 800c3ac:	bf14      	ite	ne
 800c3ae:	2340      	movne	r3, #64	@ 0x40
 800c3b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c3b4:	2000      	movs	r0, #0
 800c3b6:	6031      	str	r1, [r6, #0]
 800c3b8:	602b      	str	r3, [r5, #0]
 800c3ba:	b016      	add	sp, #88	@ 0x58
 800c3bc:	bd70      	pop	{r4, r5, r6, pc}
 800c3be:	466a      	mov	r2, sp
 800c3c0:	f000 f910 	bl	800c5e4 <_fstat_r>
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	dbec      	blt.n	800c3a2 <__swhatbuf_r+0x12>
 800c3c8:	9901      	ldr	r1, [sp, #4]
 800c3ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c3ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c3d2:	4259      	negs	r1, r3
 800c3d4:	4159      	adcs	r1, r3
 800c3d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c3da:	e7eb      	b.n	800c3b4 <__swhatbuf_r+0x24>

0800c3dc <__smakebuf_r>:
 800c3dc:	898b      	ldrh	r3, [r1, #12]
 800c3de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3e0:	079d      	lsls	r5, r3, #30
 800c3e2:	4606      	mov	r6, r0
 800c3e4:	460c      	mov	r4, r1
 800c3e6:	d507      	bpl.n	800c3f8 <__smakebuf_r+0x1c>
 800c3e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c3ec:	6023      	str	r3, [r4, #0]
 800c3ee:	6123      	str	r3, [r4, #16]
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	6163      	str	r3, [r4, #20]
 800c3f4:	b003      	add	sp, #12
 800c3f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3f8:	ab01      	add	r3, sp, #4
 800c3fa:	466a      	mov	r2, sp
 800c3fc:	f7ff ffc8 	bl	800c390 <__swhatbuf_r>
 800c400:	9f00      	ldr	r7, [sp, #0]
 800c402:	4605      	mov	r5, r0
 800c404:	4639      	mov	r1, r7
 800c406:	4630      	mov	r0, r6
 800c408:	f7ff f9c6 	bl	800b798 <_malloc_r>
 800c40c:	b948      	cbnz	r0, 800c422 <__smakebuf_r+0x46>
 800c40e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c412:	059a      	lsls	r2, r3, #22
 800c414:	d4ee      	bmi.n	800c3f4 <__smakebuf_r+0x18>
 800c416:	f023 0303 	bic.w	r3, r3, #3
 800c41a:	f043 0302 	orr.w	r3, r3, #2
 800c41e:	81a3      	strh	r3, [r4, #12]
 800c420:	e7e2      	b.n	800c3e8 <__smakebuf_r+0xc>
 800c422:	89a3      	ldrh	r3, [r4, #12]
 800c424:	6020      	str	r0, [r4, #0]
 800c426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c42a:	81a3      	strh	r3, [r4, #12]
 800c42c:	9b01      	ldr	r3, [sp, #4]
 800c42e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c432:	b15b      	cbz	r3, 800c44c <__smakebuf_r+0x70>
 800c434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c438:	4630      	mov	r0, r6
 800c43a:	f000 f8e5 	bl	800c608 <_isatty_r>
 800c43e:	b128      	cbz	r0, 800c44c <__smakebuf_r+0x70>
 800c440:	89a3      	ldrh	r3, [r4, #12]
 800c442:	f023 0303 	bic.w	r3, r3, #3
 800c446:	f043 0301 	orr.w	r3, r3, #1
 800c44a:	81a3      	strh	r3, [r4, #12]
 800c44c:	89a3      	ldrh	r3, [r4, #12]
 800c44e:	431d      	orrs	r5, r3
 800c450:	81a5      	strh	r5, [r4, #12]
 800c452:	e7cf      	b.n	800c3f4 <__smakebuf_r+0x18>

0800c454 <_putc_r>:
 800c454:	b570      	push	{r4, r5, r6, lr}
 800c456:	460d      	mov	r5, r1
 800c458:	4614      	mov	r4, r2
 800c45a:	4606      	mov	r6, r0
 800c45c:	b118      	cbz	r0, 800c466 <_putc_r+0x12>
 800c45e:	6a03      	ldr	r3, [r0, #32]
 800c460:	b90b      	cbnz	r3, 800c466 <_putc_r+0x12>
 800c462:	f7fe f8e9 	bl	800a638 <__sinit>
 800c466:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c468:	07d8      	lsls	r0, r3, #31
 800c46a:	d405      	bmi.n	800c478 <_putc_r+0x24>
 800c46c:	89a3      	ldrh	r3, [r4, #12]
 800c46e:	0599      	lsls	r1, r3, #22
 800c470:	d402      	bmi.n	800c478 <_putc_r+0x24>
 800c472:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c474:	f7fe fabf 	bl	800a9f6 <__retarget_lock_acquire_recursive>
 800c478:	68a3      	ldr	r3, [r4, #8]
 800c47a:	3b01      	subs	r3, #1
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	60a3      	str	r3, [r4, #8]
 800c480:	da05      	bge.n	800c48e <_putc_r+0x3a>
 800c482:	69a2      	ldr	r2, [r4, #24]
 800c484:	4293      	cmp	r3, r2
 800c486:	db12      	blt.n	800c4ae <_putc_r+0x5a>
 800c488:	b2eb      	uxtb	r3, r5
 800c48a:	2b0a      	cmp	r3, #10
 800c48c:	d00f      	beq.n	800c4ae <_putc_r+0x5a>
 800c48e:	6823      	ldr	r3, [r4, #0]
 800c490:	1c5a      	adds	r2, r3, #1
 800c492:	6022      	str	r2, [r4, #0]
 800c494:	701d      	strb	r5, [r3, #0]
 800c496:	b2ed      	uxtb	r5, r5
 800c498:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c49a:	07da      	lsls	r2, r3, #31
 800c49c:	d405      	bmi.n	800c4aa <_putc_r+0x56>
 800c49e:	89a3      	ldrh	r3, [r4, #12]
 800c4a0:	059b      	lsls	r3, r3, #22
 800c4a2:	d402      	bmi.n	800c4aa <_putc_r+0x56>
 800c4a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4a6:	f7fe faa7 	bl	800a9f8 <__retarget_lock_release_recursive>
 800c4aa:	4628      	mov	r0, r5
 800c4ac:	bd70      	pop	{r4, r5, r6, pc}
 800c4ae:	4629      	mov	r1, r5
 800c4b0:	4622      	mov	r2, r4
 800c4b2:	4630      	mov	r0, r6
 800c4b4:	f000 f802 	bl	800c4bc <__swbuf_r>
 800c4b8:	4605      	mov	r5, r0
 800c4ba:	e7ed      	b.n	800c498 <_putc_r+0x44>

0800c4bc <__swbuf_r>:
 800c4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4be:	460e      	mov	r6, r1
 800c4c0:	4614      	mov	r4, r2
 800c4c2:	4605      	mov	r5, r0
 800c4c4:	b118      	cbz	r0, 800c4ce <__swbuf_r+0x12>
 800c4c6:	6a03      	ldr	r3, [r0, #32]
 800c4c8:	b90b      	cbnz	r3, 800c4ce <__swbuf_r+0x12>
 800c4ca:	f7fe f8b5 	bl	800a638 <__sinit>
 800c4ce:	69a3      	ldr	r3, [r4, #24]
 800c4d0:	60a3      	str	r3, [r4, #8]
 800c4d2:	89a3      	ldrh	r3, [r4, #12]
 800c4d4:	071a      	lsls	r2, r3, #28
 800c4d6:	d501      	bpl.n	800c4dc <__swbuf_r+0x20>
 800c4d8:	6923      	ldr	r3, [r4, #16]
 800c4da:	b943      	cbnz	r3, 800c4ee <__swbuf_r+0x32>
 800c4dc:	4621      	mov	r1, r4
 800c4de:	4628      	mov	r0, r5
 800c4e0:	f000 f82a 	bl	800c538 <__swsetup_r>
 800c4e4:	b118      	cbz	r0, 800c4ee <__swbuf_r+0x32>
 800c4e6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c4ea:	4638      	mov	r0, r7
 800c4ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4ee:	6823      	ldr	r3, [r4, #0]
 800c4f0:	6922      	ldr	r2, [r4, #16]
 800c4f2:	1a98      	subs	r0, r3, r2
 800c4f4:	6963      	ldr	r3, [r4, #20]
 800c4f6:	b2f6      	uxtb	r6, r6
 800c4f8:	4283      	cmp	r3, r0
 800c4fa:	4637      	mov	r7, r6
 800c4fc:	dc05      	bgt.n	800c50a <__swbuf_r+0x4e>
 800c4fe:	4621      	mov	r1, r4
 800c500:	4628      	mov	r0, r5
 800c502:	f7ff ff1d 	bl	800c340 <_fflush_r>
 800c506:	2800      	cmp	r0, #0
 800c508:	d1ed      	bne.n	800c4e6 <__swbuf_r+0x2a>
 800c50a:	68a3      	ldr	r3, [r4, #8]
 800c50c:	3b01      	subs	r3, #1
 800c50e:	60a3      	str	r3, [r4, #8]
 800c510:	6823      	ldr	r3, [r4, #0]
 800c512:	1c5a      	adds	r2, r3, #1
 800c514:	6022      	str	r2, [r4, #0]
 800c516:	701e      	strb	r6, [r3, #0]
 800c518:	6962      	ldr	r2, [r4, #20]
 800c51a:	1c43      	adds	r3, r0, #1
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d004      	beq.n	800c52a <__swbuf_r+0x6e>
 800c520:	89a3      	ldrh	r3, [r4, #12]
 800c522:	07db      	lsls	r3, r3, #31
 800c524:	d5e1      	bpl.n	800c4ea <__swbuf_r+0x2e>
 800c526:	2e0a      	cmp	r6, #10
 800c528:	d1df      	bne.n	800c4ea <__swbuf_r+0x2e>
 800c52a:	4621      	mov	r1, r4
 800c52c:	4628      	mov	r0, r5
 800c52e:	f7ff ff07 	bl	800c340 <_fflush_r>
 800c532:	2800      	cmp	r0, #0
 800c534:	d0d9      	beq.n	800c4ea <__swbuf_r+0x2e>
 800c536:	e7d6      	b.n	800c4e6 <__swbuf_r+0x2a>

0800c538 <__swsetup_r>:
 800c538:	b538      	push	{r3, r4, r5, lr}
 800c53a:	4b29      	ldr	r3, [pc, #164]	@ (800c5e0 <__swsetup_r+0xa8>)
 800c53c:	4605      	mov	r5, r0
 800c53e:	6818      	ldr	r0, [r3, #0]
 800c540:	460c      	mov	r4, r1
 800c542:	b118      	cbz	r0, 800c54c <__swsetup_r+0x14>
 800c544:	6a03      	ldr	r3, [r0, #32]
 800c546:	b90b      	cbnz	r3, 800c54c <__swsetup_r+0x14>
 800c548:	f7fe f876 	bl	800a638 <__sinit>
 800c54c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c550:	0719      	lsls	r1, r3, #28
 800c552:	d422      	bmi.n	800c59a <__swsetup_r+0x62>
 800c554:	06da      	lsls	r2, r3, #27
 800c556:	d407      	bmi.n	800c568 <__swsetup_r+0x30>
 800c558:	2209      	movs	r2, #9
 800c55a:	602a      	str	r2, [r5, #0]
 800c55c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c560:	81a3      	strh	r3, [r4, #12]
 800c562:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c566:	e033      	b.n	800c5d0 <__swsetup_r+0x98>
 800c568:	0758      	lsls	r0, r3, #29
 800c56a:	d512      	bpl.n	800c592 <__swsetup_r+0x5a>
 800c56c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c56e:	b141      	cbz	r1, 800c582 <__swsetup_r+0x4a>
 800c570:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c574:	4299      	cmp	r1, r3
 800c576:	d002      	beq.n	800c57e <__swsetup_r+0x46>
 800c578:	4628      	mov	r0, r5
 800c57a:	f7ff f899 	bl	800b6b0 <_free_r>
 800c57e:	2300      	movs	r3, #0
 800c580:	6363      	str	r3, [r4, #52]	@ 0x34
 800c582:	89a3      	ldrh	r3, [r4, #12]
 800c584:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c588:	81a3      	strh	r3, [r4, #12]
 800c58a:	2300      	movs	r3, #0
 800c58c:	6063      	str	r3, [r4, #4]
 800c58e:	6923      	ldr	r3, [r4, #16]
 800c590:	6023      	str	r3, [r4, #0]
 800c592:	89a3      	ldrh	r3, [r4, #12]
 800c594:	f043 0308 	orr.w	r3, r3, #8
 800c598:	81a3      	strh	r3, [r4, #12]
 800c59a:	6923      	ldr	r3, [r4, #16]
 800c59c:	b94b      	cbnz	r3, 800c5b2 <__swsetup_r+0x7a>
 800c59e:	89a3      	ldrh	r3, [r4, #12]
 800c5a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c5a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c5a8:	d003      	beq.n	800c5b2 <__swsetup_r+0x7a>
 800c5aa:	4621      	mov	r1, r4
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	f7ff ff15 	bl	800c3dc <__smakebuf_r>
 800c5b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5b6:	f013 0201 	ands.w	r2, r3, #1
 800c5ba:	d00a      	beq.n	800c5d2 <__swsetup_r+0x9a>
 800c5bc:	2200      	movs	r2, #0
 800c5be:	60a2      	str	r2, [r4, #8]
 800c5c0:	6962      	ldr	r2, [r4, #20]
 800c5c2:	4252      	negs	r2, r2
 800c5c4:	61a2      	str	r2, [r4, #24]
 800c5c6:	6922      	ldr	r2, [r4, #16]
 800c5c8:	b942      	cbnz	r2, 800c5dc <__swsetup_r+0xa4>
 800c5ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c5ce:	d1c5      	bne.n	800c55c <__swsetup_r+0x24>
 800c5d0:	bd38      	pop	{r3, r4, r5, pc}
 800c5d2:	0799      	lsls	r1, r3, #30
 800c5d4:	bf58      	it	pl
 800c5d6:	6962      	ldrpl	r2, [r4, #20]
 800c5d8:	60a2      	str	r2, [r4, #8]
 800c5da:	e7f4      	b.n	800c5c6 <__swsetup_r+0x8e>
 800c5dc:	2000      	movs	r0, #0
 800c5de:	e7f7      	b.n	800c5d0 <__swsetup_r+0x98>
 800c5e0:	20000048 	.word	0x20000048

0800c5e4 <_fstat_r>:
 800c5e4:	b538      	push	{r3, r4, r5, lr}
 800c5e6:	4d07      	ldr	r5, [pc, #28]	@ (800c604 <_fstat_r+0x20>)
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	4604      	mov	r4, r0
 800c5ec:	4608      	mov	r0, r1
 800c5ee:	4611      	mov	r1, r2
 800c5f0:	602b      	str	r3, [r5, #0]
 800c5f2:	f7f4 fe74 	bl	80012de <_fstat>
 800c5f6:	1c43      	adds	r3, r0, #1
 800c5f8:	d102      	bne.n	800c600 <_fstat_r+0x1c>
 800c5fa:	682b      	ldr	r3, [r5, #0]
 800c5fc:	b103      	cbz	r3, 800c600 <_fstat_r+0x1c>
 800c5fe:	6023      	str	r3, [r4, #0]
 800c600:	bd38      	pop	{r3, r4, r5, pc}
 800c602:	bf00      	nop
 800c604:	20000540 	.word	0x20000540

0800c608 <_isatty_r>:
 800c608:	b538      	push	{r3, r4, r5, lr}
 800c60a:	4d06      	ldr	r5, [pc, #24]	@ (800c624 <_isatty_r+0x1c>)
 800c60c:	2300      	movs	r3, #0
 800c60e:	4604      	mov	r4, r0
 800c610:	4608      	mov	r0, r1
 800c612:	602b      	str	r3, [r5, #0]
 800c614:	f7f4 fe73 	bl	80012fe <_isatty>
 800c618:	1c43      	adds	r3, r0, #1
 800c61a:	d102      	bne.n	800c622 <_isatty_r+0x1a>
 800c61c:	682b      	ldr	r3, [r5, #0]
 800c61e:	b103      	cbz	r3, 800c622 <_isatty_r+0x1a>
 800c620:	6023      	str	r3, [r4, #0]
 800c622:	bd38      	pop	{r3, r4, r5, pc}
 800c624:	20000540 	.word	0x20000540

0800c628 <_sbrk_r>:
 800c628:	b538      	push	{r3, r4, r5, lr}
 800c62a:	4d06      	ldr	r5, [pc, #24]	@ (800c644 <_sbrk_r+0x1c>)
 800c62c:	2300      	movs	r3, #0
 800c62e:	4604      	mov	r4, r0
 800c630:	4608      	mov	r0, r1
 800c632:	602b      	str	r3, [r5, #0]
 800c634:	f7f4 fe7c 	bl	8001330 <_sbrk>
 800c638:	1c43      	adds	r3, r0, #1
 800c63a:	d102      	bne.n	800c642 <_sbrk_r+0x1a>
 800c63c:	682b      	ldr	r3, [r5, #0]
 800c63e:	b103      	cbz	r3, 800c642 <_sbrk_r+0x1a>
 800c640:	6023      	str	r3, [r4, #0]
 800c642:	bd38      	pop	{r3, r4, r5, pc}
 800c644:	20000540 	.word	0x20000540

0800c648 <__assert_func>:
 800c648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c64a:	4614      	mov	r4, r2
 800c64c:	461a      	mov	r2, r3
 800c64e:	4b09      	ldr	r3, [pc, #36]	@ (800c674 <__assert_func+0x2c>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	4605      	mov	r5, r0
 800c654:	68d8      	ldr	r0, [r3, #12]
 800c656:	b954      	cbnz	r4, 800c66e <__assert_func+0x26>
 800c658:	4b07      	ldr	r3, [pc, #28]	@ (800c678 <__assert_func+0x30>)
 800c65a:	461c      	mov	r4, r3
 800c65c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c660:	9100      	str	r1, [sp, #0]
 800c662:	462b      	mov	r3, r5
 800c664:	4905      	ldr	r1, [pc, #20]	@ (800c67c <__assert_func+0x34>)
 800c666:	f000 f841 	bl	800c6ec <fiprintf>
 800c66a:	f000 f851 	bl	800c710 <abort>
 800c66e:	4b04      	ldr	r3, [pc, #16]	@ (800c680 <__assert_func+0x38>)
 800c670:	e7f4      	b.n	800c65c <__assert_func+0x14>
 800c672:	bf00      	nop
 800c674:	20000048 	.word	0x20000048
 800c678:	0800cb56 	.word	0x0800cb56
 800c67c:	0800cb28 	.word	0x0800cb28
 800c680:	0800cb1b 	.word	0x0800cb1b

0800c684 <_calloc_r>:
 800c684:	b570      	push	{r4, r5, r6, lr}
 800c686:	fba1 5402 	umull	r5, r4, r1, r2
 800c68a:	b93c      	cbnz	r4, 800c69c <_calloc_r+0x18>
 800c68c:	4629      	mov	r1, r5
 800c68e:	f7ff f883 	bl	800b798 <_malloc_r>
 800c692:	4606      	mov	r6, r0
 800c694:	b928      	cbnz	r0, 800c6a2 <_calloc_r+0x1e>
 800c696:	2600      	movs	r6, #0
 800c698:	4630      	mov	r0, r6
 800c69a:	bd70      	pop	{r4, r5, r6, pc}
 800c69c:	220c      	movs	r2, #12
 800c69e:	6002      	str	r2, [r0, #0]
 800c6a0:	e7f9      	b.n	800c696 <_calloc_r+0x12>
 800c6a2:	462a      	mov	r2, r5
 800c6a4:	4621      	mov	r1, r4
 800c6a6:	f7fe f916 	bl	800a8d6 <memset>
 800c6aa:	e7f5      	b.n	800c698 <_calloc_r+0x14>

0800c6ac <__ascii_mbtowc>:
 800c6ac:	b082      	sub	sp, #8
 800c6ae:	b901      	cbnz	r1, 800c6b2 <__ascii_mbtowc+0x6>
 800c6b0:	a901      	add	r1, sp, #4
 800c6b2:	b142      	cbz	r2, 800c6c6 <__ascii_mbtowc+0x1a>
 800c6b4:	b14b      	cbz	r3, 800c6ca <__ascii_mbtowc+0x1e>
 800c6b6:	7813      	ldrb	r3, [r2, #0]
 800c6b8:	600b      	str	r3, [r1, #0]
 800c6ba:	7812      	ldrb	r2, [r2, #0]
 800c6bc:	1e10      	subs	r0, r2, #0
 800c6be:	bf18      	it	ne
 800c6c0:	2001      	movne	r0, #1
 800c6c2:	b002      	add	sp, #8
 800c6c4:	4770      	bx	lr
 800c6c6:	4610      	mov	r0, r2
 800c6c8:	e7fb      	b.n	800c6c2 <__ascii_mbtowc+0x16>
 800c6ca:	f06f 0001 	mvn.w	r0, #1
 800c6ce:	e7f8      	b.n	800c6c2 <__ascii_mbtowc+0x16>

0800c6d0 <__ascii_wctomb>:
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	4608      	mov	r0, r1
 800c6d4:	b141      	cbz	r1, 800c6e8 <__ascii_wctomb+0x18>
 800c6d6:	2aff      	cmp	r2, #255	@ 0xff
 800c6d8:	d904      	bls.n	800c6e4 <__ascii_wctomb+0x14>
 800c6da:	228a      	movs	r2, #138	@ 0x8a
 800c6dc:	601a      	str	r2, [r3, #0]
 800c6de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c6e2:	4770      	bx	lr
 800c6e4:	700a      	strb	r2, [r1, #0]
 800c6e6:	2001      	movs	r0, #1
 800c6e8:	4770      	bx	lr
	...

0800c6ec <fiprintf>:
 800c6ec:	b40e      	push	{r1, r2, r3}
 800c6ee:	b503      	push	{r0, r1, lr}
 800c6f0:	4601      	mov	r1, r0
 800c6f2:	ab03      	add	r3, sp, #12
 800c6f4:	4805      	ldr	r0, [pc, #20]	@ (800c70c <fiprintf+0x20>)
 800c6f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6fa:	6800      	ldr	r0, [r0, #0]
 800c6fc:	9301      	str	r3, [sp, #4]
 800c6fe:	f7ff fc83 	bl	800c008 <_vfiprintf_r>
 800c702:	b002      	add	sp, #8
 800c704:	f85d eb04 	ldr.w	lr, [sp], #4
 800c708:	b003      	add	sp, #12
 800c70a:	4770      	bx	lr
 800c70c:	20000048 	.word	0x20000048

0800c710 <abort>:
 800c710:	b508      	push	{r3, lr}
 800c712:	2006      	movs	r0, #6
 800c714:	f000 f82c 	bl	800c770 <raise>
 800c718:	2001      	movs	r0, #1
 800c71a:	f7f4 fdac 	bl	8001276 <_exit>

0800c71e <_raise_r>:
 800c71e:	291f      	cmp	r1, #31
 800c720:	b538      	push	{r3, r4, r5, lr}
 800c722:	4605      	mov	r5, r0
 800c724:	460c      	mov	r4, r1
 800c726:	d904      	bls.n	800c732 <_raise_r+0x14>
 800c728:	2316      	movs	r3, #22
 800c72a:	6003      	str	r3, [r0, #0]
 800c72c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c730:	bd38      	pop	{r3, r4, r5, pc}
 800c732:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c734:	b112      	cbz	r2, 800c73c <_raise_r+0x1e>
 800c736:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c73a:	b94b      	cbnz	r3, 800c750 <_raise_r+0x32>
 800c73c:	4628      	mov	r0, r5
 800c73e:	f000 f831 	bl	800c7a4 <_getpid_r>
 800c742:	4622      	mov	r2, r4
 800c744:	4601      	mov	r1, r0
 800c746:	4628      	mov	r0, r5
 800c748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c74c:	f000 b818 	b.w	800c780 <_kill_r>
 800c750:	2b01      	cmp	r3, #1
 800c752:	d00a      	beq.n	800c76a <_raise_r+0x4c>
 800c754:	1c59      	adds	r1, r3, #1
 800c756:	d103      	bne.n	800c760 <_raise_r+0x42>
 800c758:	2316      	movs	r3, #22
 800c75a:	6003      	str	r3, [r0, #0]
 800c75c:	2001      	movs	r0, #1
 800c75e:	e7e7      	b.n	800c730 <_raise_r+0x12>
 800c760:	2100      	movs	r1, #0
 800c762:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c766:	4620      	mov	r0, r4
 800c768:	4798      	blx	r3
 800c76a:	2000      	movs	r0, #0
 800c76c:	e7e0      	b.n	800c730 <_raise_r+0x12>
	...

0800c770 <raise>:
 800c770:	4b02      	ldr	r3, [pc, #8]	@ (800c77c <raise+0xc>)
 800c772:	4601      	mov	r1, r0
 800c774:	6818      	ldr	r0, [r3, #0]
 800c776:	f7ff bfd2 	b.w	800c71e <_raise_r>
 800c77a:	bf00      	nop
 800c77c:	20000048 	.word	0x20000048

0800c780 <_kill_r>:
 800c780:	b538      	push	{r3, r4, r5, lr}
 800c782:	4d07      	ldr	r5, [pc, #28]	@ (800c7a0 <_kill_r+0x20>)
 800c784:	2300      	movs	r3, #0
 800c786:	4604      	mov	r4, r0
 800c788:	4608      	mov	r0, r1
 800c78a:	4611      	mov	r1, r2
 800c78c:	602b      	str	r3, [r5, #0]
 800c78e:	f7f4 fd62 	bl	8001256 <_kill>
 800c792:	1c43      	adds	r3, r0, #1
 800c794:	d102      	bne.n	800c79c <_kill_r+0x1c>
 800c796:	682b      	ldr	r3, [r5, #0]
 800c798:	b103      	cbz	r3, 800c79c <_kill_r+0x1c>
 800c79a:	6023      	str	r3, [r4, #0]
 800c79c:	bd38      	pop	{r3, r4, r5, pc}
 800c79e:	bf00      	nop
 800c7a0:	20000540 	.word	0x20000540

0800c7a4 <_getpid_r>:
 800c7a4:	f7f4 bd4f 	b.w	8001246 <_getpid>

0800c7a8 <_init>:
 800c7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7aa:	bf00      	nop
 800c7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ae:	bc08      	pop	{r3}
 800c7b0:	469e      	mov	lr, r3
 800c7b2:	4770      	bx	lr

0800c7b4 <_fini>:
 800c7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7b6:	bf00      	nop
 800c7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ba:	bc08      	pop	{r3}
 800c7bc:	469e      	mov	lr, r3
 800c7be:	4770      	bx	lr
