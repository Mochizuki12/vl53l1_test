
vl53l1_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c24  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006dac  08006dac  00007dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006de4  08006de4  0000800c  2**0
                  CONTENTS
  4 .ARM          00000000  08006de4  08006de4  0000800c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006de4  08006de4  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006de4  08006de4  00007de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006de8  08006de8  00007de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006dec  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000800c  2**0
                  CONTENTS
 10 .bss          000001fc  2000000c  2000000c  0000800c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000208  20000208  0000800c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e815  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028c0  00000000  00000000  00026851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001168  00000000  00000000  00029118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d7d  00000000  00000000  0002a280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f2e4  00000000  00000000  0002affd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015a27  00000000  00000000  0004a2e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc49d  00000000  00000000  0005fd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011c1a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a04  00000000  00000000  0011c1e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00120bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006d94 	.word	0x08006d94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006d94 	.word	0x08006d94

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f003 fe10 	bl	8003df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80c 	bl	80001ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8ca 	bl	800036c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f898 	bl	800030c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80001dc:	f000 f858 	bl	8000290 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  VL53L1_DataInit();
 80001e0:	f000 f9e8 	bl	80005b4 <VL53L1_DataInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	VL53L1_StartMeasurement();
 80001e4:	f000 fbc2 	bl	800096c <VL53L1_StartMeasurement>
  {
 80001e8:	bf00      	nop
 80001ea:	e7fb      	b.n	80001e4 <main+0x1c>

080001ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b096      	sub	sp, #88	@ 0x58
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80001f6:	2228      	movs	r2, #40	@ 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f006 fd8f 	bl	8006d1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	f107 031c 	add.w	r3, r7, #28
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
 8000208:	605a      	str	r2, [r3, #4]
 800020a:	609a      	str	r2, [r3, #8]
 800020c:	60da      	str	r2, [r3, #12]
 800020e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
 800021c:	611a      	str	r2, [r3, #16]
 800021e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000220:	2302      	movs	r3, #2
 8000222:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000224:	2301      	movs	r3, #1
 8000226:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000228:	2310      	movs	r3, #16
 800022a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800022c:	2300      	movs	r3, #0
 800022e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000230:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000234:	4618      	mov	r0, r3
 8000236:	f004 fe3d 	bl	8004eb4 <HAL_RCC_OscConfig>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000240:	f000 f8c4 	bl	80003cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000244:	230f      	movs	r3, #15
 8000246:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000248:	2300      	movs	r3, #0
 800024a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000258:	f107 031c 	add.w	r3, r7, #28
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f005 fe66 	bl	8005f30 <HAL_RCC_ClockConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800026a:	f000 f8af 	bl	80003cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800026e:	2320      	movs	r3, #32
 8000270:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000272:	2300      	movs	r3, #0
 8000274:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4618      	mov	r0, r3
 800027a:	f006 f891 	bl	80063a0 <HAL_RCCEx_PeriphCLKConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000284:	f000 f8a2 	bl	80003cc <Error_Handler>
  }
}
 8000288:	bf00      	nop
 800028a:	3758      	adds	r7, #88	@ 0x58
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}

08000290 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000294:	4b1b      	ldr	r3, [pc, #108]	@ (8000304 <MX_I2C1_Init+0x74>)
 8000296:	4a1c      	ldr	r2, [pc, #112]	@ (8000308 <MX_I2C1_Init+0x78>)
 8000298:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800029a:	4b1a      	ldr	r3, [pc, #104]	@ (8000304 <MX_I2C1_Init+0x74>)
 800029c:	f240 220b 	movw	r2, #523	@ 0x20b
 80002a0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002a2:	4b18      	ldr	r3, [pc, #96]	@ (8000304 <MX_I2C1_Init+0x74>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002a8:	4b16      	ldr	r3, [pc, #88]	@ (8000304 <MX_I2C1_Init+0x74>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002ae:	4b15      	ldr	r3, [pc, #84]	@ (8000304 <MX_I2C1_Init+0x74>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002b4:	4b13      	ldr	r3, [pc, #76]	@ (8000304 <MX_I2C1_Init+0x74>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002ba:	4b12      	ldr	r3, [pc, #72]	@ (8000304 <MX_I2C1_Init+0x74>)
 80002bc:	2200      	movs	r2, #0
 80002be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002c0:	4b10      	ldr	r3, [pc, #64]	@ (8000304 <MX_I2C1_Init+0x74>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000304 <MX_I2C1_Init+0x74>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002cc:	480d      	ldr	r0, [pc, #52]	@ (8000304 <MX_I2C1_Init+0x74>)
 80002ce:	f004 f84d 	bl	800436c <HAL_I2C_Init>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002d8:	f000 f878 	bl	80003cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002dc:	2100      	movs	r1, #0
 80002de:	4809      	ldr	r0, [pc, #36]	@ (8000304 <MX_I2C1_Init+0x74>)
 80002e0:	f004 fd50 	bl	8004d84 <HAL_I2CEx_ConfigAnalogFilter>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80002ea:	f000 f86f 	bl	80003cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80002ee:	2100      	movs	r1, #0
 80002f0:	4804      	ldr	r0, [pc, #16]	@ (8000304 <MX_I2C1_Init+0x74>)
 80002f2:	f004 fd92 	bl	8004e1a <HAL_I2CEx_ConfigDigitalFilter>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80002fc:	f000 f866 	bl	80003cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000300:	bf00      	nop
 8000302:	bd80      	pop	{r7, pc}
 8000304:	20000028 	.word	0x20000028
 8000308:	40005400 	.word	0x40005400

0800030c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000310:	4b14      	ldr	r3, [pc, #80]	@ (8000364 <MX_USART2_UART_Init+0x58>)
 8000312:	4a15      	ldr	r2, [pc, #84]	@ (8000368 <MX_USART2_UART_Init+0x5c>)
 8000314:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000316:	4b13      	ldr	r3, [pc, #76]	@ (8000364 <MX_USART2_UART_Init+0x58>)
 8000318:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800031c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800031e:	4b11      	ldr	r3, [pc, #68]	@ (8000364 <MX_USART2_UART_Init+0x58>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000324:	4b0f      	ldr	r3, [pc, #60]	@ (8000364 <MX_USART2_UART_Init+0x58>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800032a:	4b0e      	ldr	r3, [pc, #56]	@ (8000364 <MX_USART2_UART_Init+0x58>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000330:	4b0c      	ldr	r3, [pc, #48]	@ (8000364 <MX_USART2_UART_Init+0x58>)
 8000332:	220c      	movs	r2, #12
 8000334:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000336:	4b0b      	ldr	r3, [pc, #44]	@ (8000364 <MX_USART2_UART_Init+0x58>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800033c:	4b09      	ldr	r3, [pc, #36]	@ (8000364 <MX_USART2_UART_Init+0x58>)
 800033e:	2200      	movs	r2, #0
 8000340:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000342:	4b08      	ldr	r3, [pc, #32]	@ (8000364 <MX_USART2_UART_Init+0x58>)
 8000344:	2200      	movs	r2, #0
 8000346:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000348:	4b06      	ldr	r3, [pc, #24]	@ (8000364 <MX_USART2_UART_Init+0x58>)
 800034a:	2200      	movs	r2, #0
 800034c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800034e:	4805      	ldr	r0, [pc, #20]	@ (8000364 <MX_USART2_UART_Init+0x58>)
 8000350:	f006 f94c 	bl	80065ec <HAL_UART_Init>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800035a:	f000 f837 	bl	80003cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	2000007c 	.word	0x2000007c
 8000368:	40004400 	.word	0x40004400

0800036c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800036c:	b480      	push	{r7}
 800036e:	b085      	sub	sp, #20
 8000370:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000372:	4b15      	ldr	r3, [pc, #84]	@ (80003c8 <MX_GPIO_Init+0x5c>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a14      	ldr	r2, [pc, #80]	@ (80003c8 <MX_GPIO_Init+0x5c>)
 8000378:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b12      	ldr	r3, [pc, #72]	@ (80003c8 <MX_GPIO_Init+0x5c>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000386:	60fb      	str	r3, [r7, #12]
 8000388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038a:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <MX_GPIO_Init+0x5c>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a0e      	ldr	r2, [pc, #56]	@ (80003c8 <MX_GPIO_Init+0x5c>)
 8000390:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000394:	6153      	str	r3, [r2, #20]
 8000396:	4b0c      	ldr	r3, [pc, #48]	@ (80003c8 <MX_GPIO_Init+0x5c>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800039e:	60bb      	str	r3, [r7, #8]
 80003a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a2:	4b09      	ldr	r3, [pc, #36]	@ (80003c8 <MX_GPIO_Init+0x5c>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a08      	ldr	r2, [pc, #32]	@ (80003c8 <MX_GPIO_Init+0x5c>)
 80003a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003ac:	6153      	str	r3, [r2, #20]
 80003ae:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <MX_GPIO_Init+0x5c>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ba:	bf00      	nop
 80003bc:	3714      	adds	r7, #20
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000

080003cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d0:	b672      	cpsid	i
}
 80003d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d4:	bf00      	nop
 80003d6:	e7fd      	b.n	80003d4 <Error_Handler+0x8>

080003d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003de:	4b0f      	ldr	r3, [pc, #60]	@ (800041c <HAL_MspInit+0x44>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	4a0e      	ldr	r2, [pc, #56]	@ (800041c <HAL_MspInit+0x44>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6193      	str	r3, [r2, #24]
 80003ea:	4b0c      	ldr	r3, [pc, #48]	@ (800041c <HAL_MspInit+0x44>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f6:	4b09      	ldr	r3, [pc, #36]	@ (800041c <HAL_MspInit+0x44>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	4a08      	ldr	r2, [pc, #32]	@ (800041c <HAL_MspInit+0x44>)
 80003fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000400:	61d3      	str	r3, [r2, #28]
 8000402:	4b06      	ldr	r3, [pc, #24]	@ (800041c <HAL_MspInit+0x44>)
 8000404:	69db      	ldr	r3, [r3, #28]
 8000406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800040a:	603b      	str	r3, [r7, #0]
 800040c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	40021000 	.word	0x40021000

08000420 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b08a      	sub	sp, #40	@ 0x28
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000428:	f107 0314 	add.w	r3, r7, #20
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
 8000436:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a17      	ldr	r2, [pc, #92]	@ (800049c <HAL_I2C_MspInit+0x7c>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d127      	bne.n	8000492 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000442:	4b17      	ldr	r3, [pc, #92]	@ (80004a0 <HAL_I2C_MspInit+0x80>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	4a16      	ldr	r2, [pc, #88]	@ (80004a0 <HAL_I2C_MspInit+0x80>)
 8000448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800044c:	6153      	str	r3, [r2, #20]
 800044e:	4b14      	ldr	r3, [pc, #80]	@ (80004a0 <HAL_I2C_MspInit+0x80>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000456:	613b      	str	r3, [r7, #16]
 8000458:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800045a:	23c0      	movs	r3, #192	@ 0xc0
 800045c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800045e:	2312      	movs	r3, #18
 8000460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000462:	2300      	movs	r3, #0
 8000464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000466:	2303      	movs	r3, #3
 8000468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800046a:	2304      	movs	r3, #4
 800046c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800046e:	f107 0314 	add.w	r3, r7, #20
 8000472:	4619      	mov	r1, r3
 8000474:	480b      	ldr	r0, [pc, #44]	@ (80004a4 <HAL_I2C_MspInit+0x84>)
 8000476:	f003 fe07 	bl	8004088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800047a:	4b09      	ldr	r3, [pc, #36]	@ (80004a0 <HAL_I2C_MspInit+0x80>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	4a08      	ldr	r2, [pc, #32]	@ (80004a0 <HAL_I2C_MspInit+0x80>)
 8000480:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000484:	61d3      	str	r3, [r2, #28]
 8000486:	4b06      	ldr	r3, [pc, #24]	@ (80004a0 <HAL_I2C_MspInit+0x80>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000492:	bf00      	nop
 8000494:	3728      	adds	r7, #40	@ 0x28
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40005400 	.word	0x40005400
 80004a0:	40021000 	.word	0x40021000
 80004a4:	48000400 	.word	0x48000400

080004a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08a      	sub	sp, #40	@ 0x28
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b0:	f107 0314 	add.w	r3, r7, #20
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
 80004be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a18      	ldr	r2, [pc, #96]	@ (8000528 <HAL_UART_MspInit+0x80>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d129      	bne.n	800051e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004ca:	4b18      	ldr	r3, [pc, #96]	@ (800052c <HAL_UART_MspInit+0x84>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	4a17      	ldr	r2, [pc, #92]	@ (800052c <HAL_UART_MspInit+0x84>)
 80004d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004d4:	61d3      	str	r3, [r2, #28]
 80004d6:	4b15      	ldr	r3, [pc, #84]	@ (800052c <HAL_UART_MspInit+0x84>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004de:	613b      	str	r3, [r7, #16]
 80004e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e2:	4b12      	ldr	r3, [pc, #72]	@ (800052c <HAL_UART_MspInit+0x84>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	4a11      	ldr	r2, [pc, #68]	@ (800052c <HAL_UART_MspInit+0x84>)
 80004e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004ec:	6153      	str	r3, [r2, #20]
 80004ee:	4b0f      	ldr	r3, [pc, #60]	@ (800052c <HAL_UART_MspInit+0x84>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80004fa:	f248 0304 	movw	r3, #32772	@ 0x8004
 80004fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000500:	2302      	movs	r3, #2
 8000502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000508:	2303      	movs	r3, #3
 800050a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800050c:	2307      	movs	r3, #7
 800050e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000510:	f107 0314 	add.w	r3, r7, #20
 8000514:	4619      	mov	r1, r3
 8000516:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800051a:	f003 fdb5 	bl	8004088 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800051e:	bf00      	nop
 8000520:	3728      	adds	r7, #40	@ 0x28
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40004400 	.word	0x40004400
 800052c:	40021000 	.word	0x40021000

08000530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <NMI_Handler+0x4>

08000538 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <HardFault_Handler+0x4>

08000540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <MemManage_Handler+0x4>

08000548 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <BusFault_Handler+0x4>

08000550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <UsageFault_Handler+0x4>

08000558 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000586:	f003 fc79 	bl	8003e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000594:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <SystemInit+0x20>)
 8000596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800059a:	4a05      	ldr	r2, [pc, #20]	@ (80005b0 <SystemInit+0x20>)
 800059c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80005bc:	2300      	movs	r3, #0
 80005be:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 80005c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d105      	bne.n	80005d4 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 80005c8:	2101      	movs	r1, #1
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f000 fa34 	bl	8000a38 <VL53L1_data_init>
 80005d0:	4603      	mov	r3, r0
 80005d2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 80005d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d107      	bne.n	80005ec <VL53L1_DataInit+0x38>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2201      	movs	r2, #1
 80005e0:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2208      	movs	r2, #8
 80005e8:	f883 237c 	strb.w	r2, [r3, #892]	@ 0x37c
				VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	}

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80005ec:	2300      	movs	r3, #0
 80005ee:	73bb      	strb	r3, [r7, #14]
 80005f0:	e012      	b.n	8000618 <VL53L1_DataInit+0x64>
		if (Status == VL53L1_ERROR_NONE)
 80005f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d112      	bne.n	8000620 <VL53L1_DataInit+0x6c>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 80005fa:	7bbb      	ldrb	r3, [r7, #14]
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	2201      	movs	r2, #1
 8000600:	4619      	mov	r1, r3
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f000 f923 	bl	800084e <VL53L1_SetLimitCheckEnable>
 8000608:	4603      	mov	r3, r0
 800060a:	461a      	mov	r2, r3
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	4313      	orrs	r3, r2
 8000610:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8000612:	7bbb      	ldrb	r3, [r7, #14]
 8000614:	3301      	adds	r3, #1
 8000616:	73bb      	strb	r3, [r7, #14]
 8000618:	7bbb      	ldrb	r3, [r7, #14]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d9e9      	bls.n	80005f2 <VL53L1_DataInit+0x3e>
 800061e:	e000      	b.n	8000622 <VL53L1_DataInit+0x6e>
		else
			break;
 8000620:	bf00      	nop

	}

	/* Limit default values */
	if (Status == VL53L1_ERROR_NONE) {
 8000622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d107      	bne.n	800063a <VL53L1_DataInit+0x86>
		Status = VL53L1_SetLimitCheckValue(Dev,
 800062a:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 800062e:	2100      	movs	r1, #0
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f000 f94a 	bl	80008ca <VL53L1_SetLimitCheckValue>
 8000636:	4603      	mov	r3, r0
 8000638:	73fb      	strb	r3, [r7, #15]
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L1_ERROR_NONE) {
 800063a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d107      	bne.n	8000652 <VL53L1_DataInit+0x9e>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8000642:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000646:	2101      	movs	r1, #1
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f000 f93e 	bl	80008ca <VL53L1_SetLimitCheckValue>
 800064e:	4603      	mov	r3, r0
 8000650:	73fb      	strb	r3, [r7, #15]
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8000652:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:
}


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b08c      	sub	sp, #48	@ 0x30
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
 8000666:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000668:	2300      	movs	r3, #0
 800066a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t Mm1Enabled = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 800068c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000690:	2b00      	cmp	r3, #0
 8000692:	d109      	bne.n	80006a8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8000694:	f107 031b 	add.w	r3, r7, #27
 8000698:	461a      	mov	r2, r3
 800069a:	2105      	movs	r1, #5
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f000 f94d 	bl	800093c <VL53L1_GetSequenceStepEnable>
 80006a2:	4603      	mov	r3, r0
 80006a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 80006a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d109      	bne.n	80006c4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80006b0:	f107 031a 	add.w	r3, r7, #26
 80006b4:	461a      	mov	r2, r3
 80006b6:	2106      	movs	r1, #6
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f000 f93f 	bl	800093c <VL53L1_GetSequenceStepEnable>
 80006be:	4603      	mov	r3, r0
 80006c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 80006c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d10b      	bne.n	80006e4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	f107 0214 	add.w	r2, r7, #20
 80006d4:	f107 010c 	add.w	r1, r7, #12
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f000 fb51 	bl	8000d80 <VL53L1_get_timeouts_us>
 80006de:	4603      	mov	r3, r0
 80006e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 80006e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d155      	bne.n	8000798 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>
		PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 80006f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		switch (PresetMode) {
 80006f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80006fa:	2b08      	cmp	r3, #8
 80006fc:	d02a      	beq.n	8000754 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf6>
 80006fe:	2b08      	cmp	r3, #8
 8000700:	dc47      	bgt.n	8000792 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
 8000702:	2b03      	cmp	r3, #3
 8000704:	d012      	beq.n	800072c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
 8000706:	2b04      	cmp	r3, #4
 8000708:	d143      	bne.n	8000792 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800070a:	7efb      	ldrb	r3, [r7, #27]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d002      	beq.n	8000716 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb8>
 8000710:	7ebb      	ldrb	r3, [r7, #26]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d105      	bne.n	8000722 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8000716:	693b      	ldr	r3, [r7, #16]
 8000718:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800071c:	3308      	adds	r3, #8
 800071e:	62bb      	str	r3, [r7, #40]	@ 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 8000720:	e03a      	b.n	8000798 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8000722:	693b      	ldr	r3, [r7, #16]
 8000724:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000728:	62bb      	str	r3, [r7, #40]	@ 0x28
		break;
 800072a:	e035      	b.n	8000798 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800072c:	7efb      	ldrb	r3, [r7, #27]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d002      	beq.n	8000738 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
 8000732:	7ebb      	ldrb	r3, [r7, #26]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d106      	bne.n	8000746 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8000738:	693b      	ldr	r3, [r7, #16]
 800073a:	f503 534f 	add.w	r3, r3, #13248	@ 0x33c0
 800073e:	3334      	adds	r3, #52	@ 0x34
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	62bb      	str	r3, [r7, #40]	@ 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 8000744:	e028      	b.n	8000798 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	f503 5328 	add.w	r3, r3, #10752	@ 0x2a00
 800074c:	3330      	adds	r3, #48	@ 0x30
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	62bb      	str	r3, [r7, #40]	@ 0x28
		break;
 8000752:	e021      	b.n	8000798 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8000754:	23f5      	movs	r3, #245	@ 0xf5
 8000756:	627b      	str	r3, [r7, #36]	@ 0x24
			VL53L1_get_tuning_parm(Dev,
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	461a      	mov	r2, r3
 800075e:	f248 0136 	movw	r1, #32822	@ 0x8036
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f001 f804 	bl	8001770 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	2b00      	cmp	r3, #0
 800076c:	dd07      	ble.n	800077e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x120>
				vhv += vhv_loops *
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	22f5      	movs	r2, #245	@ 0xf5
 8000772:	fb02 f303 	mul.w	r3, r2, r3
 8000776:	461a      	mov	r2, r3
 8000778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800077a:	4413      	add	r3, r2
 800077c:	627b      	str	r3, [r7, #36]	@ 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800077e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000780:	f603 53dc 	addw	r3, r3, #3548	@ 0xddc
 8000784:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8000786:	693b      	ldr	r3, [r7, #16]
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	69fa      	ldr	r2, [r7, #28]
 800078c:	4413      	add	r3, r2
 800078e:	62bb      	str	r3, [r7, #40]	@ 0x28
		break;
 8000790:	e002      	b.n	8000798 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8000792:	23f8      	movs	r3, #248	@ 0xf8
 8000794:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
	}
	if (Status == VL53L1_ERROR_NONE)
 8000798:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800079c:	2b00      	cmp	r3, #0
 800079e:	d102      	bne.n	80007a6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x148>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80007a4:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80007a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3730      	adds	r7, #48	@ 0x30
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80007be:	2300      	movs	r3, #0
 80007c0:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	4619      	mov	r1, r3
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f000 fa7b 	bl	8000cc4 <VL53L1_get_inter_measurement_period_ms>
 80007ce:	4603      	mov	r3, r0
 80007d0:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 80007d2:	68ba      	ldr	r2, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	019b      	lsls	r3, r3, #6
 80007d8:	4907      	ldr	r1, [pc, #28]	@ (80007f8 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 80007da:	fba1 1303 	umull	r1, r3, r1, r3
 80007de:	099b      	lsrs	r3, r3, #6
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 80007e4:	68ba      	ldr	r2, [r7, #8]
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 80007ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	10624dd3 	.word	0x10624dd3

080007fc <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	460b      	mov	r3, r1
 8000806:	607a      	str	r2, [r7, #4]
 8000808:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800080a:	2300      	movs	r3, #0
 800080c:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800080e:	897b      	ldrh	r3, [r7, #10]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d002      	beq.n	800081a <SetLimitValue+0x1e>
 8000814:	2b01      	cmp	r3, #1
 8000816:	d009      	beq.n	800082c <SetLimitValue+0x30>
 8000818:	e011      	b.n	800083e <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	0b9b      	lsrs	r3, r3, #14
 800081e:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8000820:	8abb      	ldrh	r3, [r7, #20]
 8000822:	4619      	mov	r1, r3
 8000824:	68f8      	ldr	r0, [r7, #12]
 8000826:	f000 fcf5 	bl	8001214 <VL53L1_set_lite_sigma_threshold>
		break;
 800082a:	e00a      	b.n	8000842 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	0a5b      	lsrs	r3, r3, #9
 8000830:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8000832:	8abb      	ldrh	r3, [r7, #20]
 8000834:	4619      	mov	r1, r3
 8000836:	68f8      	ldr	r0, [r7, #12]
 8000838:	f000 fd02 	bl	8001240 <VL53L1_set_lite_min_count_rate>
		break;
 800083c:	e001      	b.n	8000842 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800083e:	23fc      	movs	r3, #252	@ 0xfc
 8000840:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8000842:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000846:	4618      	mov	r0, r3
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b084      	sub	sp, #16
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
 8000856:	460b      	mov	r3, r1
 8000858:	807b      	strh	r3, [r7, #2]
 800085a:	4613      	mov	r3, r2
 800085c:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800085e:	2300      	movs	r3, #0
 8000860:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8000866:	887b      	ldrh	r3, [r7, #2]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d902      	bls.n	8000872 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800086c:	23fc      	movs	r3, #252	@ 0xfc
 800086e:	73fb      	strb	r3, [r7, #15]
 8000870:	e014      	b.n	800089c <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 8000872:	787b      	ldrb	r3, [r7, #1]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d102      	bne.n	800087e <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	e006      	b.n	800088c <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800087e:	887b      	ldrh	r3, [r7, #2]
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	33e0      	adds	r3, #224	@ 0xe0
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	4413      	add	r3, r2
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 800088c:	887b      	ldrh	r3, [r7, #2]
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	4619      	mov	r1, r3
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff ffb2 	bl	80007fc <SetLimitValue>
 8000898:	4603      	mov	r3, r0
 800089a:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 800089c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d10c      	bne.n	80008be <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80008a4:	787b      	ldrb	r3, [r7, #1]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	bf14      	ite	ne
 80008aa:	2301      	movne	r3, #1
 80008ac:	2300      	moveq	r3, #0
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	887b      	ldrh	r3, [r7, #2]
 80008b2:	4611      	mov	r1, r2
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	4413      	add	r3, r2
 80008b8:	460a      	mov	r2, r1
 80008ba:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 80008be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <VL53L1_SetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_SetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b086      	sub	sp, #24
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	60f8      	str	r0, [r7, #12]
 80008d2:	460b      	mov	r3, r1
 80008d4:	607a      	str	r2, [r7, #4]
 80008d6:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80008d8:	2300      	movs	r3, #0
 80008da:	75fb      	strb	r3, [r7, #23]
	uint8_t LimitChecksEnable;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80008dc:	897b      	ldrh	r3, [r7, #10]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d902      	bls.n	80008e8 <VL53L1_SetLimitCheckValue+0x1e>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80008e2:	23fc      	movs	r3, #252	@ 0xfc
 80008e4:	75fb      	strb	r3, [r7, #23]
 80008e6:	e023      	b.n	8000930 <VL53L1_SetLimitCheckValue+0x66>
	} else {

		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80008e8:	897b      	ldrh	r3, [r7, #10]
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	4413      	add	r3, r2
 80008ee:	f893 3384 	ldrb.w	r3, [r3, #900]	@ 0x384
 80008f2:	75bb      	strb	r3, [r7, #22]
				LimitCheckId,
				LimitChecksEnable);

		if (LimitChecksEnable == 0) {
 80008f4:	7dbb      	ldrb	r3, [r7, #22]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d107      	bne.n	800090a <VL53L1_SetLimitCheckValue+0x40>
			/* disabled write only internal value */
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80008fa:	897b      	ldrh	r3, [r7, #10]
 80008fc:	68fa      	ldr	r2, [r7, #12]
 80008fe:	33e0      	adds	r3, #224	@ 0xe0
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	e012      	b.n	8000930 <VL53L1_SetLimitCheckValue+0x66>
				LimitCheckId, LimitCheckValue);
		} else {

			Status = SetLimitValue(Dev, LimitCheckId,
 800090a:	897b      	ldrh	r3, [r7, #10]
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	4619      	mov	r1, r3
 8000910:	68f8      	ldr	r0, [r7, #12]
 8000912:	f7ff ff73 	bl	80007fc <SetLimitValue>
 8000916:	4603      	mov	r3, r0
 8000918:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue);

			if (Status == VL53L1_ERROR_NONE) {
 800091a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d106      	bne.n	8000930 <VL53L1_SetLimitCheckValue+0x66>
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8000922:	897b      	ldrh	r3, [r7, #10]
 8000924:	68fa      	ldr	r2, [r7, #12]
 8000926:	33e0      	adds	r3, #224	@ 0xe0
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	4413      	add	r3, r2
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	609a      	str	r2, [r3, #8]
			}
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8000930:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	460b      	mov	r3, r1
 8000946:	607a      	str	r2, [r7, #4]
 8000948:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800094a:	2300      	movs	r3, #0
 800094c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 800094e:	7afb      	ldrb	r3, [r7, #11]
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	4619      	mov	r1, r3
 8000954:	68f8      	ldr	r0, [r7, #12]
 8000956:	f000 fa7c 	bl	8000e52 <VL53L1_get_sequence_config_bit>
 800095a:	4603      	mov	r3, r0
 800095c:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 800095e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000962:	4618      	mov	r0, r3
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000974:	2300      	movs	r3, #0
 8000976:	75fb      	strb	r3, [r7, #23]
	VL53L1_Error lStatus;
	uint32_t MTBus, IMPms;

	LOG_FUNCTION_START("");

	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f893 3378 	ldrb.w	r3, [r3, #888]	@ 0x378
 800097e:	75bb      	strb	r3, [r7, #22]
	switch (CurrPalState) {
 8000980:	7dbb      	ldrb	r3, [r7, #22]
 8000982:	2b63      	cmp	r3, #99	@ 0x63
 8000984:	dc12      	bgt.n	80009ac <VL53L1_StartMeasurement+0x40>
 8000986:	2b62      	cmp	r3, #98	@ 0x62
 8000988:	da0d      	bge.n	80009a6 <VL53L1_StartMeasurement+0x3a>
 800098a:	2b05      	cmp	r3, #5
 800098c:	dc0e      	bgt.n	80009ac <VL53L1_StartMeasurement+0x40>
 800098e:	2b04      	cmp	r3, #4
 8000990:	da09      	bge.n	80009a6 <VL53L1_StartMeasurement+0x3a>
 8000992:	2b02      	cmp	r3, #2
 8000994:	dc02      	bgt.n	800099c <VL53L1_StartMeasurement+0x30>
 8000996:	2b00      	cmp	r3, #0
 8000998:	da05      	bge.n	80009a6 <VL53L1_StartMeasurement+0x3a>
 800099a:	e007      	b.n	80009ac <VL53L1_StartMeasurement+0x40>
 800099c:	2b03      	cmp	r3, #3
 800099e:	d105      	bne.n	80009ac <VL53L1_StartMeasurement+0x40>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	75fb      	strb	r3, [r7, #23]
		break;
 80009a4:	e004      	b.n	80009b0 <VL53L1_StartMeasurement+0x44>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 80009a6:	23f2      	movs	r3, #242	@ 0xf2
 80009a8:	75fb      	strb	r3, [r7, #23]
		break;
 80009aa:	e001      	b.n	80009b0 <VL53L1_StartMeasurement+0x44>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 80009ac:	23fd      	movs	r3, #253	@ 0xfd
 80009ae:	75fb      	strb	r3, [r7, #23]
	}

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	789b      	ldrb	r3, [r3, #2]
 80009b4:	757b      	strb	r3, [r7, #21]

	/* Check timing configuration between timing budget and
	* inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 80009b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d11f      	bne.n	80009fe <VL53L1_StartMeasurement+0x92>
 80009be:	7d7b      	ldrb	r3, [r7, #21]
 80009c0:	2b40      	cmp	r3, #64	@ 0x40
 80009c2:	d11c      	bne.n	80009fe <VL53L1_StartMeasurement+0x92>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	4619      	mov	r1, r3
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f7ff fe47 	bl	800065e <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 80009d0:	4603      	mov	r3, r0
 80009d2:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	4a17      	ldr	r2, [pc, #92]	@ (8000a34 <VL53L1_StartMeasurement+0xc8>)
 80009d8:	fba2 2303 	umull	r2, r3, r2, r3
 80009dc:	099b      	lsrs	r3, r3, #6
 80009de:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	4619      	mov	r1, r3
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff fee4 	bl	80007b4 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 80009ec:	4603      	mov	r3, r0
 80009ee:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	1d1a      	adds	r2, r3, #4
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d901      	bls.n	80009fe <VL53L1_StartMeasurement+0x92>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80009fa:	23fc      	movs	r3, #252	@ 0xfc
 80009fc:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 80009fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d107      	bne.n	8000a16 <VL53L1_StartMeasurement+0xaa>
		Status = VL53L1_init_and_start_range(
 8000a06:	7d7b      	ldrb	r3, [r7, #21]
 8000a08:	2206      	movs	r2, #6
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 fc4d 	bl	80012ac <VL53L1_init_and_start_range>
 8000a12:	4603      	mov	r3, r0
 8000a14:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 8000a16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d103      	bne.n	8000a26 <VL53L1_StartMeasurement+0xba>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2204      	movs	r2, #4
 8000a22:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 8000a26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	10624dd3 	.word	0x10624dd3

08000a38 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8000a38:	b5b0      	push	{r4, r5, r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af04      	add	r7, sp, #16
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	460b      	mov	r3, r1
 8000a42:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 8000a4c:	2162      	movs	r1, #98	@ 0x62
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f001 fd8c 	bl	800256c <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	2200      	movs	r2, #0
 8000a64:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	2201      	movs	r2, #1
 8000a6a:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	2201      	movs	r2, #1
 8000a70:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a78:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000a80:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8000a88:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	2264      	movs	r2, #100	@ 0x64
 8000a8e:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8000a96:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	f240 72db 	movw	r2, #2011	@ 0x7db
 8000aa6:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f001 fd42 	bl	8002534 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8000ab0:	78fb      	ldrb	r3, [r7, #3]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d008      	beq.n	8000ac8 <VL53L1_data_init+0x90>
 8000ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d104      	bne.n	8000ac8 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f000 f857 	bl	8000b72 <VL53L1_read_p2p_data>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 f872 	bl	8001bb8 <VL53L1_init_refspadchar_config_struct>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 f88e 	bl	8001c00 <VL53L1_init_ssc_config_struct>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	f103 0242 	add.w	r2, r3, #66	@ 0x42
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8000af4:	4619      	mov	r1, r3
 8000af6:	4610      	mov	r0, r2
 8000af8:	f001 f8a3 	bl	8001c42 <VL53L1_init_xtalk_config_struct>
 8000afc:	4603      	mov	r3, r0
 8000afe:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 f8fd 	bl	8001d06 <VL53L1_init_offset_cal_config_struct>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	33a4      	adds	r3, #164	@ 0xa4
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 f91d 	bl	8001d54 <VL53L1_init_tuning_parm_storage_struct>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 8000b1e:	2120      	movs	r1, #32
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f000 fba3 	bl	800126c <VL53L1_set_vhv_loopbound>
 8000b26:	4603      	mov	r3, r0
 8000b28:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 8000b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d116      	bne.n	8000b60 <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	7858      	ldrb	r0, [r3, #1]
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	8b1c      	ldrh	r4, [r3, #24]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	689d      	ldr	r5, [r3, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	6912      	ldr	r2, [r2, #16]
 8000b46:	68b9      	ldr	r1, [r7, #8]
 8000b48:	6949      	ldr	r1, [r1, #20]
 8000b4a:	9102      	str	r1, [sp, #8]
 8000b4c:	9201      	str	r2, [sp, #4]
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	462b      	mov	r3, r5
 8000b52:	4622      	mov	r2, r4
 8000b54:	4601      	mov	r1, r0
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f000 f9e6 	bl	8000f28 <VL53L1_set_preset_mode>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f002 f972 	bl	8002e4a <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8000b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bdb0      	pop	{r4, r5, r7, pc}

08000b72 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b084      	sub	sp, #16
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8000b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d108      	bne.n	8000b9c <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8000b90:	4619      	mov	r1, r3
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f002 fba3 	bl	80032de <VL53L1_get_static_nvm_managed>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8000b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d107      	bne.n	8000bb4 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	3342      	adds	r3, #66	@ 0x42
 8000ba8:	4619      	mov	r1, r3
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f002 fcd5 	bl	800355a <VL53L1_get_customer_nvm_managed>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 8000bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d115      	bne.n	8000be8 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	f503 73fd 	add.w	r3, r3, #506	@ 0x1fa
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f003 f8be 	bl	8003d46 <VL53L1_get_nvm_copy_data>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 8000bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d108      	bne.n	8000be8 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	f503 72fd 	add.w	r2, r3, #506	@ 0x1fa
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	33f0      	adds	r3, #240	@ 0xf0
 8000be0:	4619      	mov	r1, r3
 8000be2:	4610      	mov	r0, r2
 8000be4:	f001 fdda 	bl	800279c <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 8000be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d109      	bne.n	8000c04 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	21de      	movs	r1, #222	@ 0xde
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f002 fa7c 	bl	80030f8 <VL53L1_RdWord>
 8000c00:	4603      	mov	r3, r0
 8000c02:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 8000c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000c0e:	d204      	bcs.n	8000c1a <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	f64b 42cc 	movw	r2, #48332	@ 0xbccc
 8000c16:	f8a3 215e 	strh.w	r2, [r3, #350]	@ 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 8000c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d107      	bne.n	8000c32 <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	339e      	adds	r3, #158	@ 0x9e
 8000c26:	4619      	mov	r1, r3
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f000 f949 	bl	8000ec0 <VL53L1_get_mode_mitigation_roi>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d114      	bne.n	8000c66 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d10f      	bne.n	8000c66 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 8000c4c:	011b      	lsls	r3, r3, #4
 8000c4e:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	f893 309f 	ldrb.w	r3, [r3, #159]	@ 0x9f
 8000c5c:	011b      	lsls	r3, r3, #4
 8000c5e:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 8000c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b085      	sub	sp, #20
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d101      	bne.n	8000c92 <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8000c8e:	23f1      	movs	r3, #241	@ 0xf1
 8000c90:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8000c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10c      	bne.n	8000cb4 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 8000ca6:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 8000cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d101      	bne.n	8000ce4 <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8000ce0:	23f1      	movs	r3, #241	@ 0xf1
 8000ce2:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8000ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d109      	bne.n	8000d00 <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	@ 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 8000cf8:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8000d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af02      	add	r7, sp, #8
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d101      	bne.n	8000d34 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8000d30:	23f1      	movs	r3, #241	@ 0xf1
 8000d32:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8000d34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d11b      	bne.n	8000d74 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	f8b3 115e 	ldrh.w	r1, [r3, #350]	@ 0x15e
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	f502 72ce 	add.w	r2, r2, #412	@ 0x19c
 8000d60:	9201      	str	r2, [sp, #4]
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	460b      	mov	r3, r1
 8000d66:	683a      	ldr	r2, [r7, #0]
 8000d68:	6879      	ldr	r1, [r7, #4]
 8000d6a:	68b8      	ldr	r0, [r7, #8]
 8000d6c:	f001 fff4 	bl	8002d58 <VL53L1_calc_timeout_register_values>
 8000d70:	4603      	mov	r3, r0
 8000d72:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8000d74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d101      	bne.n	8000dac <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8000da8:	23f1      	movs	r3, #241	@ 0xf1
 8000daa:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8000dac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d148      	bne.n	8000e46 <VL53L1_get_timeouts_us+0xc6>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	f8b3 215e 	ldrh.w	r2, [r3, #350]	@ 0x15e
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	f893 31a2 	ldrb.w	r3, [r3, #418]	@ 0x1a2
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4610      	mov	r0, r2
 8000dc4:	f001 fe6e 	bl	8002aa4 <VL53L1_calc_macro_period_us>
 8000dc8:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	f893 318b 	ldrb.w	r3, [r3, #395]	@ 0x18b
			VL53L1_calc_timeout_us(
 8000dd0:	6979      	ldr	r1, [r7, #20]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f001 ff27 	bl	8002c26 <VL53L1_calc_timeout_us>
 8000dd8:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
		timeout_encoded =
 8000de4:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8000de6:	8a7b      	ldrh	r3, [r7, #18]
 8000de8:	021b      	lsls	r3, r3, #8
 8000dea:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	f892 219d 	ldrb.w	r2, [r2, #413]	@ 0x19d
		timeout_encoded = (timeout_encoded << 8) +
 8000df2:	4413      	add	r3, r2
 8000df4:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8000df6:	8a7b      	ldrh	r3, [r7, #18]
 8000df8:	6979      	ldr	r1, [r7, #20]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 ff53 	bl	8002ca6 <VL53L1_calc_decoded_timeout_us>
 8000e00:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
		timeout_encoded =
 8000e0c:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8000e0e:	8a7b      	ldrh	r3, [r7, #18]
 8000e10:	021b      	lsls	r3, r3, #8
 8000e12:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	f892 21a1 	ldrb.w	r2, [r2, #417]	@ 0x1a1
		timeout_encoded = (timeout_encoded << 8) +
 8000e1a:	4413      	add	r3, r2
 8000e1c:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8000e1e:	8a7b      	ldrh	r3, [r7, #18]
 8000e20:	6979      	ldr	r1, [r7, #20]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f001 ff3f 	bl	8002ca6 <VL53L1_calc_decoded_timeout_us>
 8000e28:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8000e46:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3720      	adds	r7, #32
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b087      	sub	sp, #28
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	60f8      	str	r0, [r7, #12]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8000e6c:	7afb      	ldrb	r3, [r7, #11]
 8000e6e:	2b07      	cmp	r3, #7
 8000e70:	d81c      	bhi.n	8000eac <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 8000e72:	7afb      	ldrb	r3, [r7, #11]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d004      	beq.n	8000e82 <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 8000e78:	7afb      	ldrb	r3, [r7, #11]
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	f893 21c5 	ldrb.w	r2, [r3, #453]	@ 0x1c5
		*pvalue =
 8000e88:	7dbb      	ldrb	r3, [r7, #22]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 8000e92:	7afb      	ldrb	r3, [r7, #11]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d00b      	beq.n	8000eb0 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	7afb      	ldrb	r3, [r7, #11]
 8000ea0:	fa42 f303 	asr.w	r3, r2, r3
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	701a      	strb	r2, [r3, #0]
 8000eaa:	e001      	b.n	8000eb0 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8000eac:	23fc      	movs	r3, #252	@ 0xfc
 8000eae:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8000eb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	371c      	adds	r7, #28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	f893 322a 	ldrb.w	r3, [r3, #554]	@ 0x22a
 8000ee4:	f107 020e 	add.w	r2, r7, #14
 8000ee8:	f107 010d 	add.w	r1, r7, #13
 8000eec:	4618      	mov	r0, r3
 8000eee:	f002 f827 	bl	8002f40 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8000ef2:	7bba      	ldrb	r2, [r7, #14]
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8000ef8:	7b7a      	ldrb	r2, [r7, #13]
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	f893 322b 	ldrb.w	r3, [r3, #555]	@ 0x22b
 8000f04:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	091b      	lsrs	r3, r3, #4
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8000f1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b092      	sub	sp, #72	@ 0x48
 8000f2c:	af04      	add	r7, sp, #16
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	460b      	mov	r3, r1
 8000f34:	72fb      	strb	r3, [r7, #11]
 8000f36:	4613      	mov	r3, r2
 8000f38:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53L1_LLDriverData_t *pdev =
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	633b      	str	r3, [r7, #48]	@ 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8000f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f46:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8000f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8000f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f4e:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8000f52:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8000f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f56:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8000f5a:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8000f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f5e:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8000f62:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8000f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f66:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8000f6a:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8000f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f6e:	33a4      	adds	r3, #164	@ 0xa4
 8000f70:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8000f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f74:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8000f78:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 8000f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f7c:	7afa      	ldrb	r2, [r7, #11]
 8000f7e:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8000f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f84:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8000f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000f8a:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8000f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000f90:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 8000f92:	2103      	movs	r1, #3
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	f001 fae9 	bl	800256c <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 8000f9a:	7afb      	ldrb	r3, [r7, #11]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	2b25      	cmp	r3, #37	@ 0x25
 8000fa0:	f200 810c 	bhi.w	80011bc <VL53L1_set_preset_mode+0x294>
 8000fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8000fac <VL53L1_set_preset_mode+0x84>)
 8000fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000faa:	bf00      	nop
 8000fac:	08001045 	.word	0x08001045
 8000fb0:	08001061 	.word	0x08001061
 8000fb4:	0800107d 	.word	0x0800107d
 8000fb8:	08001099 	.word	0x08001099
 8000fbc:	080010b5 	.word	0x080010b5
 8000fc0:	080010d1 	.word	0x080010d1
 8000fc4:	080010ed 	.word	0x080010ed
 8000fc8:	08001109 	.word	0x08001109
 8000fcc:	080011bd 	.word	0x080011bd
 8000fd0:	080011bd 	.word	0x080011bd
 8000fd4:	080011bd 	.word	0x080011bd
 8000fd8:	080011bd 	.word	0x080011bd
 8000fdc:	080011bd 	.word	0x080011bd
 8000fe0:	080011bd 	.word	0x080011bd
 8000fe4:	080011bd 	.word	0x080011bd
 8000fe8:	080011bd 	.word	0x080011bd
 8000fec:	08001125 	.word	0x08001125
 8000ff0:	08001141 	.word	0x08001141
 8000ff4:	080011bd 	.word	0x080011bd
 8000ff8:	080011bd 	.word	0x080011bd
 8000ffc:	080011bd 	.word	0x080011bd
 8001000:	080011bd 	.word	0x080011bd
 8001004:	080011bd 	.word	0x080011bd
 8001008:	080011bd 	.word	0x080011bd
 800100c:	080011bd 	.word	0x080011bd
 8001010:	080011bd 	.word	0x080011bd
 8001014:	080011bd 	.word	0x080011bd
 8001018:	080011bd 	.word	0x080011bd
 800101c:	080011bd 	.word	0x080011bd
 8001020:	080011bd 	.word	0x080011bd
 8001024:	080011bd 	.word	0x080011bd
 8001028:	080011bd 	.word	0x080011bd
 800102c:	080011bd 	.word	0x080011bd
 8001030:	080011bd 	.word	0x080011bd
 8001034:	080011bd 	.word	0x080011bd
 8001038:	0800115d 	.word	0x0800115d
 800103c:	0800117d 	.word	0x0800117d
 8001040:	0800119d 	.word	0x0800119d

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	6a3b      	ldr	r3, [r7, #32]
 800104e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001050:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001052:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001054:	f000 ff0c 	bl	8001e70 <VL53L1_preset_mode_standard_ranging>
 8001058:	4603      	mov	r3, r0
 800105a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800105e:	e0b1      	b.n	80011c4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	6a3b      	ldr	r3, [r7, #32]
 800106a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800106c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800106e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001070:	f001 f81c 	bl	80020ac <VL53L1_preset_mode_standard_ranging_short_range>
 8001074:	4603      	mov	r3, r0
 8001076:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800107a:	e0a3      	b.n	80011c4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	6a3b      	ldr	r3, [r7, #32]
 8001086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001088:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800108a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800108c:	f001 f84f 	bl	800212e <VL53L1_preset_mode_standard_ranging_long_range>
 8001090:	4603      	mov	r3, r0
 8001092:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8001096:	e095      	b.n	80011c4 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	6a3b      	ldr	r3, [r7, #32]
 80010a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80010a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80010a8:	f001 f882 	bl	80021b0 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 80010ac:	4603      	mov	r3, r0
 80010ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80010b2:	e087      	b.n	80011c4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	6a3b      	ldr	r3, [r7, #32]
 80010be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80010c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80010c4:	f001 f899 	bl	80021fa <VL53L1_preset_mode_standard_ranging_mm2_cal>
 80010c8:	4603      	mov	r3, r0
 80010ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80010ce:	e079      	b.n	80011c4 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	9301      	str	r3, [sp, #4]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	6a3b      	ldr	r3, [r7, #32]
 80010da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80010de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80010e0:	f001 f8b0 	bl	8002244 <VL53L1_preset_mode_timed_ranging>
 80010e4:	4603      	mov	r3, r0
 80010e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80010ea:	e06b      	b.n	80011c4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	6a3b      	ldr	r3, [r7, #32]
 80010f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80010fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80010fc:	f001 f8dc 	bl	80022b8 <VL53L1_preset_mode_timed_ranging_short_range>
 8001100:	4603      	mov	r3, r0
 8001102:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8001106:	e05d      	b.n	80011c4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001114:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001116:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001118:	f001 f908 	bl	800232c <VL53L1_preset_mode_timed_ranging_long_range>
 800111c:	4603      	mov	r3, r0
 800111e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8001122:	e04f      	b.n	80011c4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001130:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001132:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001134:	f001 f9dc 	bl	80024f0 <VL53L1_preset_mode_olt>
 8001138:	4603      	mov	r3, r0
 800113a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800113e:	e041      	b.n	80011c4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	6a3b      	ldr	r3, [r7, #32]
 800114a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800114c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800114e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001150:	f001 f998 	bl	8002484 <VL53L1_preset_mode_singleshot_ranging>
 8001154:	4603      	mov	r3, r0
 8001156:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800115a:	e033      	b.n	80011c4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	9302      	str	r3, [sp, #8]
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	6a3b      	ldr	r3, [r7, #32]
 800116a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800116c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800116e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001170:	f001 f93c 	bl	80023ec <VL53L1_preset_mode_low_power_auto_short_ranging>
 8001174:	4603      	mov	r3, r0
 8001176:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800117a:	e023      	b.n	80011c4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	9302      	str	r3, [sp, #8]
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	6a3b      	ldr	r3, [r7, #32]
 800118a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800118c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800118e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001190:	f001 f906 	bl	80023a0 <VL53L1_preset_mode_low_power_auto_ranging>
 8001194:	4603      	mov	r3, r0
 8001196:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800119a:	e013      	b.n	80011c4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80011ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80011b0:	f001 f942 	bl	8002438 <VL53L1_preset_mode_low_power_auto_long_ranging>
 80011b4:	4603      	mov	r3, r0
 80011b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 80011ba:	e003      	b.n	80011c4 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 80011bc:	23fc      	movs	r3, #252	@ 0xfc
 80011be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		break;
 80011c2:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 80011c4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d105      	bne.n	80011d8 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 80011cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ce:	893a      	ldrh	r2, [r7, #8]
 80011d0:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 80011d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011d4:	893a      	ldrh	r2, [r7, #8]
 80011d6:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 80011d8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d108      	bne.n	80011f2 <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 80011e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f7ff fd92 	bl	8000d10 <VL53L1_set_timeouts_us>
 80011ec:	4603      	mov	r3, r0
 80011ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 80011f2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d106      	bne.n	8001208 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 80011fa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f7ff fd38 	bl	8000c72 <VL53L1_set_inter_measurement_period_ms>
 8001202:	4603      	mov	r3, r0
 8001204:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 8001208:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800120c:	4618      	mov	r0, r3
 800120e:	3738      	adds	r7, #56	@ 0x38
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <VL53L1_set_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8001220:	2300      	movs	r3, #0
 8001222:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	887a      	ldrh	r2, [r7, #2]
 800122c:	f8a3 21a6 	strh.w	r2, [r3, #422]	@ 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 8001230:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8001234:	4618      	mov	r0, r3
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <VL53L1_set_lite_min_count_rate>:
}

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800124c:	2300      	movs	r3, #0
 800124e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	887a      	ldrh	r2, [r7, #2]
 8001258:	f8a3 21a8 	strh.w	r2, [r3, #424]	@ 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 800125c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8001260:	4618      	mov	r0, r3
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8001278:	2300      	movs	r3, #0
 800127a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	b2da      	uxtb	r2, r3
 800128c:	78fb      	ldrb	r3, [r7, #3]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	b2db      	uxtb	r3, r3
 8001292:	4413      	add	r3, r2
 8001294:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 800129c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b0d0      	sub	sp, #320	@ 0x140
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012b6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80012ba:	6018      	str	r0, [r3, #0]
 80012bc:	4608      	mov	r0, r1
 80012be:	4611      	mov	r1, r2
 80012c0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012c4:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 80012c8:	4602      	mov	r2, r0
 80012ca:	701a      	strb	r2, [r3, #0]
 80012cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012d0:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80012d4:	460a      	mov	r2, r1
 80012d6:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80012d8:	2300      	movs	r3, #0
 80012da:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80012de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012e2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 80012ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80012f0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80012f4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 80012f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80012fc:	3342      	adds	r3, #66	@ 0x42
 80012fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8001302:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001306:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800130a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800130e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001312:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8001316:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800131a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800131e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8001322:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8001326:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800132a:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 800132e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8001332:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001336:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800133a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 800133e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001342:	332c      	adds	r3, #44	@ 0x2c
 8001344:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	uint16_t i                          = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
	uint16_t i2c_index                  = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 8001368:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800136c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001370:	f2a2 123d 	subw	r2, r2, #317	@ 0x13d
 8001374:	7812      	ldrb	r2, [r2, #0]
 8001376:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 8001378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800137c:	791b      	ldrb	r3, [r3, #4]
 800137e:	b25b      	sxtb	r3, r3
 8001380:	f003 030f 	and.w	r3, r3, #15
 8001384:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8001386:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800138a:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800138e:	f993 3000 	ldrsb.w	r3, [r3]
 8001392:	4313      	orrs	r3, r2
 8001394:	b25b      	sxtb	r3, r3
 8001396:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8001398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800139c:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800139e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80013a2:	f8b3 2142 	ldrh.w	r2, [r3, #322]	@ 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 80013a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80013aa:	f8a3 217c 	strh.w	r2, [r3, #380]	@ 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 80013ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80013b2:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 80013b6:	2bff      	cmp	r3, #255	@ 0xff
 80013b8:	d104      	bne.n	80013c4 <VL53L1_init_and_start_range+0x118>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 80013ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80013c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80013c8:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d139      	bne.n	8001444 <VL53L1_init_and_start_range+0x198>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 80013d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80013d4:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d133      	bne.n	8001444 <VL53L1_init_and_start_range+0x198>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 80013dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80013e0:	f893 2186 	ldrb.w	r2, [r3, #390]	@ 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 80013e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80013e8:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 80013ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80013f0:	2220      	movs	r2, #32
 80013f2:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 80013f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80013fa:	f893 31c5 	ldrb.w	r3, [r3, #453]	@ 0x1c5
 80013fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10c      	bne.n	8001420 <VL53L1_init_and_start_range+0x174>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 8001406:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800140a:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	@ 0x58
 800140e:	b29b      	uxth	r3, r3
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	b29b      	uxth	r3, r3
 8001414:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 8001416:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800141a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 800141e:	e004      	b.n	800142a <VL53L1_init_and_start_range+0x17e>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 8001420:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001424:	2200      	movs	r2, #0
 8001426:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 800142a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800142e:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b04      	cmp	r3, #4
 8001436:	d805      	bhi.n	8001444 <VL53L1_init_and_start_range+0x198>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8001438:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800143c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8001440:	2205      	movs	r2, #5
 8001442:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8001444:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001448:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 800144c:	2b01      	cmp	r3, #1
 800144e:	d113      	bne.n	8001478 <VL53L1_init_and_start_range+0x1cc>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8001450:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001454:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8001458:	2b01      	cmp	r3, #1
 800145a:	d10d      	bne.n	8001478 <VL53L1_init_and_start_range+0x1cc>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800145c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001460:	f893 22e7 	ldrb.w	r2, [r3, #743]	@ 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 8001464:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001468:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 800146c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001470:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8001474:	2206      	movs	r2, #6
 8001476:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 8001478:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800147c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	3b01      	subs	r3, #1
 8001484:	2b05      	cmp	r3, #5
 8001486:	d827      	bhi.n	80014d8 <VL53L1_init_and_start_range+0x22c>
 8001488:	a201      	add	r2, pc, #4	@ (adr r2, 8001490 <VL53L1_init_and_start_range+0x1e4>)
 800148a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148e:	bf00      	nop
 8001490:	080014d1 	.word	0x080014d1
 8001494:	080014c9 	.word	0x080014c9
 8001498:	080014c1 	.word	0x080014c1
 800149c:	080014b9 	.word	0x080014b9
 80014a0:	080014b1 	.word	0x080014b1
 80014a4:	080014a9 	.word	0x080014a9
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 80014a8:	2301      	movs	r3, #1
 80014aa:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80014ae:	e017      	b.n	80014e0 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 80014b0:	230d      	movs	r3, #13
 80014b2:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80014b6:	e013      	b.n	80014e0 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 80014b8:	2324      	movs	r3, #36	@ 0x24
 80014ba:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80014be:	e00f      	b.n	80014e0 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 80014c0:	2344      	movs	r3, #68	@ 0x44
 80014c2:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80014c6:	e00b      	b.n	80014e0 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 80014c8:	235a      	movs	r3, #90	@ 0x5a
 80014ca:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80014ce:	e007      	b.n	80014e0 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 80014d0:	2371      	movs	r3, #113	@ 0x71
 80014d2:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80014d6:	e003      	b.n	80014e0 <VL53L1_init_and_start_range+0x234>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 80014d8:	2383      	movs	r3, #131	@ 0x83
 80014da:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80014de:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 80014e0:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80014e4:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
 80014e8:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 80014fa:	e00b      	b.n	8001514 <VL53L1_init_and_start_range+0x268>
		*pbuffer++ = 0;
 80014fc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001500:	1c5a      	adds	r2, r3, #1
 8001502:	f8c7 2138 	str.w	r2, [r7, #312]	@ 0x138
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800150a:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 800150e:	3301      	adds	r3, #1
 8001510:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8001514:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 8001518:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 800151c:	429a      	cmp	r2, r3
 800151e:	d3ed      	bcc.n	80014fc <VL53L1_init_and_start_range+0x250>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8001520:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001524:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b05      	cmp	r3, #5
 800152c:	d917      	bls.n	800155e <VL53L1_init_and_start_range+0x2b2>
 800152e:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8001532:	2b00      	cmp	r3, #0
 8001534:	d113      	bne.n	800155e <VL53L1_init_and_start_range+0x2b2>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8001536:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 800153a:	f1c3 0301 	rsb	r3, r3, #1
 800153e:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8001542:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 8001546:	f107 020c 	add.w	r2, r7, #12
 800154a:	4413      	add	r3, r2
 800154c:	461a      	mov	r2, r3
 800154e:	210b      	movs	r1, #11
 8001550:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8001554:	f001 fe0e 	bl	8003174 <VL53L1_i2c_encode_static_nvm_managed>
 8001558:	4603      	mov	r3, r0
 800155a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800155e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001562:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b04      	cmp	r3, #4
 800156a:	d917      	bls.n	800159c <VL53L1_init_and_start_range+0x2f0>
 800156c:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8001570:	2b00      	cmp	r3, #0
 8001572:	d113      	bne.n	800159c <VL53L1_init_and_start_range+0x2f0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8001574:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8001578:	f1c3 030d 	rsb	r3, r3, #13
 800157c:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8001580:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 8001584:	f107 020c 	add.w	r2, r7, #12
 8001588:	4413      	add	r3, r2
 800158a:	461a      	mov	r2, r3
 800158c:	2117      	movs	r1, #23
 800158e:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8001592:	f001 fecb 	bl	800332c <VL53L1_i2c_encode_customer_nvm_managed>
 8001596:	4603      	mov	r3, r0
 8001598:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800159c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80015a0:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d917      	bls.n	80015da <VL53L1_init_and_start_range+0x32e>
 80015aa:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d113      	bne.n	80015da <VL53L1_init_and_start_range+0x32e>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80015b2:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80015b6:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 80015ba:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80015be:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_config(
 80015c2:	f107 020c 	add.w	r2, r7, #12
 80015c6:	4413      	add	r3, r2
 80015c8:	461a      	mov	r2, r3
 80015ca:	2120      	movs	r1, #32
 80015cc:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 80015d0:	f001 ffea 	bl	80035a8 <VL53L1_i2c_encode_static_config>
 80015d4:	4603      	mov	r3, r0
 80015d6:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 80015da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80015de:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d917      	bls.n	8001618 <VL53L1_init_and_start_range+0x36c>
 80015e8:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d113      	bne.n	8001618 <VL53L1_init_and_start_range+0x36c>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80015f0:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80015f4:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 80015f8:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80015fc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_general_config(
 8001600:	f107 020c 	add.w	r2, r7, #12
 8001604:	4413      	add	r3, r2
 8001606:	461a      	mov	r2, r3
 8001608:	2116      	movs	r1, #22
 800160a:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800160e:	f002 f8ae 	bl	800376e <VL53L1_i2c_encode_general_config>
 8001612:	4603      	mov	r3, r0
 8001614:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8001618:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800161c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d917      	bls.n	8001656 <VL53L1_init_and_start_range+0x3aa>
 8001626:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 800162a:	2b00      	cmp	r3, #0
 800162c:	d113      	bne.n	8001656 <VL53L1_init_and_start_range+0x3aa>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800162e:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8001632:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8001636:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800163a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_timing_config(
 800163e:	f107 020c 	add.w	r2, r7, #12
 8001642:	4413      	add	r3, r2
 8001644:	461a      	mov	r2, r3
 8001646:	2117      	movs	r1, #23
 8001648:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800164c:	f002 f913 	bl	8003876 <VL53L1_i2c_encode_timing_config>
 8001650:	4603      	mov	r3, r0
 8001652:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8001656:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800165a:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d036      	beq.n	80016d2 <VL53L1_init_and_start_range+0x426>
 8001664:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8001668:	2b00      	cmp	r3, #0
 800166a:	d132      	bne.n	80016d2 <VL53L1_init_and_start_range+0x426>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800166c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8001670:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 8001674:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 8001678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800167c:	791b      	ldrb	r3, [r3, #4]
 800167e:	f003 0320 	and.w	r3, r3, #32
 8001682:	2b00      	cmp	r3, #0
 8001684:	d017      	beq.n	80016b6 <VL53L1_init_and_start_range+0x40a>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 8001686:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800168a:	789b      	ldrb	r3, [r3, #2]
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	b2da      	uxtb	r2, r3
 8001692:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001696:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 8001698:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800169c:	789b      	ldrb	r3, [r3, #2]
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80016a8:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 80016aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80016ae:	789a      	ldrb	r2, [r3, #2]
 80016b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80016b4:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80016b6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_dynamic_config(
 80016ba:	f107 020c 	add.w	r2, r7, #12
 80016be:	4413      	add	r3, r2
 80016c0:	461a      	mov	r2, r3
 80016c2:	2112      	movs	r1, #18
 80016c4:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80016c8:	f002 f957 	bl	800397a <VL53L1_i2c_encode_dynamic_config>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 80016d2:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d113      	bne.n	8001702 <VL53L1_init_and_start_range+0x456>

		i2c_buffer_offset_bytes = \
 80016da:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80016de:	f1c3 0383 	rsb	r3, r3, #131	@ 0x83
 80016e2:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80016e6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_system_control(
 80016ea:	f107 020c 	add.w	r2, r7, #12
 80016ee:	4413      	add	r3, r2
 80016f0:	461a      	mov	r2, r3
 80016f2:	2105      	movs	r1, #5
 80016f4:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80016f8:	f002 f9c4 	bl	8003a84 <VL53L1_i2c_encode_system_control>
 80016fc:	4603      	mov	r3, r0
 80016fe:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 8001702:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10f      	bne.n	800172a <VL53L1_init_and_start_range+0x47e>
		status =
			VL53L1_WriteMulti(
 800170a:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 800170e:	f107 020c 	add.w	r2, r7, #12
 8001712:	f8b7 1134 	ldrh.w	r1, [r7, #308]	@ 0x134
 8001716:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800171a:	f5a0 709e 	sub.w	r0, r0, #316	@ 0x13c
 800171e:	6800      	ldr	r0, [r0, #0]
 8001720:	f001 fc7e 	bl	8003020 <VL53L1_WriteMulti>
 8001724:	4603      	mov	r3, r0
 8001726:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 800172a:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 800172e:	2b00      	cmp	r3, #0
 8001730:	d109      	bne.n	8001746 <VL53L1_init_and_start_range+0x49a>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8001732:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001736:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800173a:	6818      	ldr	r0, [r3, #0]
 800173c:	f000 ff40 	bl	80025c0 <VL53L1_update_ll_driver_rd_state>
 8001740:	4603      	mov	r3, r0
 8001742:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	if (status == VL53L1_ERROR_NONE)
 8001746:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 800174a:	2b00      	cmp	r3, #0
 800174c:	d109      	bne.n	8001762 <VL53L1_init_and_start_range+0x4b6>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800174e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001752:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	f000 ffba 	bl	80026d0 <VL53L1_update_ll_driver_cfg_state>
 800175c:	4603      	mov	r3, r0
 800175e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	LOG_FUNCTION_END(status);

	return status;
 8001762:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
}
 8001766:	4618      	mov	r0, r3
 8001768:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	460b      	mov	r3, r1
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800177e:	2300      	movs	r3, #0
 8001780:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8001786:	897b      	ldrh	r3, [r7, #10]
 8001788:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800178c:	2b38      	cmp	r3, #56	@ 0x38
 800178e:	f200 8204 	bhi.w	8001b9a <VL53L1_get_tuning_parm+0x42a>
 8001792:	a201      	add	r2, pc, #4	@ (adr r2, 8001798 <VL53L1_get_tuning_parm+0x28>)
 8001794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001798:	0800187d 	.word	0x0800187d
 800179c:	0800188b 	.word	0x0800188b
 80017a0:	08001899 	.word	0x08001899
 80017a4:	080018a7 	.word	0x080018a7
 80017a8:	080018b5 	.word	0x080018b5
 80017ac:	080018c3 	.word	0x080018c3
 80017b0:	080018d1 	.word	0x080018d1
 80017b4:	080018df 	.word	0x080018df
 80017b8:	080018ed 	.word	0x080018ed
 80017bc:	080018fb 	.word	0x080018fb
 80017c0:	08001909 	.word	0x08001909
 80017c4:	08001917 	.word	0x08001917
 80017c8:	08001925 	.word	0x08001925
 80017cc:	08001933 	.word	0x08001933
 80017d0:	08001941 	.word	0x08001941
 80017d4:	0800194f 	.word	0x0800194f
 80017d8:	0800195d 	.word	0x0800195d
 80017dc:	0800196b 	.word	0x0800196b
 80017e0:	08001979 	.word	0x08001979
 80017e4:	08001987 	.word	0x08001987
 80017e8:	08001995 	.word	0x08001995
 80017ec:	080019a3 	.word	0x080019a3
 80017f0:	080019b1 	.word	0x080019b1
 80017f4:	080019bf 	.word	0x080019bf
 80017f8:	080019cd 	.word	0x080019cd
 80017fc:	080019db 	.word	0x080019db
 8001800:	080019e9 	.word	0x080019e9
 8001804:	080019f7 	.word	0x080019f7
 8001808:	08001a05 	.word	0x08001a05
 800180c:	08001a13 	.word	0x08001a13
 8001810:	08001a21 	.word	0x08001a21
 8001814:	08001a2f 	.word	0x08001a2f
 8001818:	08001a3d 	.word	0x08001a3d
 800181c:	08001a4b 	.word	0x08001a4b
 8001820:	08001a59 	.word	0x08001a59
 8001824:	08001a67 	.word	0x08001a67
 8001828:	08001a75 	.word	0x08001a75
 800182c:	08001a83 	.word	0x08001a83
 8001830:	08001a91 	.word	0x08001a91
 8001834:	08001a9f 	.word	0x08001a9f
 8001838:	08001aad 	.word	0x08001aad
 800183c:	08001abb 	.word	0x08001abb
 8001840:	08001ac9 	.word	0x08001ac9
 8001844:	08001ad7 	.word	0x08001ad7
 8001848:	08001ae5 	.word	0x08001ae5
 800184c:	08001af3 	.word	0x08001af3
 8001850:	08001b01 	.word	0x08001b01
 8001854:	08001b0f 	.word	0x08001b0f
 8001858:	08001b1d 	.word	0x08001b1d
 800185c:	08001b2b 	.word	0x08001b2b
 8001860:	08001b39 	.word	0x08001b39
 8001864:	08001b47 	.word	0x08001b47
 8001868:	08001b55 	.word	0x08001b55
 800186c:	08001b63 	.word	0x08001b63
 8001870:	08001b71 	.word	0x08001b71
 8001874:	08001b7f 	.word	0x08001b7f
 8001878:	08001b8d 	.word	0x08001b8d

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8001882:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	601a      	str	r2, [r3, #0]
	break;
 8001888:	e18e      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8001890:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	601a      	str	r2, [r3, #0]
	break;
 8001896:	e187      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 800189e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	601a      	str	r2, [r3, #0]
	break;
 80018a4:	e180      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80018ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	601a      	str	r2, [r3, #0]
	break;
 80018b2:	e179      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 80018ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	601a      	str	r2, [r3, #0]
	break;
 80018c0:	e172      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 80018c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	601a      	str	r2, [r3, #0]
	break;
 80018ce:	e16b      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 80018d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	601a      	str	r2, [r3, #0]
	break;
 80018dc:	e164      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 80018e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	601a      	str	r2, [r3, #0]
	break;
 80018ea:	e15d      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	@ 0xb6
 80018f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	601a      	str	r2, [r3, #0]
	break;
 80018f8:	e156      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8001900:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	601a      	str	r2, [r3, #0]
	break;
 8001906:	e14f      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 800190e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	601a      	str	r2, [r3, #0]
	break;
 8001914:	e148      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 800191c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	601a      	str	r2, [r3, #0]
	break;
 8001922:	e141      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 800192a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	601a      	str	r2, [r3, #0]
	break;
 8001930:	e13a      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 8001938:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	601a      	str	r2, [r3, #0]
	break;
 800193e:	e133      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8001946:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	601a      	str	r2, [r3, #0]
	break;
 800194c:	e12c      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8001954:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	601a      	str	r2, [r3, #0]
	break;
 800195a:	e125      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	f893 30c4 	ldrb.w	r3, [r3, #196]	@ 0xc4
 8001962:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	601a      	str	r2, [r3, #0]
	break;
 8001968:	e11e      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	f893 3140 	ldrb.w	r3, [r3, #320]	@ 0x140
 8001970:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	601a      	str	r2, [r3, #0]
	break;
 8001976:	e117      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 800197e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	601a      	str	r2, [r3, #0]
	break;
 8001984:	e110      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 800198c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	601a      	str	r2, [r3, #0]
	break;
 8001992:	e109      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 800199a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	601a      	str	r2, [r3, #0]
	break;
 80019a0:	e102      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	@ 0x13e
 80019a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	601a      	str	r2, [r3, #0]
	break;
 80019ae:	e0fb      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 80019b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	601a      	str	r2, [r3, #0]
	break;
 80019bc:	e0f4      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	f893 30ab 	ldrb.w	r3, [r3, #171]	@ 0xab
 80019c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	601a      	str	r2, [r3, #0]
	break;
 80019ca:	e0ed      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80019d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	601a      	str	r2, [r3, #0]
	break;
 80019d8:	e0e6      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80019e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	601a      	str	r2, [r3, #0]
	break;
 80019e6:	e0df      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 80019ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	601a      	str	r2, [r3, #0]
	break;
 80019f4:	e0d8      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 80019fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	601a      	str	r2, [r3, #0]
	break;
 8001a02:	e0d1      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	f893 30c6 	ldrb.w	r3, [r3, #198]	@ 0xc6
 8001a0a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	601a      	str	r2, [r3, #0]
	break;
 8001a10:	e0ca      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8001a18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	601a      	str	r2, [r3, #0]
	break;
 8001a1e:	e0c3      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8001a26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	601a      	str	r2, [r3, #0]
	break;
 8001a2c:	e0bc      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8001a34:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	601a      	str	r2, [r3, #0]
	break;
 8001a3a:	e0b5      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001a42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	601a      	str	r2, [r3, #0]
	break;
 8001a48:	e0ae      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	f8b3 3118 	ldrh.w	r3, [r3, #280]	@ 0x118
 8001a50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	601a      	str	r2, [r3, #0]
	break;
 8001a56:	e0a7      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 8001a5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	601a      	str	r2, [r3, #0]
	break;
 8001a64:	e0a0      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 8001a6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	601a      	str	r2, [r3, #0]
	break;
 8001a72:	e099      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001a7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	601a      	str	r2, [r3, #0]
	break;
 8001a80:	e092      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001a88:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	601a      	str	r2, [r3, #0]
	break;
 8001a8e:	e08b      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001a96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	601a      	str	r2, [r3, #0]
	break;
 8001a9c:	e084      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001aa4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	601a      	str	r2, [r3, #0]
	break;
 8001aaa:	e07d      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8001ab2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	601a      	str	r2, [r3, #0]
	break;
 8001ab8:	e076      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 8001ac0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	601a      	str	r2, [r3, #0]
	break;
 8001ac6:	e06f      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	f893 3156 	ldrb.w	r3, [r3, #342]	@ 0x156
 8001ace:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	601a      	str	r2, [r3, #0]
	break;
 8001ad4:	e068      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	f893 3121 	ldrb.w	r3, [r3, #289]	@ 0x121
 8001adc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	601a      	str	r2, [r3, #0]
	break;
 8001ae2:	e061      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 8001aea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	601a      	str	r2, [r3, #0]
	break;
 8001af0:	e05a      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	f8b3 3128 	ldrh.w	r3, [r3, #296]	@ 0x128
 8001af8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	601a      	str	r2, [r3, #0]
	break;
 8001afe:	e053      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	@ 0xca
 8001b06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	601a      	str	r2, [r3, #0]
	break;
 8001b0c:	e04c      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 8001b14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	601a      	str	r2, [r3, #0]
	break;
 8001b1a:	e045      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001b22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	601a      	str	r2, [r3, #0]
	break;
 8001b28:	e03e      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001b30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	601a      	str	r2, [r3, #0]
	break;
 8001b36:	e037      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	601a      	str	r2, [r3, #0]
	break;
 8001b44:	e030      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001b4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	601a      	str	r2, [r3, #0]
	break;
 8001b52:	e029      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001b5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	601a      	str	r2, [r3, #0]
	break;
 8001b60:	e022      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	601a      	str	r2, [r3, #0]
	break;
 8001b6e:	e01b      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8001b76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	601a      	str	r2, [r3, #0]
	break;
 8001b7c:	e014      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	601a      	str	r2, [r3, #0]
	break;
 8001b8a:	e00d      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001b92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	601a      	str	r2, [r3, #0]
	break;
 8001b98:	e006      	b.n	8001ba8 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001ba0:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8001ba2:	23fc      	movs	r3, #252	@ 0xfc
 8001ba4:	75fb      	strb	r3, [r7, #23]
	break;
 8001ba6:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8001ba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	371c      	adds	r7, #28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2208      	movs	r2, #8
 8001bc8:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	220b      	movs	r2, #11
 8001bce:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bd6:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8001bde:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001be6:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8001bee:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8001bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2212      	movs	r2, #18
 8001c16:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	220f      	movs	r2, #15
 8001c1c:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2202      	movs	r2, #2
 8001c22:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8001c2a:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	220c      	movs	r2, #12
 8001c30:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8001c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	895b      	ldrh	r3, [r3, #10]
 8001c54:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	895b      	ldrh	r3, [r3, #10]
 8001c72:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2240      	movs	r2, #64	@ 0x40
 8001c96:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10d      	bne.n	8001cbc <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d108      	bne.n	8001cbc <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d103      	bne.n	8001cbc <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	741a      	strb	r2, [r3, #16]
 8001cba:	e002      	b.n	8001cc2 <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 8001cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d114      	bne.n	8001cf4 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d110      	bne.n	8001cf4 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	7d1b      	ldrb	r3, [r3, #20]
 8001ce6:	f000 ff0d 	bl	8002b04 <VL53L1_calc_range_ignore_threshold>
 8001cea:	4603      	mov	r3, r0
 8001cec:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	82da      	strh	r2, [r3, #22]
 8001cf2:	e002      	b.n	8001cfa <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 8001cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b085      	sub	sp, #20
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8001d18:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d20:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8001d28:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8001d30:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2208      	movs	r2, #8
 8001d36:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2228      	movs	r2, #40	@ 0x28
 8001d3c:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2209      	movs	r2, #9
 8001d42:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8001d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f248 0203 	movw	r2, #32771	@ 0x8003
 8001d66:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f248 0201 	movw	r2, #32769	@ 0x8001
 8001d6e:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f248 0241 	movw	r2, #32833	@ 0x8041
 8001d76:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	220e      	movs	r2, #14
 8001d7c:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	220a      	movs	r2, #10
 8001d82:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2206      	movs	r2, #6
 8001d88:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	220e      	movs	r2, #14
 8001d8e:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	220a      	movs	r2, #10
 8001d94:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2206      	movs	r2, #6
 8001d9a:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2221      	movs	r2, #33	@ 0x21
 8001da6:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001dba:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001dc2:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001dca:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	22c0      	movs	r2, #192	@ 0xc0
 8001dd0:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	22c0      	movs	r2, #192	@ 0xc0
 8001dd6:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	22c0      	movs	r2, #192	@ 0xc0
 8001ddc:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2208      	movs	r2, #8
 8001de2:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2210      	movs	r2, #16
 8001de8:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2202      	movs	r2, #2
 8001df6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2202      	movs	r2, #2
 8001e06:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8001e18:	84da      	strh	r2, [r3, #38]	@ 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8001e20:	851a      	strh	r2, [r3, #40]	@ 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f248 0230 	movw	r2, #32816	@ 0x8030
 8001e28:	62da      	str	r2, [r3, #44]	@ 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e30:	631a      	str	r2, [r3, #48]	@ 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001e38:	635a      	str	r2, [r3, #52]	@ 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001e40:	639a      	str	r2, [r3, #56]	@ 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f24f 6218 	movw	r2, #63000	@ 0xf618
 8001e48:	641a      	str	r2, [r3, #64]	@ 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8001e50:	645a      	str	r2, [r3, #68]	@ 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	63da      	str	r2, [r3, #60]	@ 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001e5e:	649a      	str	r2, [r3, #72]	@ 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8001e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
 8001e7c:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8001e88:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2211      	movs	r2, #17
 8001eca:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2202      	movs	r2, #2
 8001edc:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2208      	movs	r2, #8
 8001ee2:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8001eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eec:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef4:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8001efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efc:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2201      	movs	r2, #1
 8001f08:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	22ff      	movs	r2, #255	@ 0xff
 8001f20:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8001f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f24:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2220      	movs	r2, #32
 8001f54:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	220b      	movs	r2, #11
 8001f5a:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5e:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2202      	movs	r2, #2
 8001f68:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	220d      	movs	r2, #13
 8001f6e:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8001f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f72:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2201      	movs	r2, #1
 8001f82:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2200      	movs	r2, #0
 8001f88:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f44f 420c 	mov.w	r2, #35840	@ 0x8c00
 8001f96:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2238      	movs	r2, #56	@ 0x38
 8001fa2:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	22ff      	movs	r2, #255	@ 0xff
 8001fa8:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	2201      	movs	r2, #1
 8001fae:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	221a      	movs	r2, #26
 8001fba:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	22cc      	movs	r2, #204	@ 0xcc
 8001fd2:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	220b      	movs	r2, #11
 8001fd8:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	22f5      	movs	r2, #245	@ 0xf5
 8001fe4:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2209      	movs	r2, #9
 8001fea:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8001fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fee:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff6:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2208      	movs	r2, #8
 8002000:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2278      	movs	r2, #120	@ 0x78
 8002006:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	2201      	movs	r2, #1
 8002018:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2200      	movs	r2, #0
 800201e:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	2200      	movs	r2, #0
 8002024:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2200      	movs	r2, #0
 800202a:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202e:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
	pdynamic->system__seed_config =
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	220b      	movs	r2, #11
 800203a:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	2209      	movs	r2, #9
 8002040:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8002042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002044:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204c:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2201      	movs	r2, #1
 8002056:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8002058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205a:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
	pdynamic->sd_config__first_order_select =
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8002062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002064:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
	pdynamic->sd_config__quantifier         =
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	22c7      	movs	r2, #199	@ 0xc7
 8002070:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	22ff      	movs	r2, #255	@ 0xff
 8002076:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	22db      	movs	r2, #219	@ 0xdb
 800207c:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2202      	movs	r2, #2
 8002082:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 8002084:	6a3b      	ldr	r3, [r7, #32]
 8002086:	2200      	movs	r2, #0
 8002088:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	2201      	movs	r2, #1
 800208e:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	2201      	movs	r2, #1
 8002094:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	2221      	movs	r2, #33	@ 0x21
 800209a:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800209c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	371c      	adds	r7, #28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af02      	add	r7, sp, #8
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80020be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f7ff fecf 	bl	8001e70 <VL53L1_preset_mode_standard_ranging>
 80020d2:	4603      	mov	r3, r0
 80020d4:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80020d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d121      	bne.n	8002122 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2207      	movs	r2, #7
 80020e2:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2205      	movs	r2, #5
 80020e8:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ec:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 80020f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f4:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2208      	movs	r2, #8
 80020fe:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2238      	movs	r2, #56	@ 0x38
 8002104:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2207      	movs	r2, #7
 800210a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2205      	movs	r2, #5
 8002110:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211c:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8002122:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b088      	sub	sp, #32
 8002132:	af02      	add	r7, sp, #8
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800213c:	2300      	movs	r3, #0
 800213e:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8002140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f7ff fe8e 	bl	8001e70 <VL53L1_preset_mode_standard_ranging>
 8002154:	4603      	mov	r3, r0
 8002156:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8002158:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d121      	bne.n	80021a4 <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	220f      	movs	r2, #15
 8002164:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	220d      	movs	r2, #13
 800216a:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800216c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216e:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8002174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002176:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2208      	movs	r2, #8
 8002180:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	22b8      	movs	r2, #184	@ 0xb8
 8002186:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	220f      	movs	r2, #15
 800218c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	220d      	movs	r2, #13
 8002192:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 8002194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002196:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219e:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 80021a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af02      	add	r7, sp, #8
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
 80021bc:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80021be:	2300      	movs	r3, #0
 80021c0:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80021c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c4:	9301      	str	r3, [sp, #4]
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	68b9      	ldr	r1, [r7, #8]
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f7ff fe4d 	bl	8001e70 <VL53L1_preset_mode_standard_ranging>
 80021d6:	4603      	mov	r3, r0
 80021d8:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80021da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d105      	bne.n	80021ee <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2202      	movs	r2, #2
 80021e6:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	223b      	movs	r2, #59	@ 0x3b
 80021ec:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80021ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b088      	sub	sp, #32
 80021fe:	af02      	add	r7, sp, #8
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002208:	2300      	movs	r3, #0
 800220a:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800220c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f7ff fe28 	bl	8001e70 <VL53L1_preset_mode_standard_ranging>
 8002220:	4603      	mov	r3, r0
 8002222:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8002224:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d105      	bne.n	8002238 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2202      	movs	r2, #2
 8002230:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	225b      	movs	r2, #91	@ 0x5b
 8002236:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8002238:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002252:	2300      	movs	r3, #0
 8002254:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8002256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002258:	9301      	str	r3, [sp, #4]
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68b9      	ldr	r1, [r7, #8]
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f7ff fe03 	bl	8001e70 <VL53L1_preset_mode_standard_ranging>
 800226a:	4603      	mov	r3, r0
 800226c:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800226e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d11a      	bne.n	80022ac <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2200      	movs	r2, #0
 800227a:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	22b1      	movs	r2, #177	@ 0xb1
 8002286:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	22d4      	movs	r2, #212	@ 0xd4
 8002292:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800229a:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800229c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	2240      	movs	r2, #64	@ 0x40
 80022aa:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80022ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af02      	add	r7, sp, #8
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 80022ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f7ff fee7 	bl	80020ac <VL53L1_preset_mode_standard_ranging_short_range>
 80022de:	4603      	mov	r3, r0
 80022e0:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80022e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d11a      	bne.n	8002320 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	2200      	movs	r2, #0
 80022ee:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2284      	movs	r2, #132	@ 0x84
 80022fa:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	22b1      	movs	r2, #177	@ 0xb1
 8002306:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800230e:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8002310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002312:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	2240      	movs	r2, #64	@ 0x40
 800231e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8002320:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800233a:	2300      	movs	r3, #0
 800233c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 800233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002340:	9301      	str	r3, [sp, #4]
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	68b9      	ldr	r1, [r7, #8]
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f7ff feee 	bl	800212e <VL53L1_preset_mode_standard_ranging_long_range>
 8002352:	4603      	mov	r3, r0
 8002354:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8002356:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d11a      	bne.n	8002394 <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2200      	movs	r2, #0
 8002362:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2297      	movs	r2, #151	@ 0x97
 800236e:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	22b1      	movs	r2, #177	@ 0xb1
 800237a:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8002382:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8002384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002386:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	2240      	movs	r2, #64	@ 0x40
 8002392:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8002394:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80023ae:	2300      	movs	r3, #0
 80023b0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 80023b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	68b9      	ldr	r1, [r7, #8]
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f7ff ff3f 	bl	8002244 <VL53L1_preset_mode_timed_ranging>
 80023c6:	4603      	mov	r3, r0
 80023c8:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 80023ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d106      	bne.n	80023e0 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 80023d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023d4:	6839      	ldr	r1, [r7, #0]
 80023d6:	68b8      	ldr	r0, [r7, #8]
 80023d8:	f000 fd6b 	bl	8002eb2 <VL53L1_config_low_power_auto_mode>
 80023dc:	4603      	mov	r3, r0
 80023de:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 80023e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
 80023f8:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 80023fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002400:	9301      	str	r3, [sp, #4]
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	68b9      	ldr	r1, [r7, #8]
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f7ff ff53 	bl	80022b8 <VL53L1_preset_mode_timed_ranging_short_range>
 8002412:	4603      	mov	r3, r0
 8002414:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8002416:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d106      	bne.n	800242c <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800241e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002420:	6839      	ldr	r1, [r7, #0]
 8002422:	68b8      	ldr	r0, [r7, #8]
 8002424:	f000 fd45 	bl	8002eb2 <VL53L1_config_low_power_auto_mode>
 8002428:	4603      	mov	r3, r0
 800242a:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800242c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af02      	add	r7, sp, #8
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
 8002444:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002446:	2300      	movs	r3, #0
 8002448:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	9301      	str	r3, [sp, #4]
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	68b9      	ldr	r1, [r7, #8]
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f7ff ff67 	bl	800232c <VL53L1_preset_mode_timed_ranging_long_range>
 800245e:	4603      	mov	r3, r0
 8002460:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8002462:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800246a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800246c:	6839      	ldr	r1, [r7, #0]
 800246e:	68b8      	ldr	r0, [r7, #8]
 8002470:	f000 fd1f 	bl	8002eb2 <VL53L1_config_low_power_auto_mode>
 8002474:	4603      	mov	r3, r0
 8002476:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8002478:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002492:	2300      	movs	r3, #0
 8002494:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8002496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002498:	9301      	str	r3, [sp, #4]
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	68b9      	ldr	r1, [r7, #8]
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f7ff fce3 	bl	8001e70 <VL53L1_preset_mode_standard_ranging>
 80024aa:	4603      	mov	r3, r0
 80024ac:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80024ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d116      	bne.n	80024e4 <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	2200      	movs	r2, #0
 80024ba:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	22b1      	movs	r2, #177	@ 0xb1
 80024c6:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	22d4      	movs	r2, #212	@ 0xd4
 80024d2:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80024d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d6:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	2210      	movs	r2, #16
 80024e2:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 80024e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
 80024fc:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80024fe:	2300      	movs	r3, #0
 8002500:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8002502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	68b9      	ldr	r1, [r7, #8]
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f7ff fcad 	bl	8001e70 <VL53L1_preset_mode_standard_ranging>
 8002516:	4603      	mov	r3, r0
 8002518:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800251a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d102      	bne.n	8002528 <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	2201      	movs	r2, #1
 8002526:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 8002528:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	220a      	movs	r2, #10
 8002554:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f44f 62e6 	mov.w	r2, #1840	@ 0x730
 800255e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	332c      	adds	r3, #44	@ 0x2c
 8002580:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2200      	movs	r2, #0
 800258c:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2202      	movs	r2, #2
 8002592:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2200      	movs	r2, #0
 8002598:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2200      	movs	r2, #0
 80025a4:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2202      	movs	r2, #2
 80025aa:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2200      	movs	r2, #0
 80025b0:	71da      	strb	r2, [r3, #7]

}
 80025b2:	bf00      	nop
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	332c      	adds	r3, #44	@ 0x2c
 80025d4:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 80025dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10c      	bne.n	80025fe <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2203      	movs	r2, #3
 80025e8:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2202      	movs	r2, #2
 80025f4:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	71da      	strb	r2, [r3, #7]
 80025fc:	e060      	b.n	80026c0 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	795b      	ldrb	r3, [r3, #5]
 8002602:	2bff      	cmp	r3, #255	@ 0xff
 8002604:	d103      	bne.n	800260e <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2280      	movs	r2, #128	@ 0x80
 800260a:	715a      	strb	r2, [r3, #5]
 800260c:	e005      	b.n	800261a <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	795b      	ldrb	r3, [r3, #5]
 8002612:	3301      	adds	r3, #1
 8002614:	b2da      	uxtb	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	799b      	ldrb	r3, [r3, #6]
 800261e:	f083 0302 	eor.w	r3, r3, #2
 8002622:	b2da      	uxtb	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	791b      	ldrb	r3, [r3, #4]
 800262c:	3b03      	subs	r3, #3
 800262e:	2b05      	cmp	r3, #5
 8002630:	d839      	bhi.n	80026a6 <VL53L1_update_ll_driver_rd_state+0xe6>
 8002632:	a201      	add	r2, pc, #4	@ (adr r2, 8002638 <VL53L1_update_ll_driver_rd_state+0x78>)
 8002634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002638:	08002651 	.word	0x08002651
 800263c:	080026a7 	.word	0x080026a7
 8002640:	080026a7 	.word	0x080026a7
 8002644:	0800267b 	.word	0x0800267b
 8002648:	08002689 	.word	0x08002689
 800264c:	08002691 	.word	0x08002691

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	f893 31c6 	ldrb.w	r3, [r3, #454]	@ 0x1c6
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	dd03      	ble.n	8002666 <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2206      	movs	r2, #6
 8002662:	711a      	strb	r2, [r3, #4]
 8002664:	e002      	b.n	800266c <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2208      	movs	r2, #8
 800266a:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	71da      	strb	r2, [r3, #7]

		break;
 8002678:	e022      	b.n	80026c0 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2208      	movs	r2, #8
 8002684:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8002686:	e01b      	b.n	80026c0 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2208      	movs	r2, #8
 800268c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800268e:	e017      	b.n	80026c0 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	79db      	ldrb	r3, [r3, #7]
 8002694:	f083 0301 	eor.w	r3, r3, #1
 8002698:	b2da      	uxtb	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2208      	movs	r2, #8
 80026a2:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 80026a4:	e00c      	b.n	80026c0 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2203      	movs	r2, #3
 80026aa:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2202      	movs	r2, #2
 80026b6:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	71da      	strb	r2, [r3, #7]

		break;
 80026be:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 80026c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	371c      	adds	r7, #28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <VL53L1_update_ll_driver_cfg_state>:
}


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 80026d8:	2300      	movs	r3, #0
 80026da:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	332c      	adds	r3, #44	@ 0x2c
 80026e4:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 80026ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10c      	bne.n	800270e <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2203      	movs	r2, #3
 80026f8:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2202      	movs	r2, #2
 8002704:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	70da      	strb	r2, [r3, #3]
 800270c:	e03e      	b.n	800278c <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	785b      	ldrb	r3, [r3, #1]
 8002712:	2bff      	cmp	r3, #255	@ 0xff
 8002714:	d103      	bne.n	800271e <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2280      	movs	r2, #128	@ 0x80
 800271a:	705a      	strb	r2, [r3, #1]
 800271c:	e005      	b.n	800272a <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	785b      	ldrb	r3, [r3, #1]
 8002722:	3301      	adds	r3, #1
 8002724:	b2da      	uxtb	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	789b      	ldrb	r3, [r3, #2]
 800272e:	f083 0302 	eor.w	r3, r3, #2
 8002732:	b2da      	uxtb	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d002      	beq.n	8002746 <VL53L1_update_ll_driver_cfg_state+0x76>
 8002740:	2b04      	cmp	r3, #4
 8002742:	d00e      	beq.n	8002762 <VL53L1_update_ll_driver_cfg_state+0x92>
 8002744:	e015      	b.n	8002772 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	78db      	ldrb	r3, [r3, #3]
 800274a:	f083 0301 	eor.w	r3, r3, #1
 800274e:	b2da      	uxtb	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2201      	movs	r2, #1
 8002758:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2204      	movs	r2, #4
 800275e:	701a      	strb	r2, [r3, #0]
		break;
 8002760:	e014      	b.n	800278c <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	78db      	ldrb	r3, [r3, #3]
 8002766:	f083 0301 	eor.w	r3, r3, #1
 800276a:	b2da      	uxtb	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	70da      	strb	r2, [r3, #3]

		break;
 8002770:	e00c      	b.n	800278c <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2203      	movs	r2, #3
 8002776:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2202      	movs	r2, #2
 8002782:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	70da      	strb	r2, [r3, #3]

		break;
 800278a:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800278c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002790:	4618      	mov	r0, r3
 8002792:	371c      	adds	r7, #28
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	7c1a      	ldrb	r2, [r3, #16]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	3301      	adds	r3, #1
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	7c52      	ldrb	r2, [r2, #17]
 80027b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	3302      	adds	r3, #2
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	7c92      	ldrb	r2, [r2, #18]
 80027c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	3303      	adds	r3, #3
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	7cd2      	ldrb	r2, [r2, #19]
 80027ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	3304      	adds	r3, #4
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	7d12      	ldrb	r2, [r2, #20]
 80027d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	3305      	adds	r3, #5
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	7d52      	ldrb	r2, [r2, #21]
 80027de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	3306      	adds	r3, #6
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	7d92      	ldrb	r2, [r2, #22]
 80027e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	3307      	adds	r3, #7
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	7dd2      	ldrb	r2, [r2, #23]
 80027f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	3308      	adds	r3, #8
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	7e12      	ldrb	r2, [r2, #24]
 80027fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	3309      	adds	r3, #9
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	7e52      	ldrb	r2, [r2, #25]
 8002806:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	330a      	adds	r3, #10
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	7e92      	ldrb	r2, [r2, #26]
 8002810:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	330b      	adds	r3, #11
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	7ed2      	ldrb	r2, [r2, #27]
 800281a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	330c      	adds	r3, #12
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	7f12      	ldrb	r2, [r2, #28]
 8002824:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	330d      	adds	r3, #13
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	7f52      	ldrb	r2, [r2, #29]
 800282e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	330e      	adds	r3, #14
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	7f92      	ldrb	r2, [r2, #30]
 8002838:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	330f      	adds	r3, #15
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	7fd2      	ldrb	r2, [r2, #31]
 8002842:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	3310      	adds	r3, #16
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800284e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	3311      	adds	r3, #17
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 800285a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	3312      	adds	r3, #18
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8002866:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	3313      	adds	r3, #19
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8002872:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	3314      	adds	r3, #20
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800287e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	3315      	adds	r3, #21
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 800288a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	3316      	adds	r3, #22
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8002896:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	3317      	adds	r3, #23
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 80028a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	3318      	adds	r3, #24
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 80028ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	3319      	adds	r3, #25
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 80028ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	331a      	adds	r3, #26
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 80028c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	331b      	adds	r3, #27
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 80028d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	331c      	adds	r3, #28
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 80028de:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	331d      	adds	r3, #29
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	f892 202d 	ldrb.w	r2, [r2, #45]	@ 0x2d
 80028ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	331e      	adds	r3, #30
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 80028f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	331f      	adds	r3, #31
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 8002902:	701a      	strb	r2, [r3, #0]
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	603a      	str	r2, [r7, #0]
 800291a:	80fb      	strh	r3, [r7, #6]
 800291c:	460b      	mov	r3, r1
 800291e:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800292c:	2300      	movs	r3, #0
 800292e:	81fb      	strh	r3, [r7, #14]
 8002930:	e00e      	b.n	8002950 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8002932:	88ba      	ldrh	r2, [r7, #4]
 8002934:	89fb      	ldrh	r3, [r7, #14]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	3b01      	subs	r3, #1
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	4413      	add	r3, r2
 800293e:	89ba      	ldrh	r2, [r7, #12]
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8002944:	89bb      	ldrh	r3, [r7, #12]
 8002946:	0a1b      	lsrs	r3, r3, #8
 8002948:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800294a:	89fb      	ldrh	r3, [r7, #14]
 800294c:	3301      	adds	r3, #1
 800294e:	81fb      	strh	r3, [r7, #14]
 8002950:	89fa      	ldrh	r2, [r7, #14]
 8002952:	88bb      	ldrh	r3, [r7, #4]
 8002954:	429a      	cmp	r2, r3
 8002956:	d3ec      	bcc.n	8002932 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 8002958:	bf00      	nop
 800295a:	bf00      	nop
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8002966:	b480      	push	{r7}
 8002968:	b085      	sub	sp, #20
 800296a:	af00      	add	r7, sp, #0
 800296c:	4603      	mov	r3, r0
 800296e:	6039      	str	r1, [r7, #0]
 8002970:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 8002972:	2300      	movs	r3, #0
 8002974:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 8002976:	e00a      	b.n	800298e <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 8002978:	89fb      	ldrh	r3, [r7, #14]
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	b21a      	sxth	r2, r3
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	1c59      	adds	r1, r3, #1
 8002982:	6039      	str	r1, [r7, #0]
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	b21b      	sxth	r3, r3
 8002988:	4313      	orrs	r3, r2
 800298a:	b21b      	sxth	r3, r3
 800298c:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	1e5a      	subs	r2, r3, #1
 8002992:	80fa      	strh	r2, [r7, #6]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1ef      	bne.n	8002978 <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 8002998:	89fb      	ldrh	r3, [r7, #14]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b085      	sub	sp, #20
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	4603      	mov	r3, r0
 80029ae:	603a      	str	r2, [r7, #0]
 80029b0:	80fb      	strh	r3, [r7, #6]
 80029b2:	460b      	mov	r3, r1
 80029b4:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 80029b6:	2300      	movs	r3, #0
 80029b8:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 80029c2:	2300      	movs	r3, #0
 80029c4:	81fb      	strh	r3, [r7, #14]
 80029c6:	e00f      	b.n	80029e8 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 80029c8:	88ba      	ldrh	r2, [r7, #4]
 80029ca:	89fb      	ldrh	r3, [r7, #14]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	3b01      	subs	r3, #1
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	4413      	add	r3, r2
 80029d4:	89ba      	ldrh	r2, [r7, #12]
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 80029da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80029de:	121b      	asrs	r3, r3, #8
 80029e0:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 80029e2:	89fb      	ldrh	r3, [r7, #14]
 80029e4:	3301      	adds	r3, #1
 80029e6:	81fb      	strh	r3, [r7, #14]
 80029e8:	89fa      	ldrh	r2, [r7, #14]
 80029ea:	88bb      	ldrh	r3, [r7, #4]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d3eb      	bcc.n	80029c8 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b085      	sub	sp, #20
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	4603      	mov	r3, r0
 8002a06:	6039      	str	r1, [r7, #0]
 8002a08:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	b25b      	sxtb	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	da0e      	bge.n	8002a36 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 8002a18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a1c:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 8002a1e:	e00a      	b.n	8002a36 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 8002a20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a24:	021b      	lsls	r3, r3, #8
 8002a26:	b21a      	sxth	r2, r3
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	1c59      	adds	r1, r3, #1
 8002a2c:	6039      	str	r1, [r7, #0]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	b21b      	sxth	r3, r3
 8002a32:	4313      	orrs	r3, r2
 8002a34:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	1e5a      	subs	r2, r3, #1
 8002a3a:	80fa      	strh	r2, [r7, #6]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1ef      	bne.n	8002a20 <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 8002a40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	82fb      	strh	r3, [r7, #22]
 8002a6e:	e00e      	b.n	8002a8e <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8002a70:	897a      	ldrh	r2, [r7, #10]
 8002a72:	8afb      	ldrh	r3, [r7, #22]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	3b01      	subs	r3, #1
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	0a1b      	lsrs	r3, r3, #8
 8002a86:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 8002a88:	8afb      	ldrh	r3, [r7, #22]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	82fb      	strh	r3, [r7, #22]
 8002a8e:	8afa      	ldrh	r2, [r7, #22]
 8002a90:	897b      	ldrh	r3, [r7, #10]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d3ec      	bcc.n	8002a70 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 8002a96:	bf00      	nop
 8002a98:	bf00      	nop
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	460a      	mov	r2, r1
 8002aae:	80fb      	strh	r3, [r7, #6]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 fa15 	bl	8002ef2 <VL53L1_calc_pll_period_us>
 8002ac8:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 8002aca:	797b      	ldrb	r3, [r7, #5]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 fa24 	bl	8002f1a <VL53L1_decode_vcsel_period>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4413      	add	r3, r2
 8002ade:	021b      	lsls	r3, r3, #8
 8002ae0:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	099b      	lsrs	r3, r3, #6
 8002ae6:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 8002ae8:	7cfa      	ldrb	r2, [r7, #19]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	fb02 f303 	mul.w	r3, r2, r3
 8002af0:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	099b      	lsrs	r3, r3, #6
 8002af6:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 8002af8:	68fb      	ldr	r3, [r7, #12]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b089      	sub	sp, #36	@ 0x24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	4608      	mov	r0, r1
 8002b0e:	4611      	mov	r1, r2
 8002b10:	461a      	mov	r2, r3
 8002b12:	4603      	mov	r3, r0
 8002b14:	817b      	strh	r3, [r7, #10]
 8002b16:	460b      	mov	r3, r1
 8002b18:	813b      	strh	r3, [r7, #8]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	4a23      	ldr	r2, [pc, #140]	@ (8002bc4 <VL53L1_calc_range_ignore_threshold+0xc0>)
 8002b38:	fb82 1203 	smull	r1, r2, r2, r3
 8002b3c:	1192      	asrs	r2, r2, #6
 8002b3e:	17db      	asrs	r3, r3, #31
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 8002b44:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	da03      	bge.n	8002b54 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8002b4c:	897b      	ldrh	r3, [r7, #10]
 8002b4e:	425b      	negs	r3, r3
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 8002b54:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	da03      	bge.n	8002b64 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8002b5c:	893b      	ldrh	r3, [r7, #8]
 8002b5e:	425b      	negs	r3, r3
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 8002b64:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002b68:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	015b      	lsls	r3, r3, #5
 8002b70:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	4a13      	ldr	r2, [pc, #76]	@ (8002bc4 <VL53L1_calc_range_ignore_threshold+0xc0>)
 8002b76:	fb82 1203 	smull	r1, r2, r2, r3
 8002b7a:	1192      	asrs	r2, r2, #6
 8002b7c:	17db      	asrs	r3, r3, #31
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4413      	add	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8002b8a:	79fa      	ldrb	r2, [r7, #7]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	fb02 f303 	mul.w	r3, r2, r3
 8002b92:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	3310      	adds	r3, #16
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	da00      	bge.n	8002b9e <VL53L1_calc_range_ignore_threshold+0x9a>
 8002b9c:	331f      	adds	r3, #31
 8002b9e:	115b      	asrs	r3, r3, #5
 8002ba0:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ba8:	db03      	blt.n	8002bb2 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 8002baa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002bae:	83fb      	strh	r3, [r7, #30]
 8002bb0:	e001      	b.n	8002bb6 <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8002bb6:	8bfb      	ldrh	r3, [r7, #30]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3724      	adds	r7, #36	@ 0x24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	10624dd3 	.word	0x10624dd3

08002bc8 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	031a      	lsls	r2, r3, #12
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	085b      	lsrs	r3, r3, #1
 8002bde:	441a      	add	r2, r3
	timeout_mclks   =
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be6:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8002be8:	68fb      	ldr	r3, [r7, #12]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b084      	sub	sp, #16
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 8002c08:	6839      	ldr	r1, [r7, #0]
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff ffdc 	bl	8002bc8 <VL53L1_calc_timeout_mclks>
 8002c10:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f860 	bl	8002cd8 <VL53L1_encode_timeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 8002c1c:	897b      	ldrh	r3, [r7, #10]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 8002c26:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 8002c32:	2100      	movs	r1, #0
 8002c34:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 8002c36:	f04f 0000 	mov.w	r0, #0
 8002c3a:	f04f 0100 	mov.w	r1, #0
 8002c3e:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	2000      	movs	r0, #0
 8002c46:	4688      	mov	r8, r1
 8002c48:	4681      	mov	r9, r0
 8002c4a:	6839      	ldr	r1, [r7, #0]
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	460c      	mov	r4, r1
 8002c50:	4605      	mov	r5, r0
 8002c52:	fb04 f009 	mul.w	r0, r4, r9
 8002c56:	fb08 f105 	mul.w	r1, r8, r5
 8002c5a:	4401      	add	r1, r0
 8002c5c:	fba8 2304 	umull	r2, r3, r8, r4
 8002c60:	4419      	add	r1, r3
 8002c62:	460b      	mov	r3, r1
 8002c64:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002c68:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 8002c6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c70:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 8002c74:	f143 0b00 	adc.w	fp, r3, #0
 8002c78:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 8002c7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	0b02      	lsrs	r2, r0, #12
 8002c8a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8002c8e:	0b0b      	lsrs	r3, r1, #12
 8002c90:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 8002c98:	697b      	ldr	r3, [r7, #20]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	371c      	adds	r7, #28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ca4:	4770      	bx	lr

08002ca6 <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	6039      	str	r1, [r7, #0]
 8002cb0:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 f835 	bl	8002d2c <VL53L1_decode_timeout>
 8002cc2:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 8002cc4:	6839      	ldr	r1, [r7, #0]
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f7ff ffad 	bl	8002c26 <VL53L1_calc_timeout_us>
 8002ccc:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 8002cce:	68bb      	ldr	r3, [r7, #8]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d015      	beq.n	8002d1e <VL53L1_encode_timeout+0x46>
		ls_byte = timeout_mclks - 1;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8002cf8:	e005      	b.n	8002d06 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8002d00:	89fb      	ldrh	r3, [r7, #14]
 8002d02:	3301      	adds	r3, #1
 8002d04:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	2bff      	cmp	r3, #255	@ 0xff
 8002d0a:	d8f6      	bhi.n	8002cfa <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8002d0c:	89fb      	ldrh	r3, [r7, #14]
 8002d0e:	021b      	lsls	r3, r3, #8
 8002d10:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8002d1a:	4413      	add	r3, r2
 8002d1c:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8002d1e:	8afb      	ldrh	r3, [r7, #22]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	371c      	adds	r7, #28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8002d3e:	88fa      	ldrh	r2, [r7, #6]
 8002d40:	0a12      	lsrs	r2, r2, #8
 8002d42:	b292      	uxth	r2, r2
 8002d44:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8002d46:	3301      	adds	r3, #1
 8002d48:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8002d66:	2300      	movs	r3, #0
 8002d68:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8002d76:	887b      	ldrh	r3, [r7, #2]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d102      	bne.n	8002d82 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8002d7c:	23f1      	movs	r3, #241	@ 0xf1
 8002d7e:	77fb      	strb	r3, [r7, #31]
 8002d80:	e05d      	b.n	8002e3e <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 8002d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d84:	799a      	ldrb	r2, [r3, #6]
 8002d86:	887b      	ldrh	r3, [r7, #2]
 8002d88:	4611      	mov	r1, r2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff fe8a 	bl	8002aa4 <VL53L1_calc_macro_period_us>
 8002d90:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 8002d92:	6979      	ldr	r1, [r7, #20]
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f7ff ff17 	bl	8002bc8 <VL53L1_calc_timeout_mclks>
 8002d9a:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2bff      	cmp	r3, #255	@ 0xff
 8002da0:	d901      	bls.n	8002da6 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 8002da2:	23ff      	movs	r3, #255	@ 0xff
 8002da4:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 8002daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dac:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 8002dae:	6979      	ldr	r1, [r7, #20]
 8002db0:	68b8      	ldr	r0, [r7, #8]
 8002db2:	f7ff ff20 	bl	8002bf6 <VL53L1_calc_encoded_timeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8002dba:	8a7b      	ldrh	r3, [r7, #18]
 8002dbc:	0a1b      	lsrs	r3, r3, #8
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8002dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc4:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8002dc6:	8a7b      	ldrh	r3, [r7, #18]
 8002dc8:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8002dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dcc:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 8002dce:	6979      	ldr	r1, [r7, #20]
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ff10 	bl	8002bf6 <VL53L1_calc_encoded_timeout>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8002dda:	8a7b      	ldrh	r3, [r7, #18]
 8002ddc:	0a1b      	lsrs	r3, r3, #8
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8002de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de4:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8002de6:	8a7b      	ldrh	r3, [r7, #18]
 8002de8:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8002dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dec:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 8002dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002df0:	7a5a      	ldrb	r2, [r3, #9]
 8002df2:	887b      	ldrh	r3, [r7, #2]
 8002df4:	4611      	mov	r1, r2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fe54 	bl	8002aa4 <VL53L1_calc_macro_period_us>
 8002dfc:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 8002dfe:	6979      	ldr	r1, [r7, #20]
 8002e00:	68b8      	ldr	r0, [r7, #8]
 8002e02:	f7ff fef8 	bl	8002bf6 <VL53L1_calc_encoded_timeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8002e0a:	8a7b      	ldrh	r3, [r7, #18]
 8002e0c:	0a1b      	lsrs	r3, r3, #8
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8002e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e14:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8002e16:	8a7b      	ldrh	r3, [r7, #18]
 8002e18:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 8002e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e1c:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 8002e1e:	6979      	ldr	r1, [r7, #20]
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff fee8 	bl	8002bf6 <VL53L1_calc_encoded_timeout>
 8002e26:	4603      	mov	r3, r0
 8002e28:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8002e2a:	8a7b      	ldrh	r3, [r7, #18]
 8002e2c:	0a1b      	lsrs	r3, r3, #8
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 8002e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e34:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8002e36:	8a7b      	ldrh	r3, [r7, #18]
 8002e38:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 8002e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e3c:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 8002e3e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3720      	adds	r7, #32
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b085      	sub	sp, #20
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 8002ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b087      	sub	sp, #28
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	228b      	movs	r2, #139	@ 0x8b
 8002ed2:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM1_EN | \*/
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f44f 4248 	mov.w	r2, #51200	@ 0xc800
 8002eda:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__roi_mode_control =
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	729a      	strb	r2, [r3, #10]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
 8002ee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	371c      	adds	r7, #28
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b085      	sub	sp, #20
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	4603      	mov	r3, r0
 8002efa:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f06:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f0a:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b085      	sub	sp, #20
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	4603      	mov	r3, r0
 8002f22:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 8002f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	da10      	bge.n	8002f78 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	3308      	adds	r3, #8
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	3b80      	subs	r3, #128	@ 0x80
 8002f6e:	10db      	asrs	r3, r3, #3
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 8002f76:	e00c      	b.n	8002f92 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8002f8a:	10db      	asrs	r3, r3, #3
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	701a      	strb	r2, [r3, #0]
}
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b088      	sub	sp, #32
 8002fa2:	af02      	add	r7, sp, #8
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	330a      	adds	r3, #10
 8002fae:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f8d3 03a0 	ldr.w	r0, [r3, #928]	@ 0x3a0
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 3398 	ldrb.w	r3, [r3, #920]	@ 0x398
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	f001 fa5f 	bl	800448c <HAL_I2C_Master_Transmit>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8002fd2:	693b      	ldr	r3, [r7, #16]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	330a      	adds	r3, #10
 8002fec:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f8d3 03a0 	ldr.w	r0, [r3, #928]	@ 0x3a0
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 3398 	ldrb.w	r3, [r3, #920]	@ 0x398
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	4619      	mov	r1, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	b29a      	uxth	r2, r3
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	4613      	mov	r3, r2
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	f001 fb31 	bl	8004674 <HAL_I2C_Master_Receive>
 8003012:	4603      	mov	r3, r0
 8003014:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8003016:	693b      	ldr	r3, [r7, #16]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	460b      	mov	r3, r1
 800302e:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003030:	2300      	movs	r3, #0
 8003032:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2bff      	cmp	r3, #255	@ 0xff
 8003038:	d902      	bls.n	8003040 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 800303a:	f06f 0303 	mvn.w	r3, #3
 800303e:	e01d      	b.n	800307c <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8003040:	897b      	ldrh	r3, [r7, #10]
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	b29b      	uxth	r3, r3
 8003046:	b2da      	uxtb	r2, r3
 8003048:	4b0e      	ldr	r3, [pc, #56]	@ (8003084 <VL53L1_WriteMulti+0x64>)
 800304a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800304c:	897b      	ldrh	r3, [r7, #10]
 800304e:	b2da      	uxtb	r2, r3
 8003050:	4b0c      	ldr	r3, [pc, #48]	@ (8003084 <VL53L1_WriteMulti+0x64>)
 8003052:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	480b      	ldr	r0, [pc, #44]	@ (8003088 <VL53L1_WriteMulti+0x68>)
 800305a:	f003 fe8d 	bl	8006d78 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	3302      	adds	r3, #2
 8003062:	461a      	mov	r2, r3
 8003064:	4907      	ldr	r1, [pc, #28]	@ (8003084 <VL53L1_WriteMulti+0x64>)
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f7ff ff99 	bl	8002f9e <_I2CWrite>
 800306c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8003074:	23f3      	movs	r3, #243	@ 0xf3
 8003076:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 8003078:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20000104 	.word	0x20000104
 8003088:	20000106 	.word	0x20000106

0800308c <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	607a      	str	r2, [r7, #4]
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	460b      	mov	r3, r1
 800309a:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800309c:	2300      	movs	r3, #0
 800309e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80030a0:	897b      	ldrh	r3, [r7, #10]
 80030a2:	0a1b      	lsrs	r3, r3, #8
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	4b12      	ldr	r3, [pc, #72]	@ (80030f4 <VL53L1_ReadMulti+0x68>)
 80030aa:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80030ac:	897b      	ldrh	r3, [r7, #10]
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	4b10      	ldr	r3, [pc, #64]	@ (80030f4 <VL53L1_ReadMulti+0x68>)
 80030b2:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80030b4:	2202      	movs	r2, #2
 80030b6:	490f      	ldr	r1, [pc, #60]	@ (80030f4 <VL53L1_ReadMulti+0x68>)
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f7ff ff70 	bl	8002f9e <_I2CWrite>
 80030be:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80030c6:	23f3      	movs	r3, #243	@ 0xf3
 80030c8:	75fb      	strb	r3, [r7, #23]
        goto done;
 80030ca:	e00c      	b.n	80030e6 <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f7ff ff83 	bl	8002fdc <_I2CRead>
 80030d6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80030de:	23f3      	movs	r3, #243	@ 0xf3
 80030e0:	75fb      	strb	r3, [r7, #23]
 80030e2:	e000      	b.n	80030e6 <VL53L1_ReadMulti+0x5a>
    }
done:
 80030e4:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 80030e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20000104 	.word	0x20000104

080030f8 <VL53L1_RdWord>:
done:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	460b      	mov	r3, r1
 8003102:	607a      	str	r2, [r7, #4]
 8003104:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003106:	2300      	movs	r3, #0
 8003108:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800310a:	897b      	ldrh	r3, [r7, #10]
 800310c:	0a1b      	lsrs	r3, r3, #8
 800310e:	b29b      	uxth	r3, r3
 8003110:	b2da      	uxtb	r2, r3
 8003112:	4b17      	ldr	r3, [pc, #92]	@ (8003170 <VL53L1_RdWord+0x78>)
 8003114:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8003116:	897b      	ldrh	r3, [r7, #10]
 8003118:	b2da      	uxtb	r2, r3
 800311a:	4b15      	ldr	r3, [pc, #84]	@ (8003170 <VL53L1_RdWord+0x78>)
 800311c:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800311e:	2202      	movs	r2, #2
 8003120:	4913      	ldr	r1, [pc, #76]	@ (8003170 <VL53L1_RdWord+0x78>)
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f7ff ff3b 	bl	8002f9e <_I2CWrite>
 8003128:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8003130:	23f3      	movs	r3, #243	@ 0xf3
 8003132:	75fb      	strb	r3, [r7, #23]
        goto done;
 8003134:	e015      	b.n	8003162 <VL53L1_RdWord+0x6a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8003136:	2202      	movs	r2, #2
 8003138:	490d      	ldr	r1, [pc, #52]	@ (8003170 <VL53L1_RdWord+0x78>)
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f7ff ff4e 	bl	8002fdc <_I2CRead>
 8003140:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8003148:	23f3      	movs	r3, #243	@ 0xf3
 800314a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800314c:	e009      	b.n	8003162 <VL53L1_RdWord+0x6a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800314e:	4b08      	ldr	r3, [pc, #32]	@ (8003170 <VL53L1_RdWord+0x78>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	b29b      	uxth	r3, r3
 8003156:	4a06      	ldr	r2, [pc, #24]	@ (8003170 <VL53L1_RdWord+0x78>)
 8003158:	7852      	ldrb	r2, [r2, #1]
 800315a:	4413      	add	r3, r2
 800315c:	b29a      	uxth	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8003162:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000104 	.word	0x20000104

08003174 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	460b      	mov	r3, r1
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003182:	2300      	movs	r3, #0
 8003184:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8003186:	897b      	ldrh	r3, [r7, #10]
 8003188:	2b0a      	cmp	r3, #10
 800318a:	d802      	bhi.n	8003192 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800318c:	f06f 0309 	mvn.w	r3, #9
 8003190:	e047      	b.n	8003222 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800319a:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 80031a8:	f002 020f 	and.w	r2, r2, #15
 80031ac:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 80031ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 80031b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80031bc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80031be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 80031c8:	f002 0203 	and.w	r2, r2, #3
 80031cc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80031ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 80031d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80031dc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80031de:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	88d8      	ldrh	r0, [r3, #6]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3305      	adds	r3, #5
 80031e8:	461a      	mov	r2, r3
 80031ea:	2102      	movs	r1, #2
 80031ec:	f7ff fb90 	bl	8002910 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 80031f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8003202:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800320c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8003210:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8003212:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800321c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800321e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b086      	sub	sp, #24
 800322e:	af00      	add	r7, sp, #0
 8003230:	4603      	mov	r3, r0
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	607a      	str	r2, [r7, #4]
 8003236:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003238:	2300      	movs	r3, #0
 800323a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800323c:	89fb      	ldrh	r3, [r7, #14]
 800323e:	2b0a      	cmp	r3, #10
 8003240:	d802      	bhi.n	8003248 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003242:	f06f 0309 	mvn.w	r3, #9
 8003246:	e046      	b.n	80032d6 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003250:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	3301      	adds	r3, #1
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	3302      	adds	r3, #2
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003270:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	3303      	adds	r3, #3
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	f003 0303 	and.w	r3, r3, #3
 8003280:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	3304      	adds	r3, #4
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003290:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	3305      	adds	r3, #5
 800329a:	4619      	mov	r1, r3
 800329c:	2002      	movs	r0, #2
 800329e:	f7ff fb62 	bl	8002966 <VL53L1_i2c_decode_uint16_t>
 80032a2:	4603      	mov	r3, r0
 80032a4:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	79da      	ldrb	r2, [r3, #7]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	7a1a      	ldrb	r2, [r3, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	3309      	adds	r3, #9
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032c4:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	7a9a      	ldrb	r2, [r3, #10]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 80032d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b086      	sub	sp, #24
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80032e8:	2300      	movs	r3, #0
 80032ea:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80032ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d108      	bne.n	8003306 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 80032f4:	f107 020c 	add.w	r2, r7, #12
 80032f8:	230b      	movs	r3, #11
 80032fa:	2101      	movs	r1, #1
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff fec5 	bl	800308c <VL53L1_ReadMulti>
 8003302:	4603      	mov	r3, r0
 8003304:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8003306:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d108      	bne.n	8003320 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 800330e:	f107 030c 	add.w	r3, r7, #12
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	4619      	mov	r1, r3
 8003316:	200b      	movs	r0, #11
 8003318:	f7ff ff87 	bl	800322a <VL53L1_i2c_decode_static_nvm_managed>
 800331c:	4603      	mov	r3, r0
 800331e:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8003320:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	460b      	mov	r3, r1
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800333a:	2300      	movs	r3, #0
 800333c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800333e:	897b      	ldrh	r3, [r7, #10]
 8003340:	2b16      	cmp	r3, #22
 8003342:	d802      	bhi.n	800334a <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003344:	f06f 0309 	mvn.w	r3, #9
 8003348:	e076      	b.n	8003438 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800335a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8003364:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800336e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8003378:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8003382:	f002 020f 	and.w	r2, r2, #15
 8003386:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8003388:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8003392:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800339c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80033a0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80033a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 80033ac:	f002 0203 	and.w	r2, r2, #3
 80033b0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 80033b2:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8958      	ldrh	r0, [r3, #10]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3309      	adds	r3, #9
 80033bc:	461a      	mov	r2, r3
 80033be:	2102      	movs	r1, #2
 80033c0:	f7ff faa6 	bl	8002910 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	330b      	adds	r3, #11
 80033ce:	461a      	mov	r2, r3
 80033d0:	2102      	movs	r1, #2
 80033d2:	f7ff fae8 	bl	80029a6 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	330d      	adds	r3, #13
 80033e0:	461a      	mov	r2, r3
 80033e2:	2102      	movs	r1, #2
 80033e4:	f7ff fadf 	bl	80029a6 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8a18      	ldrh	r0, [r3, #16]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	330f      	adds	r3, #15
 80033f0:	461a      	mov	r2, r3
 80033f2:	2102      	movs	r1, #2
 80033f4:	f7ff fa8c 	bl	8002910 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 80033fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003402:	b218      	sxth	r0, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3311      	adds	r3, #17
 8003408:	461a      	mov	r2, r3
 800340a:	2102      	movs	r1, #2
 800340c:	f7ff facb 	bl	80029a6 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3313      	adds	r3, #19
 800341a:	461a      	mov	r2, r3
 800341c:	2102      	movs	r1, #2
 800341e:	f7ff fac2 	bl	80029a6 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3315      	adds	r3, #21
 800342c:	461a      	mov	r2, r3
 800342e:	2102      	movs	r1, #2
 8003430:	f7ff fab9 	bl	80029a6 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8003434:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800344e:	2300      	movs	r3, #0
 8003450:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8003452:	89fb      	ldrh	r3, [r7, #14]
 8003454:	2b16      	cmp	r3, #22
 8003456:	d802      	bhi.n	800345e <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003458:	f06f 0309 	mvn.w	r3, #9
 800345c:	e079      	b.n	8003552 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	785a      	ldrb	r2, [r3, #1]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	789a      	ldrb	r2, [r3, #2]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	78da      	ldrb	r2, [r3, #3]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	791a      	ldrb	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	3305      	adds	r3, #5
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	799a      	ldrb	r2, [r3, #6]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	3307      	adds	r3, #7
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034a8:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	3308      	adds	r3, #8
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	3309      	adds	r3, #9
 80034c2:	4619      	mov	r1, r3
 80034c4:	2002      	movs	r0, #2
 80034c6:	f7ff fa4e 	bl	8002966 <VL53L1_i2c_decode_uint16_t>
 80034ca:	4603      	mov	r3, r0
 80034cc:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	330b      	adds	r3, #11
 80034d6:	4619      	mov	r1, r3
 80034d8:	2002      	movs	r0, #2
 80034da:	f7ff fa90 	bl	80029fe <VL53L1_i2c_decode_int16_t>
 80034de:	4603      	mov	r3, r0
 80034e0:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	330d      	adds	r3, #13
 80034ea:	4619      	mov	r1, r3
 80034ec:	2002      	movs	r0, #2
 80034ee:	f7ff fa86 	bl	80029fe <VL53L1_i2c_decode_int16_t>
 80034f2:	4603      	mov	r3, r0
 80034f4:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	330f      	adds	r3, #15
 80034fe:	4619      	mov	r1, r3
 8003500:	2002      	movs	r0, #2
 8003502:	f7ff fa30 	bl	8002966 <VL53L1_i2c_decode_uint16_t>
 8003506:	4603      	mov	r3, r0
 8003508:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	3311      	adds	r3, #17
 8003512:	4619      	mov	r1, r3
 8003514:	2002      	movs	r0, #2
 8003516:	f7ff fa72 	bl	80029fe <VL53L1_i2c_decode_int16_t>
 800351a:	4603      	mov	r3, r0
 800351c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003520:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	3313      	adds	r3, #19
 800352a:	4619      	mov	r1, r3
 800352c:	2002      	movs	r0, #2
 800352e:	f7ff fa66 	bl	80029fe <VL53L1_i2c_decode_int16_t>
 8003532:	4603      	mov	r3, r0
 8003534:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	3315      	adds	r3, #21
 800353e:	4619      	mov	r1, r3
 8003540:	2002      	movs	r0, #2
 8003542:	f7ff fa5c 	bl	80029fe <VL53L1_i2c_decode_int16_t>
 8003546:	4603      	mov	r3, r0
 8003548:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800354e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b088      	sub	sp, #32
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003564:	2300      	movs	r3, #0
 8003566:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8003568:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d108      	bne.n	8003582 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8003570:	f107 0208 	add.w	r2, r7, #8
 8003574:	2317      	movs	r3, #23
 8003576:	210d      	movs	r1, #13
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff fd87 	bl	800308c <VL53L1_ReadMulti>
 800357e:	4603      	mov	r3, r0
 8003580:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8003582:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d108      	bne.n	800359c <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 800358a:	f107 0308 	add.w	r3, r7, #8
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	4619      	mov	r1, r3
 8003592:	2017      	movs	r0, #23
 8003594:	f7ff ff54 	bl	8003440 <VL53L1_i2c_decode_customer_nvm_managed>
 8003598:	4603      	mov	r3, r0
 800359a:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800359c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3720      	adds	r7, #32
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	460b      	mov	r3, r1
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 80035ba:	897b      	ldrh	r3, [r7, #10]
 80035bc:	2b1f      	cmp	r3, #31
 80035be:	d802      	bhi.n	80035c6 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80035c0:	f06f 0309 	mvn.w	r3, #9
 80035c4:	e0cf      	b.n	8003766 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	2102      	movs	r1, #2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff f99e 	bl	8002910 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 80035dc:	f002 0201 	and.w	r2, r2, #1
 80035e0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80035e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 80035ec:	f002 020f 	and.w	r2, r2, #15
 80035f0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80035f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 80035fc:	f002 020f 	and.w	r2, r2, #15
 8003600:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8003602:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800360c:	f002 021f 	and.w	r2, r2, #31
 8003610:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8003612:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800361c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003620:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8003622:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800362c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003630:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8003632:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800363c:	f002 0201 	and.w	r2, r2, #1
 8003640:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8003642:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800364c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8003656:	f002 0201 	and.w	r2, r2, #1
 800365a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800365c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 8003666:	f002 0203 	and.w	r2, r2, #3
 800366a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800366c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8003676:	f002 021f 	and.w	r2, r2, #31
 800367a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800367c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8003686:	f002 0203 	and.w	r2, r2, #3
 800368a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800368c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8003696:	f002 0203 	and.w	r2, r2, #3
 800369a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800369c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 80036a6:	f002 0207 	and.w	r2, r2, #7
 80036aa:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 80036ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 80036b6:	f002 021f 	and.w	r2, r2, #31
 80036ba:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 80036bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 80036c6:	f002 0201 	and.w	r2, r2, #1
 80036ca:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 80036cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 80036d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 80036e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 80036ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 80036f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 80036fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 8003708:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8b18      	ldrh	r0, [r3, #24]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3318      	adds	r3, #24
 8003712:	461a      	mov	r2, r3
 8003714:	2102      	movs	r1, #2
 8003716:	f7ff f8fb 	bl	8002910 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8003722:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800372c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 8003736:	f002 020f 	and.w	r2, r2, #15
 800373a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800373c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 8003746:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 8003750:	f002 020f 	and.w	r2, r2, #15
 8003754:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 8003756:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 8003760:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8003762:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b086      	sub	sp, #24
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	460b      	mov	r3, r1
 8003778:	607a      	str	r2, [r7, #4]
 800377a:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800377c:	2300      	movs	r3, #0
 800377e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 8003780:	897b      	ldrh	r3, [r7, #10]
 8003782:	2b15      	cmp	r3, #21
 8003784:	d802      	bhi.n	800378c <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003786:	f06f 0309 	mvn.w	r3, #9
 800378a:	e070      	b.n	800386e <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800379c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 80037a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 80037b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80037b4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80037b6:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 80037bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c0:	b298      	uxth	r0, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3304      	adds	r3, #4
 80037c6:	461a      	mov	r2, r3
 80037c8:	2102      	movs	r1, #2
 80037ca:	f7ff f8a1 	bl	8002910 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 80037d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80037da:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80037dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 80037e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 80037f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 80037fa:	f002 0201 	and.w	r2, r2, #1
 80037fe:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8003800:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800380a:	f002 0207 	and.w	r2, r2, #7
 800380e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8003810:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8998      	ldrh	r0, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	330c      	adds	r3, #12
 800381a:	461a      	mov	r2, r3
 800381c:	2102      	movs	r1, #2
 800381e:	f7ff f877 	bl	8002910 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	89d8      	ldrh	r0, [r3, #14]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	330e      	adds	r3, #14
 800382a:	461a      	mov	r2, r3
 800382c:	2102      	movs	r1, #2
 800382e:	f7ff f86f 	bl	8002910 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8a18      	ldrh	r0, [r3, #16]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3310      	adds	r3, #16
 800383a:	461a      	mov	r2, r3
 800383c:	2102      	movs	r1, #2
 800383e:	f7ff f867 	bl	8002910 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800384a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8003854:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800385e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8003868:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800386a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b086      	sub	sp, #24
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	460b      	mov	r3, r1
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003884:	2300      	movs	r3, #0
 8003886:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 8003888:	897b      	ldrh	r3, [r7, #10]
 800388a:	2b16      	cmp	r3, #22
 800388c:	d802      	bhi.n	8003894 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800388e:	f06f 0309 	mvn.w	r3, #9
 8003892:	e06e      	b.n	8003972 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80038aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 80038b4:	f002 020f 	and.w	r2, r2, #15
 80038b8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80038ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 80038c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 80038ce:	f002 020f 	and.w	r2, r2, #15
 80038d2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80038d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 80038de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 80038e8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80038ec:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80038ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 80038f8:	f002 020f 	and.w	r2, r2, #15
 80038fc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80038fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8003908:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8003912:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8003916:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8003918:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8958      	ldrh	r0, [r3, #10]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	330a      	adds	r3, #10
 8003922:	461a      	mov	r2, r3
 8003924:	2102      	movs	r1, #2
 8003926:	f7fe fff3 	bl	8002910 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8998      	ldrh	r0, [r3, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	330c      	adds	r3, #12
 8003932:	461a      	mov	r2, r3
 8003934:	2102      	movs	r1, #2
 8003936:	f7fe ffeb 	bl	8002910 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8003942:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800394c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6918      	ldr	r0, [r3, #16]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3312      	adds	r3, #18
 8003956:	461a      	mov	r2, r3
 8003958:	2104      	movs	r1, #4
 800395a:	f7ff f879 	bl	8002a50 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8003966:	f002 0201 	and.w	r2, r2, #1
 800396a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800396c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800396e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b086      	sub	sp, #24
 800397e:	af00      	add	r7, sp, #0
 8003980:	60f8      	str	r0, [r7, #12]
 8003982:	460b      	mov	r3, r1
 8003984:	607a      	str	r2, [r7, #4]
 8003986:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003988:	2300      	movs	r3, #0
 800398a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800398c:	897b      	ldrh	r3, [r7, #10]
 800398e:	2b11      	cmp	r3, #17
 8003990:	d802      	bhi.n	8003998 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003992:	f06f 0309 	mvn.w	r3, #9
 8003996:	e071      	b.n	8003a7c <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8858      	ldrh	r0, [r3, #2]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3301      	adds	r3, #1
 80039ae:	461a      	mov	r2, r3
 80039b0:	2102      	movs	r1, #2
 80039b2:	f7fe ffad 	bl	8002910 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8898      	ldrh	r0, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3303      	adds	r3, #3
 80039be:	461a      	mov	r2, r3
 80039c0:	2102      	movs	r1, #2
 80039c2:	f7fe ffa5 	bl	8002910 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 80039ce:	f002 0201 	and.w	r2, r2, #1
 80039d2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80039d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 80039de:	f002 0207 	and.w	r2, r2, #7
 80039e2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80039e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 80039ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 80039f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8003a02:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a06:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8003a08:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8003a12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a16:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8003a18:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8003a22:	f002 0203 	and.w	r2, r2, #3
 8003a26:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8003a28:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8003a32:	f002 0203 	and.w	r2, r2, #3
 8003a36:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8003a38:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8003a42:	f002 020f 	and.w	r2, r2, #15
 8003a46:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8003a48:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8003a52:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8003a5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8003a66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8003a70:	f002 0203 	and.w	r2, r2, #3
 8003a74:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8003a76:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8003a78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	607a      	str	r2, [r7, #4]
 8003a90:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003a92:	2300      	movs	r3, #0
 8003a94:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 8003a96:	897b      	ldrh	r3, [r7, #10]
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d802      	bhi.n	8003aa2 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003a9c:	f06f 0309 	mvn.w	r3, #9
 8003aa0:	e025      	b.n	8003aee <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8003ab8:	f002 0201 	and.w	r2, r2, #1
 8003abc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8003abe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8003ac8:	f002 0201 	and.w	r2, r2, #1
 8003acc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8003ace:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8003ad8:	f002 0203 	and.w	r2, r2, #3
 8003adc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8003ade:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8003ae8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8003aea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	371c      	adds	r7, #28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b086      	sub	sp, #24
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	4603      	mov	r3, r0
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	607a      	str	r2, [r7, #4]
 8003b06:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 8003b0c:	89fb      	ldrh	r3, [r7, #14]
 8003b0e:	2b30      	cmp	r3, #48	@ 0x30
 8003b10:	d802      	bhi.n	8003b18 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8003b12:	f06f 0309 	mvn.w	r3, #9
 8003b16:	e112      	b.n	8003d3e <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	785a      	ldrb	r2, [r3, #1]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	789a      	ldrb	r2, [r3, #2]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	3303      	adds	r3, #3
 8003b34:	4619      	mov	r1, r3
 8003b36:	2002      	movs	r0, #2
 8003b38:	f7fe ff15 	bl	8002966 <VL53L1_i2c_decode_uint16_t>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	461a      	mov	r2, r3
	pdata->identification__module_id =
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	3305      	adds	r3, #5
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b4e:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	3306      	adds	r3, #6
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	3307      	adds	r3, #7
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	3308      	adds	r3, #8
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b7e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	3309      	adds	r3, #9
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b8e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	330a      	adds	r3, #10
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	330b      	adds	r3, #11
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bae:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	330c      	adds	r3, #12
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	330d      	adds	r3, #13
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bce:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	330e      	adds	r3, #14
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bde:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	7bda      	ldrb	r2, [r3, #15]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	7c1a      	ldrb	r2, [r3, #16]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	7c5a      	ldrb	r2, [r3, #17]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	7c9a      	ldrb	r2, [r3, #18]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	7cda      	ldrb	r2, [r3, #19]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	7d1a      	ldrb	r2, [r3, #20]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	7d5a      	ldrb	r2, [r3, #21]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	7d9a      	ldrb	r2, [r3, #22]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	7dda      	ldrb	r2, [r3, #23]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	7e1a      	ldrb	r2, [r3, #24]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	7e5a      	ldrb	r2, [r3, #25]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	7e9a      	ldrb	r2, [r3, #26]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	7eda      	ldrb	r2, [r3, #27]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	7f1a      	ldrb	r2, [r3, #28]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	7f5a      	ldrb	r2, [r3, #29]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	7f9a      	ldrb	r2, [r3, #30]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	7fda      	ldrb	r2, [r3, #31]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8003d3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b090      	sub	sp, #64	@ 0x40
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003d50:	2300      	movs	r3, #0
 8003d52:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8003d56:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10a      	bne.n	8003d74 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 8003d5e:	f107 020c 	add.w	r2, r7, #12
 8003d62:	2331      	movs	r3, #49	@ 0x31
 8003d64:	f240 110f 	movw	r1, #271	@ 0x10f
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff f98f 	bl	800308c <VL53L1_ReadMulti>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8003d74:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d109      	bne.n	8003d90 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 8003d7c:	f107 030c 	add.w	r3, r7, #12
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	4619      	mov	r1, r3
 8003d84:	2031      	movs	r0, #49	@ 0x31
 8003d86:	f7ff feb8 	bl	8003afa <VL53L1_i2c_decode_nvm_copy_data>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8003d90:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3740      	adds	r7, #64	@ 0x40
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003d9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003dd4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003da0:	f7fc fbf6 	bl	8000590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003da4:	480c      	ldr	r0, [pc, #48]	@ (8003dd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003da6:	490d      	ldr	r1, [pc, #52]	@ (8003ddc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003da8:	4a0d      	ldr	r2, [pc, #52]	@ (8003de0 <LoopForever+0xe>)
  movs r3, #0
 8003daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003dac:	e002      	b.n	8003db4 <LoopCopyDataInit>

08003dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003db2:	3304      	adds	r3, #4

08003db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003db8:	d3f9      	bcc.n	8003dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dba:	4a0a      	ldr	r2, [pc, #40]	@ (8003de4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003dbc:	4c0a      	ldr	r4, [pc, #40]	@ (8003de8 <LoopForever+0x16>)
  movs r3, #0
 8003dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dc0:	e001      	b.n	8003dc6 <LoopFillZerobss>

08003dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003dc4:	3204      	adds	r2, #4

08003dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003dc8:	d3fb      	bcc.n	8003dc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003dca:	f002 ffb1 	bl	8006d30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003dce:	f7fc f9fb 	bl	80001c8 <main>

08003dd2 <LoopForever>:

LoopForever:
    b LoopForever
 8003dd2:	e7fe      	b.n	8003dd2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003dd4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8003dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ddc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003de0:	08006dec 	.word	0x08006dec
  ldr r2, =_sbss
 8003de4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003de8:	20000208 	.word	0x20000208

08003dec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003dec:	e7fe      	b.n	8003dec <ADC1_2_IRQHandler>
	...

08003df0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003df4:	4b08      	ldr	r3, [pc, #32]	@ (8003e18 <HAL_Init+0x28>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a07      	ldr	r2, [pc, #28]	@ (8003e18 <HAL_Init+0x28>)
 8003dfa:	f043 0310 	orr.w	r3, r3, #16
 8003dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e00:	2003      	movs	r0, #3
 8003e02:	f000 f90d 	bl	8004020 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e06:	2000      	movs	r0, #0
 8003e08:	f000 f808 	bl	8003e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e0c:	f7fc fae4 	bl	80003d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40022000 	.word	0x40022000

08003e1c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e24:	4b12      	ldr	r3, [pc, #72]	@ (8003e70 <HAL_InitTick+0x54>)
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	4b12      	ldr	r3, [pc, #72]	@ (8003e74 <HAL_InitTick+0x58>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 f917 	bl	800406e <HAL_SYSTICK_Config>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e00e      	b.n	8003e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b0f      	cmp	r3, #15
 8003e4e:	d80a      	bhi.n	8003e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e50:	2200      	movs	r2, #0
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e58:	f000 f8ed 	bl	8004036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e5c:	4a06      	ldr	r2, [pc, #24]	@ (8003e78 <HAL_InitTick+0x5c>)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	e000      	b.n	8003e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	20000000 	.word	0x20000000
 8003e74:	20000008 	.word	0x20000008
 8003e78:	20000004 	.word	0x20000004

08003e7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e80:	4b06      	ldr	r3, [pc, #24]	@ (8003e9c <HAL_IncTick+0x20>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	461a      	mov	r2, r3
 8003e86:	4b06      	ldr	r3, [pc, #24]	@ (8003ea0 <HAL_IncTick+0x24>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	4a04      	ldr	r2, [pc, #16]	@ (8003ea0 <HAL_IncTick+0x24>)
 8003e8e:	6013      	str	r3, [r2, #0]
}
 8003e90:	bf00      	nop
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	20000008 	.word	0x20000008
 8003ea0:	20000204 	.word	0x20000204

08003ea4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  return uwTick;  
 8003ea8:	4b03      	ldr	r3, [pc, #12]	@ (8003eb8 <HAL_GetTick+0x14>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	20000204 	.word	0x20000204

08003ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8003f00 <__NVIC_SetPriorityGrouping+0x44>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ed8:	4013      	ands	r3, r2
 8003eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ee4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eee:	4a04      	ldr	r2, [pc, #16]	@ (8003f00 <__NVIC_SetPriorityGrouping+0x44>)
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	60d3      	str	r3, [r2, #12]
}
 8003ef4:	bf00      	nop
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	e000ed00 	.word	0xe000ed00

08003f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f08:	4b04      	ldr	r3, [pc, #16]	@ (8003f1c <__NVIC_GetPriorityGrouping+0x18>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	0a1b      	lsrs	r3, r3, #8
 8003f0e:	f003 0307 	and.w	r3, r3, #7
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	e000ed00 	.word	0xe000ed00

08003f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	6039      	str	r1, [r7, #0]
 8003f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	db0a      	blt.n	8003f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	490c      	ldr	r1, [pc, #48]	@ (8003f6c <__NVIC_SetPriority+0x4c>)
 8003f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3e:	0112      	lsls	r2, r2, #4
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	440b      	add	r3, r1
 8003f44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f48:	e00a      	b.n	8003f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	4908      	ldr	r1, [pc, #32]	@ (8003f70 <__NVIC_SetPriority+0x50>)
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	3b04      	subs	r3, #4
 8003f58:	0112      	lsls	r2, r2, #4
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	761a      	strb	r2, [r3, #24]
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	e000e100 	.word	0xe000e100
 8003f70:	e000ed00 	.word	0xe000ed00

08003f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b089      	sub	sp, #36	@ 0x24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f1c3 0307 	rsb	r3, r3, #7
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	bf28      	it	cs
 8003f92:	2304      	movcs	r3, #4
 8003f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	2b06      	cmp	r3, #6
 8003f9c:	d902      	bls.n	8003fa4 <NVIC_EncodePriority+0x30>
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3b03      	subs	r3, #3
 8003fa2:	e000      	b.n	8003fa6 <NVIC_EncodePriority+0x32>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	43da      	mvns	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fbc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc6:	43d9      	mvns	r1, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fcc:	4313      	orrs	r3, r2
         );
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3724      	adds	r7, #36	@ 0x24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
	...

08003fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fec:	d301      	bcc.n	8003ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e00f      	b.n	8004012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800401c <SysTick_Config+0x40>)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ffa:	210f      	movs	r1, #15
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004000:	f7ff ff8e 	bl	8003f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004004:	4b05      	ldr	r3, [pc, #20]	@ (800401c <SysTick_Config+0x40>)
 8004006:	2200      	movs	r2, #0
 8004008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800400a:	4b04      	ldr	r3, [pc, #16]	@ (800401c <SysTick_Config+0x40>)
 800400c:	2207      	movs	r2, #7
 800400e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	e000e010 	.word	0xe000e010

08004020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff ff47 	bl	8003ebc <__NVIC_SetPriorityGrouping>
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b086      	sub	sp, #24
 800403a:	af00      	add	r7, sp, #0
 800403c:	4603      	mov	r3, r0
 800403e:	60b9      	str	r1, [r7, #8]
 8004040:	607a      	str	r2, [r7, #4]
 8004042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004048:	f7ff ff5c 	bl	8003f04 <__NVIC_GetPriorityGrouping>
 800404c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	68b9      	ldr	r1, [r7, #8]
 8004052:	6978      	ldr	r0, [r7, #20]
 8004054:	f7ff ff8e 	bl	8003f74 <NVIC_EncodePriority>
 8004058:	4602      	mov	r2, r0
 800405a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800405e:	4611      	mov	r1, r2
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff ff5d 	bl	8003f20 <__NVIC_SetPriority>
}
 8004066:	bf00      	nop
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff ffb0 	bl	8003fdc <SysTick_Config>
 800407c:	4603      	mov	r3, r0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004092:	2300      	movs	r3, #0
 8004094:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004096:	e14e      	b.n	8004336 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	2101      	movs	r1, #1
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	fa01 f303 	lsl.w	r3, r1, r3
 80040a4:	4013      	ands	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 8140 	beq.w	8004330 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f003 0303 	and.w	r3, r3, #3
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d005      	beq.n	80040c8 <HAL_GPIO_Init+0x40>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d130      	bne.n	800412a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	2203      	movs	r2, #3
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	43db      	mvns	r3, r3
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4013      	ands	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040fe:	2201      	movs	r2, #1
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	43db      	mvns	r3, r3
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4013      	ands	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	091b      	lsrs	r3, r3, #4
 8004114:	f003 0201 	and.w	r2, r3, #1
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	2b03      	cmp	r3, #3
 8004134:	d017      	beq.n	8004166 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	2203      	movs	r2, #3
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	43db      	mvns	r3, r3
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4013      	ands	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d123      	bne.n	80041ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	08da      	lsrs	r2, r3, #3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3208      	adds	r2, #8
 800417a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800417e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f003 0307 	and.w	r3, r3, #7
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	220f      	movs	r2, #15
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43db      	mvns	r3, r3
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	4013      	ands	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	691a      	ldr	r2, [r3, #16]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	fa02 f303 	lsl.w	r3, r2, r3
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	08da      	lsrs	r2, r3, #3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3208      	adds	r2, #8
 80041b4:	6939      	ldr	r1, [r7, #16]
 80041b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	2203      	movs	r2, #3
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	43db      	mvns	r3, r3
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4013      	ands	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f003 0203 	and.w	r2, r3, #3
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 809a 	beq.w	8004330 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041fc:	4b55      	ldr	r3, [pc, #340]	@ (8004354 <HAL_GPIO_Init+0x2cc>)
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	4a54      	ldr	r2, [pc, #336]	@ (8004354 <HAL_GPIO_Init+0x2cc>)
 8004202:	f043 0301 	orr.w	r3, r3, #1
 8004206:	6193      	str	r3, [r2, #24]
 8004208:	4b52      	ldr	r3, [pc, #328]	@ (8004354 <HAL_GPIO_Init+0x2cc>)
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004214:	4a50      	ldr	r2, [pc, #320]	@ (8004358 <HAL_GPIO_Init+0x2d0>)
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	089b      	lsrs	r3, r3, #2
 800421a:	3302      	adds	r3, #2
 800421c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004220:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f003 0303 	and.w	r3, r3, #3
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	220f      	movs	r2, #15
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	43db      	mvns	r3, r3
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	4013      	ands	r3, r2
 8004236:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800423e:	d013      	beq.n	8004268 <HAL_GPIO_Init+0x1e0>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a46      	ldr	r2, [pc, #280]	@ (800435c <HAL_GPIO_Init+0x2d4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d00d      	beq.n	8004264 <HAL_GPIO_Init+0x1dc>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a45      	ldr	r2, [pc, #276]	@ (8004360 <HAL_GPIO_Init+0x2d8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d007      	beq.n	8004260 <HAL_GPIO_Init+0x1d8>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a44      	ldr	r2, [pc, #272]	@ (8004364 <HAL_GPIO_Init+0x2dc>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d101      	bne.n	800425c <HAL_GPIO_Init+0x1d4>
 8004258:	2303      	movs	r3, #3
 800425a:	e006      	b.n	800426a <HAL_GPIO_Init+0x1e2>
 800425c:	2305      	movs	r3, #5
 800425e:	e004      	b.n	800426a <HAL_GPIO_Init+0x1e2>
 8004260:	2302      	movs	r3, #2
 8004262:	e002      	b.n	800426a <HAL_GPIO_Init+0x1e2>
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <HAL_GPIO_Init+0x1e2>
 8004268:	2300      	movs	r3, #0
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	f002 0203 	and.w	r2, r2, #3
 8004270:	0092      	lsls	r2, r2, #2
 8004272:	4093      	lsls	r3, r2
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800427a:	4937      	ldr	r1, [pc, #220]	@ (8004358 <HAL_GPIO_Init+0x2d0>)
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	089b      	lsrs	r3, r3, #2
 8004280:	3302      	adds	r3, #2
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004288:	4b37      	ldr	r3, [pc, #220]	@ (8004368 <HAL_GPIO_Init+0x2e0>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	43db      	mvns	r3, r3
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4013      	ands	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80042ac:	4a2e      	ldr	r2, [pc, #184]	@ (8004368 <HAL_GPIO_Init+0x2e0>)
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004368 <HAL_GPIO_Init+0x2e0>)
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	43db      	mvns	r3, r3
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4013      	ands	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80042d6:	4a24      	ldr	r2, [pc, #144]	@ (8004368 <HAL_GPIO_Init+0x2e0>)
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042dc:	4b22      	ldr	r3, [pc, #136]	@ (8004368 <HAL_GPIO_Init+0x2e0>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	43db      	mvns	r3, r3
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4013      	ands	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004300:	4a19      	ldr	r2, [pc, #100]	@ (8004368 <HAL_GPIO_Init+0x2e0>)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004306:	4b18      	ldr	r3, [pc, #96]	@ (8004368 <HAL_GPIO_Init+0x2e0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	43db      	mvns	r3, r3
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4013      	ands	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800432a:	4a0f      	ldr	r2, [pc, #60]	@ (8004368 <HAL_GPIO_Init+0x2e0>)
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	3301      	adds	r3, #1
 8004334:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	fa22 f303 	lsr.w	r3, r2, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	f47f aea9 	bne.w	8004098 <HAL_GPIO_Init+0x10>
  }
}
 8004346:	bf00      	nop
 8004348:	bf00      	nop
 800434a:	371c      	adds	r7, #28
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	40021000 	.word	0x40021000
 8004358:	40010000 	.word	0x40010000
 800435c:	48000400 	.word	0x48000400
 8004360:	48000800 	.word	0x48000800
 8004364:	48000c00 	.word	0x48000c00
 8004368:	40010400 	.word	0x40010400

0800436c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e081      	b.n	8004482 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fc f844 	bl	8000420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2224      	movs	r2, #36	@ 0x24
 800439c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0201 	bic.w	r2, r2, #1
 80043ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80043bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d107      	bne.n	80043e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043e2:	609a      	str	r2, [r3, #8]
 80043e4:	e006      	b.n	80043f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689a      	ldr	r2, [r3, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80043f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d104      	bne.n	8004406 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004404:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004414:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004418:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004428:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691a      	ldr	r2, [r3, #16]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69d9      	ldr	r1, [r3, #28]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1a      	ldr	r2, [r3, #32]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2220      	movs	r2, #32
 800446e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b088      	sub	sp, #32
 8004490:	af02      	add	r7, sp, #8
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	607a      	str	r2, [r7, #4]
 8004496:	461a      	mov	r2, r3
 8004498:	460b      	mov	r3, r1
 800449a:	817b      	strh	r3, [r7, #10]
 800449c:	4613      	mov	r3, r2
 800449e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	f040 80da 	bne.w	8004662 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_I2C_Master_Transmit+0x30>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e0d3      	b.n	8004664 <HAL_I2C_Master_Transmit+0x1d8>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044c4:	f7ff fcee 	bl	8003ea4 <HAL_GetTick>
 80044c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	2319      	movs	r3, #25
 80044d0:	2201      	movs	r2, #1
 80044d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 f9e6 	bl	80048a8 <I2C_WaitOnFlagUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e0be      	b.n	8004664 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2221      	movs	r2, #33	@ 0x21
 80044ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2210      	movs	r2, #16
 80044f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	893a      	ldrh	r2, [r7, #8]
 8004506:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	2bff      	cmp	r3, #255	@ 0xff
 8004516:	d90e      	bls.n	8004536 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	22ff      	movs	r2, #255	@ 0xff
 800451c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004522:	b2da      	uxtb	r2, r3
 8004524:	8979      	ldrh	r1, [r7, #10]
 8004526:	4b51      	ldr	r3, [pc, #324]	@ (800466c <HAL_I2C_Master_Transmit+0x1e0>)
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 fbf6 	bl	8004d20 <I2C_TransferConfig>
 8004534:	e06c      	b.n	8004610 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004544:	b2da      	uxtb	r2, r3
 8004546:	8979      	ldrh	r1, [r7, #10]
 8004548:	4b48      	ldr	r3, [pc, #288]	@ (800466c <HAL_I2C_Master_Transmit+0x1e0>)
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fbe5 	bl	8004d20 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004556:	e05b      	b.n	8004610 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	6a39      	ldr	r1, [r7, #32]
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 f9f2 	bl	8004946 <I2C_WaitOnTXISFlagUntilTimeout>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e07b      	b.n	8004664 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004570:	781a      	ldrb	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004586:	b29b      	uxth	r3, r3
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d034      	beq.n	8004610 <HAL_I2C_Master_Transmit+0x184>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d130      	bne.n	8004610 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	2200      	movs	r2, #0
 80045b6:	2180      	movs	r1, #128	@ 0x80
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 f975 	bl	80048a8 <I2C_WaitOnFlagUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e04d      	b.n	8004664 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2bff      	cmp	r3, #255	@ 0xff
 80045d0:	d90e      	bls.n	80045f0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	22ff      	movs	r2, #255	@ 0xff
 80045d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	8979      	ldrh	r1, [r7, #10]
 80045e0:	2300      	movs	r3, #0
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 fb99 	bl	8004d20 <I2C_TransferConfig>
 80045ee:	e00f      	b.n	8004610 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	8979      	ldrh	r1, [r7, #10]
 8004602:	2300      	movs	r3, #0
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 fb88 	bl	8004d20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004614:	b29b      	uxth	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d19e      	bne.n	8004558 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	6a39      	ldr	r1, [r7, #32]
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 f9d8 	bl	80049d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e01a      	b.n	8004664 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2220      	movs	r2, #32
 8004634:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6859      	ldr	r1, [r3, #4]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	4b0b      	ldr	r3, [pc, #44]	@ (8004670 <HAL_I2C_Master_Transmit+0x1e4>)
 8004642:	400b      	ands	r3, r1
 8004644:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2220      	movs	r2, #32
 800464a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	e000      	b.n	8004664 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004662:	2302      	movs	r3, #2
  }
}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	80002000 	.word	0x80002000
 8004670:	fe00e800 	.word	0xfe00e800

08004674 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	607a      	str	r2, [r7, #4]
 800467e:	461a      	mov	r2, r3
 8004680:	460b      	mov	r3, r1
 8004682:	817b      	strh	r3, [r7, #10]
 8004684:	4613      	mov	r3, r2
 8004686:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b20      	cmp	r3, #32
 8004692:	f040 80db 	bne.w	800484c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_I2C_Master_Receive+0x30>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e0d4      	b.n	800484e <HAL_I2C_Master_Receive+0x1da>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046ac:	f7ff fbfa 	bl	8003ea4 <HAL_GetTick>
 80046b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	2319      	movs	r3, #25
 80046b8:	2201      	movs	r2, #1
 80046ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 f8f2 	bl	80048a8 <I2C_WaitOnFlagUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e0bf      	b.n	800484e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2222      	movs	r2, #34	@ 0x22
 80046d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2210      	movs	r2, #16
 80046da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	893a      	ldrh	r2, [r7, #8]
 80046ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2bff      	cmp	r3, #255	@ 0xff
 80046fe:	d90e      	bls.n	800471e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	22ff      	movs	r2, #255	@ 0xff
 8004704:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800470a:	b2da      	uxtb	r2, r3
 800470c:	8979      	ldrh	r1, [r7, #10]
 800470e:	4b52      	ldr	r3, [pc, #328]	@ (8004858 <HAL_I2C_Master_Receive+0x1e4>)
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 fb02 	bl	8004d20 <I2C_TransferConfig>
 800471c:	e06d      	b.n	80047fa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800472c:	b2da      	uxtb	r2, r3
 800472e:	8979      	ldrh	r1, [r7, #10]
 8004730:	4b49      	ldr	r3, [pc, #292]	@ (8004858 <HAL_I2C_Master_Receive+0x1e4>)
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 faf1 	bl	8004d20 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800473e:	e05c      	b.n	80047fa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	6a39      	ldr	r1, [r7, #32]
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f989 	bl	8004a5c <I2C_WaitOnRXNEFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e07c      	b.n	800484e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800477c:	b29b      	uxth	r3, r3
 800477e:	3b01      	subs	r3, #1
 8004780:	b29a      	uxth	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800478a:	b29b      	uxth	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d034      	beq.n	80047fa <HAL_I2C_Master_Receive+0x186>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004794:	2b00      	cmp	r3, #0
 8004796:	d130      	bne.n	80047fa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	2200      	movs	r2, #0
 80047a0:	2180      	movs	r1, #128	@ 0x80
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 f880 	bl	80048a8 <I2C_WaitOnFlagUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e04d      	b.n	800484e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	2bff      	cmp	r3, #255	@ 0xff
 80047ba:	d90e      	bls.n	80047da <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	22ff      	movs	r2, #255	@ 0xff
 80047c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	8979      	ldrh	r1, [r7, #10]
 80047ca:	2300      	movs	r3, #0
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 faa4 	bl	8004d20 <I2C_TransferConfig>
 80047d8:	e00f      	b.n	80047fa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047de:	b29a      	uxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	8979      	ldrh	r1, [r7, #10]
 80047ec:	2300      	movs	r3, #0
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 fa93 	bl	8004d20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d19d      	bne.n	8004740 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	6a39      	ldr	r1, [r7, #32]
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f8e3 	bl	80049d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e01a      	b.n	800484e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2220      	movs	r2, #32
 800481e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6859      	ldr	r1, [r3, #4]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	4b0c      	ldr	r3, [pc, #48]	@ (800485c <HAL_I2C_Master_Receive+0x1e8>)
 800482c:	400b      	ands	r3, r1
 800482e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2220      	movs	r2, #32
 8004834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	e000      	b.n	800484e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800484c:	2302      	movs	r3, #2
  }
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	80002400 	.word	0x80002400
 800485c:	fe00e800 	.word	0xfe00e800

08004860 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b02      	cmp	r3, #2
 8004874:	d103      	bne.n	800487e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2200      	movs	r2, #0
 800487c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b01      	cmp	r3, #1
 800488a:	d007      	beq.n	800489c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699a      	ldr	r2, [r3, #24]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0201 	orr.w	r2, r2, #1
 800489a:	619a      	str	r2, [r3, #24]
  }
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	603b      	str	r3, [r7, #0]
 80048b4:	4613      	mov	r3, r2
 80048b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048b8:	e031      	b.n	800491e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048c0:	d02d      	beq.n	800491e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c2:	f7ff faef 	bl	8003ea4 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d302      	bcc.n	80048d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d122      	bne.n	800491e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699a      	ldr	r2, [r3, #24]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	4013      	ands	r3, r2
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	bf0c      	ite	eq
 80048e8:	2301      	moveq	r3, #1
 80048ea:	2300      	movne	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	461a      	mov	r2, r3
 80048f0:	79fb      	ldrb	r3, [r7, #7]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d113      	bne.n	800491e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fa:	f043 0220 	orr.w	r2, r3, #32
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2220      	movs	r2, #32
 8004906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e00f      	b.n	800493e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	699a      	ldr	r2, [r3, #24]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	4013      	ands	r3, r2
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	429a      	cmp	r2, r3
 800492c:	bf0c      	ite	eq
 800492e:	2301      	moveq	r3, #1
 8004930:	2300      	movne	r3, #0
 8004932:	b2db      	uxtb	r3, r3
 8004934:	461a      	mov	r2, r3
 8004936:	79fb      	ldrb	r3, [r7, #7]
 8004938:	429a      	cmp	r2, r3
 800493a:	d0be      	beq.n	80048ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b084      	sub	sp, #16
 800494a:	af00      	add	r7, sp, #0
 800494c:	60f8      	str	r0, [r7, #12]
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004952:	e033      	b.n	80049bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	68b9      	ldr	r1, [r7, #8]
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 f901 	bl	8004b60 <I2C_IsErrorOccurred>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e031      	b.n	80049cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800496e:	d025      	beq.n	80049bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004970:	f7ff fa98 	bl	8003ea4 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	429a      	cmp	r2, r3
 800497e:	d302      	bcc.n	8004986 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d11a      	bne.n	80049bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b02      	cmp	r3, #2
 8004992:	d013      	beq.n	80049bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004998:	f043 0220 	orr.w	r2, r3, #32
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e007      	b.n	80049cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d1c4      	bne.n	8004954 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049e0:	e02f      	b.n	8004a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	68b9      	ldr	r1, [r7, #8]
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 f8ba 	bl	8004b60 <I2C_IsErrorOccurred>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e02d      	b.n	8004a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f6:	f7ff fa55 	bl	8003ea4 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d302      	bcc.n	8004a0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d11a      	bne.n	8004a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	f003 0320 	and.w	r3, r3, #32
 8004a16:	2b20      	cmp	r3, #32
 8004a18:	d013      	beq.n	8004a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a1e:	f043 0220 	orr.w	r2, r3, #32
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e007      	b.n	8004a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	f003 0320 	and.w	r3, r3, #32
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d1c8      	bne.n	80049e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a68:	e06b      	b.n	8004b42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f876 	bl	8004b60 <I2C_IsErrorOccurred>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e069      	b.n	8004b52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	f003 0320 	and.w	r3, r3, #32
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	d138      	bne.n	8004afe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	f003 0304 	and.w	r3, r3, #4
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d105      	bne.n	8004aa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	e055      	b.n	8004b52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	f003 0310 	and.w	r3, r3, #16
 8004ab0:	2b10      	cmp	r3, #16
 8004ab2:	d107      	bne.n	8004ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2210      	movs	r2, #16
 8004aba:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2204      	movs	r2, #4
 8004ac0:	645a      	str	r2, [r3, #68]	@ 0x44
 8004ac2:	e002      	b.n	8004aca <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6859      	ldr	r1, [r3, #4]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	4b1f      	ldr	r3, [pc, #124]	@ (8004b5c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004ade:	400b      	ands	r3, r1
 8004ae0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e029      	b.n	8004b52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004afe:	f7ff f9d1 	bl	8003ea4 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d302      	bcc.n	8004b14 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d116      	bne.n	8004b42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d00f      	beq.n	8004b42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b26:	f043 0220 	orr.w	r2, r3, #32
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e007      	b.n	8004b52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d18c      	bne.n	8004a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	fe00e800 	.word	0xfe00e800

08004b60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b08a      	sub	sp, #40	@ 0x28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	f003 0310 	and.w	r3, r3, #16
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d068      	beq.n	8004c5e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2210      	movs	r2, #16
 8004b92:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b94:	e049      	b.n	8004c2a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b9c:	d045      	beq.n	8004c2a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b9e:	f7ff f981 	bl	8003ea4 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d302      	bcc.n	8004bb4 <I2C_IsErrorOccurred+0x54>
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d13a      	bne.n	8004c2a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bbe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bc6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bd6:	d121      	bne.n	8004c1c <I2C_IsErrorOccurred+0xbc>
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bde:	d01d      	beq.n	8004c1c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004be0:	7cfb      	ldrb	r3, [r7, #19]
 8004be2:	2b20      	cmp	r3, #32
 8004be4:	d01a      	beq.n	8004c1c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bf4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004bf6:	f7ff f955 	bl	8003ea4 <HAL_GetTick>
 8004bfa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bfc:	e00e      	b.n	8004c1c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004bfe:	f7ff f951 	bl	8003ea4 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b19      	cmp	r3, #25
 8004c0a:	d907      	bls.n	8004c1c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	f043 0320 	orr.w	r3, r3, #32
 8004c12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004c1a:	e006      	b.n	8004c2a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	f003 0320 	and.w	r3, r3, #32
 8004c26:	2b20      	cmp	r3, #32
 8004c28:	d1e9      	bne.n	8004bfe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	f003 0320 	and.w	r3, r3, #32
 8004c34:	2b20      	cmp	r3, #32
 8004c36:	d003      	beq.n	8004c40 <I2C_IsErrorOccurred+0xe0>
 8004c38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0aa      	beq.n	8004b96 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004c40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d103      	bne.n	8004c50 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004c50:	6a3b      	ldr	r3, [r7, #32]
 8004c52:	f043 0304 	orr.w	r3, r3, #4
 8004c56:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00b      	beq.n	8004c88 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00b      	beq.n	8004caa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	f043 0308 	orr.w	r3, r3, #8
 8004c98:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ca2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00b      	beq.n	8004ccc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	f043 0302 	orr.w	r3, r3, #2
 8004cba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01c      	beq.n	8004d0e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f7ff fdc3 	bl	8004860 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6859      	ldr	r1, [r3, #4]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8004d1c <I2C_IsErrorOccurred+0x1bc>)
 8004ce6:	400b      	ands	r3, r1
 8004ce8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3728      	adds	r7, #40	@ 0x28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	fe00e800 	.word	0xfe00e800

08004d20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	607b      	str	r3, [r7, #4]
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	817b      	strh	r3, [r7, #10]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d32:	897b      	ldrh	r3, [r7, #10]
 8004d34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d38:	7a7b      	ldrb	r3, [r7, #9]
 8004d3a:	041b      	lsls	r3, r3, #16
 8004d3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d40:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d4e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	0d5b      	lsrs	r3, r3, #21
 8004d5a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004d5e:	4b08      	ldr	r3, [pc, #32]	@ (8004d80 <I2C_TransferConfig+0x60>)
 8004d60:	430b      	orrs	r3, r1
 8004d62:	43db      	mvns	r3, r3
 8004d64:	ea02 0103 	and.w	r1, r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004d72:	bf00      	nop
 8004d74:	371c      	adds	r7, #28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	03ff63ff 	.word	0x03ff63ff

08004d84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b20      	cmp	r3, #32
 8004d98:	d138      	bne.n	8004e0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d101      	bne.n	8004da8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004da4:	2302      	movs	r3, #2
 8004da6:	e032      	b.n	8004e0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2224      	movs	r2, #36	@ 0x24
 8004db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 0201 	bic.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004dd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6819      	ldr	r1, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0201 	orr.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	e000      	b.n	8004e0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e0c:	2302      	movs	r3, #2
  }
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b085      	sub	sp, #20
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d139      	bne.n	8004ea4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d101      	bne.n	8004e3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	e033      	b.n	8004ea6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2224      	movs	r2, #36	@ 0x24
 8004e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0201 	bic.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004e6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	021b      	lsls	r3, r3, #8
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0201 	orr.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	e000      	b.n	8004ea6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ea4:	2302      	movs	r3, #2
  }
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
	...

08004eb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ec0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ec4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ec6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d102      	bne.n	8004eda <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	f001 b823 	b.w	8005f20 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ede:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 817d 	beq.w	80051ea <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004ef0:	4bbc      	ldr	r3, [pc, #752]	@ (80051e4 <HAL_RCC_OscConfig+0x330>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f003 030c 	and.w	r3, r3, #12
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d00c      	beq.n	8004f16 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004efc:	4bb9      	ldr	r3, [pc, #740]	@ (80051e4 <HAL_RCC_OscConfig+0x330>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f003 030c 	and.w	r3, r3, #12
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d15c      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x10e>
 8004f08:	4bb6      	ldr	r3, [pc, #728]	@ (80051e4 <HAL_RCC_OscConfig+0x330>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f14:	d155      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x10e>
 8004f16:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004f1a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f1e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8004f22:	fa93 f3a3 	rbit	r3, r3
 8004f26:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004f2a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f2e:	fab3 f383 	clz	r3, r3
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	095b      	lsrs	r3, r3, #5
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	f043 0301 	orr.w	r3, r3, #1
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d102      	bne.n	8004f48 <HAL_RCC_OscConfig+0x94>
 8004f42:	4ba8      	ldr	r3, [pc, #672]	@ (80051e4 <HAL_RCC_OscConfig+0x330>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	e015      	b.n	8004f74 <HAL_RCC_OscConfig+0xc0>
 8004f48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004f4c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f50:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8004f54:	fa93 f3a3 	rbit	r3, r3
 8004f58:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8004f5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004f60:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004f64:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8004f68:	fa93 f3a3 	rbit	r3, r3
 8004f6c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8004f70:	4b9c      	ldr	r3, [pc, #624]	@ (80051e4 <HAL_RCC_OscConfig+0x330>)
 8004f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f74:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004f78:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8004f7c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8004f80:	fa92 f2a2 	rbit	r2, r2
 8004f84:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8004f88:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8004f8c:	fab2 f282 	clz	r2, r2
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	f042 0220 	orr.w	r2, r2, #32
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	f002 021f 	and.w	r2, r2, #31
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 811f 	beq.w	80051e8 <HAL_RCC_OscConfig+0x334>
 8004faa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f040 8116 	bne.w	80051e8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	f000 bfaf 	b.w	8005f20 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fd2:	d106      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x12e>
 8004fd4:	4b83      	ldr	r3, [pc, #524]	@ (80051e4 <HAL_RCC_OscConfig+0x330>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a82      	ldr	r2, [pc, #520]	@ (80051e4 <HAL_RCC_OscConfig+0x330>)
 8004fda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	e036      	b.n	8005050 <HAL_RCC_OscConfig+0x19c>
 8004fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fe6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10c      	bne.n	800500c <HAL_RCC_OscConfig+0x158>
 8004ff2:	4b7c      	ldr	r3, [pc, #496]	@ (80051e4 <HAL_RCC_OscConfig+0x330>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a7b      	ldr	r2, [pc, #492]	@ (80051e4 <HAL_RCC_OscConfig+0x330>)
 8004ff8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	4b79      	ldr	r3, [pc, #484]	@ (80051e4 <HAL_RCC_OscConfig+0x330>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a78      	ldr	r2, [pc, #480]	@ (80051e4 <HAL_RCC_OscConfig+0x330>)
 8005004:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005008:	6013      	str	r3, [r2, #0]
 800500a:	e021      	b.n	8005050 <HAL_RCC_OscConfig+0x19c>
 800500c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005010:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800501c:	d10c      	bne.n	8005038 <HAL_RCC_OscConfig+0x184>
 800501e:	4b71      	ldr	r3, [pc, #452]	@ (80051e4 <HAL_RCC_OscConfig+0x330>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a70      	ldr	r2, [pc, #448]	@ (80051e4 <HAL_RCC_OscConfig+0x330>)
 8005024:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	4b6e      	ldr	r3, [pc, #440]	@ (80051e4 <HAL_RCC_OscConfig+0x330>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a6d      	ldr	r2, [pc, #436]	@ (80051e4 <HAL_RCC_OscConfig+0x330>)
 8005030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	e00b      	b.n	8005050 <HAL_RCC_OscConfig+0x19c>
 8005038:	4b6a      	ldr	r3, [pc, #424]	@ (80051e4 <HAL_RCC_OscConfig+0x330>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a69      	ldr	r2, [pc, #420]	@ (80051e4 <HAL_RCC_OscConfig+0x330>)
 800503e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	4b67      	ldr	r3, [pc, #412]	@ (80051e4 <HAL_RCC_OscConfig+0x330>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a66      	ldr	r2, [pc, #408]	@ (80051e4 <HAL_RCC_OscConfig+0x330>)
 800504a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800504e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005050:	4b64      	ldr	r3, [pc, #400]	@ (80051e4 <HAL_RCC_OscConfig+0x330>)
 8005052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005054:	f023 020f 	bic.w	r2, r3, #15
 8005058:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800505c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	495f      	ldr	r1, [pc, #380]	@ (80051e4 <HAL_RCC_OscConfig+0x330>)
 8005066:	4313      	orrs	r3, r2
 8005068:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800506a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800506e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d059      	beq.n	800512e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800507a:	f7fe ff13 	bl	8003ea4 <HAL_GetTick>
 800507e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005082:	e00a      	b.n	800509a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005084:	f7fe ff0e 	bl	8003ea4 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b64      	cmp	r3, #100	@ 0x64
 8005092:	d902      	bls.n	800509a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	f000 bf43 	b.w	8005f20 <HAL_RCC_OscConfig+0x106c>
 800509a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800509e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80050a6:	fa93 f3a3 	rbit	r3, r3
 80050aa:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80050ae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050b2:	fab3 f383 	clz	r3, r3
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	095b      	lsrs	r3, r3, #5
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	f043 0301 	orr.w	r3, r3, #1
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d102      	bne.n	80050cc <HAL_RCC_OscConfig+0x218>
 80050c6:	4b47      	ldr	r3, [pc, #284]	@ (80051e4 <HAL_RCC_OscConfig+0x330>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	e015      	b.n	80050f8 <HAL_RCC_OscConfig+0x244>
 80050cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80050d0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80050d8:	fa93 f3a3 	rbit	r3, r3
 80050dc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80050e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80050e4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80050e8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80050ec:	fa93 f3a3 	rbit	r3, r3
 80050f0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80050f4:	4b3b      	ldr	r3, [pc, #236]	@ (80051e4 <HAL_RCC_OscConfig+0x330>)
 80050f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80050fc:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8005100:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8005104:	fa92 f2a2 	rbit	r2, r2
 8005108:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800510c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8005110:	fab2 f282 	clz	r2, r2
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	f042 0220 	orr.w	r2, r2, #32
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	f002 021f 	and.w	r2, r2, #31
 8005120:	2101      	movs	r1, #1
 8005122:	fa01 f202 	lsl.w	r2, r1, r2
 8005126:	4013      	ands	r3, r2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d0ab      	beq.n	8005084 <HAL_RCC_OscConfig+0x1d0>
 800512c:	e05d      	b.n	80051ea <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800512e:	f7fe feb9 	bl	8003ea4 <HAL_GetTick>
 8005132:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005136:	e00a      	b.n	800514e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005138:	f7fe feb4 	bl	8003ea4 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b64      	cmp	r3, #100	@ 0x64
 8005146:	d902      	bls.n	800514e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	f000 bee9 	b.w	8005f20 <HAL_RCC_OscConfig+0x106c>
 800514e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005152:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005156:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800515a:	fa93 f3a3 	rbit	r3, r3
 800515e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8005162:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005166:	fab3 f383 	clz	r3, r3
 800516a:	b2db      	uxtb	r3, r3
 800516c:	095b      	lsrs	r3, r3, #5
 800516e:	b2db      	uxtb	r3, r3
 8005170:	f043 0301 	orr.w	r3, r3, #1
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b01      	cmp	r3, #1
 8005178:	d102      	bne.n	8005180 <HAL_RCC_OscConfig+0x2cc>
 800517a:	4b1a      	ldr	r3, [pc, #104]	@ (80051e4 <HAL_RCC_OscConfig+0x330>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	e015      	b.n	80051ac <HAL_RCC_OscConfig+0x2f8>
 8005180:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005184:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005188:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800518c:	fa93 f3a3 	rbit	r3, r3
 8005190:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8005194:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005198:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800519c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80051a0:	fa93 f3a3 	rbit	r3, r3
 80051a4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80051a8:	4b0e      	ldr	r3, [pc, #56]	@ (80051e4 <HAL_RCC_OscConfig+0x330>)
 80051aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80051b0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80051b4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80051b8:	fa92 f2a2 	rbit	r2, r2
 80051bc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80051c0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80051c4:	fab2 f282 	clz	r2, r2
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	f042 0220 	orr.w	r2, r2, #32
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	f002 021f 	and.w	r2, r2, #31
 80051d4:	2101      	movs	r1, #1
 80051d6:	fa01 f202 	lsl.w	r2, r1, r2
 80051da:	4013      	ands	r3, r2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1ab      	bne.n	8005138 <HAL_RCC_OscConfig+0x284>
 80051e0:	e003      	b.n	80051ea <HAL_RCC_OscConfig+0x336>
 80051e2:	bf00      	nop
 80051e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 817d 	beq.w	80054fa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005200:	4ba6      	ldr	r3, [pc, #664]	@ (800549c <HAL_RCC_OscConfig+0x5e8>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f003 030c 	and.w	r3, r3, #12
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00b      	beq.n	8005224 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800520c:	4ba3      	ldr	r3, [pc, #652]	@ (800549c <HAL_RCC_OscConfig+0x5e8>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f003 030c 	and.w	r3, r3, #12
 8005214:	2b08      	cmp	r3, #8
 8005216:	d172      	bne.n	80052fe <HAL_RCC_OscConfig+0x44a>
 8005218:	4ba0      	ldr	r3, [pc, #640]	@ (800549c <HAL_RCC_OscConfig+0x5e8>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d16c      	bne.n	80052fe <HAL_RCC_OscConfig+0x44a>
 8005224:	2302      	movs	r3, #2
 8005226:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800522a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800522e:	fa93 f3a3 	rbit	r3, r3
 8005232:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8005236:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800523a:	fab3 f383 	clz	r3, r3
 800523e:	b2db      	uxtb	r3, r3
 8005240:	095b      	lsrs	r3, r3, #5
 8005242:	b2db      	uxtb	r3, r3
 8005244:	f043 0301 	orr.w	r3, r3, #1
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b01      	cmp	r3, #1
 800524c:	d102      	bne.n	8005254 <HAL_RCC_OscConfig+0x3a0>
 800524e:	4b93      	ldr	r3, [pc, #588]	@ (800549c <HAL_RCC_OscConfig+0x5e8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	e013      	b.n	800527c <HAL_RCC_OscConfig+0x3c8>
 8005254:	2302      	movs	r3, #2
 8005256:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800525a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800525e:	fa93 f3a3 	rbit	r3, r3
 8005262:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8005266:	2302      	movs	r3, #2
 8005268:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800526c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005270:	fa93 f3a3 	rbit	r3, r3
 8005274:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8005278:	4b88      	ldr	r3, [pc, #544]	@ (800549c <HAL_RCC_OscConfig+0x5e8>)
 800527a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527c:	2202      	movs	r2, #2
 800527e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8005282:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8005286:	fa92 f2a2 	rbit	r2, r2
 800528a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800528e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8005292:	fab2 f282 	clz	r2, r2
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	f042 0220 	orr.w	r2, r2, #32
 800529c:	b2d2      	uxtb	r2, r2
 800529e:	f002 021f 	and.w	r2, r2, #31
 80052a2:	2101      	movs	r1, #1
 80052a4:	fa01 f202 	lsl.w	r2, r1, r2
 80052a8:	4013      	ands	r3, r2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <HAL_RCC_OscConfig+0x410>
 80052ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d002      	beq.n	80052c4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	f000 be2e 	b.w	8005f20 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052c4:	4b75      	ldr	r3, [pc, #468]	@ (800549c <HAL_RCC_OscConfig+0x5e8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	21f8      	movs	r1, #248	@ 0xf8
 80052da:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052de:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80052e2:	fa91 f1a1 	rbit	r1, r1
 80052e6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80052ea:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80052ee:	fab1 f181 	clz	r1, r1
 80052f2:	b2c9      	uxtb	r1, r1
 80052f4:	408b      	lsls	r3, r1
 80052f6:	4969      	ldr	r1, [pc, #420]	@ (800549c <HAL_RCC_OscConfig+0x5e8>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052fc:	e0fd      	b.n	80054fa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005302:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 8088 	beq.w	8005420 <HAL_RCC_OscConfig+0x56c>
 8005310:	2301      	movs	r3, #1
 8005312:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005316:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800531a:	fa93 f3a3 	rbit	r3, r3
 800531e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8005322:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005326:	fab3 f383 	clz	r3, r3
 800532a:	b2db      	uxtb	r3, r3
 800532c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005330:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	461a      	mov	r2, r3
 8005338:	2301      	movs	r3, #1
 800533a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800533c:	f7fe fdb2 	bl	8003ea4 <HAL_GetTick>
 8005340:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005344:	e00a      	b.n	800535c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005346:	f7fe fdad 	bl	8003ea4 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d902      	bls.n	800535c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	f000 bde2 	b.w	8005f20 <HAL_RCC_OscConfig+0x106c>
 800535c:	2302      	movs	r3, #2
 800535e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005362:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8005366:	fa93 f3a3 	rbit	r3, r3
 800536a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800536e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005372:	fab3 f383 	clz	r3, r3
 8005376:	b2db      	uxtb	r3, r3
 8005378:	095b      	lsrs	r3, r3, #5
 800537a:	b2db      	uxtb	r3, r3
 800537c:	f043 0301 	orr.w	r3, r3, #1
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b01      	cmp	r3, #1
 8005384:	d102      	bne.n	800538c <HAL_RCC_OscConfig+0x4d8>
 8005386:	4b45      	ldr	r3, [pc, #276]	@ (800549c <HAL_RCC_OscConfig+0x5e8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	e013      	b.n	80053b4 <HAL_RCC_OscConfig+0x500>
 800538c:	2302      	movs	r3, #2
 800538e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005392:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8005396:	fa93 f3a3 	rbit	r3, r3
 800539a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800539e:	2302      	movs	r3, #2
 80053a0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80053a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80053a8:	fa93 f3a3 	rbit	r3, r3
 80053ac:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80053b0:	4b3a      	ldr	r3, [pc, #232]	@ (800549c <HAL_RCC_OscConfig+0x5e8>)
 80053b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b4:	2202      	movs	r2, #2
 80053b6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80053ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80053be:	fa92 f2a2 	rbit	r2, r2
 80053c2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80053c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80053ca:	fab2 f282 	clz	r2, r2
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	f042 0220 	orr.w	r2, r2, #32
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	f002 021f 	and.w	r2, r2, #31
 80053da:	2101      	movs	r1, #1
 80053dc:	fa01 f202 	lsl.w	r2, r1, r2
 80053e0:	4013      	ands	r3, r2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0af      	beq.n	8005346 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e6:	4b2d      	ldr	r3, [pc, #180]	@ (800549c <HAL_RCC_OscConfig+0x5e8>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	21f8      	movs	r1, #248	@ 0xf8
 80053fc:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005400:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005404:	fa91 f1a1 	rbit	r1, r1
 8005408:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800540c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8005410:	fab1 f181 	clz	r1, r1
 8005414:	b2c9      	uxtb	r1, r1
 8005416:	408b      	lsls	r3, r1
 8005418:	4920      	ldr	r1, [pc, #128]	@ (800549c <HAL_RCC_OscConfig+0x5e8>)
 800541a:	4313      	orrs	r3, r2
 800541c:	600b      	str	r3, [r1, #0]
 800541e:	e06c      	b.n	80054fa <HAL_RCC_OscConfig+0x646>
 8005420:	2301      	movs	r3, #1
 8005422:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005426:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800542a:	fa93 f3a3 	rbit	r3, r3
 800542e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8005432:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005436:	fab3 f383 	clz	r3, r3
 800543a:	b2db      	uxtb	r3, r3
 800543c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005440:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	461a      	mov	r2, r3
 8005448:	2300      	movs	r3, #0
 800544a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800544c:	f7fe fd2a 	bl	8003ea4 <HAL_GetTick>
 8005450:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005454:	e00a      	b.n	800546c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005456:	f7fe fd25 	bl	8003ea4 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d902      	bls.n	800546c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	f000 bd5a 	b.w	8005f20 <HAL_RCC_OscConfig+0x106c>
 800546c:	2302      	movs	r3, #2
 800546e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005472:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005476:	fa93 f3a3 	rbit	r3, r3
 800547a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800547e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005482:	fab3 f383 	clz	r3, r3
 8005486:	b2db      	uxtb	r3, r3
 8005488:	095b      	lsrs	r3, r3, #5
 800548a:	b2db      	uxtb	r3, r3
 800548c:	f043 0301 	orr.w	r3, r3, #1
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b01      	cmp	r3, #1
 8005494:	d104      	bne.n	80054a0 <HAL_RCC_OscConfig+0x5ec>
 8005496:	4b01      	ldr	r3, [pc, #4]	@ (800549c <HAL_RCC_OscConfig+0x5e8>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	e015      	b.n	80054c8 <HAL_RCC_OscConfig+0x614>
 800549c:	40021000 	.word	0x40021000
 80054a0:	2302      	movs	r3, #2
 80054a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80054aa:	fa93 f3a3 	rbit	r3, r3
 80054ae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80054b2:	2302      	movs	r3, #2
 80054b4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80054b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80054bc:	fa93 f3a3 	rbit	r3, r3
 80054c0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80054c4:	4bc8      	ldr	r3, [pc, #800]	@ (80057e8 <HAL_RCC_OscConfig+0x934>)
 80054c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c8:	2202      	movs	r2, #2
 80054ca:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80054ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80054d2:	fa92 f2a2 	rbit	r2, r2
 80054d6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80054da:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80054de:	fab2 f282 	clz	r2, r2
 80054e2:	b2d2      	uxtb	r2, r2
 80054e4:	f042 0220 	orr.w	r2, r2, #32
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	f002 021f 	and.w	r2, r2, #31
 80054ee:	2101      	movs	r1, #1
 80054f0:	fa01 f202 	lsl.w	r2, r1, r2
 80054f4:	4013      	ands	r3, r2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1ad      	bne.n	8005456 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0308 	and.w	r3, r3, #8
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 8110 	beq.w	8005730 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005514:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d079      	beq.n	8005614 <HAL_RCC_OscConfig+0x760>
 8005520:	2301      	movs	r3, #1
 8005522:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005526:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800552a:	fa93 f3a3 	rbit	r3, r3
 800552e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8005532:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005536:	fab3 f383 	clz	r3, r3
 800553a:	b2db      	uxtb	r3, r3
 800553c:	461a      	mov	r2, r3
 800553e:	4bab      	ldr	r3, [pc, #684]	@ (80057ec <HAL_RCC_OscConfig+0x938>)
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	461a      	mov	r2, r3
 8005546:	2301      	movs	r3, #1
 8005548:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800554a:	f7fe fcab 	bl	8003ea4 <HAL_GetTick>
 800554e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005552:	e00a      	b.n	800556a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005554:	f7fe fca6 	bl	8003ea4 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d902      	bls.n	800556a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	f000 bcdb 	b.w	8005f20 <HAL_RCC_OscConfig+0x106c>
 800556a:	2302      	movs	r3, #2
 800556c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005570:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8005574:	fa93 f3a3 	rbit	r3, r3
 8005578:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800557c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005580:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005584:	2202      	movs	r2, #2
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800558c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	fa93 f2a3 	rbit	r2, r3
 8005596:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800559a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a8:	2202      	movs	r2, #2
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	fa93 f2a3 	rbit	r2, r3
 80055ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80055c2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055c4:	4b88      	ldr	r3, [pc, #544]	@ (80057e8 <HAL_RCC_OscConfig+0x934>)
 80055c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055cc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80055d0:	2102      	movs	r1, #2
 80055d2:	6019      	str	r1, [r3, #0]
 80055d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	fa93 f1a3 	rbit	r1, r3
 80055e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80055ea:	6019      	str	r1, [r3, #0]
  return result;
 80055ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055f0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	fab3 f383 	clz	r3, r3
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005600:	b2db      	uxtb	r3, r3
 8005602:	f003 031f 	and.w	r3, r3, #31
 8005606:	2101      	movs	r1, #1
 8005608:	fa01 f303 	lsl.w	r3, r1, r3
 800560c:	4013      	ands	r3, r2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0a0      	beq.n	8005554 <HAL_RCC_OscConfig+0x6a0>
 8005612:	e08d      	b.n	8005730 <HAL_RCC_OscConfig+0x87c>
 8005614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005618:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800561c:	2201      	movs	r2, #1
 800561e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005624:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	fa93 f2a3 	rbit	r2, r3
 800562e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005632:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005636:	601a      	str	r2, [r3, #0]
  return result;
 8005638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800563c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005640:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005642:	fab3 f383 	clz	r3, r3
 8005646:	b2db      	uxtb	r3, r3
 8005648:	461a      	mov	r2, r3
 800564a:	4b68      	ldr	r3, [pc, #416]	@ (80057ec <HAL_RCC_OscConfig+0x938>)
 800564c:	4413      	add	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	461a      	mov	r2, r3
 8005652:	2300      	movs	r3, #0
 8005654:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005656:	f7fe fc25 	bl	8003ea4 <HAL_GetTick>
 800565a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800565e:	e00a      	b.n	8005676 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005660:	f7fe fc20 	bl	8003ea4 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d902      	bls.n	8005676 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	f000 bc55 	b.w	8005f20 <HAL_RCC_OscConfig+0x106c>
 8005676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800567a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800567e:	2202      	movs	r2, #2
 8005680:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005682:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005686:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	fa93 f2a3 	rbit	r2, r3
 8005690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005694:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800569e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80056a2:	2202      	movs	r2, #2
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056aa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	fa93 f2a3 	rbit	r2, r3
 80056b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056c2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80056c6:	2202      	movs	r2, #2
 80056c8:	601a      	str	r2, [r3, #0]
 80056ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056ce:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	fa93 f2a3 	rbit	r2, r3
 80056d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056dc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80056e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056e2:	4b41      	ldr	r3, [pc, #260]	@ (80057e8 <HAL_RCC_OscConfig+0x934>)
 80056e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056ea:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80056ee:	2102      	movs	r1, #2
 80056f0:	6019      	str	r1, [r3, #0]
 80056f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056f6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	fa93 f1a3 	rbit	r1, r3
 8005700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005704:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005708:	6019      	str	r1, [r3, #0]
  return result;
 800570a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800570e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	fab3 f383 	clz	r3, r3
 8005718:	b2db      	uxtb	r3, r3
 800571a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800571e:	b2db      	uxtb	r3, r3
 8005720:	f003 031f 	and.w	r3, r3, #31
 8005724:	2101      	movs	r1, #1
 8005726:	fa01 f303 	lsl.w	r3, r1, r3
 800572a:	4013      	ands	r3, r2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d197      	bne.n	8005660 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005734:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0304 	and.w	r3, r3, #4
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 81a1 	beq.w	8005a88 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005746:	2300      	movs	r3, #0
 8005748:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800574c:	4b26      	ldr	r3, [pc, #152]	@ (80057e8 <HAL_RCC_OscConfig+0x934>)
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d116      	bne.n	8005786 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005758:	4b23      	ldr	r3, [pc, #140]	@ (80057e8 <HAL_RCC_OscConfig+0x934>)
 800575a:	69db      	ldr	r3, [r3, #28]
 800575c:	4a22      	ldr	r2, [pc, #136]	@ (80057e8 <HAL_RCC_OscConfig+0x934>)
 800575e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005762:	61d3      	str	r3, [r2, #28]
 8005764:	4b20      	ldr	r3, [pc, #128]	@ (80057e8 <HAL_RCC_OscConfig+0x934>)
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800576c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005770:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800577a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800577e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005780:	2301      	movs	r3, #1
 8005782:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005786:	4b1a      	ldr	r3, [pc, #104]	@ (80057f0 <HAL_RCC_OscConfig+0x93c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800578e:	2b00      	cmp	r3, #0
 8005790:	d11a      	bne.n	80057c8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005792:	4b17      	ldr	r3, [pc, #92]	@ (80057f0 <HAL_RCC_OscConfig+0x93c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a16      	ldr	r2, [pc, #88]	@ (80057f0 <HAL_RCC_OscConfig+0x93c>)
 8005798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800579c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800579e:	f7fe fb81 	bl	8003ea4 <HAL_GetTick>
 80057a2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a6:	e009      	b.n	80057bc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057a8:	f7fe fb7c 	bl	8003ea4 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b64      	cmp	r3, #100	@ 0x64
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e3b1      	b.n	8005f20 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057bc:	4b0c      	ldr	r3, [pc, #48]	@ (80057f0 <HAL_RCC_OscConfig+0x93c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0ef      	beq.n	80057a8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d10d      	bne.n	80057f4 <HAL_RCC_OscConfig+0x940>
 80057d8:	4b03      	ldr	r3, [pc, #12]	@ (80057e8 <HAL_RCC_OscConfig+0x934>)
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	4a02      	ldr	r2, [pc, #8]	@ (80057e8 <HAL_RCC_OscConfig+0x934>)
 80057de:	f043 0301 	orr.w	r3, r3, #1
 80057e2:	6213      	str	r3, [r2, #32]
 80057e4:	e03c      	b.n	8005860 <HAL_RCC_OscConfig+0x9ac>
 80057e6:	bf00      	nop
 80057e8:	40021000 	.word	0x40021000
 80057ec:	10908120 	.word	0x10908120
 80057f0:	40007000 	.word	0x40007000
 80057f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10c      	bne.n	800581e <HAL_RCC_OscConfig+0x96a>
 8005804:	4bc1      	ldr	r3, [pc, #772]	@ (8005b0c <HAL_RCC_OscConfig+0xc58>)
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	4ac0      	ldr	r2, [pc, #768]	@ (8005b0c <HAL_RCC_OscConfig+0xc58>)
 800580a:	f023 0301 	bic.w	r3, r3, #1
 800580e:	6213      	str	r3, [r2, #32]
 8005810:	4bbe      	ldr	r3, [pc, #760]	@ (8005b0c <HAL_RCC_OscConfig+0xc58>)
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	4abd      	ldr	r2, [pc, #756]	@ (8005b0c <HAL_RCC_OscConfig+0xc58>)
 8005816:	f023 0304 	bic.w	r3, r3, #4
 800581a:	6213      	str	r3, [r2, #32]
 800581c:	e020      	b.n	8005860 <HAL_RCC_OscConfig+0x9ac>
 800581e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005822:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	2b05      	cmp	r3, #5
 800582c:	d10c      	bne.n	8005848 <HAL_RCC_OscConfig+0x994>
 800582e:	4bb7      	ldr	r3, [pc, #732]	@ (8005b0c <HAL_RCC_OscConfig+0xc58>)
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	4ab6      	ldr	r2, [pc, #728]	@ (8005b0c <HAL_RCC_OscConfig+0xc58>)
 8005834:	f043 0304 	orr.w	r3, r3, #4
 8005838:	6213      	str	r3, [r2, #32]
 800583a:	4bb4      	ldr	r3, [pc, #720]	@ (8005b0c <HAL_RCC_OscConfig+0xc58>)
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	4ab3      	ldr	r2, [pc, #716]	@ (8005b0c <HAL_RCC_OscConfig+0xc58>)
 8005840:	f043 0301 	orr.w	r3, r3, #1
 8005844:	6213      	str	r3, [r2, #32]
 8005846:	e00b      	b.n	8005860 <HAL_RCC_OscConfig+0x9ac>
 8005848:	4bb0      	ldr	r3, [pc, #704]	@ (8005b0c <HAL_RCC_OscConfig+0xc58>)
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	4aaf      	ldr	r2, [pc, #700]	@ (8005b0c <HAL_RCC_OscConfig+0xc58>)
 800584e:	f023 0301 	bic.w	r3, r3, #1
 8005852:	6213      	str	r3, [r2, #32]
 8005854:	4bad      	ldr	r3, [pc, #692]	@ (8005b0c <HAL_RCC_OscConfig+0xc58>)
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	4aac      	ldr	r2, [pc, #688]	@ (8005b0c <HAL_RCC_OscConfig+0xc58>)
 800585a:	f023 0304 	bic.w	r3, r3, #4
 800585e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005864:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 8081 	beq.w	8005974 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005872:	f7fe fb17 	bl	8003ea4 <HAL_GetTick>
 8005876:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800587a:	e00b      	b.n	8005894 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800587c:	f7fe fb12 	bl	8003ea4 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	f241 3288 	movw	r2, #5000	@ 0x1388
 800588c:	4293      	cmp	r3, r2
 800588e:	d901      	bls.n	8005894 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e345      	b.n	8005f20 <HAL_RCC_OscConfig+0x106c>
 8005894:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005898:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800589c:	2202      	movs	r2, #2
 800589e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058a4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	fa93 f2a3 	rbit	r2, r3
 80058ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058b2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058bc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80058c0:	2202      	movs	r2, #2
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058c8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	fa93 f2a3 	rbit	r2, r3
 80058d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058d6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80058da:	601a      	str	r2, [r3, #0]
  return result;
 80058dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058e0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80058e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058e6:	fab3 f383 	clz	r3, r3
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	095b      	lsrs	r3, r3, #5
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	f043 0302 	orr.w	r3, r3, #2
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d102      	bne.n	8005900 <HAL_RCC_OscConfig+0xa4c>
 80058fa:	4b84      	ldr	r3, [pc, #528]	@ (8005b0c <HAL_RCC_OscConfig+0xc58>)
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	e013      	b.n	8005928 <HAL_RCC_OscConfig+0xa74>
 8005900:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005904:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005908:	2202      	movs	r2, #2
 800590a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800590c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005910:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	fa93 f2a3 	rbit	r2, r3
 800591a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800591e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	4b79      	ldr	r3, [pc, #484]	@ (8005b0c <HAL_RCC_OscConfig+0xc58>)
 8005926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005928:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800592c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8005930:	2102      	movs	r1, #2
 8005932:	6011      	str	r1, [r2, #0]
 8005934:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005938:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800593c:	6812      	ldr	r2, [r2, #0]
 800593e:	fa92 f1a2 	rbit	r1, r2
 8005942:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005946:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800594a:	6011      	str	r1, [r2, #0]
  return result;
 800594c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005950:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005954:	6812      	ldr	r2, [r2, #0]
 8005956:	fab2 f282 	clz	r2, r2
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	f002 021f 	and.w	r2, r2, #31
 8005966:	2101      	movs	r1, #1
 8005968:	fa01 f202 	lsl.w	r2, r1, r2
 800596c:	4013      	ands	r3, r2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d084      	beq.n	800587c <HAL_RCC_OscConfig+0x9c8>
 8005972:	e07f      	b.n	8005a74 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005974:	f7fe fa96 	bl	8003ea4 <HAL_GetTick>
 8005978:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800597c:	e00b      	b.n	8005996 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800597e:	f7fe fa91 	bl	8003ea4 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800598e:	4293      	cmp	r3, r2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e2c4      	b.n	8005f20 <HAL_RCC_OscConfig+0x106c>
 8005996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800599a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800599e:	2202      	movs	r2, #2
 80059a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059a6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	fa93 f2a3 	rbit	r2, r3
 80059b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059b4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059be:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80059c2:	2202      	movs	r2, #2
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059ca:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	fa93 f2a3 	rbit	r2, r3
 80059d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059d8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80059dc:	601a      	str	r2, [r3, #0]
  return result;
 80059de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059e2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80059e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059e8:	fab3 f383 	clz	r3, r3
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	095b      	lsrs	r3, r3, #5
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	f043 0302 	orr.w	r3, r3, #2
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d102      	bne.n	8005a02 <HAL_RCC_OscConfig+0xb4e>
 80059fc:	4b43      	ldr	r3, [pc, #268]	@ (8005b0c <HAL_RCC_OscConfig+0xc58>)
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	e013      	b.n	8005a2a <HAL_RCC_OscConfig+0xb76>
 8005a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a06:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a12:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	fa93 f2a3 	rbit	r2, r3
 8005a1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a20:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	4b39      	ldr	r3, [pc, #228]	@ (8005b0c <HAL_RCC_OscConfig+0xc58>)
 8005a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a2e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8005a32:	2102      	movs	r1, #2
 8005a34:	6011      	str	r1, [r2, #0]
 8005a36:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a3a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8005a3e:	6812      	ldr	r2, [r2, #0]
 8005a40:	fa92 f1a2 	rbit	r1, r2
 8005a44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a48:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005a4c:	6011      	str	r1, [r2, #0]
  return result;
 8005a4e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a52:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005a56:	6812      	ldr	r2, [r2, #0]
 8005a58:	fab2 f282 	clz	r2, r2
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a62:	b2d2      	uxtb	r2, r2
 8005a64:	f002 021f 	and.w	r2, r2, #31
 8005a68:	2101      	movs	r1, #1
 8005a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8005a6e:	4013      	ands	r3, r2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d184      	bne.n	800597e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a74:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d105      	bne.n	8005a88 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a7c:	4b23      	ldr	r3, [pc, #140]	@ (8005b0c <HAL_RCC_OscConfig+0xc58>)
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	4a22      	ldr	r2, [pc, #136]	@ (8005b0c <HAL_RCC_OscConfig+0xc58>)
 8005a82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a86:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 8242 	beq.w	8005f1e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8005b0c <HAL_RCC_OscConfig+0xc58>)
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f003 030c 	and.w	r3, r3, #12
 8005aa2:	2b08      	cmp	r3, #8
 8005aa4:	f000 8213 	beq.w	8005ece <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005aac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	f040 8162 	bne.w	8005d7e <HAL_RCC_OscConfig+0xeca>
 8005aba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005abe:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005ac2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005ac6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005acc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	fa93 f2a3 	rbit	r2, r3
 8005ad6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ada:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005ade:	601a      	str	r2, [r3, #0]
  return result;
 8005ae0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ae4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005ae8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aea:	fab3 f383 	clz	r3, r3
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005af4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	461a      	mov	r2, r3
 8005afc:	2300      	movs	r3, #0
 8005afe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b00:	f7fe f9d0 	bl	8003ea4 <HAL_GetTick>
 8005b04:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b08:	e00c      	b.n	8005b24 <HAL_RCC_OscConfig+0xc70>
 8005b0a:	bf00      	nop
 8005b0c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b10:	f7fe f9c8 	bl	8003ea4 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e1fd      	b.n	8005f20 <HAL_RCC_OscConfig+0x106c>
 8005b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b28:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005b2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005b30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b36:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	fa93 f2a3 	rbit	r2, r3
 8005b40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b44:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005b48:	601a      	str	r2, [r3, #0]
  return result;
 8005b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b4e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005b52:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b54:	fab3 f383 	clz	r3, r3
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	095b      	lsrs	r3, r3, #5
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	f043 0301 	orr.w	r3, r3, #1
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d102      	bne.n	8005b6e <HAL_RCC_OscConfig+0xcba>
 8005b68:	4bb0      	ldr	r3, [pc, #704]	@ (8005e2c <HAL_RCC_OscConfig+0xf78>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	e027      	b.n	8005bbe <HAL_RCC_OscConfig+0xd0a>
 8005b6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b72:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005b76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005b7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b80:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	fa93 f2a3 	rbit	r2, r3
 8005b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b8e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b98:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005b9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ba6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	fa93 f2a3 	rbit	r2, r3
 8005bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005bb4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	4b9c      	ldr	r3, [pc, #624]	@ (8005e2c <HAL_RCC_OscConfig+0xf78>)
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005bc2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8005bc6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005bca:	6011      	str	r1, [r2, #0]
 8005bcc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005bd0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8005bd4:	6812      	ldr	r2, [r2, #0]
 8005bd6:	fa92 f1a2 	rbit	r1, r2
 8005bda:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005bde:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005be2:	6011      	str	r1, [r2, #0]
  return result;
 8005be4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005be8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005bec:	6812      	ldr	r2, [r2, #0]
 8005bee:	fab2 f282 	clz	r2, r2
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	f042 0220 	orr.w	r2, r2, #32
 8005bf8:	b2d2      	uxtb	r2, r2
 8005bfa:	f002 021f 	and.w	r2, r2, #31
 8005bfe:	2101      	movs	r1, #1
 8005c00:	fa01 f202 	lsl.w	r2, r1, r2
 8005c04:	4013      	ands	r3, r2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d182      	bne.n	8005b10 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c0a:	4b88      	ldr	r3, [pc, #544]	@ (8005e2c <HAL_RCC_OscConfig+0xf78>)
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005c12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	430b      	orrs	r3, r1
 8005c2c:	497f      	ldr	r1, [pc, #508]	@ (8005e2c <HAL_RCC_OscConfig+0xf78>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	604b      	str	r3, [r1, #4]
 8005c32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c36:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005c3a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005c3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c44:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	fa93 f2a3 	rbit	r2, r3
 8005c4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c52:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005c56:	601a      	str	r2, [r3, #0]
  return result;
 8005c58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c5c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005c60:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c62:	fab3 f383 	clz	r3, r3
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005c6c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	461a      	mov	r2, r3
 8005c74:	2301      	movs	r3, #1
 8005c76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c78:	f7fe f914 	bl	8003ea4 <HAL_GetTick>
 8005c7c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c80:	e009      	b.n	8005c96 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c82:	f7fe f90f 	bl	8003ea4 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e144      	b.n	8005f20 <HAL_RCC_OscConfig+0x106c>
 8005c96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c9a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005c9e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005ca2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ca4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ca8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	fa93 f2a3 	rbit	r2, r3
 8005cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cb6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005cba:	601a      	str	r2, [r3, #0]
  return result;
 8005cbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cc0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005cc4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005cc6:	fab3 f383 	clz	r3, r3
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	095b      	lsrs	r3, r3, #5
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	f043 0301 	orr.w	r3, r3, #1
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d102      	bne.n	8005ce0 <HAL_RCC_OscConfig+0xe2c>
 8005cda:	4b54      	ldr	r3, [pc, #336]	@ (8005e2c <HAL_RCC_OscConfig+0xf78>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	e027      	b.n	8005d30 <HAL_RCC_OscConfig+0xe7c>
 8005ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ce4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005ce8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005cec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cf2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	fa93 f2a3 	rbit	r2, r3
 8005cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d00:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d0a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005d0e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d18:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	fa93 f2a3 	rbit	r2, r3
 8005d22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d26:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	4b3f      	ldr	r3, [pc, #252]	@ (8005e2c <HAL_RCC_OscConfig+0xf78>)
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005d34:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005d38:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005d3c:	6011      	str	r1, [r2, #0]
 8005d3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005d42:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005d46:	6812      	ldr	r2, [r2, #0]
 8005d48:	fa92 f1a2 	rbit	r1, r2
 8005d4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005d50:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005d54:	6011      	str	r1, [r2, #0]
  return result;
 8005d56:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005d5a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005d5e:	6812      	ldr	r2, [r2, #0]
 8005d60:	fab2 f282 	clz	r2, r2
 8005d64:	b2d2      	uxtb	r2, r2
 8005d66:	f042 0220 	orr.w	r2, r2, #32
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	f002 021f 	and.w	r2, r2, #31
 8005d70:	2101      	movs	r1, #1
 8005d72:	fa01 f202 	lsl.w	r2, r1, r2
 8005d76:	4013      	ands	r3, r2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d082      	beq.n	8005c82 <HAL_RCC_OscConfig+0xdce>
 8005d7c:	e0cf      	b.n	8005f1e <HAL_RCC_OscConfig+0x106a>
 8005d7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d82:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005d86:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005d8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d90:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	fa93 f2a3 	rbit	r2, r3
 8005d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d9e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005da2:	601a      	str	r2, [r3, #0]
  return result;
 8005da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005da8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005dac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dae:	fab3 f383 	clz	r3, r3
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005db8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc4:	f7fe f86e 	bl	8003ea4 <HAL_GetTick>
 8005dc8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005dcc:	e009      	b.n	8005de2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dce:	f7fe f869 	bl	8003ea4 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e09e      	b.n	8005f20 <HAL_RCC_OscConfig+0x106c>
 8005de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005de6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005dea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005df4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	fa93 f2a3 	rbit	r2, r3
 8005dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e02:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005e06:	601a      	str	r2, [r3, #0]
  return result;
 8005e08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e0c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005e10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e12:	fab3 f383 	clz	r3, r3
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	095b      	lsrs	r3, r3, #5
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	f043 0301 	orr.w	r3, r3, #1
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d104      	bne.n	8005e30 <HAL_RCC_OscConfig+0xf7c>
 8005e26:	4b01      	ldr	r3, [pc, #4]	@ (8005e2c <HAL_RCC_OscConfig+0xf78>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	e029      	b.n	8005e80 <HAL_RCC_OscConfig+0xfcc>
 8005e2c:	40021000 	.word	0x40021000
 8005e30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e34:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005e38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005e3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e42:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	fa93 f2a3 	rbit	r2, r3
 8005e4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e50:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e5a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005e5e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e68:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	fa93 f2a3 	rbit	r2, r3
 8005e72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e76:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005e7a:	601a      	str	r2, [r3, #0]
 8005e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8005f2c <HAL_RCC_OscConfig+0x1078>)
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e80:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005e84:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005e88:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005e8c:	6011      	str	r1, [r2, #0]
 8005e8e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005e92:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005e96:	6812      	ldr	r2, [r2, #0]
 8005e98:	fa92 f1a2 	rbit	r1, r2
 8005e9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005ea0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005ea4:	6011      	str	r1, [r2, #0]
  return result;
 8005ea6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005eaa:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005eae:	6812      	ldr	r2, [r2, #0]
 8005eb0:	fab2 f282 	clz	r2, r2
 8005eb4:	b2d2      	uxtb	r2, r2
 8005eb6:	f042 0220 	orr.w	r2, r2, #32
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	f002 021f 	and.w	r2, r2, #31
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d180      	bne.n	8005dce <HAL_RCC_OscConfig+0xf1a>
 8005ecc:	e027      	b.n	8005f1e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ece:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ed2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d101      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e01e      	b.n	8005f20 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ee2:	4b12      	ldr	r3, [pc, #72]	@ (8005f2c <HAL_RCC_OscConfig+0x1078>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005eea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005eee:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ef6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d10b      	bne.n	8005f1a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005f02:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005f06:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d001      	beq.n	8005f1e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e000      	b.n	8005f20 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	40021000 	.word	0x40021000

08005f30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b09e      	sub	sp, #120	@ 0x78
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e162      	b.n	800620e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f48:	4b90      	ldr	r3, [pc, #576]	@ (800618c <HAL_RCC_ClockConfig+0x25c>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d910      	bls.n	8005f78 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f56:	4b8d      	ldr	r3, [pc, #564]	@ (800618c <HAL_RCC_ClockConfig+0x25c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f023 0207 	bic.w	r2, r3, #7
 8005f5e:	498b      	ldr	r1, [pc, #556]	@ (800618c <HAL_RCC_ClockConfig+0x25c>)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f66:	4b89      	ldr	r3, [pc, #548]	@ (800618c <HAL_RCC_ClockConfig+0x25c>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0307 	and.w	r3, r3, #7
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d001      	beq.n	8005f78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e14a      	b.n	800620e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d008      	beq.n	8005f96 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f84:	4b82      	ldr	r3, [pc, #520]	@ (8006190 <HAL_RCC_ClockConfig+0x260>)
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	497f      	ldr	r1, [pc, #508]	@ (8006190 <HAL_RCC_ClockConfig+0x260>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 80dc 	beq.w	800615c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d13c      	bne.n	8006026 <HAL_RCC_ClockConfig+0xf6>
 8005fac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005fb0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005fb4:	fa93 f3a3 	rbit	r3, r3
 8005fb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005fba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fbc:	fab3 f383 	clz	r3, r3
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	095b      	lsrs	r3, r3, #5
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	f043 0301 	orr.w	r3, r3, #1
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d102      	bne.n	8005fd6 <HAL_RCC_ClockConfig+0xa6>
 8005fd0:	4b6f      	ldr	r3, [pc, #444]	@ (8006190 <HAL_RCC_ClockConfig+0x260>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	e00f      	b.n	8005ff6 <HAL_RCC_ClockConfig+0xc6>
 8005fd6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005fda:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005fde:	fa93 f3a3 	rbit	r3, r3
 8005fe2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005fe4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005fe8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005fea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fec:	fa93 f3a3 	rbit	r3, r3
 8005ff0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ff2:	4b67      	ldr	r3, [pc, #412]	@ (8006190 <HAL_RCC_ClockConfig+0x260>)
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005ffa:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005ffc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ffe:	fa92 f2a2 	rbit	r2, r2
 8006002:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8006004:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006006:	fab2 f282 	clz	r2, r2
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	f042 0220 	orr.w	r2, r2, #32
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	f002 021f 	and.w	r2, r2, #31
 8006016:	2101      	movs	r1, #1
 8006018:	fa01 f202 	lsl.w	r2, r1, r2
 800601c:	4013      	ands	r3, r2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d17b      	bne.n	800611a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e0f3      	b.n	800620e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	2b02      	cmp	r3, #2
 800602c:	d13c      	bne.n	80060a8 <HAL_RCC_ClockConfig+0x178>
 800602e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006032:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006034:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006036:	fa93 f3a3 	rbit	r3, r3
 800603a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800603c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800603e:	fab3 f383 	clz	r3, r3
 8006042:	b2db      	uxtb	r3, r3
 8006044:	095b      	lsrs	r3, r3, #5
 8006046:	b2db      	uxtb	r3, r3
 8006048:	f043 0301 	orr.w	r3, r3, #1
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b01      	cmp	r3, #1
 8006050:	d102      	bne.n	8006058 <HAL_RCC_ClockConfig+0x128>
 8006052:	4b4f      	ldr	r3, [pc, #316]	@ (8006190 <HAL_RCC_ClockConfig+0x260>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	e00f      	b.n	8006078 <HAL_RCC_ClockConfig+0x148>
 8006058:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800605c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800605e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006060:	fa93 f3a3 	rbit	r3, r3
 8006064:	647b      	str	r3, [r7, #68]	@ 0x44
 8006066:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800606a:	643b      	str	r3, [r7, #64]	@ 0x40
 800606c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800606e:	fa93 f3a3 	rbit	r3, r3
 8006072:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006074:	4b46      	ldr	r3, [pc, #280]	@ (8006190 <HAL_RCC_ClockConfig+0x260>)
 8006076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006078:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800607c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800607e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006080:	fa92 f2a2 	rbit	r2, r2
 8006084:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8006086:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006088:	fab2 f282 	clz	r2, r2
 800608c:	b2d2      	uxtb	r2, r2
 800608e:	f042 0220 	orr.w	r2, r2, #32
 8006092:	b2d2      	uxtb	r2, r2
 8006094:	f002 021f 	and.w	r2, r2, #31
 8006098:	2101      	movs	r1, #1
 800609a:	fa01 f202 	lsl.w	r2, r1, r2
 800609e:	4013      	ands	r3, r2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d13a      	bne.n	800611a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e0b2      	b.n	800620e <HAL_RCC_ClockConfig+0x2de>
 80060a8:	2302      	movs	r3, #2
 80060aa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ae:	fa93 f3a3 	rbit	r3, r3
 80060b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80060b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060b6:	fab3 f383 	clz	r3, r3
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	095b      	lsrs	r3, r3, #5
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	f043 0301 	orr.w	r3, r3, #1
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d102      	bne.n	80060d0 <HAL_RCC_ClockConfig+0x1a0>
 80060ca:	4b31      	ldr	r3, [pc, #196]	@ (8006190 <HAL_RCC_ClockConfig+0x260>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	e00d      	b.n	80060ec <HAL_RCC_ClockConfig+0x1bc>
 80060d0:	2302      	movs	r3, #2
 80060d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d6:	fa93 f3a3 	rbit	r3, r3
 80060da:	627b      	str	r3, [r7, #36]	@ 0x24
 80060dc:	2302      	movs	r3, #2
 80060de:	623b      	str	r3, [r7, #32]
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	fa93 f3a3 	rbit	r3, r3
 80060e6:	61fb      	str	r3, [r7, #28]
 80060e8:	4b29      	ldr	r3, [pc, #164]	@ (8006190 <HAL_RCC_ClockConfig+0x260>)
 80060ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ec:	2202      	movs	r2, #2
 80060ee:	61ba      	str	r2, [r7, #24]
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	fa92 f2a2 	rbit	r2, r2
 80060f6:	617a      	str	r2, [r7, #20]
  return result;
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	fab2 f282 	clz	r2, r2
 80060fe:	b2d2      	uxtb	r2, r2
 8006100:	f042 0220 	orr.w	r2, r2, #32
 8006104:	b2d2      	uxtb	r2, r2
 8006106:	f002 021f 	and.w	r2, r2, #31
 800610a:	2101      	movs	r1, #1
 800610c:	fa01 f202 	lsl.w	r2, r1, r2
 8006110:	4013      	ands	r3, r2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e079      	b.n	800620e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800611a:	4b1d      	ldr	r3, [pc, #116]	@ (8006190 <HAL_RCC_ClockConfig+0x260>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f023 0203 	bic.w	r2, r3, #3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	491a      	ldr	r1, [pc, #104]	@ (8006190 <HAL_RCC_ClockConfig+0x260>)
 8006128:	4313      	orrs	r3, r2
 800612a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800612c:	f7fd feba 	bl	8003ea4 <HAL_GetTick>
 8006130:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006132:	e00a      	b.n	800614a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006134:	f7fd feb6 	bl	8003ea4 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006142:	4293      	cmp	r3, r2
 8006144:	d901      	bls.n	800614a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e061      	b.n	800620e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800614a:	4b11      	ldr	r3, [pc, #68]	@ (8006190 <HAL_RCC_ClockConfig+0x260>)
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f003 020c 	and.w	r2, r3, #12
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	429a      	cmp	r2, r3
 800615a:	d1eb      	bne.n	8006134 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800615c:	4b0b      	ldr	r3, [pc, #44]	@ (800618c <HAL_RCC_ClockConfig+0x25c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0307 	and.w	r3, r3, #7
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	429a      	cmp	r2, r3
 8006168:	d214      	bcs.n	8006194 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800616a:	4b08      	ldr	r3, [pc, #32]	@ (800618c <HAL_RCC_ClockConfig+0x25c>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f023 0207 	bic.w	r2, r3, #7
 8006172:	4906      	ldr	r1, [pc, #24]	@ (800618c <HAL_RCC_ClockConfig+0x25c>)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	4313      	orrs	r3, r2
 8006178:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800617a:	4b04      	ldr	r3, [pc, #16]	@ (800618c <HAL_RCC_ClockConfig+0x25c>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0307 	and.w	r3, r3, #7
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	429a      	cmp	r2, r3
 8006186:	d005      	beq.n	8006194 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e040      	b.n	800620e <HAL_RCC_ClockConfig+0x2de>
 800618c:	40022000 	.word	0x40022000
 8006190:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b00      	cmp	r3, #0
 800619e:	d008      	beq.n	80061b2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006218 <HAL_RCC_ClockConfig+0x2e8>)
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	491a      	ldr	r1, [pc, #104]	@ (8006218 <HAL_RCC_ClockConfig+0x2e8>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d009      	beq.n	80061d2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061be:	4b16      	ldr	r3, [pc, #88]	@ (8006218 <HAL_RCC_ClockConfig+0x2e8>)
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	4912      	ldr	r1, [pc, #72]	@ (8006218 <HAL_RCC_ClockConfig+0x2e8>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80061d2:	f000 f829 	bl	8006228 <HAL_RCC_GetSysClockFreq>
 80061d6:	4601      	mov	r1, r0
 80061d8:	4b0f      	ldr	r3, [pc, #60]	@ (8006218 <HAL_RCC_ClockConfig+0x2e8>)
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061e0:	22f0      	movs	r2, #240	@ 0xf0
 80061e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	fa92 f2a2 	rbit	r2, r2
 80061ea:	60fa      	str	r2, [r7, #12]
  return result;
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	fab2 f282 	clz	r2, r2
 80061f2:	b2d2      	uxtb	r2, r2
 80061f4:	40d3      	lsrs	r3, r2
 80061f6:	4a09      	ldr	r2, [pc, #36]	@ (800621c <HAL_RCC_ClockConfig+0x2ec>)
 80061f8:	5cd3      	ldrb	r3, [r2, r3]
 80061fa:	fa21 f303 	lsr.w	r3, r1, r3
 80061fe:	4a08      	ldr	r2, [pc, #32]	@ (8006220 <HAL_RCC_ClockConfig+0x2f0>)
 8006200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006202:	4b08      	ldr	r3, [pc, #32]	@ (8006224 <HAL_RCC_ClockConfig+0x2f4>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4618      	mov	r0, r3
 8006208:	f7fd fe08 	bl	8003e1c <HAL_InitTick>
  
  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3778      	adds	r7, #120	@ 0x78
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	40021000 	.word	0x40021000
 800621c:	08006dac 	.word	0x08006dac
 8006220:	20000000 	.word	0x20000000
 8006224:	20000004 	.word	0x20000004

08006228 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006228:	b480      	push	{r7}
 800622a:	b08b      	sub	sp, #44	@ 0x2c
 800622c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	61fb      	str	r3, [r7, #28]
 8006232:	2300      	movs	r3, #0
 8006234:	61bb      	str	r3, [r7, #24]
 8006236:	2300      	movs	r3, #0
 8006238:	627b      	str	r3, [r7, #36]	@ 0x24
 800623a:	2300      	movs	r3, #0
 800623c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800623e:	2300      	movs	r3, #0
 8006240:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006242:	4b29      	ldr	r3, [pc, #164]	@ (80062e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	f003 030c 	and.w	r3, r3, #12
 800624e:	2b04      	cmp	r3, #4
 8006250:	d002      	beq.n	8006258 <HAL_RCC_GetSysClockFreq+0x30>
 8006252:	2b08      	cmp	r3, #8
 8006254:	d003      	beq.n	800625e <HAL_RCC_GetSysClockFreq+0x36>
 8006256:	e03c      	b.n	80062d2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006258:	4b24      	ldr	r3, [pc, #144]	@ (80062ec <HAL_RCC_GetSysClockFreq+0xc4>)
 800625a:	623b      	str	r3, [r7, #32]
      break;
 800625c:	e03c      	b.n	80062d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8006264:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8006268:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	fa92 f2a2 	rbit	r2, r2
 8006270:	607a      	str	r2, [r7, #4]
  return result;
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	fab2 f282 	clz	r2, r2
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	40d3      	lsrs	r3, r2
 800627c:	4a1c      	ldr	r2, [pc, #112]	@ (80062f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800627e:	5cd3      	ldrb	r3, [r2, r3]
 8006280:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006282:	4b19      	ldr	r3, [pc, #100]	@ (80062e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006286:	f003 030f 	and.w	r3, r3, #15
 800628a:	220f      	movs	r2, #15
 800628c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	fa92 f2a2 	rbit	r2, r2
 8006294:	60fa      	str	r2, [r7, #12]
  return result;
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	fab2 f282 	clz	r2, r2
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	40d3      	lsrs	r3, r2
 80062a0:	4a14      	ldr	r2, [pc, #80]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80062a2:	5cd3      	ldrb	r3, [r2, r3]
 80062a4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d008      	beq.n	80062c2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80062b0:	4a0e      	ldr	r2, [pc, #56]	@ (80062ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	fb02 f303 	mul.w	r3, r2, r3
 80062be:	627b      	str	r3, [r7, #36]	@ 0x24
 80062c0:	e004      	b.n	80062cc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	4a0c      	ldr	r2, [pc, #48]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80062c6:	fb02 f303 	mul.w	r3, r2, r3
 80062ca:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80062cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ce:	623b      	str	r3, [r7, #32]
      break;
 80062d0:	e002      	b.n	80062d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80062d2:	4b0a      	ldr	r3, [pc, #40]	@ (80062fc <HAL_RCC_GetSysClockFreq+0xd4>)
 80062d4:	623b      	str	r3, [r7, #32]
      break;
 80062d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062d8:	6a3b      	ldr	r3, [r7, #32]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	372c      	adds	r7, #44	@ 0x2c
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	40021000 	.word	0x40021000
 80062ec:	01e84800 	.word	0x01e84800
 80062f0:	08006dc4 	.word	0x08006dc4
 80062f4:	08006dd4 	.word	0x08006dd4
 80062f8:	003d0900 	.word	0x003d0900
 80062fc:	007a1200 	.word	0x007a1200

08006300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006300:	b480      	push	{r7}
 8006302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006304:	4b03      	ldr	r3, [pc, #12]	@ (8006314 <HAL_RCC_GetHCLKFreq+0x14>)
 8006306:	681b      	ldr	r3, [r3, #0]
}
 8006308:	4618      	mov	r0, r3
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	20000000 	.word	0x20000000

08006318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800631e:	f7ff ffef 	bl	8006300 <HAL_RCC_GetHCLKFreq>
 8006322:	4601      	mov	r1, r0
 8006324:	4b0b      	ldr	r3, [pc, #44]	@ (8006354 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800632c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8006330:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	fa92 f2a2 	rbit	r2, r2
 8006338:	603a      	str	r2, [r7, #0]
  return result;
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	fab2 f282 	clz	r2, r2
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	40d3      	lsrs	r3, r2
 8006344:	4a04      	ldr	r2, [pc, #16]	@ (8006358 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006346:	5cd3      	ldrb	r3, [r2, r3]
 8006348:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800634c:	4618      	mov	r0, r3
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	40021000 	.word	0x40021000
 8006358:	08006dbc 	.word	0x08006dbc

0800635c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006362:	f7ff ffcd 	bl	8006300 <HAL_RCC_GetHCLKFreq>
 8006366:	4601      	mov	r1, r0
 8006368:	4b0b      	ldr	r3, [pc, #44]	@ (8006398 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8006370:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8006374:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	fa92 f2a2 	rbit	r2, r2
 800637c:	603a      	str	r2, [r7, #0]
  return result;
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	fab2 f282 	clz	r2, r2
 8006384:	b2d2      	uxtb	r2, r2
 8006386:	40d3      	lsrs	r3, r2
 8006388:	4a04      	ldr	r2, [pc, #16]	@ (800639c <HAL_RCC_GetPCLK2Freq+0x40>)
 800638a:	5cd3      	ldrb	r3, [r2, r3]
 800638c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006390:	4618      	mov	r0, r3
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	40021000 	.word	0x40021000
 800639c:	08006dbc 	.word	0x08006dbc

080063a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b092      	sub	sp, #72	@ 0x48
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063a8:	2300      	movs	r3, #0
 80063aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80063b0:	2300      	movs	r3, #0
 80063b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 80cd 	beq.w	800655e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063c4:	4b86      	ldr	r3, [pc, #536]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063c6:	69db      	ldr	r3, [r3, #28]
 80063c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10e      	bne.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063d0:	4b83      	ldr	r3, [pc, #524]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	4a82      	ldr	r2, [pc, #520]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063da:	61d3      	str	r3, [r2, #28]
 80063dc:	4b80      	ldr	r3, [pc, #512]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063e4:	60bb      	str	r3, [r7, #8]
 80063e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063e8:	2301      	movs	r3, #1
 80063ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ee:	4b7d      	ldr	r3, [pc, #500]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d118      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063fa:	4b7a      	ldr	r3, [pc, #488]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a79      	ldr	r2, [pc, #484]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006404:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006406:	f7fd fd4d 	bl	8003ea4 <HAL_GetTick>
 800640a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800640c:	e008      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800640e:	f7fd fd49 	bl	8003ea4 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	2b64      	cmp	r3, #100	@ 0x64
 800641a:	d901      	bls.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e0db      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006420:	4b70      	ldr	r3, [pc, #448]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006428:	2b00      	cmp	r3, #0
 800642a:	d0f0      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800642c:	4b6c      	ldr	r3, [pc, #432]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006434:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006438:	2b00      	cmp	r3, #0
 800643a:	d07d      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006444:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006446:	429a      	cmp	r2, r3
 8006448:	d076      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800644a:	4b65      	ldr	r3, [pc, #404]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006454:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006458:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800645a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645c:	fa93 f3a3 	rbit	r3, r3
 8006460:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006464:	fab3 f383 	clz	r3, r3
 8006468:	b2db      	uxtb	r3, r3
 800646a:	461a      	mov	r2, r3
 800646c:	4b5e      	ldr	r3, [pc, #376]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800646e:	4413      	add	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	461a      	mov	r2, r3
 8006474:	2301      	movs	r3, #1
 8006476:	6013      	str	r3, [r2, #0]
 8006478:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800647c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800647e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006480:	fa93 f3a3 	rbit	r3, r3
 8006484:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006488:	fab3 f383 	clz	r3, r3
 800648c:	b2db      	uxtb	r3, r3
 800648e:	461a      	mov	r2, r3
 8006490:	4b55      	ldr	r3, [pc, #340]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006492:	4413      	add	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	461a      	mov	r2, r3
 8006498:	2300      	movs	r3, #0
 800649a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800649c:	4a50      	ldr	r2, [pc, #320]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800649e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064a0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80064a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d045      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ac:	f7fd fcfa 	bl	8003ea4 <HAL_GetTick>
 80064b0:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064b2:	e00a      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064b4:	f7fd fcf6 	bl	8003ea4 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d901      	bls.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e086      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80064ca:	2302      	movs	r3, #2
 80064cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d0:	fa93 f3a3 	rbit	r3, r3
 80064d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80064d6:	2302      	movs	r3, #2
 80064d8:	623b      	str	r3, [r7, #32]
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	fa93 f3a3 	rbit	r3, r3
 80064e0:	61fb      	str	r3, [r7, #28]
  return result;
 80064e2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064e4:	fab3 f383 	clz	r3, r3
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	095b      	lsrs	r3, r3, #5
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	f043 0302 	orr.w	r3, r3, #2
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d102      	bne.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80064f8:	4b39      	ldr	r3, [pc, #228]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80064fa:	6a1b      	ldr	r3, [r3, #32]
 80064fc:	e007      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80064fe:	2302      	movs	r3, #2
 8006500:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	fa93 f3a3 	rbit	r3, r3
 8006508:	617b      	str	r3, [r7, #20]
 800650a:	4b35      	ldr	r3, [pc, #212]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800650c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650e:	2202      	movs	r2, #2
 8006510:	613a      	str	r2, [r7, #16]
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	fa92 f2a2 	rbit	r2, r2
 8006518:	60fa      	str	r2, [r7, #12]
  return result;
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	fab2 f282 	clz	r2, r2
 8006520:	b2d2      	uxtb	r2, r2
 8006522:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006526:	b2d2      	uxtb	r2, r2
 8006528:	f002 021f 	and.w	r2, r2, #31
 800652c:	2101      	movs	r1, #1
 800652e:	fa01 f202 	lsl.w	r2, r1, r2
 8006532:	4013      	ands	r3, r2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0bd      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006538:	4b29      	ldr	r3, [pc, #164]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	4926      	ldr	r1, [pc, #152]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006546:	4313      	orrs	r3, r2
 8006548:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800654a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800654e:	2b01      	cmp	r3, #1
 8006550:	d105      	bne.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006552:	4b23      	ldr	r3, [pc, #140]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	4a22      	ldr	r2, [pc, #136]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006558:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800655c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b00      	cmp	r3, #0
 8006568:	d008      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800656a:	4b1d      	ldr	r3, [pc, #116]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800656c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800656e:	f023 0203 	bic.w	r2, r3, #3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	491a      	ldr	r1, [pc, #104]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006578:	4313      	orrs	r3, r2
 800657a:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0320 	and.w	r3, r3, #32
 8006584:	2b00      	cmp	r3, #0
 8006586:	d008      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006588:	4b15      	ldr	r3, [pc, #84]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800658a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800658c:	f023 0210 	bic.w	r2, r3, #16
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	4912      	ldr	r1, [pc, #72]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006596:	4313      	orrs	r3, r2
 8006598:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d008      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80065a6:	4b0e      	ldr	r3, [pc, #56]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80065a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065aa:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	490b      	ldr	r1, [pc, #44]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d008      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80065c4:	4b06      	ldr	r3, [pc, #24]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80065c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	4903      	ldr	r1, [pc, #12]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3748      	adds	r7, #72	@ 0x48
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	40021000 	.word	0x40021000
 80065e4:	40007000 	.word	0x40007000
 80065e8:	10908100 	.word	0x10908100

080065ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e040      	b.n	8006680 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006602:	2b00      	cmp	r3, #0
 8006604:	d106      	bne.n	8006614 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7f9 ff4a 	bl	80004a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2224      	movs	r2, #36	@ 0x24
 8006618:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 0201 	bic.w	r2, r2, #1
 8006628:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f82c 	bl	8006688 <UART_SetConfig>
 8006630:	4603      	mov	r3, r0
 8006632:	2b01      	cmp	r3, #1
 8006634:	d101      	bne.n	800663a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e022      	b.n	8006680 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f956 	bl	80068f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006656:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689a      	ldr	r2, [r3, #8]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006666:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f042 0201 	orr.w	r2, r2, #1
 8006676:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f9dd 	bl	8006a38 <UART_CheckIdleState>
 800667e:	4603      	mov	r3, r0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b088      	sub	sp, #32
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006690:	2300      	movs	r3, #0
 8006692:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	431a      	orrs	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	431a      	orrs	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	4b8a      	ldr	r3, [pc, #552]	@ (80068dc <UART_SetConfig+0x254>)
 80066b4:	4013      	ands	r3, r2
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6812      	ldr	r2, [r2, #0]
 80066ba:	6979      	ldr	r1, [r7, #20]
 80066bc:	430b      	orrs	r3, r1
 80066be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68da      	ldr	r2, [r3, #12]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a78      	ldr	r2, [pc, #480]	@ (80068e0 <UART_SetConfig+0x258>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d120      	bne.n	8006746 <UART_SetConfig+0xbe>
 8006704:	4b77      	ldr	r3, [pc, #476]	@ (80068e4 <UART_SetConfig+0x25c>)
 8006706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006708:	f003 0303 	and.w	r3, r3, #3
 800670c:	2b03      	cmp	r3, #3
 800670e:	d817      	bhi.n	8006740 <UART_SetConfig+0xb8>
 8006710:	a201      	add	r2, pc, #4	@ (adr r2, 8006718 <UART_SetConfig+0x90>)
 8006712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006716:	bf00      	nop
 8006718:	08006729 	.word	0x08006729
 800671c:	08006735 	.word	0x08006735
 8006720:	0800673b 	.word	0x0800673b
 8006724:	0800672f 	.word	0x0800672f
 8006728:	2300      	movs	r3, #0
 800672a:	77fb      	strb	r3, [r7, #31]
 800672c:	e01d      	b.n	800676a <UART_SetConfig+0xe2>
 800672e:	2302      	movs	r3, #2
 8006730:	77fb      	strb	r3, [r7, #31]
 8006732:	e01a      	b.n	800676a <UART_SetConfig+0xe2>
 8006734:	2304      	movs	r3, #4
 8006736:	77fb      	strb	r3, [r7, #31]
 8006738:	e017      	b.n	800676a <UART_SetConfig+0xe2>
 800673a:	2308      	movs	r3, #8
 800673c:	77fb      	strb	r3, [r7, #31]
 800673e:	e014      	b.n	800676a <UART_SetConfig+0xe2>
 8006740:	2310      	movs	r3, #16
 8006742:	77fb      	strb	r3, [r7, #31]
 8006744:	e011      	b.n	800676a <UART_SetConfig+0xe2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a67      	ldr	r2, [pc, #412]	@ (80068e8 <UART_SetConfig+0x260>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d102      	bne.n	8006756 <UART_SetConfig+0xce>
 8006750:	2300      	movs	r3, #0
 8006752:	77fb      	strb	r3, [r7, #31]
 8006754:	e009      	b.n	800676a <UART_SetConfig+0xe2>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a64      	ldr	r2, [pc, #400]	@ (80068ec <UART_SetConfig+0x264>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d102      	bne.n	8006766 <UART_SetConfig+0xde>
 8006760:	2300      	movs	r3, #0
 8006762:	77fb      	strb	r3, [r7, #31]
 8006764:	e001      	b.n	800676a <UART_SetConfig+0xe2>
 8006766:	2310      	movs	r3, #16
 8006768:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006772:	d15a      	bne.n	800682a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006774:	7ffb      	ldrb	r3, [r7, #31]
 8006776:	2b08      	cmp	r3, #8
 8006778:	d827      	bhi.n	80067ca <UART_SetConfig+0x142>
 800677a:	a201      	add	r2, pc, #4	@ (adr r2, 8006780 <UART_SetConfig+0xf8>)
 800677c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006780:	080067a5 	.word	0x080067a5
 8006784:	080067ad 	.word	0x080067ad
 8006788:	080067b5 	.word	0x080067b5
 800678c:	080067cb 	.word	0x080067cb
 8006790:	080067bb 	.word	0x080067bb
 8006794:	080067cb 	.word	0x080067cb
 8006798:	080067cb 	.word	0x080067cb
 800679c:	080067cb 	.word	0x080067cb
 80067a0:	080067c3 	.word	0x080067c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067a4:	f7ff fdb8 	bl	8006318 <HAL_RCC_GetPCLK1Freq>
 80067a8:	61b8      	str	r0, [r7, #24]
        break;
 80067aa:	e013      	b.n	80067d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067ac:	f7ff fdd6 	bl	800635c <HAL_RCC_GetPCLK2Freq>
 80067b0:	61b8      	str	r0, [r7, #24]
        break;
 80067b2:	e00f      	b.n	80067d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067b4:	4b4e      	ldr	r3, [pc, #312]	@ (80068f0 <UART_SetConfig+0x268>)
 80067b6:	61bb      	str	r3, [r7, #24]
        break;
 80067b8:	e00c      	b.n	80067d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ba:	f7ff fd35 	bl	8006228 <HAL_RCC_GetSysClockFreq>
 80067be:	61b8      	str	r0, [r7, #24]
        break;
 80067c0:	e008      	b.n	80067d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067c6:	61bb      	str	r3, [r7, #24]
        break;
 80067c8:	e004      	b.n	80067d4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	77bb      	strb	r3, [r7, #30]
        break;
 80067d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d074      	beq.n	80068c4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	005a      	lsls	r2, r3, #1
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	085b      	lsrs	r3, r3, #1
 80067e4:	441a      	add	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	2b0f      	cmp	r3, #15
 80067f4:	d916      	bls.n	8006824 <UART_SetConfig+0x19c>
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067fc:	d212      	bcs.n	8006824 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	b29b      	uxth	r3, r3
 8006802:	f023 030f 	bic.w	r3, r3, #15
 8006806:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	085b      	lsrs	r3, r3, #1
 800680c:	b29b      	uxth	r3, r3
 800680e:	f003 0307 	and.w	r3, r3, #7
 8006812:	b29a      	uxth	r2, r3
 8006814:	89fb      	ldrh	r3, [r7, #14]
 8006816:	4313      	orrs	r3, r2
 8006818:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	89fa      	ldrh	r2, [r7, #14]
 8006820:	60da      	str	r2, [r3, #12]
 8006822:	e04f      	b.n	80068c4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	77bb      	strb	r3, [r7, #30]
 8006828:	e04c      	b.n	80068c4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800682a:	7ffb      	ldrb	r3, [r7, #31]
 800682c:	2b08      	cmp	r3, #8
 800682e:	d828      	bhi.n	8006882 <UART_SetConfig+0x1fa>
 8006830:	a201      	add	r2, pc, #4	@ (adr r2, 8006838 <UART_SetConfig+0x1b0>)
 8006832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006836:	bf00      	nop
 8006838:	0800685d 	.word	0x0800685d
 800683c:	08006865 	.word	0x08006865
 8006840:	0800686d 	.word	0x0800686d
 8006844:	08006883 	.word	0x08006883
 8006848:	08006873 	.word	0x08006873
 800684c:	08006883 	.word	0x08006883
 8006850:	08006883 	.word	0x08006883
 8006854:	08006883 	.word	0x08006883
 8006858:	0800687b 	.word	0x0800687b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800685c:	f7ff fd5c 	bl	8006318 <HAL_RCC_GetPCLK1Freq>
 8006860:	61b8      	str	r0, [r7, #24]
        break;
 8006862:	e013      	b.n	800688c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006864:	f7ff fd7a 	bl	800635c <HAL_RCC_GetPCLK2Freq>
 8006868:	61b8      	str	r0, [r7, #24]
        break;
 800686a:	e00f      	b.n	800688c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800686c:	4b20      	ldr	r3, [pc, #128]	@ (80068f0 <UART_SetConfig+0x268>)
 800686e:	61bb      	str	r3, [r7, #24]
        break;
 8006870:	e00c      	b.n	800688c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006872:	f7ff fcd9 	bl	8006228 <HAL_RCC_GetSysClockFreq>
 8006876:	61b8      	str	r0, [r7, #24]
        break;
 8006878:	e008      	b.n	800688c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800687a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800687e:	61bb      	str	r3, [r7, #24]
        break;
 8006880:	e004      	b.n	800688c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	77bb      	strb	r3, [r7, #30]
        break;
 800688a:	bf00      	nop
    }

    if (pclk != 0U)
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d018      	beq.n	80068c4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	085a      	lsrs	r2, r3, #1
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	441a      	add	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	2b0f      	cmp	r3, #15
 80068aa:	d909      	bls.n	80068c0 <UART_SetConfig+0x238>
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068b2:	d205      	bcs.n	80068c0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	60da      	str	r2, [r3, #12]
 80068be:	e001      	b.n	80068c4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80068d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3720      	adds	r7, #32
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	efff69f3 	.word	0xefff69f3
 80068e0:	40013800 	.word	0x40013800
 80068e4:	40021000 	.word	0x40021000
 80068e8:	40004400 	.word	0x40004400
 80068ec:	40004800 	.word	0x40004800
 80068f0:	007a1200 	.word	0x007a1200

080068f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00a      	beq.n	800691e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00a      	beq.n	8006940 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	430a      	orrs	r2, r1
 800693e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006944:	f003 0304 	and.w	r3, r3, #4
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00a      	beq.n	8006962 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006966:	f003 0308 	and.w	r3, r3, #8
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00a      	beq.n	8006984 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	430a      	orrs	r2, r1
 8006982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006988:	f003 0310 	and.w	r3, r3, #16
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00a      	beq.n	80069a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069aa:	f003 0320 	and.w	r3, r3, #32
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00a      	beq.n	80069c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d01a      	beq.n	8006a0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069f2:	d10a      	bne.n	8006a0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	605a      	str	r2, [r3, #4]
  }
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b098      	sub	sp, #96	@ 0x60
 8006a3c:	af02      	add	r7, sp, #8
 8006a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a48:	f7fd fa2c 	bl	8003ea4 <HAL_GetTick>
 8006a4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0308 	and.w	r3, r3, #8
 8006a58:	2b08      	cmp	r3, #8
 8006a5a:	d12e      	bne.n	8006aba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a64:	2200      	movs	r2, #0
 8006a66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f88c 	bl	8006b88 <UART_WaitOnFlagUntilTimeout>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d021      	beq.n	8006aba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a7e:	e853 3f00 	ldrex	r3, [r3]
 8006a82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	461a      	mov	r2, r3
 8006a92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a96:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a9c:	e841 2300 	strex	r3, r2, [r1]
 8006aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1e6      	bne.n	8006a76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e062      	b.n	8006b80 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0304 	and.w	r3, r3, #4
 8006ac4:	2b04      	cmp	r3, #4
 8006ac6:	d149      	bne.n	8006b5c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ac8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f856 	bl	8006b88 <UART_WaitOnFlagUntilTimeout>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d03c      	beq.n	8006b5c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aea:	e853 3f00 	ldrex	r3, [r3]
 8006aee:	623b      	str	r3, [r7, #32]
   return(result);
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	461a      	mov	r2, r3
 8006afe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b00:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b02:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b08:	e841 2300 	strex	r3, r2, [r1]
 8006b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e6      	bne.n	8006ae2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3308      	adds	r3, #8
 8006b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	e853 3f00 	ldrex	r3, [r3]
 8006b22:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f023 0301 	bic.w	r3, r3, #1
 8006b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3308      	adds	r3, #8
 8006b32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b34:	61fa      	str	r2, [r7, #28]
 8006b36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b38:	69b9      	ldr	r1, [r7, #24]
 8006b3a:	69fa      	ldr	r2, [r7, #28]
 8006b3c:	e841 2300 	strex	r3, r2, [r1]
 8006b40:	617b      	str	r3, [r7, #20]
   return(result);
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e5      	bne.n	8006b14 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e011      	b.n	8006b80 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3758      	adds	r7, #88	@ 0x58
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	603b      	str	r3, [r7, #0]
 8006b94:	4613      	mov	r3, r2
 8006b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b98:	e049      	b.n	8006c2e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ba0:	d045      	beq.n	8006c2e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ba2:	f7fd f97f 	bl	8003ea4 <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	69ba      	ldr	r2, [r7, #24]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d302      	bcc.n	8006bb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e048      	b.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0304 	and.w	r3, r3, #4
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d031      	beq.n	8006c2e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69db      	ldr	r3, [r3, #28]
 8006bd0:	f003 0308 	and.w	r3, r3, #8
 8006bd4:	2b08      	cmp	r3, #8
 8006bd6:	d110      	bne.n	8006bfa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2208      	movs	r2, #8
 8006bde:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 f838 	bl	8006c56 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2208      	movs	r2, #8
 8006bea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e029      	b.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c08:	d111      	bne.n	8006c2e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f000 f81e 	bl	8006c56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e00f      	b.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	69da      	ldr	r2, [r3, #28]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	4013      	ands	r3, r2
 8006c38:	68ba      	ldr	r2, [r7, #8]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	bf0c      	ite	eq
 8006c3e:	2301      	moveq	r3, #1
 8006c40:	2300      	movne	r3, #0
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	461a      	mov	r2, r3
 8006c46:	79fb      	ldrb	r3, [r7, #7]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d0a6      	beq.n	8006b9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b095      	sub	sp, #84	@ 0x54
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c66:	e853 3f00 	ldrex	r3, [r3]
 8006c6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	461a      	mov	r2, r3
 8006c7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c84:	e841 2300 	strex	r3, r2, [r1]
 8006c88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1e6      	bne.n	8006c5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3308      	adds	r3, #8
 8006c96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	e853 3f00 	ldrex	r3, [r3]
 8006c9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	f023 0301 	bic.w	r3, r3, #1
 8006ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	3308      	adds	r3, #8
 8006cae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cb8:	e841 2300 	strex	r3, r2, [r1]
 8006cbc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1e5      	bne.n	8006c90 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d118      	bne.n	8006cfe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	f023 0310 	bic.w	r3, r3, #16
 8006ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cea:	61bb      	str	r3, [r7, #24]
 8006cec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cee:	6979      	ldr	r1, [r7, #20]
 8006cf0:	69ba      	ldr	r2, [r7, #24]
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1e6      	bne.n	8006ccc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2220      	movs	r2, #32
 8006d02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006d12:	bf00      	nop
 8006d14:	3754      	adds	r7, #84	@ 0x54
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <memset>:
 8006d1e:	4402      	add	r2, r0
 8006d20:	4603      	mov	r3, r0
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d100      	bne.n	8006d28 <memset+0xa>
 8006d26:	4770      	bx	lr
 8006d28:	f803 1b01 	strb.w	r1, [r3], #1
 8006d2c:	e7f9      	b.n	8006d22 <memset+0x4>
	...

08006d30 <__libc_init_array>:
 8006d30:	b570      	push	{r4, r5, r6, lr}
 8006d32:	4d0d      	ldr	r5, [pc, #52]	@ (8006d68 <__libc_init_array+0x38>)
 8006d34:	4c0d      	ldr	r4, [pc, #52]	@ (8006d6c <__libc_init_array+0x3c>)
 8006d36:	1b64      	subs	r4, r4, r5
 8006d38:	10a4      	asrs	r4, r4, #2
 8006d3a:	2600      	movs	r6, #0
 8006d3c:	42a6      	cmp	r6, r4
 8006d3e:	d109      	bne.n	8006d54 <__libc_init_array+0x24>
 8006d40:	4d0b      	ldr	r5, [pc, #44]	@ (8006d70 <__libc_init_array+0x40>)
 8006d42:	4c0c      	ldr	r4, [pc, #48]	@ (8006d74 <__libc_init_array+0x44>)
 8006d44:	f000 f826 	bl	8006d94 <_init>
 8006d48:	1b64      	subs	r4, r4, r5
 8006d4a:	10a4      	asrs	r4, r4, #2
 8006d4c:	2600      	movs	r6, #0
 8006d4e:	42a6      	cmp	r6, r4
 8006d50:	d105      	bne.n	8006d5e <__libc_init_array+0x2e>
 8006d52:	bd70      	pop	{r4, r5, r6, pc}
 8006d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d58:	4798      	blx	r3
 8006d5a:	3601      	adds	r6, #1
 8006d5c:	e7ee      	b.n	8006d3c <__libc_init_array+0xc>
 8006d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d62:	4798      	blx	r3
 8006d64:	3601      	adds	r6, #1
 8006d66:	e7f2      	b.n	8006d4e <__libc_init_array+0x1e>
 8006d68:	08006de4 	.word	0x08006de4
 8006d6c:	08006de4 	.word	0x08006de4
 8006d70:	08006de4 	.word	0x08006de4
 8006d74:	08006de8 	.word	0x08006de8

08006d78 <memcpy>:
 8006d78:	440a      	add	r2, r1
 8006d7a:	4291      	cmp	r1, r2
 8006d7c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006d80:	d100      	bne.n	8006d84 <memcpy+0xc>
 8006d82:	4770      	bx	lr
 8006d84:	b510      	push	{r4, lr}
 8006d86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d8e:	4291      	cmp	r1, r2
 8006d90:	d1f9      	bne.n	8006d86 <memcpy+0xe>
 8006d92:	bd10      	pop	{r4, pc}

08006d94 <_init>:
 8006d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d96:	bf00      	nop
 8006d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d9a:	bc08      	pop	{r3}
 8006d9c:	469e      	mov	lr, r3
 8006d9e:	4770      	bx	lr

08006da0 <_fini>:
 8006da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da2:	bf00      	nop
 8006da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006da6:	bc08      	pop	{r3}
 8006da8:	469e      	mov	lr, r3
 8006daa:	4770      	bx	lr
