
vl53l1_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c360  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800c4f0  0800c4f0  0000d4f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c988  0800c988  0000e204  2**0
                  CONTENTS
  4 .ARM          00000008  0800c988  0800c988  0000d988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c990  0800c990  0000e204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c990  0800c990  0000d990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c994  0800c994  0000d994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000204  20000000  0800c998  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e204  2**0
                  CONTENTS
 10 .bss          0000034c  20000204  20000204  0000e204  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000550  20000550  0000e204  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023ec3  00000000  00000000  0000e234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002eab  00000000  00000000  000320f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c0  00000000  00000000  00034fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e75  00000000  00000000  00036268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000211fb  00000000  00000000  000370dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017da2  00000000  00000000  000582d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be022  00000000  00000000  0007007a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012e09c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005fc0  00000000  00000000  0012e0e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  001340a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c4d8 	.word	0x0800c4d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	0800c4d8 	.word	0x0800c4d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	230a      	movs	r3, #10
 8000bba:	68b9      	ldr	r1, [r7, #8]
 8000bbc:	4803      	ldr	r0, [pc, #12]	@ (8000bcc <_write+0x24>)
 8000bbe:	f002 ffe9 	bl	8003b94 <HAL_UART_Transmit>
  return len;
 8000bc2:	687b      	ldr	r3, [r7, #4]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000274 	.word	0x20000274

08000bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  setbuf(stdout, NULL);
 8000bd8:	4b56      	ldr	r3, [pc, #344]	@ (8000d34 <main+0x164>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f009 fc43 	bl	800a46c <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be6:	f000 fb65 	bl	80012b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bea:	f000 f8ab 	bl	8000d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bee:	f000 f969 	bl	8000ec4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bf2:	f000 f937 	bl	8000e64 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000bf6:	f000 f8f7 	bl	8000de8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Dev.I2cDevAddr = 0x52;
 8000bfa:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8000bfe:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8000c02:	2252      	movs	r2, #82	@ 0x52
 8000c04:	f883 2398 	strb.w	r2, [r3, #920]	@ 0x398
  Dev.I2cHandle = &hi2c1;
 8000c08:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8000c0c:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8000c10:	4a49      	ldr	r2, [pc, #292]	@ (8000d38 <main+0x168>)
 8000c12:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
//  Dev.comms_type = 1;
//  Dev.comms_speed_khz = 400;

  //sensor initialize;
  while(1){
	  Status = VL53L1_WaitDeviceBooted(&Dev);
 8000c16:	f107 0320 	add.w	r3, r7, #32
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f003 fc01 	bl	8004422 <VL53L1_WaitDeviceBooted>
 8000c20:	4603      	mov	r3, r0
 8000c22:	f887 33c7 	strb.w	r3, [r7, #967]	@ 0x3c7
	  if(Status == 0){
 8000c26:	f997 33c7 	ldrsb.w	r3, [r7, #967]	@ 0x3c7
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d000      	beq.n	8000c30 <main+0x60>
	  Status = VL53L1_WaitDeviceBooted(&Dev);
 8000c2e:	e7f2      	b.n	8000c16 <main+0x46>
	  	  break;
 8000c30:	bf00      	nop
	    }
  }
  printf("%d\n\r",Status);
 8000c32:	f997 33c7 	ldrsb.w	r3, [r7, #967]	@ 0x3c7
 8000c36:	4619      	mov	r1, r3
 8000c38:	4840      	ldr	r0, [pc, #256]	@ (8000d3c <main+0x16c>)
 8000c3a:	f009 fc05 	bl	800a448 <iprintf>
  Status = VL53L1_DataInit(&Dev);
 8000c3e:	f107 0320 	add.w	r3, r7, #32
 8000c42:	4618      	mov	r0, r3
 8000c44:	f003 fb7b 	bl	800433e <VL53L1_DataInit>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	f887 33c7 	strb.w	r3, [r7, #967]	@ 0x3c7
  printf("%d\n\r",Status);
 8000c4e:	f997 33c7 	ldrsb.w	r3, [r7, #967]	@ 0x3c7
 8000c52:	4619      	mov	r1, r3
 8000c54:	4839      	ldr	r0, [pc, #228]	@ (8000d3c <main+0x16c>)
 8000c56:	f009 fbf7 	bl	800a448 <iprintf>
  Status = VL53L1_StaticInit(&Dev);
 8000c5a:	f107 0320 	add.w	r3, r7, #32
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f003 fbc0 	bl	80043e4 <VL53L1_StaticInit>
 8000c64:	4603      	mov	r3, r0
 8000c66:	f887 33c7 	strb.w	r3, [r7, #967]	@ 0x3c7
  printf("%d\n\r",Status);
 8000c6a:	f997 33c7 	ldrsb.w	r3, [r7, #967]	@ 0x3c7
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4832      	ldr	r0, [pc, #200]	@ (8000d3c <main+0x16c>)
 8000c72:	f009 fbe9 	bl	800a448 <iprintf>
  Status = VL53L1_SetPresetMode(&Dev, VL53L1_PRESETMODE_AUTONOMOUS);
 8000c76:	f107 0320 	add.w	r3, r7, #32
 8000c7a:	2103      	movs	r1, #3
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f003 fcba 	bl	80045f6 <VL53L1_SetPresetMode>
 8000c82:	4603      	mov	r3, r0
 8000c84:	f887 33c7 	strb.w	r3, [r7, #967]	@ 0x3c7
  printf("%d\n\r",Status);
 8000c88:	f997 33c7 	ldrsb.w	r3, [r7, #967]	@ 0x3c7
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	482b      	ldr	r0, [pc, #172]	@ (8000d3c <main+0x16c>)
 8000c90:	f009 fbda 	bl	800a448 <iprintf>
  Status = VL53L1_SetDistanceMode(&Dev, VL53L1_DISTANCEMODE_LONG);
 8000c94:	f107 0320 	add.w	r3, r7, #32
 8000c98:	2103      	movs	r1, #3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f003 fcf0 	bl	8004680 <VL53L1_SetDistanceMode>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	f887 33c7 	strb.w	r3, [r7, #967]	@ 0x3c7
  printf("%d\n\r",Status);
 8000ca6:	f997 33c7 	ldrsb.w	r3, [r7, #967]	@ 0x3c7
 8000caa:	4619      	mov	r1, r3
 8000cac:	4823      	ldr	r0, [pc, #140]	@ (8000d3c <main+0x16c>)
 8000cae:	f009 fbcb 	bl	800a448 <iprintf>
  Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(&Dev, 50);
 8000cb2:	f107 0320 	add.w	r3, r7, #32
 8000cb6:	2132      	movs	r1, #50	@ 0x32
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f003 fee1 	bl	8004a80 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	f887 33c7 	strb.w	r3, [r7, #967]	@ 0x3c7
  printf("%d\n\r",Status);
 8000cc4:	f997 33c7 	ldrsb.w	r3, [r7, #967]	@ 0x3c7
 8000cc8:	4619      	mov	r1, r3
 8000cca:	481c      	ldr	r0, [pc, #112]	@ (8000d3c <main+0x16c>)
 8000ccc:	f009 fbbc 	bl	800a448 <iprintf>

  //start
  VL53L1_StartMeasurement(&Dev);
 8000cd0:	f107 0320 	add.w	r3, r7, #32
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f004 f811 	bl	8004cfc <VL53L1_StartMeasurement>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
   uint8_t data_ready = 0;
 8000cda:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8000cde:	f2a3 33c5 	subw	r3, r3, #965	@ 0x3c5
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
	VL53L1_GetMeasurementDataReady(&Dev, &data_ready);
 8000ce6:	1cfa      	adds	r2, r7, #3
 8000ce8:	f107 0320 	add.w	r3, r7, #32
 8000cec:	4611      	mov	r1, r2
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f004 f886 	bl	8004e00 <VL53L1_GetMeasurementDataReady>
		if (!data_ready) {
 8000cf4:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8000cf8:	f2a3 33c5 	subw	r3, r3, #965	@ 0x3c5
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d016      	beq.n	8000d30 <main+0x160>
			continue;
		}
	VL53L1_GetRangingMeasurementData(&Dev,&data);
 8000d02:	1d3a      	adds	r2, r7, #4
 8000d04:	f107 0320 	add.w	r3, r7, #32
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f004 fa34 	bl	8005178 <VL53L1_GetRangingMeasurementData>

	printf("VL53L1X: %4d\n\r", data.RangeMilliMeter);
 8000d10:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8000d14:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 8000d18:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4808      	ldr	r0, [pc, #32]	@ (8000d40 <main+0x170>)
 8000d20:	f009 fb92 	bl	800a448 <iprintf>
	VL53L1_ClearInterruptAndStartMeasurement(&Dev);
 8000d24:	f107 0320 	add.w	r3, r7, #32
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f004 f853 	bl	8004dd4 <VL53L1_ClearInterruptAndStartMeasurement>
 8000d2e:	e7d4      	b.n	8000cda <main+0x10a>
			continue;
 8000d30:	bf00      	nop
  {
 8000d32:	e7d2      	b.n	8000cda <main+0x10a>
 8000d34:	20000048 	.word	0x20000048
 8000d38:	20000220 	.word	0x20000220
 8000d3c:	0800c58c 	.word	0x0800c58c
 8000d40:	0800c594 	.word	0x0800c594

08000d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b096      	sub	sp, #88	@ 0x58
 8000d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d4e:	2228      	movs	r2, #40	@ 0x28
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f009 fc89 	bl	800a66a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
 8000d74:	611a      	str	r2, [r3, #16]
 8000d76:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d80:	2310      	movs	r3, #16
 8000d82:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d88:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f001 fb17 	bl	80023c0 <HAL_RCC_OscConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d98:	f000 f8c4 	bl	8000f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f002 fb40 	bl	800343c <HAL_RCC_ClockConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000dc2:	f000 f8af 	bl	8000f24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000dc6:	2320      	movs	r3, #32
 8000dc8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f002 fd6b 	bl	80038ac <HAL_RCCEx_PeriphCLKConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ddc:	f000 f8a2 	bl	8000f24 <Error_Handler>
  }
}
 8000de0:	bf00      	nop
 8000de2:	3758      	adds	r7, #88	@ 0x58
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dec:	4b1b      	ldr	r3, [pc, #108]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000dee:	4a1c      	ldr	r2, [pc, #112]	@ (8000e60 <MX_I2C1_Init+0x78>)
 8000df0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000df2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000df4:	f240 220b 	movw	r2, #523	@ 0x20b
 8000df8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dfa:	4b18      	ldr	r3, [pc, #96]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e00:	4b16      	ldr	r3, [pc, #88]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e06:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e0c:	4b13      	ldr	r3, [pc, #76]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e12:	4b12      	ldr	r3, [pc, #72]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e18:	4b10      	ldr	r3, [pc, #64]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e24:	480d      	ldr	r0, [pc, #52]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e26:	f000 fd27 	bl	8001878 <HAL_I2C_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e30:	f000 f878 	bl	8000f24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e34:	2100      	movs	r1, #0
 8000e36:	4809      	ldr	r0, [pc, #36]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e38:	f001 fa2a 	bl	8002290 <HAL_I2CEx_ConfigAnalogFilter>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000e42:	f000 f86f 	bl	8000f24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e46:	2100      	movs	r1, #0
 8000e48:	4804      	ldr	r0, [pc, #16]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e4a:	f001 fa6c 	bl	8002326 <HAL_I2CEx_ConfigDigitalFilter>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000e54:	f000 f866 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000220 	.word	0x20000220
 8000e60:	40005400 	.word	0x40005400

08000e64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e68:	4b14      	ldr	r3, [pc, #80]	@ (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e6a:	4a15      	ldr	r2, [pc, #84]	@ (8000ec0 <MX_USART2_UART_Init+0x5c>)
 8000e6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e6e:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e76:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	@ (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e94:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <MX_USART2_UART_Init+0x58>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <MX_USART2_UART_Init+0x58>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	@ (8000ebc <MX_USART2_UART_Init+0x58>)
 8000ea8:	f002 fe26 	bl	8003af8 <HAL_UART_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000eb2:	f000 f837 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000274 	.word	0x20000274
 8000ec0:	40004400 	.word	0x40004400

08000ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eca:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <MX_GPIO_Init+0x5c>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	4a14      	ldr	r2, [pc, #80]	@ (8000f20 <MX_GPIO_Init+0x5c>)
 8000ed0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ed4:	6153      	str	r3, [r2, #20]
 8000ed6:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <MX_GPIO_Init+0x5c>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f20 <MX_GPIO_Init+0x5c>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f20 <MX_GPIO_Init+0x5c>)
 8000ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eec:	6153      	str	r3, [r2, #20]
 8000eee:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <MX_GPIO_Init+0x5c>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	4b09      	ldr	r3, [pc, #36]	@ (8000f20 <MX_GPIO_Init+0x5c>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	4a08      	ldr	r2, [pc, #32]	@ (8000f20 <MX_GPIO_Init+0x5c>)
 8000f00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f04:	6153      	str	r3, [r2, #20]
 8000f06:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <MX_GPIO_Init+0x5c>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40021000 	.word	0x40021000

08000f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
}
 8000f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <Error_Handler+0x8>

08000f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <HAL_MspInit+0x44>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f74 <HAL_MspInit+0x44>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6193      	str	r3, [r2, #24]
 8000f42:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <HAL_MspInit+0x44>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <HAL_MspInit+0x44>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	4a08      	ldr	r2, [pc, #32]	@ (8000f74 <HAL_MspInit+0x44>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f58:	61d3      	str	r3, [r2, #28]
 8000f5a:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <HAL_MspInit+0x44>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000

08000f78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	@ 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a17      	ldr	r2, [pc, #92]	@ (8000ff4 <HAL_I2C_MspInit+0x7c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d127      	bne.n	8000fea <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <HAL_I2C_MspInit+0x80>)
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	4a16      	ldr	r2, [pc, #88]	@ (8000ff8 <HAL_I2C_MspInit+0x80>)
 8000fa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fa4:	6153      	str	r3, [r2, #20]
 8000fa6:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <HAL_I2C_MspInit+0x80>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fb2:	23c0      	movs	r3, #192	@ 0xc0
 8000fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb6:	2312      	movs	r3, #18
 8000fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480b      	ldr	r0, [pc, #44]	@ (8000ffc <HAL_I2C_MspInit+0x84>)
 8000fce:	f000 fae1 	bl	8001594 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fd2:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <HAL_I2C_MspInit+0x80>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	4a08      	ldr	r2, [pc, #32]	@ (8000ff8 <HAL_I2C_MspInit+0x80>)
 8000fd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fdc:	61d3      	str	r3, [r2, #28]
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <HAL_I2C_MspInit+0x80>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	@ 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40005400 	.word	0x40005400
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	48000400 	.word	0x48000400

08001000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	@ 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a18      	ldr	r2, [pc, #96]	@ (8001080 <HAL_UART_MspInit+0x80>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d129      	bne.n	8001076 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001022:	4b18      	ldr	r3, [pc, #96]	@ (8001084 <HAL_UART_MspInit+0x84>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	4a17      	ldr	r2, [pc, #92]	@ (8001084 <HAL_UART_MspInit+0x84>)
 8001028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800102c:	61d3      	str	r3, [r2, #28]
 800102e:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <HAL_UART_MspInit+0x84>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <HAL_UART_MspInit+0x84>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	4a11      	ldr	r2, [pc, #68]	@ (8001084 <HAL_UART_MspInit+0x84>)
 8001040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001044:	6153      	str	r3, [r2, #20]
 8001046:	4b0f      	ldr	r3, [pc, #60]	@ (8001084 <HAL_UART_MspInit+0x84>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001052:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001064:	2307      	movs	r3, #7
 8001066:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001072:	f000 fa8f 	bl	8001594 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001076:	bf00      	nop
 8001078:	3728      	adds	r7, #40	@ 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40004400 	.word	0x40004400
 8001084:	40021000 	.word	0x40021000

08001088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <NMI_Handler+0x4>

08001090 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <HardFault_Handler+0x4>

08001098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <MemManage_Handler+0x4>

080010a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <BusFault_Handler+0x4>

080010a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <UsageFault_Handler+0x4>

080010b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010de:	f000 f92f 	bl	8001340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  return 1;
 80010ea:	2301      	movs	r3, #1
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <_kill>:

int _kill(int pid, int sig)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001100:	f009 fb18 	bl	800a734 <__errno>
 8001104:	4603      	mov	r3, r0
 8001106:	2216      	movs	r2, #22
 8001108:	601a      	str	r2, [r3, #0]
  return -1;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <_exit>:

void _exit (int status)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800111e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ffe7 	bl	80010f6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <_exit+0x12>

0800112c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	e00a      	b.n	8001154 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800113e:	f3af 8000 	nop.w
 8001142:	4601      	mov	r1, r0
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	60ba      	str	r2, [r7, #8]
 800114a:	b2ca      	uxtb	r2, r1
 800114c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3301      	adds	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	429a      	cmp	r2, r3
 800115a:	dbf0      	blt.n	800113e <_read+0x12>
  }

  return len;
 800115c:	687b      	ldr	r3, [r7, #4]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800116e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800118e:	605a      	str	r2, [r3, #4]
  return 0;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <_isatty>:

int _isatty(int file)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011a6:	2301      	movs	r3, #1
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d8:	4a14      	ldr	r2, [pc, #80]	@ (800122c <_sbrk+0x5c>)
 80011da:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <_sbrk+0x60>)
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e4:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <_sbrk+0x64>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d102      	bne.n	80011f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011ec:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <_sbrk+0x64>)
 80011ee:	4a12      	ldr	r2, [pc, #72]	@ (8001238 <_sbrk+0x68>)
 80011f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011f2:	4b10      	ldr	r3, [pc, #64]	@ (8001234 <_sbrk+0x64>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d207      	bcs.n	8001210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001200:	f009 fa98 	bl	800a734 <__errno>
 8001204:	4603      	mov	r3, r0
 8001206:	220c      	movs	r2, #12
 8001208:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800120a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800120e:	e009      	b.n	8001224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001210:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <_sbrk+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001216:	4b07      	ldr	r3, [pc, #28]	@ (8001234 <_sbrk+0x64>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	4a05      	ldr	r2, [pc, #20]	@ (8001234 <_sbrk+0x64>)
 8001220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001222:	68fb      	ldr	r3, [r7, #12]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20003000 	.word	0x20003000
 8001230:	00000400 	.word	0x00000400
 8001234:	200002fc 	.word	0x200002fc
 8001238:	20000550 	.word	0x20000550

0800123c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <SystemInit+0x20>)
 8001242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001246:	4a05      	ldr	r2, [pc, #20]	@ (800125c <SystemInit+0x20>)
 8001248:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800124c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001260:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001298 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001264:	f7ff ffea 	bl	800123c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001268:	480c      	ldr	r0, [pc, #48]	@ (800129c <LoopForever+0x6>)
  ldr r1, =_edata
 800126a:	490d      	ldr	r1, [pc, #52]	@ (80012a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800126c:	4a0d      	ldr	r2, [pc, #52]	@ (80012a4 <LoopForever+0xe>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001270:	e002      	b.n	8001278 <LoopCopyDataInit>

08001272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001276:	3304      	adds	r3, #4

08001278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800127c:	d3f9      	bcc.n	8001272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127e:	4a0a      	ldr	r2, [pc, #40]	@ (80012a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001280:	4c0a      	ldr	r4, [pc, #40]	@ (80012ac <LoopForever+0x16>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001284:	e001      	b.n	800128a <LoopFillZerobss>

08001286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001288:	3204      	adds	r2, #4

0800128a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800128c:	d3fb      	bcc.n	8001286 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128e:	f009 fa57 	bl	800a740 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001292:	f7ff fc9d 	bl	8000bd0 <main>

08001296 <LoopForever>:

LoopForever:
    b LoopForever
 8001296:	e7fe      	b.n	8001296 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001298:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800129c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a0:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 80012a4:	0800c998 	.word	0x0800c998
  ldr r2, =_sbss
 80012a8:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 80012ac:	20000550 	.word	0x20000550

080012b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012b0:	e7fe      	b.n	80012b0 <ADC1_2_IRQHandler>
	...

080012b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <HAL_Init+0x28>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a07      	ldr	r2, [pc, #28]	@ (80012dc <HAL_Init+0x28>)
 80012be:	f043 0310 	orr.w	r3, r3, #16
 80012c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c4:	2003      	movs	r0, #3
 80012c6:	f000 f931 	bl	800152c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 f808 	bl	80012e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d0:	f7ff fe2e 	bl	8000f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40022000 	.word	0x40022000

080012e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e8:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <HAL_InitTick+0x54>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_InitTick+0x58>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f93b 	bl	800157a <HAL_SYSTICK_Config>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e00e      	b.n	800132c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b0f      	cmp	r3, #15
 8001312:	d80a      	bhi.n	800132a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001314:	2200      	movs	r2, #0
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800131c:	f000 f911 	bl	8001542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001320:	4a06      	ldr	r2, [pc, #24]	@ (800133c <HAL_InitTick+0x5c>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	e000      	b.n	800132c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000000 	.word	0x20000000
 8001338:	20000008 	.word	0x20000008
 800133c:	20000004 	.word	0x20000004

08001340 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <HAL_IncTick+0x20>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_IncTick+0x24>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4413      	add	r3, r2
 8001350:	4a04      	ldr	r2, [pc, #16]	@ (8001364 <HAL_IncTick+0x24>)
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000008 	.word	0x20000008
 8001364:	20000300 	.word	0x20000300

08001368 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return uwTick;  
 800136c:	4b03      	ldr	r3, [pc, #12]	@ (800137c <HAL_GetTick+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000300 	.word	0x20000300

08001380 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001388:	f7ff ffee 	bl	8001368 <HAL_GetTick>
 800138c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001398:	d005      	beq.n	80013a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139a:	4b0a      	ldr	r3, [pc, #40]	@ (80013c4 <HAL_Delay+0x44>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013a6:	bf00      	nop
 80013a8:	f7ff ffde 	bl	8001368 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d8f7      	bhi.n	80013a8 <HAL_Delay+0x28>
  {
  }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000008 	.word	0x20000008

080013c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d8:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013e4:	4013      	ands	r3, r2
 80013e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fa:	4a04      	ldr	r2, [pc, #16]	@ (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	60d3      	str	r3, [r2, #12]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001414:	4b04      	ldr	r3, [pc, #16]	@ (8001428 <__NVIC_GetPriorityGrouping+0x18>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	f003 0307 	and.w	r3, r3, #7
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	2b00      	cmp	r3, #0
 800143e:	db0a      	blt.n	8001456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	490c      	ldr	r1, [pc, #48]	@ (8001478 <__NVIC_SetPriority+0x4c>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	0112      	lsls	r2, r2, #4
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	440b      	add	r3, r1
 8001450:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001454:	e00a      	b.n	800146c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4908      	ldr	r1, [pc, #32]	@ (800147c <__NVIC_SetPriority+0x50>)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	3b04      	subs	r3, #4
 8001464:	0112      	lsls	r2, r2, #4
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	440b      	add	r3, r1
 800146a:	761a      	strb	r2, [r3, #24]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	@ 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f1c3 0307 	rsb	r3, r3, #7
 800149a:	2b04      	cmp	r3, #4
 800149c:	bf28      	it	cs
 800149e:	2304      	movcs	r3, #4
 80014a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3304      	adds	r3, #4
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d902      	bls.n	80014b0 <NVIC_EncodePriority+0x30>
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3b03      	subs	r3, #3
 80014ae:	e000      	b.n	80014b2 <NVIC_EncodePriority+0x32>
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	401a      	ands	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	43d9      	mvns	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	4313      	orrs	r3, r2
         );
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3724      	adds	r7, #36	@ 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014f8:	d301      	bcc.n	80014fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00f      	b.n	800151e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001528 <SysTick_Config+0x40>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001506:	210f      	movs	r1, #15
 8001508:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800150c:	f7ff ff8e 	bl	800142c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <SysTick_Config+0x40>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001516:	4b04      	ldr	r3, [pc, #16]	@ (8001528 <SysTick_Config+0x40>)
 8001518:	2207      	movs	r2, #7
 800151a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	e000e010 	.word	0xe000e010

0800152c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff47 	bl	80013c8 <__NVIC_SetPriorityGrouping>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001554:	f7ff ff5c 	bl	8001410 <__NVIC_GetPriorityGrouping>
 8001558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	6978      	ldr	r0, [r7, #20]
 8001560:	f7ff ff8e 	bl	8001480 <NVIC_EncodePriority>
 8001564:	4602      	mov	r2, r0
 8001566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff5d 	bl	800142c <__NVIC_SetPriority>
}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ffb0 	bl	80014e8 <SysTick_Config>
 8001588:	4603      	mov	r3, r0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001594:	b480      	push	{r7}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a2:	e14e      	b.n	8001842 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	2101      	movs	r1, #1
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	fa01 f303 	lsl.w	r3, r1, r3
 80015b0:	4013      	ands	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 8140 	beq.w	800183c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d005      	beq.n	80015d4 <HAL_GPIO_Init+0x40>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d130      	bne.n	8001636 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	2203      	movs	r2, #3
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800160a:	2201      	movs	r2, #1
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	4013      	ands	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	091b      	lsrs	r3, r3, #4
 8001620:	f003 0201 	and.w	r2, r3, #1
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	2b03      	cmp	r3, #3
 8001640:	d017      	beq.n	8001672 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	2203      	movs	r2, #3
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d123      	bne.n	80016c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	08da      	lsrs	r2, r3, #3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3208      	adds	r2, #8
 8001686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	220f      	movs	r2, #15
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	691a      	ldr	r2, [r3, #16]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	08da      	lsrs	r2, r3, #3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3208      	adds	r2, #8
 80016c0:	6939      	ldr	r1, [r7, #16]
 80016c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	2203      	movs	r2, #3
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 0203 	and.w	r2, r3, #3
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 809a 	beq.w	800183c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001708:	4b55      	ldr	r3, [pc, #340]	@ (8001860 <HAL_GPIO_Init+0x2cc>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a54      	ldr	r2, [pc, #336]	@ (8001860 <HAL_GPIO_Init+0x2cc>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6193      	str	r3, [r2, #24]
 8001714:	4b52      	ldr	r3, [pc, #328]	@ (8001860 <HAL_GPIO_Init+0x2cc>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001720:	4a50      	ldr	r2, [pc, #320]	@ (8001864 <HAL_GPIO_Init+0x2d0>)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	089b      	lsrs	r3, r3, #2
 8001726:	3302      	adds	r3, #2
 8001728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	220f      	movs	r2, #15
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800174a:	d013      	beq.n	8001774 <HAL_GPIO_Init+0x1e0>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a46      	ldr	r2, [pc, #280]	@ (8001868 <HAL_GPIO_Init+0x2d4>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d00d      	beq.n	8001770 <HAL_GPIO_Init+0x1dc>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a45      	ldr	r2, [pc, #276]	@ (800186c <HAL_GPIO_Init+0x2d8>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d007      	beq.n	800176c <HAL_GPIO_Init+0x1d8>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a44      	ldr	r2, [pc, #272]	@ (8001870 <HAL_GPIO_Init+0x2dc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d101      	bne.n	8001768 <HAL_GPIO_Init+0x1d4>
 8001764:	2303      	movs	r3, #3
 8001766:	e006      	b.n	8001776 <HAL_GPIO_Init+0x1e2>
 8001768:	2305      	movs	r3, #5
 800176a:	e004      	b.n	8001776 <HAL_GPIO_Init+0x1e2>
 800176c:	2302      	movs	r3, #2
 800176e:	e002      	b.n	8001776 <HAL_GPIO_Init+0x1e2>
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <HAL_GPIO_Init+0x1e2>
 8001774:	2300      	movs	r3, #0
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	f002 0203 	and.w	r2, r2, #3
 800177c:	0092      	lsls	r2, r2, #2
 800177e:	4093      	lsls	r3, r2
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001786:	4937      	ldr	r1, [pc, #220]	@ (8001864 <HAL_GPIO_Init+0x2d0>)
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	089b      	lsrs	r3, r3, #2
 800178c:	3302      	adds	r3, #2
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001794:	4b37      	ldr	r3, [pc, #220]	@ (8001874 <HAL_GPIO_Init+0x2e0>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	43db      	mvns	r3, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017b8:	4a2e      	ldr	r2, [pc, #184]	@ (8001874 <HAL_GPIO_Init+0x2e0>)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017be:	4b2d      	ldr	r3, [pc, #180]	@ (8001874 <HAL_GPIO_Init+0x2e0>)
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4313      	orrs	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017e2:	4a24      	ldr	r2, [pc, #144]	@ (8001874 <HAL_GPIO_Init+0x2e0>)
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017e8:	4b22      	ldr	r3, [pc, #136]	@ (8001874 <HAL_GPIO_Init+0x2e0>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800180c:	4a19      	ldr	r2, [pc, #100]	@ (8001874 <HAL_GPIO_Init+0x2e0>)
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001812:	4b18      	ldr	r3, [pc, #96]	@ (8001874 <HAL_GPIO_Init+0x2e0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	43db      	mvns	r3, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001836:	4a0f      	ldr	r2, [pc, #60]	@ (8001874 <HAL_GPIO_Init+0x2e0>)
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	3301      	adds	r3, #1
 8001840:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	fa22 f303 	lsr.w	r3, r2, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	f47f aea9 	bne.w	80015a4 <HAL_GPIO_Init+0x10>
  }
}
 8001852:	bf00      	nop
 8001854:	bf00      	nop
 8001856:	371c      	adds	r7, #28
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	40021000 	.word	0x40021000
 8001864:	40010000 	.word	0x40010000
 8001868:	48000400 	.word	0x48000400
 800186c:	48000800 	.word	0x48000800
 8001870:	48000c00 	.word	0x48000c00
 8001874:	40010400 	.word	0x40010400

08001878 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e081      	b.n	800198e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d106      	bne.n	80018a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff fb6a 	bl	8000f78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2224      	movs	r2, #36	@ 0x24
 80018a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0201 	bic.w	r2, r2, #1
 80018ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d107      	bne.n	80018f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	e006      	b.n	8001900 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80018fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d104      	bne.n	8001912 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001910:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001920:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001924:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001934:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691a      	ldr	r2, [r3, #16]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69d9      	ldr	r1, [r3, #28]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a1a      	ldr	r2, [r3, #32]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0201 	orr.w	r2, r2, #1
 800196e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2220      	movs	r2, #32
 800197a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af02      	add	r7, sp, #8
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	461a      	mov	r2, r3
 80019a4:	460b      	mov	r3, r1
 80019a6:	817b      	strh	r3, [r7, #10]
 80019a8:	4613      	mov	r3, r2
 80019aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b20      	cmp	r3, #32
 80019b6:	f040 80da 	bne.w	8001b6e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d101      	bne.n	80019c8 <HAL_I2C_Master_Transmit+0x30>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e0d3      	b.n	8001b70 <HAL_I2C_Master_Transmit+0x1d8>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019d0:	f7ff fcca 	bl	8001368 <HAL_GetTick>
 80019d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2319      	movs	r3, #25
 80019dc:	2201      	movs	r2, #1
 80019de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 f9e6 	bl	8001db4 <I2C_WaitOnFlagUntilTimeout>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e0be      	b.n	8001b70 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2221      	movs	r2, #33	@ 0x21
 80019f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2210      	movs	r2, #16
 80019fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2200      	movs	r2, #0
 8001a06:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	893a      	ldrh	r2, [r7, #8]
 8001a12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	2bff      	cmp	r3, #255	@ 0xff
 8001a22:	d90e      	bls.n	8001a42 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	22ff      	movs	r2, #255	@ 0xff
 8001a28:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	8979      	ldrh	r1, [r7, #10]
 8001a32:	4b51      	ldr	r3, [pc, #324]	@ (8001b78 <HAL_I2C_Master_Transmit+0x1e0>)
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 fbf6 	bl	800222c <I2C_TransferConfig>
 8001a40:	e06c      	b.n	8001b1c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	8979      	ldrh	r1, [r7, #10]
 8001a54:	4b48      	ldr	r3, [pc, #288]	@ (8001b78 <HAL_I2C_Master_Transmit+0x1e0>)
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 fbe5 	bl	800222c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001a62:	e05b      	b.n	8001b1c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	6a39      	ldr	r1, [r7, #32]
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f000 f9f2 	bl	8001e52 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e07b      	b.n	8001b70 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7c:	781a      	ldrb	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	3b01      	subs	r3, #1
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d034      	beq.n	8001b1c <HAL_I2C_Master_Transmit+0x184>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d130      	bne.n	8001b1c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2180      	movs	r1, #128	@ 0x80
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 f975 	bl	8001db4 <I2C_WaitOnFlagUntilTimeout>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e04d      	b.n	8001b70 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	2bff      	cmp	r3, #255	@ 0xff
 8001adc:	d90e      	bls.n	8001afc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	22ff      	movs	r2, #255	@ 0xff
 8001ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	8979      	ldrh	r1, [r7, #10]
 8001aec:	2300      	movs	r3, #0
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 fb99 	bl	800222c <I2C_TransferConfig>
 8001afa:	e00f      	b.n	8001b1c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	8979      	ldrh	r1, [r7, #10]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f000 fb88 	bl	800222c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d19e      	bne.n	8001a64 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	6a39      	ldr	r1, [r7, #32]
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 f9d8 	bl	8001ee0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e01a      	b.n	8001b70 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6859      	ldr	r1, [r3, #4]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b7c <HAL_I2C_Master_Transmit+0x1e4>)
 8001b4e:	400b      	ands	r3, r1
 8001b50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2220      	movs	r2, #32
 8001b56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e000      	b.n	8001b70 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001b6e:	2302      	movs	r3, #2
  }
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	80002000 	.word	0x80002000
 8001b7c:	fe00e800 	.word	0xfe00e800

08001b80 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af02      	add	r7, sp, #8
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	817b      	strh	r3, [r7, #10]
 8001b90:	4613      	mov	r3, r2
 8001b92:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b20      	cmp	r3, #32
 8001b9e:	f040 80db 	bne.w	8001d58 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <HAL_I2C_Master_Receive+0x30>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e0d4      	b.n	8001d5a <HAL_I2C_Master_Receive+0x1da>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bb8:	f7ff fbd6 	bl	8001368 <HAL_GetTick>
 8001bbc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	2319      	movs	r3, #25
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 f8f2 	bl	8001db4 <I2C_WaitOnFlagUntilTimeout>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e0bf      	b.n	8001d5a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2222      	movs	r2, #34	@ 0x22
 8001bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2210      	movs	r2, #16
 8001be6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	893a      	ldrh	r2, [r7, #8]
 8001bfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	2bff      	cmp	r3, #255	@ 0xff
 8001c0a:	d90e      	bls.n	8001c2a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	22ff      	movs	r2, #255	@ 0xff
 8001c10:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	8979      	ldrh	r1, [r7, #10]
 8001c1a:	4b52      	ldr	r3, [pc, #328]	@ (8001d64 <HAL_I2C_Master_Receive+0x1e4>)
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 fb02 	bl	800222c <I2C_TransferConfig>
 8001c28:	e06d      	b.n	8001d06 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	8979      	ldrh	r1, [r7, #10]
 8001c3c:	4b49      	ldr	r3, [pc, #292]	@ (8001d64 <HAL_I2C_Master_Receive+0x1e4>)
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f000 faf1 	bl	800222c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001c4a:	e05c      	b.n	8001d06 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	6a39      	ldr	r1, [r7, #32]
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f000 f989 	bl	8001f68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e07c      	b.n	8001d5a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d034      	beq.n	8001d06 <HAL_I2C_Master_Receive+0x186>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d130      	bne.n	8001d06 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	6a3b      	ldr	r3, [r7, #32]
 8001caa:	2200      	movs	r2, #0
 8001cac:	2180      	movs	r1, #128	@ 0x80
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 f880 	bl	8001db4 <I2C_WaitOnFlagUntilTimeout>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e04d      	b.n	8001d5a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	2bff      	cmp	r3, #255	@ 0xff
 8001cc6:	d90e      	bls.n	8001ce6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	22ff      	movs	r2, #255	@ 0xff
 8001ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	8979      	ldrh	r1, [r7, #10]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 faa4 	bl	800222c <I2C_TransferConfig>
 8001ce4:	e00f      	b.n	8001d06 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	8979      	ldrh	r1, [r7, #10]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 fa93 	bl	800222c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d19d      	bne.n	8001c4c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	6a39      	ldr	r1, [r7, #32]
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 f8e3 	bl	8001ee0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e01a      	b.n	8001d5a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2220      	movs	r2, #32
 8001d2a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6859      	ldr	r1, [r3, #4]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <HAL_I2C_Master_Receive+0x1e8>)
 8001d38:	400b      	ands	r3, r1
 8001d3a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	e000      	b.n	8001d5a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001d58:	2302      	movs	r3, #2
  }
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	80002400 	.word	0x80002400
 8001d68:	fe00e800 	.word	0xfe00e800

08001d6c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d103      	bne.n	8001d8a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2200      	movs	r2, #0
 8001d88:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d007      	beq.n	8001da8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699a      	ldr	r2, [r3, #24]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0201 	orr.w	r2, r2, #1
 8001da6:	619a      	str	r2, [r3, #24]
  }
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dc4:	e031      	b.n	8001e2a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001dcc:	d02d      	beq.n	8001e2a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dce:	f7ff facb 	bl	8001368 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d302      	bcc.n	8001de4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d122      	bne.n	8001e2a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699a      	ldr	r2, [r3, #24]
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	4013      	ands	r3, r2
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	bf0c      	ite	eq
 8001df4:	2301      	moveq	r3, #1
 8001df6:	2300      	movne	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d113      	bne.n	8001e2a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e06:	f043 0220 	orr.w	r2, r3, #32
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2220      	movs	r2, #32
 8001e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e00f      	b.n	8001e4a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	699a      	ldr	r2, [r3, #24]
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	4013      	ands	r3, r2
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	bf0c      	ite	eq
 8001e3a:	2301      	moveq	r3, #1
 8001e3c:	2300      	movne	r3, #0
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d0be      	beq.n	8001dc6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b084      	sub	sp, #16
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e5e:	e033      	b.n	8001ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	68b9      	ldr	r1, [r7, #8]
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 f901 	bl	800206c <I2C_IsErrorOccurred>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e031      	b.n	8001ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e7a:	d025      	beq.n	8001ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e7c:	f7ff fa74 	bl	8001368 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d302      	bcc.n	8001e92 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d11a      	bne.n	8001ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d013      	beq.n	8001ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea4:	f043 0220 	orr.w	r2, r3, #32
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e007      	b.n	8001ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d1c4      	bne.n	8001e60 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001eec:	e02f      	b.n	8001f4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f000 f8ba 	bl	800206c <I2C_IsErrorOccurred>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e02d      	b.n	8001f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f02:	f7ff fa31 	bl	8001368 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d302      	bcc.n	8001f18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d11a      	bne.n	8001f4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	f003 0320 	and.w	r3, r3, #32
 8001f22:	2b20      	cmp	r3, #32
 8001f24:	d013      	beq.n	8001f4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2a:	f043 0220 	orr.w	r2, r3, #32
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2220      	movs	r2, #32
 8001f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e007      	b.n	8001f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f003 0320 	and.w	r3, r3, #32
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	d1c8      	bne.n	8001eee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f74:	e06b      	b.n	800204e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 f876 	bl	800206c <I2C_IsErrorOccurred>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e069      	b.n	800205e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	2b20      	cmp	r3, #32
 8001f96:	d138      	bne.n	800200a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d105      	bne.n	8001fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e055      	b.n	800205e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	2b10      	cmp	r3, #16
 8001fbe:	d107      	bne.n	8001fd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2210      	movs	r2, #16
 8001fc6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2204      	movs	r2, #4
 8001fcc:	645a      	str	r2, [r3, #68]	@ 0x44
 8001fce:	e002      	b.n	8001fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6859      	ldr	r1, [r3, #4]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8002068 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8001fea:	400b      	ands	r3, r1
 8001fec:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e029      	b.n	800205e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800200a:	f7ff f9ad 	bl	8001368 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	429a      	cmp	r2, r3
 8002018:	d302      	bcc.n	8002020 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d116      	bne.n	800204e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b04      	cmp	r3, #4
 800202c:	d00f      	beq.n	800204e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002032:	f043 0220 	orr.w	r2, r3, #32
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2220      	movs	r2, #32
 800203e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e007      	b.n	800205e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b04      	cmp	r3, #4
 800205a:	d18c      	bne.n	8001f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	fe00e800 	.word	0xfe00e800

0800206c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08a      	sub	sp, #40	@ 0x28
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	f003 0310 	and.w	r3, r3, #16
 8002094:	2b00      	cmp	r3, #0
 8002096:	d068      	beq.n	800216a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2210      	movs	r2, #16
 800209e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80020a0:	e049      	b.n	8002136 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020a8:	d045      	beq.n	8002136 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020aa:	f7ff f95d 	bl	8001368 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d302      	bcc.n	80020c0 <I2C_IsErrorOccurred+0x54>
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d13a      	bne.n	8002136 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80020d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020e2:	d121      	bne.n	8002128 <I2C_IsErrorOccurred+0xbc>
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020ea:	d01d      	beq.n	8002128 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80020ec:	7cfb      	ldrb	r3, [r7, #19]
 80020ee:	2b20      	cmp	r3, #32
 80020f0:	d01a      	beq.n	8002128 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002100:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002102:	f7ff f931 	bl	8001368 <HAL_GetTick>
 8002106:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002108:	e00e      	b.n	8002128 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800210a:	f7ff f92d 	bl	8001368 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b19      	cmp	r3, #25
 8002116:	d907      	bls.n	8002128 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	f043 0320 	orr.w	r3, r3, #32
 800211e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002126:	e006      	b.n	8002136 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	f003 0320 	and.w	r3, r3, #32
 8002132:	2b20      	cmp	r3, #32
 8002134:	d1e9      	bne.n	800210a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	f003 0320 	and.w	r3, r3, #32
 8002140:	2b20      	cmp	r3, #32
 8002142:	d003      	beq.n	800214c <I2C_IsErrorOccurred+0xe0>
 8002144:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0aa      	beq.n	80020a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800214c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002150:	2b00      	cmp	r3, #0
 8002152:	d103      	bne.n	800215c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2220      	movs	r2, #32
 800215a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	f043 0304 	orr.w	r3, r3, #4
 8002162:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00b      	beq.n	8002194 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800218c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00b      	beq.n	80021b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	f043 0308 	orr.w	r3, r3, #8
 80021a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00b      	beq.n	80021d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	f043 0302 	orr.w	r3, r3, #2
 80021c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80021d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d01c      	beq.n	800221a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f7ff fdc3 	bl	8001d6c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6859      	ldr	r1, [r3, #4]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002228 <I2C_IsErrorOccurred+0x1bc>)
 80021f2:	400b      	ands	r3, r1
 80021f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021fa:	6a3b      	ldr	r3, [r7, #32]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2220      	movs	r2, #32
 8002206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800221a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800221e:	4618      	mov	r0, r3
 8002220:	3728      	adds	r7, #40	@ 0x28
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	fe00e800 	.word	0xfe00e800

0800222c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	607b      	str	r3, [r7, #4]
 8002236:	460b      	mov	r3, r1
 8002238:	817b      	strh	r3, [r7, #10]
 800223a:	4613      	mov	r3, r2
 800223c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800223e:	897b      	ldrh	r3, [r7, #10]
 8002240:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002244:	7a7b      	ldrb	r3, [r7, #9]
 8002246:	041b      	lsls	r3, r3, #16
 8002248:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800224c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	4313      	orrs	r3, r2
 8002256:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800225a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	0d5b      	lsrs	r3, r3, #21
 8002266:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800226a:	4b08      	ldr	r3, [pc, #32]	@ (800228c <I2C_TransferConfig+0x60>)
 800226c:	430b      	orrs	r3, r1
 800226e:	43db      	mvns	r3, r3
 8002270:	ea02 0103 	and.w	r1, r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	430a      	orrs	r2, r1
 800227c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800227e:	bf00      	nop
 8002280:	371c      	adds	r7, #28
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	03ff63ff 	.word	0x03ff63ff

08002290 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b20      	cmp	r3, #32
 80022a4:	d138      	bne.n	8002318 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e032      	b.n	800231a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2224      	movs	r2, #36	@ 0x24
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0201 	bic.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80022e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6819      	ldr	r1, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	e000      	b.n	800231a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002318:	2302      	movs	r3, #2
  }
}
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002326:	b480      	push	{r7}
 8002328:	b085      	sub	sp, #20
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b20      	cmp	r3, #32
 800233a:	d139      	bne.n	80023b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002346:	2302      	movs	r3, #2
 8002348:	e033      	b.n	80023b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2224      	movs	r2, #36	@ 0x24
 8002356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002378:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	4313      	orrs	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2220      	movs	r2, #32
 80023a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	e000      	b.n	80023b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80023b0:	2302      	movs	r3, #2
  }
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023d0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d102      	bne.n	80023e6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	f001 b823 	b.w	800342c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 817d 	beq.w	80026f6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023fc:	4bbc      	ldr	r3, [pc, #752]	@ (80026f0 <HAL_RCC_OscConfig+0x330>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 030c 	and.w	r3, r3, #12
 8002404:	2b04      	cmp	r3, #4
 8002406:	d00c      	beq.n	8002422 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002408:	4bb9      	ldr	r3, [pc, #740]	@ (80026f0 <HAL_RCC_OscConfig+0x330>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 030c 	and.w	r3, r3, #12
 8002410:	2b08      	cmp	r3, #8
 8002412:	d15c      	bne.n	80024ce <HAL_RCC_OscConfig+0x10e>
 8002414:	4bb6      	ldr	r3, [pc, #728]	@ (80026f0 <HAL_RCC_OscConfig+0x330>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800241c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002420:	d155      	bne.n	80024ce <HAL_RCC_OscConfig+0x10e>
 8002422:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002426:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002436:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243a:	fab3 f383 	clz	r3, r3
 800243e:	b2db      	uxtb	r3, r3
 8002440:	095b      	lsrs	r3, r3, #5
 8002442:	b2db      	uxtb	r3, r3
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b01      	cmp	r3, #1
 800244c:	d102      	bne.n	8002454 <HAL_RCC_OscConfig+0x94>
 800244e:	4ba8      	ldr	r3, [pc, #672]	@ (80026f0 <HAL_RCC_OscConfig+0x330>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	e015      	b.n	8002480 <HAL_RCC_OscConfig+0xc0>
 8002454:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002458:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002460:	fa93 f3a3 	rbit	r3, r3
 8002464:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002468:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800246c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002470:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002474:	fa93 f3a3 	rbit	r3, r3
 8002478:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800247c:	4b9c      	ldr	r3, [pc, #624]	@ (80026f0 <HAL_RCC_OscConfig+0x330>)
 800247e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002480:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002484:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002488:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800248c:	fa92 f2a2 	rbit	r2, r2
 8002490:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002494:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002498:	fab2 f282 	clz	r2, r2
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	f042 0220 	orr.w	r2, r2, #32
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	f002 021f 	and.w	r2, r2, #31
 80024a8:	2101      	movs	r1, #1
 80024aa:	fa01 f202 	lsl.w	r2, r1, r2
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 811f 	beq.w	80026f4 <HAL_RCC_OscConfig+0x334>
 80024b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f040 8116 	bne.w	80026f4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	f000 bfaf 	b.w	800342c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024de:	d106      	bne.n	80024ee <HAL_RCC_OscConfig+0x12e>
 80024e0:	4b83      	ldr	r3, [pc, #524]	@ (80026f0 <HAL_RCC_OscConfig+0x330>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a82      	ldr	r2, [pc, #520]	@ (80026f0 <HAL_RCC_OscConfig+0x330>)
 80024e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	e036      	b.n	800255c <HAL_RCC_OscConfig+0x19c>
 80024ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0x158>
 80024fe:	4b7c      	ldr	r3, [pc, #496]	@ (80026f0 <HAL_RCC_OscConfig+0x330>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a7b      	ldr	r2, [pc, #492]	@ (80026f0 <HAL_RCC_OscConfig+0x330>)
 8002504:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	4b79      	ldr	r3, [pc, #484]	@ (80026f0 <HAL_RCC_OscConfig+0x330>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a78      	ldr	r2, [pc, #480]	@ (80026f0 <HAL_RCC_OscConfig+0x330>)
 8002510:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e021      	b.n	800255c <HAL_RCC_OscConfig+0x19c>
 8002518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002528:	d10c      	bne.n	8002544 <HAL_RCC_OscConfig+0x184>
 800252a:	4b71      	ldr	r3, [pc, #452]	@ (80026f0 <HAL_RCC_OscConfig+0x330>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a70      	ldr	r2, [pc, #448]	@ (80026f0 <HAL_RCC_OscConfig+0x330>)
 8002530:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	4b6e      	ldr	r3, [pc, #440]	@ (80026f0 <HAL_RCC_OscConfig+0x330>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a6d      	ldr	r2, [pc, #436]	@ (80026f0 <HAL_RCC_OscConfig+0x330>)
 800253c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e00b      	b.n	800255c <HAL_RCC_OscConfig+0x19c>
 8002544:	4b6a      	ldr	r3, [pc, #424]	@ (80026f0 <HAL_RCC_OscConfig+0x330>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a69      	ldr	r2, [pc, #420]	@ (80026f0 <HAL_RCC_OscConfig+0x330>)
 800254a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	4b67      	ldr	r3, [pc, #412]	@ (80026f0 <HAL_RCC_OscConfig+0x330>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a66      	ldr	r2, [pc, #408]	@ (80026f0 <HAL_RCC_OscConfig+0x330>)
 8002556:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800255a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800255c:	4b64      	ldr	r3, [pc, #400]	@ (80026f0 <HAL_RCC_OscConfig+0x330>)
 800255e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002560:	f023 020f 	bic.w	r2, r3, #15
 8002564:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002568:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	495f      	ldr	r1, [pc, #380]	@ (80026f0 <HAL_RCC_OscConfig+0x330>)
 8002572:	4313      	orrs	r3, r2
 8002574:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002576:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d059      	beq.n	800263a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002586:	f7fe feef 	bl	8001368 <HAL_GetTick>
 800258a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	e00a      	b.n	80025a6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002590:	f7fe feea 	bl	8001368 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b64      	cmp	r3, #100	@ 0x64
 800259e:	d902      	bls.n	80025a6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	f000 bf43 	b.w	800342c <HAL_RCC_OscConfig+0x106c>
 80025a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025aa:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80025ba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	095b      	lsrs	r3, r3, #5
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d102      	bne.n	80025d8 <HAL_RCC_OscConfig+0x218>
 80025d2:	4b47      	ldr	r3, [pc, #284]	@ (80026f0 <HAL_RCC_OscConfig+0x330>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	e015      	b.n	8002604 <HAL_RCC_OscConfig+0x244>
 80025d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025dc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80025ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025f0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80025f4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002600:	4b3b      	ldr	r3, [pc, #236]	@ (80026f0 <HAL_RCC_OscConfig+0x330>)
 8002602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002604:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002608:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800260c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002610:	fa92 f2a2 	rbit	r2, r2
 8002614:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002618:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800261c:	fab2 f282 	clz	r2, r2
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	f042 0220 	orr.w	r2, r2, #32
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	f002 021f 	and.w	r2, r2, #31
 800262c:	2101      	movs	r1, #1
 800262e:	fa01 f202 	lsl.w	r2, r1, r2
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0ab      	beq.n	8002590 <HAL_RCC_OscConfig+0x1d0>
 8002638:	e05d      	b.n	80026f6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263a:	f7fe fe95 	bl	8001368 <HAL_GetTick>
 800263e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002642:	e00a      	b.n	800265a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002644:	f7fe fe90 	bl	8001368 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b64      	cmp	r3, #100	@ 0x64
 8002652:	d902      	bls.n	800265a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	f000 bee9 	b.w	800342c <HAL_RCC_OscConfig+0x106c>
 800265a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800265e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800266e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002672:	fab3 f383 	clz	r3, r3
 8002676:	b2db      	uxtb	r3, r3
 8002678:	095b      	lsrs	r3, r3, #5
 800267a:	b2db      	uxtb	r3, r3
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b01      	cmp	r3, #1
 8002684:	d102      	bne.n	800268c <HAL_RCC_OscConfig+0x2cc>
 8002686:	4b1a      	ldr	r3, [pc, #104]	@ (80026f0 <HAL_RCC_OscConfig+0x330>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	e015      	b.n	80026b8 <HAL_RCC_OscConfig+0x2f8>
 800268c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002690:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002694:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002698:	fa93 f3a3 	rbit	r3, r3
 800269c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80026a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026a4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80026a8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80026ac:	fa93 f3a3 	rbit	r3, r3
 80026b0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80026b4:	4b0e      	ldr	r3, [pc, #56]	@ (80026f0 <HAL_RCC_OscConfig+0x330>)
 80026b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80026bc:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80026c0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80026c4:	fa92 f2a2 	rbit	r2, r2
 80026c8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80026cc:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80026d0:	fab2 f282 	clz	r2, r2
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	f042 0220 	orr.w	r2, r2, #32
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	f002 021f 	and.w	r2, r2, #31
 80026e0:	2101      	movs	r1, #1
 80026e2:	fa01 f202 	lsl.w	r2, r1, r2
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1ab      	bne.n	8002644 <HAL_RCC_OscConfig+0x284>
 80026ec:	e003      	b.n	80026f6 <HAL_RCC_OscConfig+0x336>
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 817d 	beq.w	8002a06 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800270c:	4ba6      	ldr	r3, [pc, #664]	@ (80029a8 <HAL_RCC_OscConfig+0x5e8>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00b      	beq.n	8002730 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002718:	4ba3      	ldr	r3, [pc, #652]	@ (80029a8 <HAL_RCC_OscConfig+0x5e8>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 030c 	and.w	r3, r3, #12
 8002720:	2b08      	cmp	r3, #8
 8002722:	d172      	bne.n	800280a <HAL_RCC_OscConfig+0x44a>
 8002724:	4ba0      	ldr	r3, [pc, #640]	@ (80029a8 <HAL_RCC_OscConfig+0x5e8>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d16c      	bne.n	800280a <HAL_RCC_OscConfig+0x44a>
 8002730:	2302      	movs	r3, #2
 8002732:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800273a:	fa93 f3a3 	rbit	r3, r3
 800273e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002742:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002746:	fab3 f383 	clz	r3, r3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	095b      	lsrs	r3, r3, #5
 800274e:	b2db      	uxtb	r3, r3
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b01      	cmp	r3, #1
 8002758:	d102      	bne.n	8002760 <HAL_RCC_OscConfig+0x3a0>
 800275a:	4b93      	ldr	r3, [pc, #588]	@ (80029a8 <HAL_RCC_OscConfig+0x5e8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	e013      	b.n	8002788 <HAL_RCC_OscConfig+0x3c8>
 8002760:	2302      	movs	r3, #2
 8002762:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800276a:	fa93 f3a3 	rbit	r3, r3
 800276e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002772:	2302      	movs	r3, #2
 8002774:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002778:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800277c:	fa93 f3a3 	rbit	r3, r3
 8002780:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002784:	4b88      	ldr	r3, [pc, #544]	@ (80029a8 <HAL_RCC_OscConfig+0x5e8>)
 8002786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002788:	2202      	movs	r2, #2
 800278a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800278e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002792:	fa92 f2a2 	rbit	r2, r2
 8002796:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800279a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800279e:	fab2 f282 	clz	r2, r2
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	f042 0220 	orr.w	r2, r2, #32
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	f002 021f 	and.w	r2, r2, #31
 80027ae:	2101      	movs	r1, #1
 80027b0:	fa01 f202 	lsl.w	r2, r1, r2
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00a      	beq.n	80027d0 <HAL_RCC_OscConfig+0x410>
 80027ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d002      	beq.n	80027d0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	f000 be2e 	b.w	800342c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d0:	4b75      	ldr	r3, [pc, #468]	@ (80029a8 <HAL_RCC_OscConfig+0x5e8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	21f8      	movs	r1, #248	@ 0xf8
 80027e6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80027ee:	fa91 f1a1 	rbit	r1, r1
 80027f2:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80027f6:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80027fa:	fab1 f181 	clz	r1, r1
 80027fe:	b2c9      	uxtb	r1, r1
 8002800:	408b      	lsls	r3, r1
 8002802:	4969      	ldr	r1, [pc, #420]	@ (80029a8 <HAL_RCC_OscConfig+0x5e8>)
 8002804:	4313      	orrs	r3, r2
 8002806:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002808:	e0fd      	b.n	8002a06 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800280a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 8088 	beq.w	800292c <HAL_RCC_OscConfig+0x56c>
 800281c:	2301      	movs	r3, #1
 800281e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002826:	fa93 f3a3 	rbit	r3, r3
 800282a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800282e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002832:	fab3 f383 	clz	r3, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800283c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	461a      	mov	r2, r3
 8002844:	2301      	movs	r3, #1
 8002846:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7fe fd8e 	bl	8001368 <HAL_GetTick>
 800284c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002850:	e00a      	b.n	8002868 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002852:	f7fe fd89 	bl	8001368 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d902      	bls.n	8002868 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	f000 bde2 	b.w	800342c <HAL_RCC_OscConfig+0x106c>
 8002868:	2302      	movs	r3, #2
 800286a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800287a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	095b      	lsrs	r3, r3, #5
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b01      	cmp	r3, #1
 8002890:	d102      	bne.n	8002898 <HAL_RCC_OscConfig+0x4d8>
 8002892:	4b45      	ldr	r3, [pc, #276]	@ (80029a8 <HAL_RCC_OscConfig+0x5e8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	e013      	b.n	80028c0 <HAL_RCC_OscConfig+0x500>
 8002898:	2302      	movs	r3, #2
 800289a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80028aa:	2302      	movs	r3, #2
 80028ac:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80028b0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80028b4:	fa93 f3a3 	rbit	r3, r3
 80028b8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80028bc:	4b3a      	ldr	r3, [pc, #232]	@ (80029a8 <HAL_RCC_OscConfig+0x5e8>)
 80028be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c0:	2202      	movs	r2, #2
 80028c2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80028c6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80028ca:	fa92 f2a2 	rbit	r2, r2
 80028ce:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80028d2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80028d6:	fab2 f282 	clz	r2, r2
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	f042 0220 	orr.w	r2, r2, #32
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	f002 021f 	and.w	r2, r2, #31
 80028e6:	2101      	movs	r1, #1
 80028e8:	fa01 f202 	lsl.w	r2, r1, r2
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0af      	beq.n	8002852 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f2:	4b2d      	ldr	r3, [pc, #180]	@ (80029a8 <HAL_RCC_OscConfig+0x5e8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	21f8      	movs	r1, #248	@ 0xf8
 8002908:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002910:	fa91 f1a1 	rbit	r1, r1
 8002914:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002918:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800291c:	fab1 f181 	clz	r1, r1
 8002920:	b2c9      	uxtb	r1, r1
 8002922:	408b      	lsls	r3, r1
 8002924:	4920      	ldr	r1, [pc, #128]	@ (80029a8 <HAL_RCC_OscConfig+0x5e8>)
 8002926:	4313      	orrs	r3, r2
 8002928:	600b      	str	r3, [r1, #0]
 800292a:	e06c      	b.n	8002a06 <HAL_RCC_OscConfig+0x646>
 800292c:	2301      	movs	r3, #1
 800292e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002932:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002936:	fa93 f3a3 	rbit	r3, r3
 800293a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800293e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002942:	fab3 f383 	clz	r3, r3
 8002946:	b2db      	uxtb	r3, r3
 8002948:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800294c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	461a      	mov	r2, r3
 8002954:	2300      	movs	r3, #0
 8002956:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002958:	f7fe fd06 	bl	8001368 <HAL_GetTick>
 800295c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002960:	e00a      	b.n	8002978 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002962:	f7fe fd01 	bl	8001368 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d902      	bls.n	8002978 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	f000 bd5a 	b.w	800342c <HAL_RCC_OscConfig+0x106c>
 8002978:	2302      	movs	r3, #2
 800297a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800298a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	b2db      	uxtb	r3, r3
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d104      	bne.n	80029ac <HAL_RCC_OscConfig+0x5ec>
 80029a2:	4b01      	ldr	r3, [pc, #4]	@ (80029a8 <HAL_RCC_OscConfig+0x5e8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	e015      	b.n	80029d4 <HAL_RCC_OscConfig+0x614>
 80029a8:	40021000 	.word	0x40021000
 80029ac:	2302      	movs	r3, #2
 80029ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80029b6:	fa93 f3a3 	rbit	r3, r3
 80029ba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80029be:	2302      	movs	r3, #2
 80029c0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80029c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029c8:	fa93 f3a3 	rbit	r3, r3
 80029cc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80029d0:	4bc8      	ldr	r3, [pc, #800]	@ (8002cf4 <HAL_RCC_OscConfig+0x934>)
 80029d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d4:	2202      	movs	r2, #2
 80029d6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80029da:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80029de:	fa92 f2a2 	rbit	r2, r2
 80029e2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80029e6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80029ea:	fab2 f282 	clz	r2, r2
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	f042 0220 	orr.w	r2, r2, #32
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	f002 021f 	and.w	r2, r2, #31
 80029fa:	2101      	movs	r1, #1
 80029fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1ad      	bne.n	8002962 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 8110 	beq.w	8002c3c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d079      	beq.n	8002b20 <HAL_RCC_OscConfig+0x760>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002a36:	fa93 f3a3 	rbit	r3, r3
 8002a3a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a42:	fab3 f383 	clz	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4bab      	ldr	r3, [pc, #684]	@ (8002cf8 <HAL_RCC_OscConfig+0x938>)
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	461a      	mov	r2, r3
 8002a52:	2301      	movs	r3, #1
 8002a54:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a56:	f7fe fc87 	bl	8001368 <HAL_GetTick>
 8002a5a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5e:	e00a      	b.n	8002a76 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a60:	f7fe fc82 	bl	8001368 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d902      	bls.n	8002a76 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	f000 bcdb 	b.w	800342c <HAL_RCC_OscConfig+0x106c>
 8002a76:	2302      	movs	r3, #2
 8002a78:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002a80:	fa93 f3a3 	rbit	r3, r3
 8002a84:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002a88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a90:	2202      	movs	r2, #2
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a98:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	fa93 f2a3 	rbit	r2, r3
 8002aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002abc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	fa93 f2a3 	rbit	r2, r3
 8002ac6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002ace:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad0:	4b88      	ldr	r3, [pc, #544]	@ (8002cf4 <HAL_RCC_OscConfig+0x934>)
 8002ad2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ad4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002adc:	2102      	movs	r1, #2
 8002ade:	6019      	str	r1, [r3, #0]
 8002ae0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	fa93 f1a3 	rbit	r1, r3
 8002aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002af6:	6019      	str	r1, [r3, #0]
  return result;
 8002af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	fab3 f383 	clz	r3, r3
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	f003 031f 	and.w	r3, r3, #31
 8002b12:	2101      	movs	r1, #1
 8002b14:	fa01 f303 	lsl.w	r3, r1, r3
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0a0      	beq.n	8002a60 <HAL_RCC_OscConfig+0x6a0>
 8002b1e:	e08d      	b.n	8002c3c <HAL_RCC_OscConfig+0x87c>
 8002b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b24:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002b28:	2201      	movs	r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b30:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	fa93 f2a3 	rbit	r2, r3
 8002b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b3e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002b42:	601a      	str	r2, [r3, #0]
  return result;
 8002b44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b48:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002b4c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b4e:	fab3 f383 	clz	r3, r3
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	4b68      	ldr	r3, [pc, #416]	@ (8002cf8 <HAL_RCC_OscConfig+0x938>)
 8002b58:	4413      	add	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	2300      	movs	r3, #0
 8002b60:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b62:	f7fe fc01 	bl	8001368 <HAL_GetTick>
 8002b66:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b6a:	e00a      	b.n	8002b82 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b6c:	f7fe fbfc 	bl	8001368 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d902      	bls.n	8002b82 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	f000 bc55 	b.w	800342c <HAL_RCC_OscConfig+0x106c>
 8002b82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b86:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b92:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	fa93 f2a3 	rbit	r2, r3
 8002b9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002baa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002bae:	2202      	movs	r2, #2
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	fa93 f2a3 	rbit	r2, r3
 8002bc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bce:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bda:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	fa93 f2a3 	rbit	r2, r3
 8002be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002bec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bee:	4b41      	ldr	r3, [pc, #260]	@ (8002cf4 <HAL_RCC_OscConfig+0x934>)
 8002bf0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002bfa:	2102      	movs	r1, #2
 8002bfc:	6019      	str	r1, [r3, #0]
 8002bfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c02:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	fa93 f1a3 	rbit	r1, r3
 8002c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c10:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c14:	6019      	str	r1, [r3, #0]
  return result;
 8002c16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	fab3 f383 	clz	r3, r3
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f003 031f 	and.w	r3, r3, #31
 8002c30:	2101      	movs	r1, #1
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d197      	bne.n	8002b6c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 81a1 	beq.w	8002f94 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c52:	2300      	movs	r3, #0
 8002c54:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c58:	4b26      	ldr	r3, [pc, #152]	@ (8002cf4 <HAL_RCC_OscConfig+0x934>)
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d116      	bne.n	8002c92 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c64:	4b23      	ldr	r3, [pc, #140]	@ (8002cf4 <HAL_RCC_OscConfig+0x934>)
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	4a22      	ldr	r2, [pc, #136]	@ (8002cf4 <HAL_RCC_OscConfig+0x934>)
 8002c6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c6e:	61d3      	str	r3, [r2, #28]
 8002c70:	4b20      	ldr	r3, [pc, #128]	@ (8002cf4 <HAL_RCC_OscConfig+0x934>)
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c86:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002c8a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c92:	4b1a      	ldr	r3, [pc, #104]	@ (8002cfc <HAL_RCC_OscConfig+0x93c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d11a      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c9e:	4b17      	ldr	r3, [pc, #92]	@ (8002cfc <HAL_RCC_OscConfig+0x93c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a16      	ldr	r2, [pc, #88]	@ (8002cfc <HAL_RCC_OscConfig+0x93c>)
 8002ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ca8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002caa:	f7fe fb5d 	bl	8001368 <HAL_GetTick>
 8002cae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb2:	e009      	b.n	8002cc8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb4:	f7fe fb58 	bl	8001368 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b64      	cmp	r3, #100	@ 0x64
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e3b1      	b.n	800342c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002cfc <HAL_RCC_OscConfig+0x93c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0ef      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d10d      	bne.n	8002d00 <HAL_RCC_OscConfig+0x940>
 8002ce4:	4b03      	ldr	r3, [pc, #12]	@ (8002cf4 <HAL_RCC_OscConfig+0x934>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	4a02      	ldr	r2, [pc, #8]	@ (8002cf4 <HAL_RCC_OscConfig+0x934>)
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	6213      	str	r3, [r2, #32]
 8002cf0:	e03c      	b.n	8002d6c <HAL_RCC_OscConfig+0x9ac>
 8002cf2:	bf00      	nop
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	10908120 	.word	0x10908120
 8002cfc:	40007000 	.word	0x40007000
 8002d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10c      	bne.n	8002d2a <HAL_RCC_OscConfig+0x96a>
 8002d10:	4bc1      	ldr	r3, [pc, #772]	@ (8003018 <HAL_RCC_OscConfig+0xc58>)
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	4ac0      	ldr	r2, [pc, #768]	@ (8003018 <HAL_RCC_OscConfig+0xc58>)
 8002d16:	f023 0301 	bic.w	r3, r3, #1
 8002d1a:	6213      	str	r3, [r2, #32]
 8002d1c:	4bbe      	ldr	r3, [pc, #760]	@ (8003018 <HAL_RCC_OscConfig+0xc58>)
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	4abd      	ldr	r2, [pc, #756]	@ (8003018 <HAL_RCC_OscConfig+0xc58>)
 8002d22:	f023 0304 	bic.w	r3, r3, #4
 8002d26:	6213      	str	r3, [r2, #32]
 8002d28:	e020      	b.n	8002d6c <HAL_RCC_OscConfig+0x9ac>
 8002d2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	2b05      	cmp	r3, #5
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x994>
 8002d3a:	4bb7      	ldr	r3, [pc, #732]	@ (8003018 <HAL_RCC_OscConfig+0xc58>)
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	4ab6      	ldr	r2, [pc, #728]	@ (8003018 <HAL_RCC_OscConfig+0xc58>)
 8002d40:	f043 0304 	orr.w	r3, r3, #4
 8002d44:	6213      	str	r3, [r2, #32]
 8002d46:	4bb4      	ldr	r3, [pc, #720]	@ (8003018 <HAL_RCC_OscConfig+0xc58>)
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	4ab3      	ldr	r2, [pc, #716]	@ (8003018 <HAL_RCC_OscConfig+0xc58>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6213      	str	r3, [r2, #32]
 8002d52:	e00b      	b.n	8002d6c <HAL_RCC_OscConfig+0x9ac>
 8002d54:	4bb0      	ldr	r3, [pc, #704]	@ (8003018 <HAL_RCC_OscConfig+0xc58>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	4aaf      	ldr	r2, [pc, #700]	@ (8003018 <HAL_RCC_OscConfig+0xc58>)
 8002d5a:	f023 0301 	bic.w	r3, r3, #1
 8002d5e:	6213      	str	r3, [r2, #32]
 8002d60:	4bad      	ldr	r3, [pc, #692]	@ (8003018 <HAL_RCC_OscConfig+0xc58>)
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	4aac      	ldr	r2, [pc, #688]	@ (8003018 <HAL_RCC_OscConfig+0xc58>)
 8002d66:	f023 0304 	bic.w	r3, r3, #4
 8002d6a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 8081 	beq.w	8002e80 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7e:	f7fe faf3 	bl	8001368 <HAL_GetTick>
 8002d82:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d86:	e00b      	b.n	8002da0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d88:	f7fe faee 	bl	8001368 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e345      	b.n	800342c <HAL_RCC_OscConfig+0x106c>
 8002da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002da8:	2202      	movs	r2, #2
 8002daa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	fa93 f2a3 	rbit	r2, r3
 8002dba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dbe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002dcc:	2202      	movs	r2, #2
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	fa93 f2a3 	rbit	r2, r3
 8002dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002de6:	601a      	str	r2, [r3, #0]
  return result;
 8002de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dec:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002df0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df2:	fab3 f383 	clz	r3, r3
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	095b      	lsrs	r3, r3, #5
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	f043 0302 	orr.w	r3, r3, #2
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d102      	bne.n	8002e0c <HAL_RCC_OscConfig+0xa4c>
 8002e06:	4b84      	ldr	r3, [pc, #528]	@ (8003018 <HAL_RCC_OscConfig+0xc58>)
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	e013      	b.n	8002e34 <HAL_RCC_OscConfig+0xa74>
 8002e0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e10:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002e14:	2202      	movs	r2, #2
 8002e16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e1c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	fa93 f2a3 	rbit	r2, r3
 8002e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e2a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	4b79      	ldr	r3, [pc, #484]	@ (8003018 <HAL_RCC_OscConfig+0xc58>)
 8002e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e34:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e38:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	6011      	str	r1, [r2, #0]
 8002e40:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e44:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	fa92 f1a2 	rbit	r1, r2
 8002e4e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e52:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002e56:	6011      	str	r1, [r2, #0]
  return result;
 8002e58:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e5c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002e60:	6812      	ldr	r2, [r2, #0]
 8002e62:	fab2 f282 	clz	r2, r2
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	f002 021f 	and.w	r2, r2, #31
 8002e72:	2101      	movs	r1, #1
 8002e74:	fa01 f202 	lsl.w	r2, r1, r2
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d084      	beq.n	8002d88 <HAL_RCC_OscConfig+0x9c8>
 8002e7e:	e07f      	b.n	8002f80 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e80:	f7fe fa72 	bl	8001368 <HAL_GetTick>
 8002e84:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e88:	e00b      	b.n	8002ea2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e8a:	f7fe fa6d 	bl	8001368 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e2c4      	b.n	800342c <HAL_RCC_OscConfig+0x106c>
 8002ea2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002eaa:	2202      	movs	r2, #2
 8002eac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	fa93 f2a3 	rbit	r2, r3
 8002ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eca:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002ece:	2202      	movs	r2, #2
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	fa93 f2a3 	rbit	r2, r3
 8002ee0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002ee8:	601a      	str	r2, [r3, #0]
  return result;
 8002eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eee:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002ef2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef4:	fab3 f383 	clz	r3, r3
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	f043 0302 	orr.w	r3, r3, #2
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d102      	bne.n	8002f0e <HAL_RCC_OscConfig+0xb4e>
 8002f08:	4b43      	ldr	r3, [pc, #268]	@ (8003018 <HAL_RCC_OscConfig+0xc58>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	e013      	b.n	8002f36 <HAL_RCC_OscConfig+0xb76>
 8002f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f12:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002f16:	2202      	movs	r2, #2
 8002f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	fa93 f2a3 	rbit	r2, r3
 8002f28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	4b39      	ldr	r3, [pc, #228]	@ (8003018 <HAL_RCC_OscConfig+0xc58>)
 8002f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f36:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f3a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002f3e:	2102      	movs	r1, #2
 8002f40:	6011      	str	r1, [r2, #0]
 8002f42:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f46:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	fa92 f1a2 	rbit	r1, r2
 8002f50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f54:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002f58:	6011      	str	r1, [r2, #0]
  return result;
 8002f5a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f5e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	fab2 f282 	clz	r2, r2
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	f002 021f 	and.w	r2, r2, #31
 8002f74:	2101      	movs	r1, #1
 8002f76:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d184      	bne.n	8002e8a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f80:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d105      	bne.n	8002f94 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f88:	4b23      	ldr	r3, [pc, #140]	@ (8003018 <HAL_RCC_OscConfig+0xc58>)
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	4a22      	ldr	r2, [pc, #136]	@ (8003018 <HAL_RCC_OscConfig+0xc58>)
 8002f8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f92:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 8242 	beq.w	800342a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8003018 <HAL_RCC_OscConfig+0xc58>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	f000 8213 	beq.w	80033da <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	f040 8162 	bne.w	800328a <HAL_RCC_OscConfig+0xeca>
 8002fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fca:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002fce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002fd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	fa93 f2a3 	rbit	r2, r3
 8002fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002fea:	601a      	str	r2, [r3, #0]
  return result;
 8002fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002ff4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff6:	fab3 f383 	clz	r3, r3
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003000:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	461a      	mov	r2, r3
 8003008:	2300      	movs	r3, #0
 800300a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300c:	f7fe f9ac 	bl	8001368 <HAL_GetTick>
 8003010:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003014:	e00c      	b.n	8003030 <HAL_RCC_OscConfig+0xc70>
 8003016:	bf00      	nop
 8003018:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301c:	f7fe f9a4 	bl	8001368 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e1fd      	b.n	800342c <HAL_RCC_OscConfig+0x106c>
 8003030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003034:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003038:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800303c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003042:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	fa93 f2a3 	rbit	r2, r3
 800304c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003050:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003054:	601a      	str	r2, [r3, #0]
  return result;
 8003056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800305a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800305e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003060:	fab3 f383 	clz	r3, r3
 8003064:	b2db      	uxtb	r3, r3
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b01      	cmp	r3, #1
 8003072:	d102      	bne.n	800307a <HAL_RCC_OscConfig+0xcba>
 8003074:	4bb0      	ldr	r3, [pc, #704]	@ (8003338 <HAL_RCC_OscConfig+0xf78>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	e027      	b.n	80030ca <HAL_RCC_OscConfig+0xd0a>
 800307a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800307e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003082:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003086:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800308c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	fa93 f2a3 	rbit	r2, r3
 8003096:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80030a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	fa93 f2a3 	rbit	r2, r3
 80030bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	4b9c      	ldr	r3, [pc, #624]	@ (8003338 <HAL_RCC_OscConfig+0xf78>)
 80030c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030ce:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80030d2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80030d6:	6011      	str	r1, [r2, #0]
 80030d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030dc:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	fa92 f1a2 	rbit	r1, r2
 80030e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030ea:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80030ee:	6011      	str	r1, [r2, #0]
  return result;
 80030f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030f4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80030f8:	6812      	ldr	r2, [r2, #0]
 80030fa:	fab2 f282 	clz	r2, r2
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	f042 0220 	orr.w	r2, r2, #32
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	f002 021f 	and.w	r2, r2, #31
 800310a:	2101      	movs	r1, #1
 800310c:	fa01 f202 	lsl.w	r2, r1, r2
 8003110:	4013      	ands	r3, r2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d182      	bne.n	800301c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003116:	4b88      	ldr	r3, [pc, #544]	@ (8003338 <HAL_RCC_OscConfig+0xf78>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800311e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003122:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800312a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	430b      	orrs	r3, r1
 8003138:	497f      	ldr	r1, [pc, #508]	@ (8003338 <HAL_RCC_OscConfig+0xf78>)
 800313a:	4313      	orrs	r3, r2
 800313c:	604b      	str	r3, [r1, #4]
 800313e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003142:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003146:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800314a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003150:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	fa93 f2a3 	rbit	r2, r3
 800315a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800315e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003162:	601a      	str	r2, [r3, #0]
  return result;
 8003164:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003168:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800316c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800316e:	fab3 f383 	clz	r3, r3
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003178:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	461a      	mov	r2, r3
 8003180:	2301      	movs	r3, #1
 8003182:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7fe f8f0 	bl	8001368 <HAL_GetTick>
 8003188:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800318c:	e009      	b.n	80031a2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800318e:	f7fe f8eb 	bl	8001368 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e144      	b.n	800342c <HAL_RCC_OscConfig+0x106c>
 80031a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80031aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	fa93 f2a3 	rbit	r2, r3
 80031be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80031c6:	601a      	str	r2, [r3, #0]
  return result;
 80031c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031cc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80031d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031d2:	fab3 f383 	clz	r3, r3
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	095b      	lsrs	r3, r3, #5
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d102      	bne.n	80031ec <HAL_RCC_OscConfig+0xe2c>
 80031e6:	4b54      	ldr	r3, [pc, #336]	@ (8003338 <HAL_RCC_OscConfig+0xf78>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	e027      	b.n	800323c <HAL_RCC_OscConfig+0xe7c>
 80031ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80031f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fe:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	fa93 f2a3 	rbit	r2, r3
 8003208:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003216:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800321a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003224:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	fa93 f2a3 	rbit	r2, r3
 800322e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003232:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	4b3f      	ldr	r3, [pc, #252]	@ (8003338 <HAL_RCC_OscConfig+0xf78>)
 800323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003240:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003244:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003248:	6011      	str	r1, [r2, #0]
 800324a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800324e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003252:	6812      	ldr	r2, [r2, #0]
 8003254:	fa92 f1a2 	rbit	r1, r2
 8003258:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800325c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003260:	6011      	str	r1, [r2, #0]
  return result;
 8003262:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003266:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	fab2 f282 	clz	r2, r2
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	f042 0220 	orr.w	r2, r2, #32
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	f002 021f 	and.w	r2, r2, #31
 800327c:	2101      	movs	r1, #1
 800327e:	fa01 f202 	lsl.w	r2, r1, r2
 8003282:	4013      	ands	r3, r2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d082      	beq.n	800318e <HAL_RCC_OscConfig+0xdce>
 8003288:	e0cf      	b.n	800342a <HAL_RCC_OscConfig+0x106a>
 800328a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800328e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003292:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003296:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800329c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	fa93 f2a3 	rbit	r2, r3
 80032a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032aa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80032ae:	601a      	str	r2, [r3, #0]
  return result;
 80032b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80032b8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ba:	fab3 f383 	clz	r3, r3
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80032c4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	461a      	mov	r2, r3
 80032cc:	2300      	movs	r3, #0
 80032ce:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d0:	f7fe f84a 	bl	8001368 <HAL_GetTick>
 80032d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032d8:	e009      	b.n	80032ee <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032da:	f7fe f845 	bl	8001368 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e09e      	b.n	800342c <HAL_RCC_OscConfig+0x106c>
 80032ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80032f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003300:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	fa93 f2a3 	rbit	r2, r3
 800330a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003312:	601a      	str	r2, [r3, #0]
  return result;
 8003314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003318:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800331c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800331e:	fab3 f383 	clz	r3, r3
 8003322:	b2db      	uxtb	r3, r3
 8003324:	095b      	lsrs	r3, r3, #5
 8003326:	b2db      	uxtb	r3, r3
 8003328:	f043 0301 	orr.w	r3, r3, #1
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b01      	cmp	r3, #1
 8003330:	d104      	bne.n	800333c <HAL_RCC_OscConfig+0xf7c>
 8003332:	4b01      	ldr	r3, [pc, #4]	@ (8003338 <HAL_RCC_OscConfig+0xf78>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	e029      	b.n	800338c <HAL_RCC_OscConfig+0xfcc>
 8003338:	40021000 	.word	0x40021000
 800333c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003340:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003344:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003348:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	fa93 f2a3 	rbit	r2, r3
 8003358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800335c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003366:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800336a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003374:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	fa93 f2a3 	rbit	r2, r3
 800337e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003382:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	4b2b      	ldr	r3, [pc, #172]	@ (8003438 <HAL_RCC_OscConfig+0x1078>)
 800338a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003390:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003394:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003398:	6011      	str	r1, [r2, #0]
 800339a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800339e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	fa92 f1a2 	rbit	r1, r2
 80033a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033ac:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80033b0:	6011      	str	r1, [r2, #0]
  return result;
 80033b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033b6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80033ba:	6812      	ldr	r2, [r2, #0]
 80033bc:	fab2 f282 	clz	r2, r2
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	f042 0220 	orr.w	r2, r2, #32
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	f002 021f 	and.w	r2, r2, #31
 80033cc:	2101      	movs	r1, #1
 80033ce:	fa01 f202 	lsl.w	r2, r1, r2
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d180      	bne.n	80032da <HAL_RCC_OscConfig+0xf1a>
 80033d8:	e027      	b.n	800342a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d101      	bne.n	80033ee <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e01e      	b.n	800342c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033ee:	4b12      	ldr	r3, [pc, #72]	@ (8003438 <HAL_RCC_OscConfig+0x1078>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80033fa:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80033fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003402:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	429a      	cmp	r2, r3
 800340c:	d10b      	bne.n	8003426 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800340e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003412:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800341a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003422:	429a      	cmp	r2, r3
 8003424:	d001      	beq.n	800342a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40021000 	.word	0x40021000

0800343c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b09e      	sub	sp, #120	@ 0x78
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e162      	b.n	800371a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003454:	4b90      	ldr	r3, [pc, #576]	@ (8003698 <HAL_RCC_ClockConfig+0x25c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d910      	bls.n	8003484 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003462:	4b8d      	ldr	r3, [pc, #564]	@ (8003698 <HAL_RCC_ClockConfig+0x25c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 0207 	bic.w	r2, r3, #7
 800346a:	498b      	ldr	r1, [pc, #556]	@ (8003698 <HAL_RCC_ClockConfig+0x25c>)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	4313      	orrs	r3, r2
 8003470:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003472:	4b89      	ldr	r3, [pc, #548]	@ (8003698 <HAL_RCC_ClockConfig+0x25c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d001      	beq.n	8003484 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e14a      	b.n	800371a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003490:	4b82      	ldr	r3, [pc, #520]	@ (800369c <HAL_RCC_ClockConfig+0x260>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	497f      	ldr	r1, [pc, #508]	@ (800369c <HAL_RCC_ClockConfig+0x260>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 80dc 	beq.w	8003668 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d13c      	bne.n	8003532 <HAL_RCC_ClockConfig+0xf6>
 80034b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034bc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034c0:	fa93 f3a3 	rbit	r3, r3
 80034c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80034c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c8:	fab3 f383 	clz	r3, r3
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d102      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xa6>
 80034dc:	4b6f      	ldr	r3, [pc, #444]	@ (800369c <HAL_RCC_ClockConfig+0x260>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	e00f      	b.n	8003502 <HAL_RCC_ClockConfig+0xc6>
 80034e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034e6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034ea:	fa93 f3a3 	rbit	r3, r3
 80034ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80034f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80034f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034f8:	fa93 f3a3 	rbit	r3, r3
 80034fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034fe:	4b67      	ldr	r3, [pc, #412]	@ (800369c <HAL_RCC_ClockConfig+0x260>)
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003502:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003506:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003508:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800350a:	fa92 f2a2 	rbit	r2, r2
 800350e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003510:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003512:	fab2 f282 	clz	r2, r2
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	f042 0220 	orr.w	r2, r2, #32
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	f002 021f 	and.w	r2, r2, #31
 8003522:	2101      	movs	r1, #1
 8003524:	fa01 f202 	lsl.w	r2, r1, r2
 8003528:	4013      	ands	r3, r2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d17b      	bne.n	8003626 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e0f3      	b.n	800371a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d13c      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x178>
 800353a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800353e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003540:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003542:	fa93 f3a3 	rbit	r3, r3
 8003546:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003548:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354a:	fab3 f383 	clz	r3, r3
 800354e:	b2db      	uxtb	r3, r3
 8003550:	095b      	lsrs	r3, r3, #5
 8003552:	b2db      	uxtb	r3, r3
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b01      	cmp	r3, #1
 800355c:	d102      	bne.n	8003564 <HAL_RCC_ClockConfig+0x128>
 800355e:	4b4f      	ldr	r3, [pc, #316]	@ (800369c <HAL_RCC_ClockConfig+0x260>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	e00f      	b.n	8003584 <HAL_RCC_ClockConfig+0x148>
 8003564:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003568:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800356c:	fa93 f3a3 	rbit	r3, r3
 8003570:	647b      	str	r3, [r7, #68]	@ 0x44
 8003572:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003576:	643b      	str	r3, [r7, #64]	@ 0x40
 8003578:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800357a:	fa93 f3a3 	rbit	r3, r3
 800357e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003580:	4b46      	ldr	r3, [pc, #280]	@ (800369c <HAL_RCC_ClockConfig+0x260>)
 8003582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003584:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003588:	63ba      	str	r2, [r7, #56]	@ 0x38
 800358a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800358c:	fa92 f2a2 	rbit	r2, r2
 8003590:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003592:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003594:	fab2 f282 	clz	r2, r2
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	f042 0220 	orr.w	r2, r2, #32
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	f002 021f 	and.w	r2, r2, #31
 80035a4:	2101      	movs	r1, #1
 80035a6:	fa01 f202 	lsl.w	r2, r1, r2
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d13a      	bne.n	8003626 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0b2      	b.n	800371a <HAL_RCC_ClockConfig+0x2de>
 80035b4:	2302      	movs	r3, #2
 80035b6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ba:	fa93 f3a3 	rbit	r3, r3
 80035be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80035c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c2:	fab3 f383 	clz	r3, r3
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	095b      	lsrs	r3, r3, #5
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d102      	bne.n	80035dc <HAL_RCC_ClockConfig+0x1a0>
 80035d6:	4b31      	ldr	r3, [pc, #196]	@ (800369c <HAL_RCC_ClockConfig+0x260>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	e00d      	b.n	80035f8 <HAL_RCC_ClockConfig+0x1bc>
 80035dc:	2302      	movs	r3, #2
 80035de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e2:	fa93 f3a3 	rbit	r3, r3
 80035e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80035e8:	2302      	movs	r3, #2
 80035ea:	623b      	str	r3, [r7, #32]
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	4b29      	ldr	r3, [pc, #164]	@ (800369c <HAL_RCC_ClockConfig+0x260>)
 80035f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f8:	2202      	movs	r2, #2
 80035fa:	61ba      	str	r2, [r7, #24]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	fa92 f2a2 	rbit	r2, r2
 8003602:	617a      	str	r2, [r7, #20]
  return result;
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	fab2 f282 	clz	r2, r2
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	f042 0220 	orr.w	r2, r2, #32
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	f002 021f 	and.w	r2, r2, #31
 8003616:	2101      	movs	r1, #1
 8003618:	fa01 f202 	lsl.w	r2, r1, r2
 800361c:	4013      	ands	r3, r2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e079      	b.n	800371a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003626:	4b1d      	ldr	r3, [pc, #116]	@ (800369c <HAL_RCC_ClockConfig+0x260>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f023 0203 	bic.w	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	491a      	ldr	r1, [pc, #104]	@ (800369c <HAL_RCC_ClockConfig+0x260>)
 8003634:	4313      	orrs	r3, r2
 8003636:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003638:	f7fd fe96 	bl	8001368 <HAL_GetTick>
 800363c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	e00a      	b.n	8003656 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003640:	f7fd fe92 	bl	8001368 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e061      	b.n	800371a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	4b11      	ldr	r3, [pc, #68]	@ (800369c <HAL_RCC_ClockConfig+0x260>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f003 020c 	and.w	r2, r3, #12
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	429a      	cmp	r2, r3
 8003666:	d1eb      	bne.n	8003640 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003668:	4b0b      	ldr	r3, [pc, #44]	@ (8003698 <HAL_RCC_ClockConfig+0x25c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d214      	bcs.n	80036a0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003676:	4b08      	ldr	r3, [pc, #32]	@ (8003698 <HAL_RCC_ClockConfig+0x25c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 0207 	bic.w	r2, r3, #7
 800367e:	4906      	ldr	r1, [pc, #24]	@ (8003698 <HAL_RCC_ClockConfig+0x25c>)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	4313      	orrs	r3, r2
 8003684:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003686:	4b04      	ldr	r3, [pc, #16]	@ (8003698 <HAL_RCC_ClockConfig+0x25c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d005      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e040      	b.n	800371a <HAL_RCC_ClockConfig+0x2de>
 8003698:	40022000 	.word	0x40022000
 800369c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003724 <HAL_RCC_ClockConfig+0x2e8>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	491a      	ldr	r1, [pc, #104]	@ (8003724 <HAL_RCC_ClockConfig+0x2e8>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d009      	beq.n	80036de <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ca:	4b16      	ldr	r3, [pc, #88]	@ (8003724 <HAL_RCC_ClockConfig+0x2e8>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4912      	ldr	r1, [pc, #72]	@ (8003724 <HAL_RCC_ClockConfig+0x2e8>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036de:	f000 f829 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 80036e2:	4601      	mov	r1, r0
 80036e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003724 <HAL_RCC_ClockConfig+0x2e8>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036ec:	22f0      	movs	r2, #240	@ 0xf0
 80036ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	fa92 f2a2 	rbit	r2, r2
 80036f6:	60fa      	str	r2, [r7, #12]
  return result;
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	fab2 f282 	clz	r2, r2
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	40d3      	lsrs	r3, r2
 8003702:	4a09      	ldr	r2, [pc, #36]	@ (8003728 <HAL_RCC_ClockConfig+0x2ec>)
 8003704:	5cd3      	ldrb	r3, [r2, r3]
 8003706:	fa21 f303 	lsr.w	r3, r1, r3
 800370a:	4a08      	ldr	r2, [pc, #32]	@ (800372c <HAL_RCC_ClockConfig+0x2f0>)
 800370c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800370e:	4b08      	ldr	r3, [pc, #32]	@ (8003730 <HAL_RCC_ClockConfig+0x2f4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fd fde4 	bl	80012e0 <HAL_InitTick>
  
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3778      	adds	r7, #120	@ 0x78
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40021000 	.word	0x40021000
 8003728:	0800c5e0 	.word	0x0800c5e0
 800372c:	20000000 	.word	0x20000000
 8003730:	20000004 	.word	0x20000004

08003734 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003734:	b480      	push	{r7}
 8003736:	b08b      	sub	sp, #44	@ 0x2c
 8003738:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	61fb      	str	r3, [r7, #28]
 800373e:	2300      	movs	r3, #0
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	2300      	movs	r3, #0
 8003744:	627b      	str	r3, [r7, #36]	@ 0x24
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800374a:	2300      	movs	r3, #0
 800374c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800374e:	4b29      	ldr	r3, [pc, #164]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f003 030c 	and.w	r3, r3, #12
 800375a:	2b04      	cmp	r3, #4
 800375c:	d002      	beq.n	8003764 <HAL_RCC_GetSysClockFreq+0x30>
 800375e:	2b08      	cmp	r3, #8
 8003760:	d003      	beq.n	800376a <HAL_RCC_GetSysClockFreq+0x36>
 8003762:	e03c      	b.n	80037de <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003764:	4b24      	ldr	r3, [pc, #144]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003766:	623b      	str	r3, [r7, #32]
      break;
 8003768:	e03c      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003770:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8003774:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	fa92 f2a2 	rbit	r2, r2
 800377c:	607a      	str	r2, [r7, #4]
  return result;
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	fab2 f282 	clz	r2, r2
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	40d3      	lsrs	r3, r2
 8003788:	4a1c      	ldr	r2, [pc, #112]	@ (80037fc <HAL_RCC_GetSysClockFreq+0xc8>)
 800378a:	5cd3      	ldrb	r3, [r2, r3]
 800378c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800378e:	4b19      	ldr	r3, [pc, #100]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	220f      	movs	r2, #15
 8003798:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	fa92 f2a2 	rbit	r2, r2
 80037a0:	60fa      	str	r2, [r7, #12]
  return result;
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	fab2 f282 	clz	r2, r2
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	40d3      	lsrs	r3, r2
 80037ac:	4a14      	ldr	r2, [pc, #80]	@ (8003800 <HAL_RCC_GetSysClockFreq+0xcc>)
 80037ae:	5cd3      	ldrb	r3, [r2, r3]
 80037b0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d008      	beq.n	80037ce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037bc:	4a0e      	ldr	r2, [pc, #56]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	fb02 f303 	mul.w	r3, r2, r3
 80037ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80037cc:	e004      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	4a0c      	ldr	r2, [pc, #48]	@ (8003804 <HAL_RCC_GetSysClockFreq+0xd0>)
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80037d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037da:	623b      	str	r3, [r7, #32]
      break;
 80037dc:	e002      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037de:	4b0a      	ldr	r3, [pc, #40]	@ (8003808 <HAL_RCC_GetSysClockFreq+0xd4>)
 80037e0:	623b      	str	r3, [r7, #32]
      break;
 80037e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037e4:	6a3b      	ldr	r3, [r7, #32]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	372c      	adds	r7, #44	@ 0x2c
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40021000 	.word	0x40021000
 80037f8:	01e84800 	.word	0x01e84800
 80037fc:	0800c5f8 	.word	0x0800c5f8
 8003800:	0800c608 	.word	0x0800c608
 8003804:	003d0900 	.word	0x003d0900
 8003808:	007a1200 	.word	0x007a1200

0800380c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003810:	4b03      	ldr	r3, [pc, #12]	@ (8003820 <HAL_RCC_GetHCLKFreq+0x14>)
 8003812:	681b      	ldr	r3, [r3, #0]
}
 8003814:	4618      	mov	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	20000000 	.word	0x20000000

08003824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800382a:	f7ff ffef 	bl	800380c <HAL_RCC_GetHCLKFreq>
 800382e:	4601      	mov	r1, r0
 8003830:	4b0b      	ldr	r3, [pc, #44]	@ (8003860 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003838:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800383c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	fa92 f2a2 	rbit	r2, r2
 8003844:	603a      	str	r2, [r7, #0]
  return result;
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	fab2 f282 	clz	r2, r2
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	40d3      	lsrs	r3, r2
 8003850:	4a04      	ldr	r2, [pc, #16]	@ (8003864 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003852:	5cd3      	ldrb	r3, [r2, r3]
 8003854:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40021000 	.word	0x40021000
 8003864:	0800c5f0 	.word	0x0800c5f0

08003868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800386e:	f7ff ffcd 	bl	800380c <HAL_RCC_GetHCLKFreq>
 8003872:	4601      	mov	r1, r0
 8003874:	4b0b      	ldr	r3, [pc, #44]	@ (80038a4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800387c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003880:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	fa92 f2a2 	rbit	r2, r2
 8003888:	603a      	str	r2, [r7, #0]
  return result;
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	fab2 f282 	clz	r2, r2
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	40d3      	lsrs	r3, r2
 8003894:	4a04      	ldr	r2, [pc, #16]	@ (80038a8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003896:	5cd3      	ldrb	r3, [r2, r3]
 8003898:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40021000 	.word	0x40021000
 80038a8:	0800c5f0 	.word	0x0800c5f0

080038ac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b092      	sub	sp, #72	@ 0x48
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80038bc:	2300      	movs	r3, #0
 80038be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 80cd 	beq.w	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038d0:	4b86      	ldr	r3, [pc, #536]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10e      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038dc:	4b83      	ldr	r3, [pc, #524]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	4a82      	ldr	r2, [pc, #520]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038e6:	61d3      	str	r3, [r2, #28]
 80038e8:	4b80      	ldr	r3, [pc, #512]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f4:	2301      	movs	r3, #1
 80038f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fa:	4b7d      	ldr	r3, [pc, #500]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003902:	2b00      	cmp	r3, #0
 8003904:	d118      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003906:	4b7a      	ldr	r3, [pc, #488]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a79      	ldr	r2, [pc, #484]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800390c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003910:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003912:	f7fd fd29 	bl	8001368 <HAL_GetTick>
 8003916:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003918:	e008      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800391a:	f7fd fd25 	bl	8001368 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b64      	cmp	r3, #100	@ 0x64
 8003926:	d901      	bls.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e0db      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392c:	4b70      	ldr	r3, [pc, #448]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f0      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003938:	4b6c      	ldr	r3, [pc, #432]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003940:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003944:	2b00      	cmp	r3, #0
 8003946:	d07d      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003950:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003952:	429a      	cmp	r2, r3
 8003954:	d076      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003956:	4b65      	ldr	r3, [pc, #404]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800395e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003960:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003964:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003968:	fa93 f3a3 	rbit	r3, r3
 800396c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800396e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003970:	fab3 f383 	clz	r3, r3
 8003974:	b2db      	uxtb	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	4b5e      	ldr	r3, [pc, #376]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	461a      	mov	r2, r3
 8003980:	2301      	movs	r3, #1
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003988:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800398c:	fa93 f3a3 	rbit	r3, r3
 8003990:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003994:	fab3 f383 	clz	r3, r3
 8003998:	b2db      	uxtb	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	4b55      	ldr	r3, [pc, #340]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	461a      	mov	r2, r3
 80039a4:	2300      	movs	r3, #0
 80039a6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039a8:	4a50      	ldr	r2, [pc, #320]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ac:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d045      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b8:	f7fd fcd6 	bl	8001368 <HAL_GetTick>
 80039bc:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039be:	e00a      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c0:	f7fd fcd2 	bl	8001368 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e086      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80039d6:	2302      	movs	r3, #2
 80039d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039dc:	fa93 f3a3 	rbit	r3, r3
 80039e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80039e2:	2302      	movs	r3, #2
 80039e4:	623b      	str	r3, [r7, #32]
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	fa93 f3a3 	rbit	r3, r3
 80039ec:	61fb      	str	r3, [r7, #28]
  return result;
 80039ee:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f0:	fab3 f383 	clz	r3, r3
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	095b      	lsrs	r3, r3, #5
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	f043 0302 	orr.w	r3, r3, #2
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d102      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003a04:	4b39      	ldr	r3, [pc, #228]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	e007      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	fa93 f3a3 	rbit	r3, r3
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	4b35      	ldr	r3, [pc, #212]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	613a      	str	r2, [r7, #16]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	fa92 f2a2 	rbit	r2, r2
 8003a24:	60fa      	str	r2, [r7, #12]
  return result;
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	fab2 f282 	clz	r2, r2
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	f002 021f 	and.w	r2, r2, #31
 8003a38:	2101      	movs	r1, #1
 8003a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0bd      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a44:	4b29      	ldr	r3, [pc, #164]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	4926      	ldr	r1, [pc, #152]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a56:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d105      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a5e:	4b23      	ldr	r3, [pc, #140]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	4a22      	ldr	r2, [pc, #136]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a68:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d008      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a76:	4b1d      	ldr	r3, [pc, #116]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7a:	f023 0203 	bic.w	r2, r3, #3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	491a      	ldr	r1, [pc, #104]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d008      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a94:	4b15      	ldr	r3, [pc, #84]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a98:	f023 0210 	bic.w	r2, r3, #16
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	4912      	ldr	r1, [pc, #72]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d008      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	490b      	ldr	r1, [pc, #44]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d008      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ad0:	4b06      	ldr	r3, [pc, #24]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	4903      	ldr	r1, [pc, #12]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3748      	adds	r7, #72	@ 0x48
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40021000 	.word	0x40021000
 8003af0:	40007000 	.word	0x40007000
 8003af4:	10908100 	.word	0x10908100

08003af8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e040      	b.n	8003b8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd fa70 	bl	8001000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2224      	movs	r2, #36	@ 0x24
 8003b24:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0201 	bic.w	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f8b6 	bl	8003ca8 <UART_SetConfig>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d101      	bne.n	8003b46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e022      	b.n	8003b8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d002      	beq.n	8003b54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f9e0 	bl	8003f14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 fa67 	bl	8004058 <UART_CheckIdleState>
 8003b8a:	4603      	mov	r3, r0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	@ 0x28
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	d177      	bne.n	8003c9c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <HAL_UART_Transmit+0x24>
 8003bb2:	88fb      	ldrh	r3, [r7, #6]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e070      	b.n	8003c9e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2221      	movs	r2, #33	@ 0x21
 8003bc8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bca:	f7fd fbcd 	bl	8001368 <HAL_GetTick>
 8003bce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	88fa      	ldrh	r2, [r7, #6]
 8003bd4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	88fa      	ldrh	r2, [r7, #6]
 8003bdc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003be8:	d108      	bne.n	8003bfc <HAL_UART_Transmit+0x68>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d104      	bne.n	8003bfc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	61bb      	str	r3, [r7, #24]
 8003bfa:	e003      	b.n	8003c04 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c00:	2300      	movs	r3, #0
 8003c02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c04:	e02f      	b.n	8003c66 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2180      	movs	r1, #128	@ 0x80
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 fac9 	bl	80041a8 <UART_WaitOnFlagUntilTimeout>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d004      	beq.n	8003c26 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e03b      	b.n	8003c9e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10b      	bne.n	8003c44 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	881a      	ldrh	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c38:	b292      	uxth	r2, r2
 8003c3a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	3302      	adds	r3, #2
 8003c40:	61bb      	str	r3, [r7, #24]
 8003c42:	e007      	b.n	8003c54 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	781a      	ldrb	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	3301      	adds	r3, #1
 8003c52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1c9      	bne.n	8003c06 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2140      	movs	r1, #64	@ 0x40
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 fa93 	bl	80041a8 <UART_WaitOnFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d004      	beq.n	8003c92 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e005      	b.n	8003c9e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2220      	movs	r2, #32
 8003c96:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	e000      	b.n	8003c9e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003c9c:	2302      	movs	r3, #2
  }
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3720      	adds	r7, #32
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b088      	sub	sp, #32
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	4b8a      	ldr	r3, [pc, #552]	@ (8003efc <UART_SetConfig+0x254>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6812      	ldr	r2, [r2, #0]
 8003cda:	6979      	ldr	r1, [r7, #20]
 8003cdc:	430b      	orrs	r3, r1
 8003cde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a78      	ldr	r2, [pc, #480]	@ (8003f00 <UART_SetConfig+0x258>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d120      	bne.n	8003d66 <UART_SetConfig+0xbe>
 8003d24:	4b77      	ldr	r3, [pc, #476]	@ (8003f04 <UART_SetConfig+0x25c>)
 8003d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d28:	f003 0303 	and.w	r3, r3, #3
 8003d2c:	2b03      	cmp	r3, #3
 8003d2e:	d817      	bhi.n	8003d60 <UART_SetConfig+0xb8>
 8003d30:	a201      	add	r2, pc, #4	@ (adr r2, 8003d38 <UART_SetConfig+0x90>)
 8003d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d36:	bf00      	nop
 8003d38:	08003d49 	.word	0x08003d49
 8003d3c:	08003d55 	.word	0x08003d55
 8003d40:	08003d5b 	.word	0x08003d5b
 8003d44:	08003d4f 	.word	0x08003d4f
 8003d48:	2300      	movs	r3, #0
 8003d4a:	77fb      	strb	r3, [r7, #31]
 8003d4c:	e01d      	b.n	8003d8a <UART_SetConfig+0xe2>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	77fb      	strb	r3, [r7, #31]
 8003d52:	e01a      	b.n	8003d8a <UART_SetConfig+0xe2>
 8003d54:	2304      	movs	r3, #4
 8003d56:	77fb      	strb	r3, [r7, #31]
 8003d58:	e017      	b.n	8003d8a <UART_SetConfig+0xe2>
 8003d5a:	2308      	movs	r3, #8
 8003d5c:	77fb      	strb	r3, [r7, #31]
 8003d5e:	e014      	b.n	8003d8a <UART_SetConfig+0xe2>
 8003d60:	2310      	movs	r3, #16
 8003d62:	77fb      	strb	r3, [r7, #31]
 8003d64:	e011      	b.n	8003d8a <UART_SetConfig+0xe2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a67      	ldr	r2, [pc, #412]	@ (8003f08 <UART_SetConfig+0x260>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d102      	bne.n	8003d76 <UART_SetConfig+0xce>
 8003d70:	2300      	movs	r3, #0
 8003d72:	77fb      	strb	r3, [r7, #31]
 8003d74:	e009      	b.n	8003d8a <UART_SetConfig+0xe2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a64      	ldr	r2, [pc, #400]	@ (8003f0c <UART_SetConfig+0x264>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d102      	bne.n	8003d86 <UART_SetConfig+0xde>
 8003d80:	2300      	movs	r3, #0
 8003d82:	77fb      	strb	r3, [r7, #31]
 8003d84:	e001      	b.n	8003d8a <UART_SetConfig+0xe2>
 8003d86:	2310      	movs	r3, #16
 8003d88:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d92:	d15a      	bne.n	8003e4a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003d94:	7ffb      	ldrb	r3, [r7, #31]
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d827      	bhi.n	8003dea <UART_SetConfig+0x142>
 8003d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003da0 <UART_SetConfig+0xf8>)
 8003d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da0:	08003dc5 	.word	0x08003dc5
 8003da4:	08003dcd 	.word	0x08003dcd
 8003da8:	08003dd5 	.word	0x08003dd5
 8003dac:	08003deb 	.word	0x08003deb
 8003db0:	08003ddb 	.word	0x08003ddb
 8003db4:	08003deb 	.word	0x08003deb
 8003db8:	08003deb 	.word	0x08003deb
 8003dbc:	08003deb 	.word	0x08003deb
 8003dc0:	08003de3 	.word	0x08003de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dc4:	f7ff fd2e 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 8003dc8:	61b8      	str	r0, [r7, #24]
        break;
 8003dca:	e013      	b.n	8003df4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dcc:	f7ff fd4c 	bl	8003868 <HAL_RCC_GetPCLK2Freq>
 8003dd0:	61b8      	str	r0, [r7, #24]
        break;
 8003dd2:	e00f      	b.n	8003df4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dd4:	4b4e      	ldr	r3, [pc, #312]	@ (8003f10 <UART_SetConfig+0x268>)
 8003dd6:	61bb      	str	r3, [r7, #24]
        break;
 8003dd8:	e00c      	b.n	8003df4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dda:	f7ff fcab 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 8003dde:	61b8      	str	r0, [r7, #24]
        break;
 8003de0:	e008      	b.n	8003df4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003de2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003de6:	61bb      	str	r3, [r7, #24]
        break;
 8003de8:	e004      	b.n	8003df4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	77bb      	strb	r3, [r7, #30]
        break;
 8003df2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d074      	beq.n	8003ee4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	005a      	lsls	r2, r3, #1
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	085b      	lsrs	r3, r3, #1
 8003e04:	441a      	add	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	2b0f      	cmp	r3, #15
 8003e14:	d916      	bls.n	8003e44 <UART_SetConfig+0x19c>
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e1c:	d212      	bcs.n	8003e44 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	f023 030f 	bic.w	r3, r3, #15
 8003e26:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	085b      	lsrs	r3, r3, #1
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	89fb      	ldrh	r3, [r7, #14]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	89fa      	ldrh	r2, [r7, #14]
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	e04f      	b.n	8003ee4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	77bb      	strb	r3, [r7, #30]
 8003e48:	e04c      	b.n	8003ee4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e4a:	7ffb      	ldrb	r3, [r7, #31]
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d828      	bhi.n	8003ea2 <UART_SetConfig+0x1fa>
 8003e50:	a201      	add	r2, pc, #4	@ (adr r2, 8003e58 <UART_SetConfig+0x1b0>)
 8003e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e56:	bf00      	nop
 8003e58:	08003e7d 	.word	0x08003e7d
 8003e5c:	08003e85 	.word	0x08003e85
 8003e60:	08003e8d 	.word	0x08003e8d
 8003e64:	08003ea3 	.word	0x08003ea3
 8003e68:	08003e93 	.word	0x08003e93
 8003e6c:	08003ea3 	.word	0x08003ea3
 8003e70:	08003ea3 	.word	0x08003ea3
 8003e74:	08003ea3 	.word	0x08003ea3
 8003e78:	08003e9b 	.word	0x08003e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e7c:	f7ff fcd2 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 8003e80:	61b8      	str	r0, [r7, #24]
        break;
 8003e82:	e013      	b.n	8003eac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e84:	f7ff fcf0 	bl	8003868 <HAL_RCC_GetPCLK2Freq>
 8003e88:	61b8      	str	r0, [r7, #24]
        break;
 8003e8a:	e00f      	b.n	8003eac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e8c:	4b20      	ldr	r3, [pc, #128]	@ (8003f10 <UART_SetConfig+0x268>)
 8003e8e:	61bb      	str	r3, [r7, #24]
        break;
 8003e90:	e00c      	b.n	8003eac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e92:	f7ff fc4f 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 8003e96:	61b8      	str	r0, [r7, #24]
        break;
 8003e98:	e008      	b.n	8003eac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e9e:	61bb      	str	r3, [r7, #24]
        break;
 8003ea0:	e004      	b.n	8003eac <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	77bb      	strb	r3, [r7, #30]
        break;
 8003eaa:	bf00      	nop
    }

    if (pclk != 0U)
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d018      	beq.n	8003ee4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	085a      	lsrs	r2, r3, #1
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	441a      	add	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	2b0f      	cmp	r3, #15
 8003eca:	d909      	bls.n	8003ee0 <UART_SetConfig+0x238>
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ed2:	d205      	bcs.n	8003ee0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	60da      	str	r2, [r3, #12]
 8003ede:	e001      	b.n	8003ee4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003ef0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3720      	adds	r7, #32
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	efff69f3 	.word	0xefff69f3
 8003f00:	40013800 	.word	0x40013800
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40004400 	.word	0x40004400
 8003f0c:	40004800 	.word	0x40004800
 8003f10:	007a1200 	.word	0x007a1200

08003f14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa8:	f003 0310 	and.w	r3, r3, #16
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d01a      	beq.n	800402a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004012:	d10a      	bne.n	800402a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	605a      	str	r2, [r3, #4]
  }
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b098      	sub	sp, #96	@ 0x60
 800405c:	af02      	add	r7, sp, #8
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004068:	f7fd f97e 	bl	8001368 <HAL_GetTick>
 800406c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b08      	cmp	r3, #8
 800407a:	d12e      	bne.n	80040da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800407c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004084:	2200      	movs	r2, #0
 8004086:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f88c 	bl	80041a8 <UART_WaitOnFlagUntilTimeout>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d021      	beq.n	80040da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800409e:	e853 3f00 	ldrex	r3, [r3]
 80040a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80040b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040bc:	e841 2300 	strex	r3, r2, [r1]
 80040c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1e6      	bne.n	8004096 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e062      	b.n	80041a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	d149      	bne.n	800417c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f0:	2200      	movs	r2, #0
 80040f2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f856 	bl	80041a8 <UART_WaitOnFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d03c      	beq.n	800417c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410a:	e853 3f00 	ldrex	r3, [r3]
 800410e:	623b      	str	r3, [r7, #32]
   return(result);
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004116:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	461a      	mov	r2, r3
 800411e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004120:	633b      	str	r3, [r7, #48]	@ 0x30
 8004122:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004124:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004126:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004128:	e841 2300 	strex	r3, r2, [r1]
 800412c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800412e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1e6      	bne.n	8004102 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3308      	adds	r3, #8
 800413a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	e853 3f00 	ldrex	r3, [r3]
 8004142:	60fb      	str	r3, [r7, #12]
   return(result);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0301 	bic.w	r3, r3, #1
 800414a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3308      	adds	r3, #8
 8004152:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004154:	61fa      	str	r2, [r7, #28]
 8004156:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004158:	69b9      	ldr	r1, [r7, #24]
 800415a:	69fa      	ldr	r2, [r7, #28]
 800415c:	e841 2300 	strex	r3, r2, [r1]
 8004160:	617b      	str	r3, [r7, #20]
   return(result);
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1e5      	bne.n	8004134 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e011      	b.n	80041a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2220      	movs	r2, #32
 8004180:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2220      	movs	r2, #32
 8004186:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3758      	adds	r7, #88	@ 0x58
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	4613      	mov	r3, r2
 80041b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b8:	e049      	b.n	800424e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041c0:	d045      	beq.n	800424e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c2:	f7fd f8d1 	bl	8001368 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d302      	bcc.n	80041d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e048      	b.n	800426e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d031      	beq.n	800424e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d110      	bne.n	800421a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2208      	movs	r2, #8
 80041fe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f838 	bl	8004276 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2208      	movs	r2, #8
 800420a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e029      	b.n	800426e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004228:	d111      	bne.n	800424e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004232:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f81e 	bl	8004276 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2220      	movs	r2, #32
 800423e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e00f      	b.n	800426e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69da      	ldr	r2, [r3, #28]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4013      	ands	r3, r2
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	429a      	cmp	r2, r3
 800425c:	bf0c      	ite	eq
 800425e:	2301      	moveq	r3, #1
 8004260:	2300      	movne	r3, #0
 8004262:	b2db      	uxtb	r3, r3
 8004264:	461a      	mov	r2, r3
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	429a      	cmp	r2, r3
 800426a:	d0a6      	beq.n	80041ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004276:	b480      	push	{r7}
 8004278:	b095      	sub	sp, #84	@ 0x54
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004286:	e853 3f00 	ldrex	r3, [r3]
 800428a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800428c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004292:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	461a      	mov	r2, r3
 800429a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800429c:	643b      	str	r3, [r7, #64]	@ 0x40
 800429e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042a4:	e841 2300 	strex	r3, r2, [r1]
 80042a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1e6      	bne.n	800427e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3308      	adds	r3, #8
 80042b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	e853 3f00 	ldrex	r3, [r3]
 80042be:	61fb      	str	r3, [r7, #28]
   return(result);
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	f023 0301 	bic.w	r3, r3, #1
 80042c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3308      	adds	r3, #8
 80042ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042d8:	e841 2300 	strex	r3, r2, [r1]
 80042dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1e5      	bne.n	80042b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d118      	bne.n	800431e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	e853 3f00 	ldrex	r3, [r3]
 80042f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f023 0310 	bic.w	r3, r3, #16
 8004300:	647b      	str	r3, [r7, #68]	@ 0x44
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800430a:	61bb      	str	r3, [r7, #24]
 800430c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430e:	6979      	ldr	r1, [r7, #20]
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	e841 2300 	strex	r3, r2, [r1]
 8004316:	613b      	str	r3, [r7, #16]
   return(result);
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1e6      	bne.n	80042ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2220      	movs	r2, #32
 8004322:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004332:	bf00      	nop
 8004334:	3754      	adds	r7, #84	@ 0x54
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b084      	sub	sp, #16
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004346:	2300      	movs	r3, #0
 8004348:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* 2V8 power mode selection codex 447463 */
#ifdef USE_I2C_2V8
	Status = VL53L1_RdByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG, &i);
 800434a:	f107 030e 	add.w	r3, r7, #14
 800434e:	461a      	mov	r2, r3
 8004350:	212e      	movs	r1, #46	@ 0x2e
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f005 fa0c 	bl	8009770 <VL53L1_RdByte>
 8004358:	4603      	mov	r3, r0
 800435a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L1_ERROR_NONE) {
 800435c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10c      	bne.n	800437e <VL53L1_DataInit+0x40>
		i = (i & 0xfe) | 0x01;
 8004364:	7bbb      	ldrb	r3, [r7, #14]
 8004366:	f043 0301 	orr.w	r3, r3, #1
 800436a:	b2db      	uxtb	r3, r3
 800436c:	73bb      	strb	r3, [r7, #14]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
 800436e:	7bbb      	ldrb	r3, [r7, #14]
 8004370:	461a      	mov	r2, r3
 8004372:	212e      	movs	r1, #46	@ 0x2e
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f005 f9d1 	bl	800971c <VL53L1_WrByte>
 800437a:	4603      	mov	r3, r0
 800437c:	73fb      	strb	r3, [r7, #15]
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 800437e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d105      	bne.n	8004392 <VL53L1_DataInit+0x54>
		Status = VL53L1_data_init(Dev, 1);
 8004386:	2101      	movs	r1, #1
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f001 f859 	bl	8005440 <VL53L1_data_init>
 800438e:	4603      	mov	r3, r0
 8004390:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L1_ERROR_NONE)
 8004392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d103      	bne.n	80043a2 <VL53L1_DataInit+0x64>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80043a2:	2300      	movs	r3, #0
 80043a4:	73bb      	strb	r3, [r7, #14]
 80043a6:	e012      	b.n	80043ce <VL53L1_DataInit+0x90>
		if (Status == VL53L1_ERROR_NONE)
 80043a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d112      	bne.n	80043d6 <VL53L1_DataInit+0x98>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 80043b0:	7bbb      	ldrb	r3, [r7, #14]
 80043b2:	2201      	movs	r2, #1
 80043b4:	4619      	mov	r1, r3
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fbcf 	bl	8004b5a <VL53L1_SetLimitCheckEnable>
 80043bc:	4603      	mov	r3, r0
 80043be:	461a      	mov	r2, r3
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80043c6:	7bbb      	ldrb	r3, [r7, #14]
 80043c8:	3301      	adds	r3, #1
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	73bb      	strb	r3, [r7, #14]
 80043ce:	7bbb      	ldrb	r3, [r7, #14]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d9e9      	bls.n	80043a8 <VL53L1_DataInit+0x6a>
 80043d4:	e000      	b.n	80043d8 <VL53L1_DataInit+0x9a>
		else
			break;
 80043d6:	bf00      	nop

	}


	LOG_FUNCTION_END(Status);
	return Status;
 80043d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80043ec:	2300      	movs	r3, #0
 80043ee:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2203      	movs	r2, #3
 80043f4:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80043f8:	2320      	movs	r3, #32
 80043fa:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	7bba      	ldrb	r2, [r7, #14]
 8004400:	709a      	strb	r2, [r3, #2]

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 8004402:	2108      	movs	r1, #8
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f8f6 	bl	80045f6 <VL53L1_SetPresetMode>
 800440a:	4603      	mov	r3, r0
 800440c:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2208      	movs	r2, #8
 8004412:	f883 237c 	strb.w	r2, [r3, #892]	@ 0x37c
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */

	LOG_FUNCTION_END(Status);
	return Status;
 8004416:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800442a:	2300      	movs	r3, #0
 800442c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 800442e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f005 f898 	bl	8009568 <VL53L1_poll_for_boot_completion>
 8004438:	4603      	mov	r3, r0
 800443a:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800443c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	603a      	str	r2, [r7, #0]
 8004452:	71fb      	strb	r3, [r7, #7]
 8004454:	460b      	mov	r3, r1
 8004456:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004458:	2300      	movs	r3, #0
 800445a:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 800445c:	4a2b      	ldr	r2, [pc, #172]	@ (800450c <ComputeDevicePresetMode+0xc4>)
 800445e:	f107 0310 	add.w	r3, r7, #16
 8004462:	6812      	ldr	r2, [r2, #0]
 8004464:	4611      	mov	r1, r2
 8004466:	8019      	strh	r1, [r3, #0]
 8004468:	3302      	adds	r3, #2
 800446a:	0c12      	lsrs	r2, r2, #16
 800446c:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 800446e:	4a28      	ldr	r2, [pc, #160]	@ (8004510 <ComputeDevicePresetMode+0xc8>)
 8004470:	f107 030c 	add.w	r3, r7, #12
 8004474:	6812      	ldr	r2, [r2, #0]
 8004476:	4611      	mov	r1, r2
 8004478:	8019      	strh	r1, [r3, #0]
 800447a:	3302      	adds	r3, #2
 800447c:	0c12      	lsrs	r2, r2, #16
 800447e:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8004480:	4a24      	ldr	r2, [pc, #144]	@ (8004514 <ComputeDevicePresetMode+0xcc>)
 8004482:	f107 0308 	add.w	r3, r7, #8
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	4611      	mov	r1, r2
 800448a:	8019      	strh	r1, [r3, #0]
 800448c:	3302      	adds	r3, #2
 800448e:	0c12      	lsrs	r2, r2, #16
 8004490:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2201      	movs	r2, #1
 8004496:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8004498:	79bb      	ldrb	r3, [r7, #6]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d002      	beq.n	80044a4 <ComputeDevicePresetMode+0x5c>
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d003      	beq.n	80044aa <ComputeDevicePresetMode+0x62>
 80044a2:	e005      	b.n	80044b0 <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 80044a4:	2300      	movs	r3, #0
 80044a6:	75bb      	strb	r3, [r7, #22]
		break;
 80044a8:	e004      	b.n	80044b4 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 80044aa:	2301      	movs	r3, #1
 80044ac:	75bb      	strb	r3, [r7, #22]
		break;
 80044ae:	e001      	b.n	80044b4 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 80044b0:	2302      	movs	r3, #2
 80044b2:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 80044b4:	79fb      	ldrb	r3, [r7, #7]
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d015      	beq.n	80044e6 <ComputeDevicePresetMode+0x9e>
 80044ba:	2b08      	cmp	r3, #8
 80044bc:	dc1b      	bgt.n	80044f6 <ComputeDevicePresetMode+0xae>
 80044be:	2b03      	cmp	r3, #3
 80044c0:	d009      	beq.n	80044d6 <ComputeDevicePresetMode+0x8e>
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d117      	bne.n	80044f6 <ComputeDevicePresetMode+0xae>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 80044c6:	7dbb      	ldrb	r3, [r7, #22]
 80044c8:	3318      	adds	r3, #24
 80044ca:	443b      	add	r3, r7
 80044cc:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	701a      	strb	r2, [r3, #0]
		break;
 80044d4:	e011      	b.n	80044fa <ComputeDevicePresetMode+0xb2>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 80044d6:	7dbb      	ldrb	r3, [r7, #22]
 80044d8:	3318      	adds	r3, #24
 80044da:	443b      	add	r3, r7
 80044dc:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	701a      	strb	r2, [r3, #0]
		break;
 80044e4:	e009      	b.n	80044fa <ComputeDevicePresetMode+0xb2>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 80044e6:	7dbb      	ldrb	r3, [r7, #22]
 80044e8:	3318      	adds	r3, #24
 80044ea:	443b      	add	r3, r7
 80044ec:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	701a      	strb	r2, [r3, #0]
		break;
 80044f4:	e001      	b.n	80044fa <ComputeDevicePresetMode+0xb2>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80044f6:	23f8      	movs	r3, #248	@ 0xf8
 80044f8:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 80044fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	371c      	adds	r7, #28
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	0800c5d0 	.word	0x0800c5d0
 8004510:	0800c5d4 	.word	0x0800c5d4
 8004514:	0800c5d8 	.word	0x0800c5d8

08004518 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8004518:	b5b0      	push	{r4, r5, r7, lr}
 800451a:	b08e      	sub	sp, #56	@ 0x38
 800451c:	af04      	add	r7, sp, #16
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	607b      	str	r3, [r7, #4]
 8004522:	460b      	mov	r3, r1
 8004524:	72fb      	strb	r3, [r7, #11]
 8004526:	4613      	mov	r3, r2
 8004528:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800452a:	2300      	movs	r3, #0
 800452c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8004540:	7afb      	ldrb	r3, [r7, #11]
 8004542:	2b03      	cmp	r3, #3
 8004544:	d002      	beq.n	800454c <SetPresetMode+0x34>
 8004546:	7afb      	ldrb	r3, [r7, #11]
 8004548:	2b08      	cmp	r3, #8
 800454a:	d103      	bne.n	8004554 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 800454c:	2340      	movs	r3, #64	@ 0x40
 800454e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004552:	e002      	b.n	800455a <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8004554:	2320      	movs	r3, #32
 8004556:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 800455a:	f107 0225 	add.w	r2, r7, #37	@ 0x25
 800455e:	7ab9      	ldrb	r1, [r7, #10]
 8004560:	7afb      	ldrb	r3, [r7, #11]
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff ff70 	bl	8004448 <ComputeDevicePresetMode>
 8004568:	4603      	mov	r3, r0
 800456a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 800456e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004572:	2b00      	cmp	r3, #0
 8004574:	d112      	bne.n	800459c <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8004576:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 800457a:	f107 001c 	add.w	r0, r7, #28
 800457e:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 8004582:	f107 0314 	add.w	r3, r7, #20
 8004586:	9301      	str	r3, [sp, #4]
 8004588:	f107 0318 	add.w	r3, r7, #24
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	4603      	mov	r3, r0
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f001 fa13 	bl	80059bc <VL53L1_get_preset_mode_timing_cfg>
 8004596:	4603      	mov	r3, r0
 8004598:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 800459c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d112      	bne.n	80045ca <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 80045a4:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
 80045a8:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 80045aa:	69fd      	ldr	r5, [r7, #28]
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	9102      	str	r1, [sp, #8]
 80045b4:	9201      	str	r2, [sp, #4]
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	462b      	mov	r3, r5
 80045ba:	4622      	mov	r2, r4
 80045bc:	4601      	mov	r1, r0
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f001 faa6 	bl	8005b10 <VL53L1_set_preset_mode>
 80045c4:	4603      	mov	r3, r0
 80045c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 80045ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d103      	bne.n	80045da <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80045d8:	709a      	strb	r2, [r3, #2]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 80045da:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d103      	bne.n	80045ea <SetPresetMode+0xd2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	7afa      	ldrb	r2, [r7, #11]
 80045e6:	f883 237c 	strb.w	r2, [r3, #892]	@ 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 80045ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3728      	adds	r7, #40	@ 0x28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bdb0      	pop	{r4, r5, r7, pc}

080045f6 <VL53L1_SetPresetMode>:
	return Status;
}


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b084      	sub	sp, #16
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	460b      	mov	r3, r1
 8004600:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004602:	2300      	movs	r3, #0
 8004604:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8004606:	2303      	movs	r3, #3
 8004608:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	/* fix for bug 495690 */
	Status = VL53L1_low_power_auto_data_init(Dev);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f003 fdae 	bl	800816c <VL53L1_low_power_auto_data_init>
 8004610:	4603      	mov	r3, r0
 8004612:	73fb      	strb	r3, [r7, #15]

	Status = SetPresetMode(Dev,
 8004614:	7bba      	ldrb	r2, [r7, #14]
 8004616:	78f9      	ldrb	r1, [r7, #3]
 8004618:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7ff ff7b 	bl	8004518 <SetPresetMode>
 8004622:	4603      	mov	r3, r0
 8004624:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8004626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d117      	bne.n	800465e <VL53L1_SetPresetMode+0x68>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 800462e:	78fb      	ldrb	r3, [r7, #3]
 8004630:	2b04      	cmp	r3, #4
 8004632:	d005      	beq.n	8004640 <VL53L1_SetPresetMode+0x4a>
 8004634:	78fb      	ldrb	r3, [r7, #3]
 8004636:	2b03      	cmp	r3, #3
 8004638:	d002      	beq.n	8004640 <VL53L1_SetPresetMode+0x4a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800463a:	78fb      	ldrb	r3, [r7, #3]
 800463c:	2b08      	cmp	r3, #8
 800463e:	d107      	bne.n	8004650 <VL53L1_SetPresetMode+0x5a>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8004640:	f24a 0128 	movw	r1, #41000	@ 0xa028
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f891 	bl	800476c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800464a:	4603      	mov	r3, r0
 800464c:	73fb      	strb	r3, [r7, #15]
 800464e:	e006      	b.n	800465e <VL53L1_SetPresetMode+0x68>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8004650:	f248 2135 	movw	r1, #33333	@ 0x8235
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f889 	bl	800476c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800465a:	4603      	mov	r3, r0
 800465c:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800465e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d106      	bne.n	8004674 <VL53L1_SetPresetMode+0x7e>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8004666:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fa08 	bl	8004a80 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8004670:	4603      	mov	r3, r0
 8004672:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004674:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800468c:	2300      	movs	r3, #0
 800468e:	77fb      	strb	r3, [r7, #31]
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 80046a2:	77bb      	strb	r3, [r7, #30]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 80046a4:	78fb      	ldrb	r3, [r7, #3]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d008      	beq.n	80046bc <VL53L1_SetDistanceMode+0x3c>
 80046aa:	78fb      	ldrb	r3, [r7, #3]
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d005      	beq.n	80046bc <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	2b03      	cmp	r3, #3
 80046b4:	d002      	beq.n	80046bc <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 80046b6:	f06f 0303 	mvn.w	r3, #3
 80046ba:	e052      	b.n	8004762 <VL53L1_SetDistanceMode+0xe2>

	if (Status == VL53L1_ERROR_NONE)
 80046bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d107      	bne.n	80046d4 <VL53L1_SetDistanceMode+0x54>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 80046c4:	f107 0308 	add.w	r3, r7, #8
 80046c8:	4619      	mov	r1, r3
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f001 f91f 	bl	800590e <VL53L1_get_user_zone>
 80046d0:	4603      	mov	r3, r0
 80046d2:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 80046da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10a      	bne.n	80046f8 <VL53L1_SetDistanceMode+0x78>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80046e2:	f107 0314 	add.w	r3, r7, #20
 80046e6:	f107 0210 	add.w	r2, r7, #16
 80046ea:	f107 010c 	add.w	r1, r7, #12
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f001 f84a 	bl	8005788 <VL53L1_get_timeouts_us>
 80046f4:	4603      	mov	r3, r0
 80046f6:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 80046f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d107      	bne.n	8004710 <VL53L1_SetDistanceMode+0x90>
		Status = SetPresetMode(Dev,
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	7fb9      	ldrb	r1, [r7, #30]
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff ff06 	bl	8004518 <SetPresetMode>
 800470c:	4603      	mov	r3, r0
 800470e:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 8004710:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d103      	bne.n	8004720 <VL53L1_SetDistanceMode+0xa0>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	78fa      	ldrb	r2, [r7, #3]
 800471c:	f883 237d 	strb.w	r2, [r3, #893]	@ 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8004720:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10e      	bne.n	8004746 <VL53L1_SetDistanceMode+0xc6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8004728:	68f9      	ldr	r1, [r7, #12]
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 fff2 	bl	8005718 <VL53L1_set_timeouts_us>
 8004734:	4603      	mov	r3, r0
 8004736:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8004738:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d102      	bne.n	8004746 <VL53L1_SetDistanceMode+0xc6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8004746:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d107      	bne.n	800475e <VL53L1_SetDistanceMode+0xde>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800474e:	f107 0308 	add.w	r3, r7, #8
 8004752:	4619      	mov	r1, r3
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f001 f8b7 	bl	80058c8 <VL53L1_set_user_zone>
 800475a:	4603      	mov	r3, r0
 800475c:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 800475e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3720      	adds	r7, #32
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b08c      	sub	sp, #48	@ 0x30
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004776:	2300      	movs	r3, #0
 8004778:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t Mm1Enabled = 0;
 800477c:	2300      	movs	r3, #0
 800477e:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 8004780:	2300      	movs	r3, #0
 8004782:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8004784:	2300      	movs	r3, #0
 8004786:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8004788:	2300      	movs	r3, #0
 800478a:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 800478c:	2300      	movs	r3, #0
 800478e:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8004790:	4b64      	ldr	r3, [pc, #400]	@ (8004924 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>)
 8004792:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	4a64      	ldr	r2, [pc, #400]	@ (8004928 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1bc>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d902      	bls.n	80047a2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800479c:	23fc      	movs	r3, #252	@ 0xfc
 800479e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 80047a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d109      	bne.n	80047be <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80047aa:	f107 031a 	add.w	r3, r7, #26
 80047ae:	461a      	mov	r2, r3
 80047b0:	2105      	movs	r1, #5
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fa8b 	bl	8004cce <VL53L1_GetSequenceStepEnable>
 80047b8:	4603      	mov	r3, r0
 80047ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80047be:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d109      	bne.n	80047da <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80047c6:	f107 0319 	add.w	r3, r7, #25
 80047ca:	461a      	mov	r2, r3
 80047cc:	2106      	movs	r1, #6
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fa7d 	bl	8004cce <VL53L1_GetSequenceStepEnable>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 80047da:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10b      	bne.n	80047fa <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 80047e2:	f107 0314 	add.w	r3, r7, #20
 80047e6:	f107 0210 	add.w	r2, r7, #16
 80047ea:	f107 010c 	add.w	r1, r7, #12
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 ffca 	bl	8005788 <VL53L1_get_timeouts_us>
 80047f4:	4603      	mov	r3, r0
 80047f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 80047fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f040 8081 	bne.w	8004906 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
		PresetMode = VL53L1DevDataGet(Dev,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 800480a:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 800480c:	2300      	movs	r3, #0
 800480e:	62bb      	str	r3, [r7, #40]	@ 0x28
		divisor = 1;
 8004810:	2301      	movs	r3, #1
 8004812:	627b      	str	r3, [r7, #36]	@ 0x24
		switch (PresetMode) {
 8004814:	7efb      	ldrb	r3, [r7, #27]
 8004816:	2b08      	cmp	r3, #8
 8004818:	d026      	beq.n	8004868 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
 800481a:	2b08      	cmp	r3, #8
 800481c:	dc43      	bgt.n	80048a6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
 800481e:	2b03      	cmp	r3, #3
 8004820:	d00f      	beq.n	8004842 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
 8004822:	2b04      	cmp	r3, #4
 8004824:	d13f      	bne.n	80048a6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004826:	7ebb      	ldrb	r3, [r7, #26]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d002      	beq.n	8004832 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 800482c:	7e7b      	ldrb	r3, [r7, #25]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d103      	bne.n	800483a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
				TimingGuard = 5000;
 8004832:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004836:	62bb      	str	r3, [r7, #40]	@ 0x28
			else
				TimingGuard = 1000;
		break;
 8004838:	e038      	b.n	80048ac <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
				TimingGuard = 1000;
 800483a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800483e:	62bb      	str	r3, [r7, #40]	@ 0x28
		break;
 8004840:	e034      	b.n	80048ac <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004848:	7ebb      	ldrb	r3, [r7, #26]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d002      	beq.n	8004854 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 800484e:	7e7b      	ldrb	r3, [r7, #25]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d103      	bne.n	800485c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				TimingGuard = 26600;
 8004854:	f246 73e8 	movw	r3, #26600	@ 0x67e8
 8004858:	62bb      	str	r3, [r7, #40]	@ 0x28
 800485a:	e002      	b.n	8004862 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
			else
				TimingGuard = 21600;
 800485c:	f245 4360 	movw	r3, #21600	@ 0x5460
 8004860:	62bb      	str	r3, [r7, #40]	@ 0x28
			divisor = 2;
 8004862:	2302      	movs	r3, #2
 8004864:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 8004866:	e021      	b.n	80048ac <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800486e:	23f5      	movs	r3, #245	@ 0xf5
 8004870:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 8004872:	f107 0308 	add.w	r3, r7, #8
 8004876:	461a      	mov	r2, r3
 8004878:	f248 0136 	movw	r1, #32822	@ 0x8036
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f001 fff7 	bl	8006870 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	dd07      	ble.n	8004898 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				vhv += vhv_loops *
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	22f5      	movs	r2, #245	@ 0xf5
 800488c:	fb02 f303 	mul.w	r3, r2, r3
 8004890:	461a      	mov	r2, r3
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	4413      	add	r3, r2
 8004896:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	f603 53dc 	addw	r3, r3, #3548	@ 0xddc
 800489e:	62bb      	str	r3, [r7, #40]	@ 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 80048a0:	2302      	movs	r3, #2
 80048a2:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 80048a4:	e002      	b.n	80048ac <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80048a6:	23f8      	movs	r3, #248	@ 0xf8
 80048a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d803      	bhi.n	80048bc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x150>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80048b4:	23fc      	movs	r3, #252	@ 0xfc
 80048b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80048ba:	e003      	b.n	80048c4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c0:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 80048c2:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 80048c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d11c      	bne.n	8004906 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	69fa      	ldr	r2, [r7, #28]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d203      	bcs.n	80048dc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x170>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 80048d4:	23fc      	movs	r3, #252	@ 0xfc
 80048d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80048da:	e00d      	b.n	80048f8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18c>
			else {
				TimingBudget /= divisor;
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e4:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 80048e6:	68f9      	ldr	r1, [r7, #12]
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 ff13 	bl	8005718 <VL53L1_set_timeouts_us>
 80048f2:	4603      	mov	r3, r0
 80048f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 80048f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d102      	bne.n	8004906 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
				VL53L1DevDataSet(Dev,
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8004906:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800490a:	2b00      	cmp	r3, #0
 800490c:	d103      	bne.n	8004916 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1aa>
		VL53L1DevDataSet(Dev,
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004916:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800491a:	4618      	mov	r0, r3
 800491c:	3730      	adds	r7, #48	@ 0x30
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	00086470 	.word	0x00086470
 8004928:	00989680 	.word	0x00989680

0800492c <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08c      	sub	sp, #48	@ 0x30
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004936:	2300      	movs	r3, #0
 8004938:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t Mm1Enabled = 0;
 800493c:	2300      	movs	r3, #0
 800493e:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 800494c:	2300      	movs	r3, #0
 800494e:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8004950:	2300      	movs	r3, #0
 8004952:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2200      	movs	r2, #0
 8004958:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 800495a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800495e:	2b00      	cmp	r3, #0
 8004960:	d109      	bne.n	8004976 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8004962:	f107 031b 	add.w	r3, r7, #27
 8004966:	461a      	mov	r2, r3
 8004968:	2105      	movs	r1, #5
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f9af 	bl	8004cce <VL53L1_GetSequenceStepEnable>
 8004970:	4603      	mov	r3, r0
 8004972:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8004976:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800497a:	2b00      	cmp	r3, #0
 800497c:	d109      	bne.n	8004992 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800497e:	f107 031a 	add.w	r3, r7, #26
 8004982:	461a      	mov	r2, r3
 8004984:	2106      	movs	r1, #6
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f9a1 	bl	8004cce <VL53L1_GetSequenceStepEnable>
 800498c:	4603      	mov	r3, r0
 800498e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8004992:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10b      	bne.n	80049b2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 800499a:	f107 0310 	add.w	r3, r7, #16
 800499e:	f107 0214 	add.w	r2, r7, #20
 80049a2:	f107 010c 	add.w	r1, r7, #12
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 feee 	bl	8005788 <VL53L1_get_timeouts_us>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 80049b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d155      	bne.n	8004a66 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>
		PresetMode = VL53L1DevDataGet(Dev,
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 80049c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 80049c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d02a      	beq.n	8004a22 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf6>
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	dc47      	bgt.n	8004a60 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d012      	beq.n	80049fa <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d143      	bne.n	8004a60 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80049d8:	7efb      	ldrb	r3, [r7, #27]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d002      	beq.n	80049e4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb8>
 80049de:	7ebb      	ldrb	r3, [r7, #26]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d105      	bne.n	80049f0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 80049ea:	3308      	adds	r3, #8
 80049ec:	62bb      	str	r3, [r7, #40]	@ 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 80049ee:	e03a      	b.n	8004a66 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80049f6:	62bb      	str	r3, [r7, #40]	@ 0x28
		break;
 80049f8:	e035      	b.n	8004a66 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80049fa:	7efb      	ldrb	r3, [r7, #27]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d002      	beq.n	8004a06 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
 8004a00:	7ebb      	ldrb	r3, [r7, #26]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d106      	bne.n	8004a14 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f503 534f 	add.w	r3, r3, #13248	@ 0x33c0
 8004a0c:	3334      	adds	r3, #52	@ 0x34
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	62bb      	str	r3, [r7, #40]	@ 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 8004a12:	e028      	b.n	8004a66 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f503 5328 	add.w	r3, r3, #10752	@ 0x2a00
 8004a1a:	3330      	adds	r3, #48	@ 0x30
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
		break;
 8004a20:	e021      	b.n	8004a66 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8004a22:	23f5      	movs	r3, #245	@ 0xf5
 8004a24:	627b      	str	r3, [r7, #36]	@ 0x24
			VL53L1_get_tuning_parm(Dev,
 8004a26:	f107 0308 	add.w	r3, r7, #8
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f248 0136 	movw	r1, #32822	@ 0x8036
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f001 ff1d 	bl	8006870 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	dd07      	ble.n	8004a4c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x120>
				vhv += vhv_loops *
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	22f5      	movs	r2, #245	@ 0xf5
 8004a40:	fb02 f303 	mul.w	r3, r2, r3
 8004a44:	461a      	mov	r2, r3
 8004a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a48:	4413      	add	r3, r2
 8004a4a:	627b      	str	r3, [r7, #36]	@ 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4e:	f603 53dc 	addw	r3, r3, #3548	@ 0xddc
 8004a52:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	69fa      	ldr	r2, [r7, #28]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
		break;
 8004a5e:	e002      	b.n	8004a66 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8004a60:	23f8      	movs	r3, #248	@ 0xf8
 8004a62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
	}
	if (Status == VL53L1_ERROR_NONE)
 8004a66:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d102      	bne.n	8004a74 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x148>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a72:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004a74:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3730      	adds	r7, #48	@ 0x30
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	019b      	lsls	r3, r3, #6
 8004a96:	4a09      	ldr	r2, [pc, #36]	@ (8004abc <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 8004a98:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9c:	099b      	lsrs	r3, r3, #6
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8004aa4:	68b9      	ldr	r1, [r7, #8]
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fde7 	bl	800567a <VL53L1_set_inter_measurement_period_ms>
 8004aac:	4603      	mov	r3, r0
 8004aae:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 8004ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	10624dd3 	.word	0x10624dd3

08004ac0 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004aca:	2300      	movs	r3, #0
 8004acc:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8004ace:	f107 0308 	add.w	r3, r7, #8
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 fdf9 	bl	80056cc <VL53L1_get_inter_measurement_period_ms>
 8004ada:	4603      	mov	r3, r0
 8004adc:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	019b      	lsls	r3, r3, #6
 8004ae4:	4907      	ldr	r1, [pc, #28]	@ (8004b04 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 8004ae6:	fba1 1303 	umull	r1, r3, r1, r3
 8004aea:	099b      	lsrs	r3, r3, #6
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 8004af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	10624dd3 	.word	0x10624dd3

08004b08 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	460b      	mov	r3, r1
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004b16:	2300      	movs	r3, #0
 8004b18:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8004b1a:	897b      	ldrh	r3, [r7, #10]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <SetLimitValue+0x1e>
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d009      	beq.n	8004b38 <SetLimitValue+0x30>
 8004b24:	e011      	b.n	8004b4a <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	0b9b      	lsrs	r3, r3, #14
 8004b2a:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8004b2c:	8abb      	ldrh	r3, [r7, #20]
 8004b2e:	4619      	mov	r1, r3
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f001 f979 	bl	8005e28 <VL53L1_set_lite_sigma_threshold>
		break;
 8004b36:	e00a      	b.n	8004b4e <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	0a5b      	lsrs	r3, r3, #9
 8004b3c:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8004b3e:	8abb      	ldrh	r3, [r7, #20]
 8004b40:	4619      	mov	r1, r3
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f001 f99c 	bl	8005e80 <VL53L1_set_lite_min_count_rate>
		break;
 8004b48:	e001      	b.n	8004b4e <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004b4a:	23fc      	movs	r3, #252	@ 0xfc
 8004b4c:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004b4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	460b      	mov	r3, r1
 8004b64:	807b      	strh	r3, [r7, #2]
 8004b66:	4613      	mov	r3, r2
 8004b68:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004b72:	887b      	ldrh	r3, [r7, #2]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d902      	bls.n	8004b7e <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004b78:	23fc      	movs	r3, #252	@ 0xfc
 8004b7a:	73fb      	strb	r3, [r7, #15]
 8004b7c:	e014      	b.n	8004ba8 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 8004b7e:	787b      	ldrb	r3, [r7, #1]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d102      	bne.n	8004b8a <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 8004b84:	2300      	movs	r3, #0
 8004b86:	60bb      	str	r3, [r7, #8]
 8004b88:	e006      	b.n	8004b98 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004b8a:	887b      	ldrh	r3, [r7, #2]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	33e0      	adds	r3, #224	@ 0xe0
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8004b98:	887b      	ldrh	r3, [r7, #2]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7ff ffb2 	bl	8004b08 <SetLimitValue>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 8004ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10c      	bne.n	8004bca <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004bb0:	787b      	ldrb	r3, [r7, #1]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	bf14      	ite	ne
 8004bb6:	2301      	movne	r3, #1
 8004bb8:	2300      	moveq	r3, #0
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	887b      	ldrh	r3, [r7, #2]
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	460a      	mov	r2, r1
 8004bc6:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 8004bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b087      	sub	sp, #28
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	60f8      	str	r0, [r7, #12]
 8004bde:	460b      	mov	r3, r1
 8004be0:	607a      	str	r2, [r7, #4]
 8004be2:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004be4:	2300      	movs	r3, #0
 8004be6:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004be8:	897b      	ldrh	r3, [r7, #10]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d905      	bls.n	8004bfa <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004bee:	23fc      	movs	r3, #252	@ 0xfc
 8004bf0:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	701a      	strb	r2, [r3, #0]
 8004bf8:	e008      	b.n	8004c0c <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004bfa:	897b      	ldrh	r3, [r7, #10]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f893 3384 	ldrb.w	r3, [r3, #900]	@ 0x384
 8004c04:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	7dba      	ldrb	r2, [r7, #22]
 8004c0a:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8004c0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	371c      	adds	r7, #28
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b088      	sub	sp, #32
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	460b      	mov	r3, r1
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8004c32:	897b      	ldrh	r3, [r7, #10]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <VL53L1_GetLimitCheckValue+0x22>
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d00c      	beq.n	8004c56 <VL53L1_GetLimitCheckValue+0x3a>
 8004c3c:	e017      	b.n	8004c6e <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8004c3e:	f107 0314 	add.w	r3, r7, #20
 8004c42:	4619      	mov	r1, r3
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f001 f8d9 	bl	8005dfc <VL53L1_get_lite_sigma_threshold>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 8004c4e:	8abb      	ldrh	r3, [r7, #20]
 8004c50:	039b      	lsls	r3, r3, #14
 8004c52:	61bb      	str	r3, [r7, #24]
		break;
 8004c54:	e00d      	b.n	8004c72 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8004c56:	f107 0316 	add.w	r3, r7, #22
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f001 f8f9 	bl	8005e54 <VL53L1_get_lite_min_count_rate>
 8004c62:	4603      	mov	r3, r0
 8004c64:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8004c66:	8afb      	ldrh	r3, [r7, #22]
 8004c68:	025b      	lsls	r3, r3, #9
 8004c6a:	61bb      	str	r3, [r7, #24]
		break;
 8004c6c:	e001      	b.n	8004c72 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004c6e:	23fc      	movs	r3, #252	@ 0xfc
 8004c70:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 8004c72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d123      	bne.n	8004cc2 <VL53L1_GetLimitCheckValue+0xa6>

		if (TempFix1616 == 0) {
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d110      	bne.n	8004ca2 <VL53L1_GetLimitCheckValue+0x86>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8004c80:	897b      	ldrh	r3, [r7, #10]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	33e0      	adds	r3, #224	@ 0xe0
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004c94:	897b      	ldrh	r3, [r7, #10]
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	4413      	add	r3, r2
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
 8004ca0:	e00f      	b.n	8004cc2 <VL53L1_GetLimitCheckValue+0xa6>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004ca8:	897b      	ldrh	r3, [r7, #10]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	33e0      	adds	r3, #224	@ 0xe0
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004cb6:	897b      	ldrh	r3, [r7, #10]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4413      	add	r3, r2
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 8004cc2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3720      	adds	r7, #32
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b086      	sub	sp, #24
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	607a      	str	r2, [r7, #4]
 8004cda:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8004ce0:	7afb      	ldrb	r3, [r7, #11]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 fdb7 	bl	800585a <VL53L1_get_sequence_config_bit>
 8004cec:	4603      	mov	r3, r0
 8004cee:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8004cf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004d04:	2300      	movs	r3, #0
 8004d06:	75fb      	strb	r3, [r7, #23]
	uint32_t MTBus, IMPms;


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	789b      	ldrb	r3, [r3, #2]
 8004d0c:	75bb      	strb	r3, [r7, #22]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8004d0e:	7dbb      	ldrb	r3, [r7, #22]
 8004d10:	2b40      	cmp	r3, #64	@ 0x40
 8004d12:	d002      	beq.n	8004d1a <VL53L1_StartMeasurement+0x1e>
		VL53L1_LoadPatch(Dev);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 fa6b 	bl	80051f0 <VL53L1_LoadPatch>
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 3378 	ldrb.w	r3, [r3, #888]	@ 0x378
 8004d20:	757b      	strb	r3, [r7, #21]
	switch (CurrPalState) {
 8004d22:	7d7b      	ldrb	r3, [r7, #21]
 8004d24:	2b63      	cmp	r3, #99	@ 0x63
 8004d26:	dc12      	bgt.n	8004d4e <VL53L1_StartMeasurement+0x52>
 8004d28:	2b62      	cmp	r3, #98	@ 0x62
 8004d2a:	da0d      	bge.n	8004d48 <VL53L1_StartMeasurement+0x4c>
 8004d2c:	2b05      	cmp	r3, #5
 8004d2e:	dc0e      	bgt.n	8004d4e <VL53L1_StartMeasurement+0x52>
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	da09      	bge.n	8004d48 <VL53L1_StartMeasurement+0x4c>
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	dc02      	bgt.n	8004d3e <VL53L1_StartMeasurement+0x42>
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	da05      	bge.n	8004d48 <VL53L1_StartMeasurement+0x4c>
 8004d3c:	e007      	b.n	8004d4e <VL53L1_StartMeasurement+0x52>
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d105      	bne.n	8004d4e <VL53L1_StartMeasurement+0x52>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 8004d42:	2300      	movs	r3, #0
 8004d44:	75fb      	strb	r3, [r7, #23]
		break;
 8004d46:	e004      	b.n	8004d52 <VL53L1_StartMeasurement+0x56>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8004d48:	23f2      	movs	r3, #242	@ 0xf2
 8004d4a:	75fb      	strb	r3, [r7, #23]
		break;
 8004d4c:	e001      	b.n	8004d52 <VL53L1_StartMeasurement+0x56>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 8004d4e:	23fd      	movs	r3, #253	@ 0xfd
 8004d50:	75fb      	strb	r3, [r7, #23]
	}

	/* Check timing configuration between timing budget and
	 * inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 8004d52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d11f      	bne.n	8004d9a <VL53L1_StartMeasurement+0x9e>
 8004d5a:	7dbb      	ldrb	r3, [r7, #22]
 8004d5c:	2b40      	cmp	r3, #64	@ 0x40
 8004d5e:	d11c      	bne.n	8004d9a <VL53L1_StartMeasurement+0x9e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8004d60:	f107 0310 	add.w	r3, r7, #16
 8004d64:	4619      	mov	r1, r3
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff fde0 	bl	800492c <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	4a17      	ldr	r2, [pc, #92]	@ (8004dd0 <VL53L1_StartMeasurement+0xd4>)
 8004d74:	fba2 2303 	umull	r2, r3, r2, r3
 8004d78:	099b      	lsrs	r3, r3, #6
 8004d7a:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8004d7c:	f107 030c 	add.w	r3, r7, #12
 8004d80:	4619      	mov	r1, r3
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff fe9c 	bl	8004ac0 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1d1a      	adds	r2, r3, #4
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d901      	bls.n	8004d9a <VL53L1_StartMeasurement+0x9e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8004d96:	23fc      	movs	r3, #252	@ 0xfc
 8004d98:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 8004d9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d107      	bne.n	8004db2 <VL53L1_StartMeasurement+0xb6>
		Status = VL53L1_init_and_start_range(
 8004da2:	7dbb      	ldrb	r3, [r7, #22]
 8004da4:	2206      	movs	r2, #6
 8004da6:	4619      	mov	r1, r3
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f001 f89f 	bl	8005eec <VL53L1_init_and_start_range>
 8004dae:	4603      	mov	r3, r0
 8004db0:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 8004db2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d103      	bne.n	8004dc2 <VL53L1_StartMeasurement+0xc6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 8004dc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	10624dd3 	.word	0x10624dd3

08004dd4 <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	789b      	ldrb	r3, [r3, #2]
 8004de4:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 8004de6:	7bbb      	ldrb	r3, [r7, #14]
 8004de8:	4619      	mov	r1, r3
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f001 fc0c 	bl	8006608 <VL53L1_clear_interrupt_and_enable_next_range>
 8004df0:	4603      	mov	r3, r0
 8004df2:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8004df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <VL53L1_GetMeasurementDataReady>:


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 8004e0e:	6839      	ldr	r1, [r7, #0]
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f004 fb70 	bl	80094f6 <VL53L1_is_new_data_ready>
 8004e16:	4603      	mov	r3, r0
 8004e18:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
	...

08004e28 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b08d      	sub	sp, #52	@ 0x34
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	603a      	str	r2, [r7, #0]
 8004e32:	71fb      	strb	r3, [r7, #7]
 8004e34:	460b      	mov	r3, r1
 8004e36:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 8004e38:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004e3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t SRAS = 30;
 8004e3e:	231e      	movs	r3, #30
 8004e40:	847b      	strh	r3, [r7, #34]	@ 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 8004e42:	4b33      	ldr	r3, [pc, #204]	@ (8004f10 <ComputeRQL+0xe8>)
 8004e44:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 8004e46:	4b33      	ldr	r3, [pc, #204]	@ (8004f14 <ComputeRQL+0xec>)
 8004e48:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 8004e4a:	f641 139a 	movw	r3, #6554	@ 0x199a
 8004e4e:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8004e50:	79fb      	ldrb	r3, [r7, #7]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d103      	bne.n	8004e5e <ComputeRQL+0x36>
		returnvalue = 0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004e5c:	e04f      	b.n	8004efe <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8004e5e:	79bb      	ldrb	r3, [r7, #6]
 8004e60:	2b07      	cmp	r3, #7
 8004e62:	d103      	bne.n	8004e6c <ComputeRQL+0x44>
		returnvalue = 50;
 8004e64:	2332      	movs	r3, #50	@ 0x32
 8004e66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004e6a:	e048      	b.n	8004efe <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8004e72:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8004e76:	429a      	cmp	r2, r3
 8004e78:	dd03      	ble.n	8004e82 <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 8004e7a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004e7c:	041b      	lsls	r3, r3, #16
 8004e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e80:	e007      	b.n	8004e92 <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8004e88:	461a      	mov	r2, r3
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	fb02 f303 	mul.w	r3, r2, r3
 8004e90:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 8004e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d020      	beq.n	8004eda <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	fb02 f303 	mul.w	r3, r2, r3
 8004ea4:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 8004ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea8:	085b      	lsrs	r3, r3, #1
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	4413      	add	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb8:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	041b      	lsls	r3, r3, #16
 8004ebe:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d804      	bhi.n	8004ed2 <ComputeRQL+0xaa>
				SRQL = GI - partial;
 8004ec8:	69fa      	ldr	r2, [r7, #28]
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ed0:	e006      	b.n	8004ee0 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 8004ed2:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 8004ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ed8:	e002      	b.n	8004ee0 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 8004eda:	f44f 03c8 	mov.w	r3, #6553600	@ 0x640000
 8004ede:	62bb      	str	r3, [r7, #40]	@ 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8004ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee2:	0c1b      	lsrs	r3, r3, #16
 8004ee4:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8004ee6:	7bfb      	ldrb	r3, [r7, #15]
 8004ee8:	2b32      	cmp	r3, #50	@ 0x32
 8004eea:	d905      	bls.n	8004ef8 <ComputeRQL+0xd0>
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	2b64      	cmp	r3, #100	@ 0x64
 8004ef0:	bf28      	it	cs
 8004ef2:	2364      	movcs	r3, #100	@ 0x64
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	e000      	b.n	8004efa <ComputeRQL+0xd2>
 8004ef8:	2332      	movs	r3, #50	@ 0x32
 8004efa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return returnvalue;
 8004efe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3734      	adds	r7, #52	@ 0x34
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	0075b333 	.word	0x0075b333
 8004f14:	0030cccd 	.word	0x0030cccd

08004f18 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	4603      	mov	r3, r0
 8004f20:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8004f22:	79fb      	ldrb	r3, [r7, #7]
 8004f24:	3b04      	subs	r3, #4
 8004f26:	2b0f      	cmp	r3, #15
 8004f28:	d83d      	bhi.n	8004fa6 <ConvertStatusLite+0x8e>
 8004f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f30 <ConvertStatusLite+0x18>)
 8004f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f30:	08004f83 	.word	0x08004f83
 8004f34:	08004f7d 	.word	0x08004f7d
 8004f38:	08004f89 	.word	0x08004f89
 8004f3c:	08004f8f 	.word	0x08004f8f
 8004f40:	08004f9b 	.word	0x08004f9b
 8004f44:	08004fa1 	.word	0x08004fa1
 8004f48:	08004fa7 	.word	0x08004fa7
 8004f4c:	08004fa7 	.word	0x08004fa7
 8004f50:	08004f95 	.word	0x08004f95
 8004f54:	08004fa7 	.word	0x08004fa7
 8004f58:	08004fa7 	.word	0x08004fa7
 8004f5c:	08004fa7 	.word	0x08004fa7
 8004f60:	08004fa7 	.word	0x08004fa7
 8004f64:	08004fa7 	.word	0x08004fa7
 8004f68:	08004f71 	.word	0x08004f71
 8004f6c:	08004f77 	.word	0x08004f77
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 8004f70:	230a      	movs	r3, #10
 8004f72:	73fb      	strb	r3, [r7, #15]
		break;
 8004f74:	e019      	b.n	8004faa <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8004f76:	2306      	movs	r3, #6
 8004f78:	73fb      	strb	r3, [r7, #15]
		break;
 8004f7a:	e016      	b.n	8004faa <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8004f7c:	2304      	movs	r3, #4
 8004f7e:	73fb      	strb	r3, [r7, #15]
		break;
 8004f80:	e013      	b.n	8004faa <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 8004f82:	2302      	movs	r3, #2
 8004f84:	73fb      	strb	r3, [r7, #15]
		break;
 8004f86:	e010      	b.n	8004faa <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	73fb      	strb	r3, [r7, #15]
		break;
 8004f8c:	e00d      	b.n	8004faa <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8004f8e:	2307      	movs	r3, #7
 8004f90:	73fb      	strb	r3, [r7, #15]
		break;
 8004f92:	e00a      	b.n	8004faa <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8004f94:	2309      	movs	r3, #9
 8004f96:	73fb      	strb	r3, [r7, #15]
		break;
 8004f98:	e007      	b.n	8004faa <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	73fb      	strb	r3, [r7, #15]
		break;
 8004f9e:	e004      	b.n	8004faa <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	73fb      	strb	r3, [r7, #15]
		break;
 8004fa4:	e001      	b.n	8004faa <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8004fa6:	23ff      	movs	r3, #255	@ 0xff
 8004fa8:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b08c      	sub	sp, #48	@ 0x30
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	607b      	str	r3, [r7, #4]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	72fb      	strb	r3, [r7, #11]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd6:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fde:	f003 031f 	and.w	r3, r3, #31
 8004fe2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8004fe6:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8004fea:	7afb      	ldrb	r3, [r7, #11]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7ff ff1a 	bl	8004e28 <ComputeRQL>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ffa:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005000:	025b      	lsls	r3, r3, #9
 8005002:	62bb      	str	r3, [r7, #40]	@ 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8005004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005006:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005008:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800500e:	025b      	lsls	r3, r3, #9
 8005010:	627b      	str	r3, [r7, #36]	@ 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8005012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005014:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005016:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 800501c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800501e:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005024:	025b      	lsls	r3, r3, #9
 8005026:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8005028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800502a:	6a3a      	ldr	r2, [r7, #32]
 800502c:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	@ 0x3c
 8005034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005036:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 8005038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800503a:	2200      	movs	r2, #0
 800503c:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 800503e:	7abb      	ldrb	r3, [r7, #10]
 8005040:	2b11      	cmp	r3, #17
 8005042:	d009      	beq.n	8005058 <SetSimpleData+0xa0>
 8005044:	2b11      	cmp	r3, #17
 8005046:	dc0f      	bgt.n	8005068 <SetSimpleData+0xb0>
 8005048:	2b03      	cmp	r3, #3
 800504a:	dc02      	bgt.n	8005052 <SetSimpleData+0x9a>
 800504c:	2b00      	cmp	r3, #0
 800504e:	dc03      	bgt.n	8005058 <SetSimpleData+0xa0>
 8005050:	e00a      	b.n	8005068 <SetSimpleData+0xb0>
 8005052:	2b0d      	cmp	r3, #13
 8005054:	d004      	beq.n	8005060 <SetSimpleData+0xa8>
 8005056:	e007      	b.n	8005068 <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8005058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505a:	2205      	movs	r2, #5
 800505c:	76da      	strb	r2, [r3, #27]
		break;
 800505e:	e006      	b.n	800506e <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8005060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005062:	220d      	movs	r2, #13
 8005064:	76da      	strb	r2, [r3, #27]
		break;
 8005066:	e002      	b.n	800506e <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8005068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506a:	2200      	movs	r2, #0
 800506c:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 800506e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005070:	7edb      	ldrb	r3, [r3, #27]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d108      	bne.n	8005088 <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8005076:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff ff4c 	bl	8004f18 <ConvertStatusLite>
 8005080:	4603      	mov	r3, r0
 8005082:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8005084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005086:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800508c:	025b      	lsls	r3, r3, #9
 800508e:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6a3a      	ldr	r2, [r7, #32]
 8005094:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800509c:	025b      	lsls	r3, r3, #9
 800509e:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a3a      	ldr	r2, [r7, #32]
 80050a4:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 80050a8:	f107 0314 	add.w	r3, r7, #20
 80050ac:	461a      	mov	r2, r3
 80050ae:	2100      	movs	r1, #0
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f7ff fdb3 	bl	8004c1c <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 80050b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80050ba:	2b06      	cmp	r3, #6
 80050bc:	bf0c      	ite	eq
 80050be:	2301      	moveq	r3, #1
 80050c0:	2300      	movne	r3, #0
 80050c2:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 80050c4:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 80050c6:	f107 0319 	add.w	r3, r7, #25
 80050ca:	461a      	mov	r2, r3
 80050cc:	2100      	movs	r1, #0
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f7ff fd81 	bl	8004bd6 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 80050d4:	7e7b      	ldrb	r3, [r7, #25]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d104      	bne.n	80050e4 <SetSimpleData+0x12c>
 80050da:	7ffb      	ldrb	r3, [r7, #31]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d101      	bne.n	80050e4 <SetSimpleData+0x12c>
 80050e0:	2301      	movs	r3, #1
 80050e2:	e000      	b.n	80050e6 <SetSimpleData+0x12e>
 80050e4:	2300      	movs	r3, #0
 80050e6:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	7fba      	ldrb	r2, [r7, #30]
 80050ec:	f883 2386 	strb.w	r2, [r3, #902]	@ 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 80050f0:	f107 0314 	add.w	r3, r7, #20
 80050f4:	461a      	mov	r2, r3
 80050f6:	2101      	movs	r1, #1
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f7ff fd8f 	bl	8004c1c <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 80050fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005102:	2b04      	cmp	r3, #4
 8005104:	bf0c      	ite	eq
 8005106:	2301      	moveq	r3, #1
 8005108:	2300      	movne	r3, #0
 800510a:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 800510c:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 800510e:	f107 0319 	add.w	r3, r7, #25
 8005112:	461a      	mov	r2, r3
 8005114:	2101      	movs	r1, #1
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f7ff fd5d 	bl	8004bd6 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 800511c:	7e7b      	ldrb	r3, [r7, #25]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d104      	bne.n	800512c <SetSimpleData+0x174>
 8005122:	7f7b      	ldrb	r3, [r7, #29]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d101      	bne.n	800512c <SetSimpleData+0x174>
 8005128:	2301      	movs	r3, #1
 800512a:	e000      	b.n	800512e <SetSimpleData+0x176>
 800512c:	2300      	movs	r3, #0
 800512e:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	7fba      	ldrb	r2, [r7, #30]
 8005134:	f883 2387 	strb.w	r2, [r3, #903]	@ 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 8005138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800513a:	8b1b      	ldrh	r3, [r3, #24]
 800513c:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 800513e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005140:	7edb      	ldrb	r3, [r3, #27]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d110      	bne.n	8005168 <SetSimpleData+0x1b0>
 8005146:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800514a:	2b00      	cmp	r3, #0
 800514c:	da0c      	bge.n	8005168 <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 800514e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8005152:	4b08      	ldr	r3, [pc, #32]	@ (8005174 <SetSimpleData+0x1bc>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	429a      	cmp	r2, r3
 8005158:	da03      	bge.n	8005162 <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 800515a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800515c:	220e      	movs	r2, #14
 800515e:	76da      	strb	r2, [r3, #27]
 8005160:	e002      	b.n	8005168 <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8005162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005164:	2200      	movs	r2, #0
 8005166:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 8005168:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800516c:	4618      	mov	r0, r3
 800516e:	3730      	adds	r7, #48	@ 0x30
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	2000000c 	.word	0x2000000c

08005178 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b0a8      	sub	sp, #160	@ 0xa0
 800517c:	af02      	add	r7, sp, #8
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005182:	2300      	movs	r3, #0
 8005184:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	VL53L1_range_results_t results;
	VL53L1_range_results_t *presults = &results;
 8005188:	f107 0308 	add.w	r3, r7, #8
 800518c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 8005190:	221c      	movs	r2, #28
 8005192:	21ff      	movs	r1, #255	@ 0xff
 8005194:	6838      	ldr	r0, [r7, #0]
 8005196:	f005 fa68 	bl	800a66a <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 800519a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800519e:	2102      	movs	r1, #2
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f001 f9c1 	bl	8006528 <VL53L1_get_device_results>
 80051a6:	4603      	mov	r3, r0
 80051a8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 80051ac:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d117      	bne.n	80051e4 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 80051b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80051b8:	789a      	ldrb	r2, [r3, #2]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 80051be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80051c2:	3304      	adds	r3, #4
 80051c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		Status = SetSimpleData(Dev, 1,
 80051c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80051cc:	78da      	ldrb	r2, [r3, #3]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051d6:	2101      	movs	r1, #1
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7ff feed 	bl	8004fb8 <SetSimpleData>
 80051de:	4603      	mov	r3, r0
 80051e0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80051e4:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3798      	adds	r7, #152	@ 0x98
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <VL53L1_LoadPatch>:

/* End Group PAL IRQ Triggered events Functions */


static VL53L1_Error VL53L1_LoadPatch(VL53L1_DEV Dev)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b0c6      	sub	sp, #280	@ 0x118
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80051fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80051fe:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005200:	2300      	movs	r3, #0
 8005202:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	uint32_t patch_tuning = 0;
 8005206:	2300      	movs	r3, #0
 8005208:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;
	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800520c:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10b      	bne.n	800522c <VL53L1_LoadPatch+0x3c>
		status = VL53L1_WrByte(
 8005214:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005218:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800521c:	2200      	movs	r2, #0
 800521e:	2185      	movs	r1, #133	@ 0x85
 8005220:	6818      	ldr	r0, [r3, #0]
 8005222:	f004 fa7b 	bl	800971c <VL53L1_WrByte>
 8005226:	4603      	mov	r3, r0
 8005228:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				0x00);
	/* Force GO1 on */
	if (status == VL53L1_ERROR_NONE)
 800522c:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8005230:	2b00      	cmp	r3, #0
 8005232:	d106      	bne.n	8005242 <VL53L1_LoadPatch+0x52>
		VL53L1_enable_powerforce(Dev);
 8005234:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005238:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800523c:	6818      	ldr	r0, [r3, #0]
 800523e:	f002 fd5c 	bl	8007cfa <VL53L1_enable_powerforce>

	patch_tuning = BDTable[VL53L1_TUNING_PHASECAL_PATCH_POWER];
 8005242:	4b7e      	ldr	r3, [pc, #504]	@ (800543c <VL53L1_LoadPatch+0x24c>)
 8005244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005246:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	switch(patch_tuning) {
 800524a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800524e:	2b03      	cmp	r3, #3
 8005250:	d81a      	bhi.n	8005288 <VL53L1_LoadPatch+0x98>
 8005252:	a201      	add	r2, pc, #4	@ (adr r2, 8005258 <VL53L1_LoadPatch+0x68>)
 8005254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005258:	08005269 	.word	0x08005269
 800525c:	08005271 	.word	0x08005271
 8005260:	08005279 	.word	0x08005279
 8005264:	08005281 	.word	0x08005281
	case 0:
		patch_power = 0x00;
 8005268:	2300      	movs	r3, #0
 800526a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 800526e:	e00e      	b.n	800528e <VL53L1_LoadPatch+0x9e>
	case 1:
		patch_power = 0x10;
 8005270:	2310      	movs	r3, #16
 8005272:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8005276:	e00a      	b.n	800528e <VL53L1_LoadPatch+0x9e>
	case 2:
		patch_power = 0x20;
 8005278:	2320      	movs	r3, #32
 800527a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 800527e:	e006      	b.n	800528e <VL53L1_LoadPatch+0x9e>
	case 3:
		patch_power = 0x40;
 8005280:	2340      	movs	r3, #64	@ 0x40
 8005282:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8005286:	e002      	b.n	800528e <VL53L1_LoadPatch+0x9e>
	default:
		patch_power = 0x00;
 8005288:	2300      	movs	r3, #0
 800528a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	}
	/* Set patch RAM offsets */
	if (status == VL53L1_ERROR_NONE) {
 800528e:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8005292:	2b00      	cmp	r3, #0
 8005294:	d134      	bne.n	8005300 <VL53L1_LoadPatch+0x110>
		/* Package up MultiByte transaction */
		comms_buffer[0] = 0x29;
 8005296:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800529a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800529e:	2229      	movs	r2, #41	@ 0x29
 80052a0:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 80052a2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80052a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80052aa:	22c9      	movs	r2, #201	@ 0xc9
 80052ac:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 80052ae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80052b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80052b6:	220e      	movs	r2, #14
 80052b8:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 80052ba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80052be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80052c2:	2240      	movs	r2, #64	@ 0x40
 80052c4:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 80052c6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80052ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80052ce:	2228      	movs	r2, #40	@ 0x28
 80052d0:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 80052d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80052dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80052e0:	715a      	strb	r2, [r3, #5]
		/* 0x10 for 60ms, 0x20 for 240ms and 0x40 for 3580ms */
		status = VL53L1_WriteMulti(
 80052e2:	f107 020c 	add.w	r2, r7, #12
 80052e6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80052ea:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 80052ee:	2306      	movs	r3, #6
 80052f0:	f240 4176 	movw	r1, #1142	@ 0x476
 80052f4:	6800      	ldr	r0, [r0, #0]
 80052f6:	f004 f9a5 	bl	8009644 <VL53L1_WriteMulti>
 80052fa:	4603      	mov	r3, r0
 80052fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				VL53L1_PATCH__OFFSET_0,
				comms_buffer,
				6);
	}
	/* Set patch breakpoints */
	if (status == VL53L1_ERROR_NONE) {
 8005300:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8005304:	2b00      	cmp	r3, #0
 8005306:	d132      	bne.n	800536e <VL53L1_LoadPatch+0x17e>
		comms_buffer[0] = 0x03;
 8005308:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800530c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005310:	2203      	movs	r2, #3
 8005312:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8005314:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005318:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800531c:	226d      	movs	r2, #109	@ 0x6d
 800531e:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8005320:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005324:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005328:	2203      	movs	r2, #3
 800532a:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 800532c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005330:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005334:	226f      	movs	r2, #111	@ 0x6f
 8005336:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8005338:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800533c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005340:	2207      	movs	r2, #7
 8005342:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8005344:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005348:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800534c:	2229      	movs	r2, #41	@ 0x29
 800534e:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(
 8005350:	f107 020c 	add.w	r2, r7, #12
 8005354:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005358:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 800535c:	2306      	movs	r3, #6
 800535e:	f240 4196 	movw	r1, #1174	@ 0x496
 8005362:	6800      	ldr	r0, [r0, #0]
 8005364:	f004 f96e 	bl	8009644 <VL53L1_WriteMulti>
 8005368:	4603      	mov	r3, r0
 800536a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				VL53L1_PATCH__ADDRESS_0,
				comms_buffer,
				6);
	}
	/* Enable patch JMP patches */
	if (status == VL53L1_ERROR_NONE) {
 800536e:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8005372:	2b00      	cmp	r3, #0
 8005374:	d11a      	bne.n	80053ac <VL53L1_LoadPatch+0x1bc>
		comms_buffer[0] = 0x00;
 8005376:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800537a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800537e:	2200      	movs	r2, #0
 8005380:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8005382:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005386:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800538a:	2207      	movs	r2, #7
 800538c:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 800538e:	f107 020c 	add.w	r2, r7, #12
 8005392:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005396:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 800539a:	2302      	movs	r3, #2
 800539c:	f240 4172 	movw	r1, #1138	@ 0x472
 80053a0:	6800      	ldr	r0, [r0, #0]
 80053a2:	f004 f94f 	bl	8009644 <VL53L1_WriteMulti>
 80053a6:	4603      	mov	r3, r0
 80053a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				VL53L1_PATCH__JMP_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable patch DATA patches */
	if (status == VL53L1_ERROR_NONE) {
 80053ac:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d11a      	bne.n	80053ea <VL53L1_LoadPatch+0x1fa>
		comms_buffer[0] = 0x00;
 80053b4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80053b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80053bc:	2200      	movs	r2, #0
 80053be:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80053c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80053c4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80053c8:	2207      	movs	r2, #7
 80053ca:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 80053cc:	f107 020c 	add.w	r2, r7, #12
 80053d0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80053d4:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 80053d8:	2302      	movs	r3, #2
 80053da:	f240 4174 	movw	r1, #1140	@ 0x474
 80053de:	6800      	ldr	r0, [r0, #0]
 80053e0:	f004 f930 	bl	8009644 <VL53L1_WriteMulti>
 80053e4:	4603      	mov	r3, r0
 80053e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				VL53L1_PATCH__DATA_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable firmware patching */
	if (status == VL53L1_ERROR_NONE)
 80053ea:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10c      	bne.n	800540c <VL53L1_LoadPatch+0x21c>
		status = VL53L1_WrByte(
 80053f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80053f6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80053fa:	2201      	movs	r2, #1
 80053fc:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	f004 f98b 	bl	800971c <VL53L1_WrByte>
 8005406:	4603      	mov	r3, r0
 8005408:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				Dev,
				VL53L1_PATCH__CTRL,
				0x01);
	/* Enable Firmware */
	if (status == VL53L1_ERROR_NONE)
 800540c:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10b      	bne.n	800542c <VL53L1_LoadPatch+0x23c>
		status = VL53L1_WrByte(
 8005414:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005418:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800541c:	2201      	movs	r2, #1
 800541e:	2185      	movs	r1, #133	@ 0x85
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	f004 f97b 	bl	800971c <VL53L1_WrByte>
 8005426:	4603      	mov	r3, r0
 8005428:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				VL53L1_FIRMWARE__ENABLE,
				0x01);

	LOG_FUNCTION_END(status);

	return status;
 800542c:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
}
 8005430:	4618      	mov	r0, r3
 8005432:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	2000000c 	.word	0x2000000c

08005440 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8005440:	b5b0      	push	{r4, r5, r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af04      	add	r7, sp, #16
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	460b      	mov	r3, r1
 800544a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800544c:	2300      	movs	r3, #0
 800544e:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 8005454:	2162      	movs	r1, #98	@ 0x62
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f002 f909 	bl	800766e <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2200      	movs	r2, #0
 8005460:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2201      	movs	r2, #1
 8005466:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2200      	movs	r2, #0
 800546c:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2201      	movs	r2, #1
 8005472:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2201      	movs	r2, #1
 8005478:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005480:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005488:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8005490:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2264      	movs	r2, #100	@ 0x64
 8005496:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 800549e:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f240 72db 	movw	r2, #2011	@ 0x7db
 80054ae:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f002 f8bf 	bl	8007636 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80054b8:	78fb      	ldrb	r3, [r7, #3]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d008      	beq.n	80054d0 <VL53L1_data_init+0x90>
 80054be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d104      	bne.n	80054d0 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f857 	bl	800557a <VL53L1_read_p2p_data>
 80054cc:	4603      	mov	r3, r0
 80054ce:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80054d6:	4618      	mov	r0, r3
 80054d8:	f001 fbee 	bl	8006cb8 <VL53L1_init_refspadchar_config_struct>
 80054dc:	4603      	mov	r3, r0
 80054de:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80054e6:	4618      	mov	r0, r3
 80054e8:	f001 fc0a 	bl	8006d00 <VL53L1_init_ssc_config_struct>
 80054ec:	4603      	mov	r3, r0
 80054ee:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f103 0242 	add.w	r2, r3, #66	@ 0x42
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80054fc:	4619      	mov	r1, r3
 80054fe:	4610      	mov	r0, r2
 8005500:	f001 fc1f 	bl	8006d42 <VL53L1_init_xtalk_config_struct>
 8005504:	4603      	mov	r3, r0
 8005506:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800550e:	4618      	mov	r0, r3
 8005510:	f001 fc79 	bl	8006e06 <VL53L1_init_offset_cal_config_struct>
 8005514:	4603      	mov	r3, r0
 8005516:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	33a4      	adds	r3, #164	@ 0xa4
 800551c:	4618      	mov	r0, r3
 800551e:	f001 fc99 	bl	8006e54 <VL53L1_init_tuning_parm_storage_struct>
 8005522:	4603      	mov	r3, r0
 8005524:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 8005526:	2120      	movs	r1, #32
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 fcbf 	bl	8005eac <VL53L1_set_vhv_loopbound>
 800552e:	4603      	mov	r3, r0
 8005530:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 8005532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d116      	bne.n	8005568 <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	7858      	ldrb	r0, [r3, #1]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	8b1c      	ldrh	r4, [r3, #24]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	689d      	ldr	r5, [r3, #8]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	6912      	ldr	r2, [r2, #16]
 800554e:	68b9      	ldr	r1, [r7, #8]
 8005550:	6949      	ldr	r1, [r1, #20]
 8005552:	9102      	str	r1, [sp, #8]
 8005554:	9201      	str	r2, [sp, #4]
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	462b      	mov	r3, r5
 800555a:	4622      	mov	r2, r4
 800555c:	4601      	mov	r1, r0
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fad6 	bl	8005b10 <VL53L1_set_preset_mode>
 8005564:	4603      	mov	r3, r0
 8005566:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f002 fdff 	bl	800816c <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 800556e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bdb0      	pop	{r4, r5, r7, pc}

0800557a <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b084      	sub	sp, #16
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8005582:	2300      	movs	r3, #0
 8005584:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800558a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d108      	bne.n	80055a4 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8005598:	4619      	mov	r1, r3
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f002 ff83 	bl	80084a6 <VL53L1_get_static_nvm_managed>
 80055a0:	4603      	mov	r3, r0
 80055a2:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 80055a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d107      	bne.n	80055bc <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	3342      	adds	r3, #66	@ 0x42
 80055b0:	4619      	mov	r1, r3
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f003 f8b5 	bl	8008722 <VL53L1_get_customer_nvm_managed>
 80055b8:	4603      	mov	r3, r0
 80055ba:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 80055bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d115      	bne.n	80055f0 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f503 73fd 	add.w	r3, r3, #506	@ 0x1fa
 80055ca:	4619      	mov	r1, r3
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f003 ff67 	bl	80094a0 <VL53L1_get_nvm_copy_data>
 80055d2:	4603      	mov	r3, r0
 80055d4:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 80055d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d108      	bne.n	80055f0 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	f503 72fd 	add.w	r2, r3, #506	@ 0x1fa
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	33f0      	adds	r3, #240	@ 0xf0
 80055e8:	4619      	mov	r1, r3
 80055ea:	4610      	mov	r0, r2
 80055ec:	f002 f9a1 	bl	8007932 <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 80055f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d109      	bne.n	800560c <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 80055fe:	461a      	mov	r2, r3
 8005600:	21de      	movs	r1, #222	@ 0xde
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f004 f8e8 	bl	80097d8 <VL53L1_RdWord>
 8005608:	4603      	mov	r3, r0
 800560a:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 8005612:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005616:	d204      	bcs.n	8005622 <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f64b 42cc 	movw	r2, #48332	@ 0xbccc
 800561e:	f8a3 215e 	strh.w	r2, [r3, #350]	@ 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 8005622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d107      	bne.n	800563a <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	339e      	adds	r3, #158	@ 0x9e
 800562e:	4619      	mov	r1, r3
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f98e 	bl	8005952 <VL53L1_get_mode_mitigation_roi>
 8005636:	4603      	mov	r3, r0
 8005638:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d114      	bne.n	800566e <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10f      	bne.n	800566e <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 8005654:	011b      	lsls	r3, r3, #4
 8005656:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f893 309f 	ldrb.w	r3, [r3, #159]	@ 0x9f
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 800566e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 800567a:	b480      	push	{r7}
 800567c:	b085      	sub	sp, #20
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
 8005682:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005684:	2300      	movs	r3, #0
 8005686:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005696:	23f1      	movs	r3, #241	@ 0xf1
 8005698:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 800569a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10c      	bne.n	80056bc <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 80056ae:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 80056bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80056d6:	2300      	movs	r3, #0
 80056d8:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80056e8:	23f1      	movs	r3, #241	@ 0xf1
 80056ea:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 80056ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d109      	bne.n	8005708 <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	@ 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 8005700:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8005708:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b088      	sub	sp, #32
 800571c:	af02      	add	r7, sp, #8
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
 8005724:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005726:	2300      	movs	r3, #0
 8005728:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005738:	23f1      	movs	r3, #241	@ 0xf1
 800573a:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 800573c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d11b      	bne.n	800577c <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f8b3 115e 	ldrh.w	r1, [r3, #350]	@ 0x15e
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	f502 72ce 	add.w	r2, r2, #412	@ 0x19c
 8005768:	9201      	str	r2, [sp, #4]
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	460b      	mov	r3, r1
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	6879      	ldr	r1, [r7, #4]
 8005772:	68b8      	ldr	r0, [r7, #8]
 8005774:	f002 fc2c 	bl	8007fd0 <VL53L1_calc_timeout_register_values>
 8005778:	4603      	mov	r3, r0
 800577a:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800577c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
 8005794:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005796:	2300      	movs	r3, #0
 8005798:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 800579e:	2300      	movs	r3, #0
 80057a0:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 80057a2:	2300      	movs	r3, #0
 80057a4:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80057b0:	23f1      	movs	r3, #241	@ 0xf1
 80057b2:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 80057b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d148      	bne.n	800584e <VL53L1_get_timeouts_us+0xc6>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	f8b3 215e 	ldrh.w	r2, [r3, #350]	@ 0x15e
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	f893 31a2 	ldrb.w	r3, [r3, #418]	@ 0x1a2
 80057c8:	4619      	mov	r1, r3
 80057ca:	4610      	mov	r0, r2
 80057cc:	f002 faa7 	bl	8007d1e <VL53L1_calc_macro_period_us>
 80057d0:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	f893 318b 	ldrb.w	r3, [r3, #395]	@ 0x18b
			VL53L1_calc_timeout_us(
 80057d8:	6979      	ldr	r1, [r7, #20]
 80057da:	4618      	mov	r0, r3
 80057dc:	f002 fb5f 	bl	8007e9e <VL53L1_calc_timeout_us>
 80057e0:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
		timeout_encoded =
 80057ec:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 80057ee:	8a7b      	ldrh	r3, [r7, #18]
 80057f0:	021b      	lsls	r3, r3, #8
 80057f2:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	f892 219d 	ldrb.w	r2, [r2, #413]	@ 0x19d
		timeout_encoded = (timeout_encoded << 8) +
 80057fa:	4413      	add	r3, r2
 80057fc:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 80057fe:	8a7b      	ldrh	r3, [r7, #18]
 8005800:	6979      	ldr	r1, [r7, #20]
 8005802:	4618      	mov	r0, r3
 8005804:	f002 fb8b 	bl	8007f1e <VL53L1_calc_decoded_timeout_us>
 8005808:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
		timeout_encoded =
 8005814:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8005816:	8a7b      	ldrh	r3, [r7, #18]
 8005818:	021b      	lsls	r3, r3, #8
 800581a:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	f892 21a1 	ldrb.w	r2, [r2, #417]	@ 0x1a1
		timeout_encoded = (timeout_encoded << 8) +
 8005822:	4413      	add	r3, r2
 8005824:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8005826:	8a7b      	ldrh	r3, [r7, #18]
 8005828:	6979      	ldr	r1, [r7, #20]
 800582a:	4618      	mov	r0, r3
 800582c:	f002 fb77 	bl	8007f1e <VL53L1_calc_decoded_timeout_us>
 8005830:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 800584e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3720      	adds	r7, #32
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 800585a:	b480      	push	{r7}
 800585c:	b087      	sub	sp, #28
 800585e:	af00      	add	r7, sp, #0
 8005860:	60f8      	str	r0, [r7, #12]
 8005862:	460b      	mov	r3, r1
 8005864:	607a      	str	r2, [r7, #4]
 8005866:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005868:	2300      	movs	r3, #0
 800586a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8005870:	2301      	movs	r3, #1
 8005872:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8005874:	7afb      	ldrb	r3, [r7, #11]
 8005876:	2b07      	cmp	r3, #7
 8005878:	d81c      	bhi.n	80058b4 <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 800587a:	7afb      	ldrb	r3, [r7, #11]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d004      	beq.n	800588a <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 8005880:	7afb      	ldrb	r3, [r7, #11]
 8005882:	2201      	movs	r2, #1
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f893 21c5 	ldrb.w	r2, [r3, #453]	@ 0x1c5
		*pvalue =
 8005890:	7dbb      	ldrb	r3, [r7, #22]
 8005892:	4013      	ands	r3, r2
 8005894:	b2da      	uxtb	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 800589a:	7afb      	ldrb	r3, [r7, #11]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00b      	beq.n	80058b8 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	7afb      	ldrb	r3, [r7, #11]
 80058a8:	fa42 f303 	asr.w	r3, r2, r3
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	701a      	strb	r2, [r3, #0]
 80058b2:	e001      	b.n	80058b8 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 80058b4:	23fc      	movs	r3, #252	@ 0xfc
 80058b6:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 80058b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	371c      	adds	r7, #28
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80058d2:	2300      	movs	r3, #0
 80058d4:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	7858      	ldrb	r0, [r3, #1]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	7819      	ldrb	r1, [r3, #0]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f203 13c3 	addw	r3, r3, #451	@ 0x1c3
 80058e8:	461a      	mov	r2, r3
 80058ea:	f002 fbea 	bl	80080c2 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	7898      	ldrb	r0, [r3, #2]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	78d9      	ldrb	r1, [r3, #3]
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80058fc:	461a      	mov	r2, r3
 80058fe:	f002 fc1f 	bl	8008140 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 8005902:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b084      	sub	sp, #16
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005918:	2300      	movs	r3, #0
 800591a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f893 01c3 	ldrb.w	r0, [r3, #451]	@ 0x1c3
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	3301      	adds	r3, #1
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	4619      	mov	r1, r3
 800592e:	f002 fcd6 	bl	80082de <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f893 01c4 	ldrb.w	r0, [r3, #452]	@ 0x1c4
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	1c99      	adds	r1, r3, #2
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	3303      	adds	r3, #3
 8005940:	461a      	mov	r2, r3
 8005942:	f002 fbe5 	bl	8008110 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 8005946:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b086      	sub	sp, #24
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800595c:	2300      	movs	r3, #0
 800595e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8005964:	2300      	movs	r3, #0
 8005966:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8005968:	2300      	movs	r3, #0
 800596a:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 800596c:	2300      	movs	r3, #0
 800596e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f893 322a 	ldrb.w	r3, [r3, #554]	@ 0x22a
 8005976:	f107 020e 	add.w	r2, r7, #14
 800597a:	f107 010d 	add.w	r1, r7, #13
 800597e:	4618      	mov	r0, r3
 8005980:	f002 fcad 	bl	80082de <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8005984:	7bba      	ldrb	r2, [r7, #14]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 800598a:	7b7a      	ldrb	r2, [r7, #13]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	f893 322b 	ldrb.w	r3, [r3, #555]	@ 0x22b
 8005996:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8005998:	7bfb      	ldrb	r3, [r7, #15]
 800599a:	091b      	lsrs	r3, r3, #4
 800599c:	b2da      	uxtb	r2, r3
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
 80059a4:	f003 030f 	and.w	r3, r3, #15
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 80059ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
	...

080059bc <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	607a      	str	r2, [r7, #4]
 80059c6:	603b      	str	r3, [r7, #0]
 80059c8:	460b      	mov	r3, r1
 80059ca:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80059cc:	2300      	movs	r3, #0
 80059ce:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 80059d4:	7afb      	ldrb	r3, [r7, #11]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	2b25      	cmp	r3, #37	@ 0x25
 80059da:	f200 808e 	bhi.w	8005afa <VL53L1_get_preset_mode_timing_cfg+0x13e>
 80059de:	a201      	add	r2, pc, #4	@ (adr r2, 80059e4 <VL53L1_get_preset_mode_timing_cfg+0x28>)
 80059e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e4:	08005a7d 	.word	0x08005a7d
 80059e8:	08005a7d 	.word	0x08005a7d
 80059ec:	08005a7d 	.word	0x08005a7d
 80059f0:	08005a7d 	.word	0x08005a7d
 80059f4:	08005a7d 	.word	0x08005a7d
 80059f8:	08005aa7 	.word	0x08005aa7
 80059fc:	08005aa7 	.word	0x08005aa7
 8005a00:	08005aa7 	.word	0x08005aa7
 8005a04:	08005afb 	.word	0x08005afb
 8005a08:	08005afb 	.word	0x08005afb
 8005a0c:	08005afb 	.word	0x08005afb
 8005a10:	08005afb 	.word	0x08005afb
 8005a14:	08005afb 	.word	0x08005afb
 8005a18:	08005afb 	.word	0x08005afb
 8005a1c:	08005afb 	.word	0x08005afb
 8005a20:	08005afb 	.word	0x08005afb
 8005a24:	08005a7d 	.word	0x08005a7d
 8005a28:	08005aa7 	.word	0x08005aa7
 8005a2c:	08005afb 	.word	0x08005afb
 8005a30:	08005afb 	.word	0x08005afb
 8005a34:	08005afb 	.word	0x08005afb
 8005a38:	08005afb 	.word	0x08005afb
 8005a3c:	08005afb 	.word	0x08005afb
 8005a40:	08005afb 	.word	0x08005afb
 8005a44:	08005afb 	.word	0x08005afb
 8005a48:	08005afb 	.word	0x08005afb
 8005a4c:	08005afb 	.word	0x08005afb
 8005a50:	08005afb 	.word	0x08005afb
 8005a54:	08005afb 	.word	0x08005afb
 8005a58:	08005afb 	.word	0x08005afb
 8005a5c:	08005afb 	.word	0x08005afb
 8005a60:	08005afb 	.word	0x08005afb
 8005a64:	08005afb 	.word	0x08005afb
 8005a68:	08005afb 	.word	0x08005afb
 8005a6c:	08005afb 	.word	0x08005afb
 8005a70:	08005ad1 	.word	0x08005ad1
 8005a74:	08005ad1 	.word	0x08005ad1
 8005a78:	08005ad1 	.word	0x08005ad1
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	@ 0xca
		*pdss_config__target_total_rate_mcps =
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
		*pphasecal_config_timeout_us =
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
		*pmm_config_timeout_us =
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
		*prange_config_timeout_us =
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa2:	601a      	str	r2, [r3, #0]
	break;
 8005aa4:	e02c      	b.n	8005b00 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
		*pdss_config__target_total_rate_mcps =
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
		*pphasecal_config_timeout_us =
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
		*pmm_config_timeout_us =
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
		*prange_config_timeout_us =
 8005aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005acc:	601a      	str	r2, [r3, #0]
	break;
 8005ace:	e017      	b.n	8005b00 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
		*pdss_config__target_total_rate_mcps =
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
		*pphasecal_config_timeout_us =
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
		*pmm_config_timeout_us =
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
		*prange_config_timeout_us =
 8005af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af6:	601a      	str	r2, [r3, #0]
	break;
 8005af8:	e002      	b.n	8005b00 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005afa:	23fc      	movs	r3, #252	@ 0xfc
 8005afc:	75fb      	strb	r3, [r7, #23]
		break;
 8005afe:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8005b00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	371c      	adds	r7, #28
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b092      	sub	sp, #72	@ 0x48
 8005b14:	af04      	add	r7, sp, #16
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	607b      	str	r3, [r7, #4]
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	72fb      	strb	r3, [r7, #11]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005b22:	2300      	movs	r3, #0
 8005b24:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53L1_LLDriverData_t *pdev =
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	633b      	str	r3, [r7, #48]	@ 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8005b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b36:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8005b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8005b42:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8005b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b46:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8005b4a:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8005b52:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8005b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b56:	33a4      	adds	r3, #164	@ 0xa4
 8005b58:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5c:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8005b60:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 8005b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b64:	7afa      	ldrb	r2, [r7, #11]
 8005b66:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8005b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b6c:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b72:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8005b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b78:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 8005b7a:	2103      	movs	r1, #3
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f001 fd76 	bl	800766e <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 8005b82:	7afb      	ldrb	r3, [r7, #11]
 8005b84:	3b01      	subs	r3, #1
 8005b86:	2b25      	cmp	r3, #37	@ 0x25
 8005b88:	f200 810c 	bhi.w	8005da4 <VL53L1_set_preset_mode+0x294>
 8005b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b94 <VL53L1_set_preset_mode+0x84>)
 8005b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b92:	bf00      	nop
 8005b94:	08005c2d 	.word	0x08005c2d
 8005b98:	08005c49 	.word	0x08005c49
 8005b9c:	08005c65 	.word	0x08005c65
 8005ba0:	08005c81 	.word	0x08005c81
 8005ba4:	08005c9d 	.word	0x08005c9d
 8005ba8:	08005cb9 	.word	0x08005cb9
 8005bac:	08005cd5 	.word	0x08005cd5
 8005bb0:	08005cf1 	.word	0x08005cf1
 8005bb4:	08005da5 	.word	0x08005da5
 8005bb8:	08005da5 	.word	0x08005da5
 8005bbc:	08005da5 	.word	0x08005da5
 8005bc0:	08005da5 	.word	0x08005da5
 8005bc4:	08005da5 	.word	0x08005da5
 8005bc8:	08005da5 	.word	0x08005da5
 8005bcc:	08005da5 	.word	0x08005da5
 8005bd0:	08005da5 	.word	0x08005da5
 8005bd4:	08005d0d 	.word	0x08005d0d
 8005bd8:	08005d29 	.word	0x08005d29
 8005bdc:	08005da5 	.word	0x08005da5
 8005be0:	08005da5 	.word	0x08005da5
 8005be4:	08005da5 	.word	0x08005da5
 8005be8:	08005da5 	.word	0x08005da5
 8005bec:	08005da5 	.word	0x08005da5
 8005bf0:	08005da5 	.word	0x08005da5
 8005bf4:	08005da5 	.word	0x08005da5
 8005bf8:	08005da5 	.word	0x08005da5
 8005bfc:	08005da5 	.word	0x08005da5
 8005c00:	08005da5 	.word	0x08005da5
 8005c04:	08005da5 	.word	0x08005da5
 8005c08:	08005da5 	.word	0x08005da5
 8005c0c:	08005da5 	.word	0x08005da5
 8005c10:	08005da5 	.word	0x08005da5
 8005c14:	08005da5 	.word	0x08005da5
 8005c18:	08005da5 	.word	0x08005da5
 8005c1c:	08005da5 	.word	0x08005da5
 8005c20:	08005d45 	.word	0x08005d45
 8005c24:	08005d65 	.word	0x08005d65
 8005c28:	08005d85 	.word	0x08005d85

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	9301      	str	r3, [sp, #4]
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c3c:	f001 f999 	bl	8006f72 <VL53L1_preset_mode_standard_ranging>
 8005c40:	4603      	mov	r3, r0
 8005c42:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005c46:	e0b1      	b.n	8005dac <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	9301      	str	r3, [sp, #4]
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c58:	f001 faa9 	bl	80071ae <VL53L1_preset_mode_standard_ranging_short_range>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005c62:	e0a3      	b.n	8005dac <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	9301      	str	r3, [sp, #4]
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c74:	f001 fadc 	bl	8007230 <VL53L1_preset_mode_standard_ranging_long_range>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005c7e:	e095      	b.n	8005dac <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	9301      	str	r3, [sp, #4]
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c90:	f001 fb0f 	bl	80072b2 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8005c94:	4603      	mov	r3, r0
 8005c96:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005c9a:	e087      	b.n	8005dac <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	9301      	str	r3, [sp, #4]
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ca8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005caa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005cac:	f001 fb26 	bl	80072fc <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005cb6:	e079      	b.n	8005dac <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	9301      	str	r3, [sp, #4]
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cc6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005cc8:	f001 fb3d 	bl	8007346 <VL53L1_preset_mode_timed_ranging>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005cd2:	e06b      	b.n	8005dac <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	9301      	str	r3, [sp, #4]
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ce0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ce2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ce4:	f001 fb69 	bl	80073ba <VL53L1_preset_mode_timed_ranging_short_range>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005cee:	e05d      	b.n	8005dac <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	9301      	str	r3, [sp, #4]
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cfe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d00:	f001 fb95 	bl	800742e <VL53L1_preset_mode_timed_ranging_long_range>
 8005d04:	4603      	mov	r3, r0
 8005d06:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005d0a:	e04f      	b.n	8005dac <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	9301      	str	r3, [sp, #4]
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d1c:	f001 fc69 	bl	80075f2 <VL53L1_preset_mode_olt>
 8005d20:	4603      	mov	r3, r0
 8005d22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005d26:	e041      	b.n	8005dac <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	9301      	str	r3, [sp, #4]
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d38:	f001 fc25 	bl	8007586 <VL53L1_preset_mode_singleshot_ranging>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005d42:	e033      	b.n	8005dac <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	9302      	str	r3, [sp, #8]
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	9301      	str	r3, [sp, #4]
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d58:	f001 fbc9 	bl	80074ee <VL53L1_preset_mode_low_power_auto_short_ranging>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8005d62:	e023      	b.n	8005dac <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	9302      	str	r3, [sp, #8]
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	9301      	str	r3, [sp, #4]
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d78:	f001 fb93 	bl	80074a2 <VL53L1_preset_mode_low_power_auto_ranging>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8005d82:	e013      	b.n	8005dac <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	9302      	str	r3, [sp, #8]
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	9301      	str	r3, [sp, #4]
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d98:	f001 fbcf 	bl	800753a <VL53L1_preset_mode_low_power_auto_long_ranging>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8005da2:	e003      	b.n	8005dac <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005da4:	23fc      	movs	r3, #252	@ 0xfc
 8005da6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		break;
 8005daa:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 8005dac:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d105      	bne.n	8005dc0 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 8005db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db6:	893a      	ldrh	r2, [r7, #8]
 8005db8:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8005dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dbc:	893a      	ldrh	r2, [r7, #8]
 8005dbe:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 8005dc0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d108      	bne.n	8005dda <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 8005dc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005dcc:	6879      	ldr	r1, [r7, #4]
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f7ff fca2 	bl	8005718 <VL53L1_set_timeouts_us>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8005dda:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 8005de2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f7ff fc48 	bl	800567a <VL53L1_set_inter_measurement_period_ms>
 8005dea:	4603      	mov	r3, r0
 8005dec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 8005df0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3738      	adds	r7, #56	@ 0x38
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005e06:	2300      	movs	r3, #0
 8005e08:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	@ 0x1a6
	*plite_sigma =
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8005e18:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005e34:	2300      	movs	r3, #0
 8005e36:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	887a      	ldrh	r2, [r7, #2]
 8005e40:	f8a3 21a6 	strh.w	r2, [r3, #422]	@ 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 8005e44:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	@ 0x1a8
	*plite_mincountrate =
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8005e70:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	887a      	ldrh	r2, [r7, #2]
 8005e98:	f8a3 21a8 	strh.w	r2, [r3, #424]	@ 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 8005e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8005ec6:	f003 0303 	and.w	r3, r3, #3
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	78fb      	ldrb	r3, [r7, #3]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	4413      	add	r3, r2
 8005ed4:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 8005edc:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b0d0      	sub	sp, #320	@ 0x140
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005ef6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005efa:	6018      	str	r0, [r3, #0]
 8005efc:	4608      	mov	r0, r1
 8005efe:	4611      	mov	r1, r2
 8005f00:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005f04:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8005f08:	4602      	mov	r2, r0
 8005f0a:	701a      	strb	r2, [r3, #0]
 8005f0c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005f10:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8005f14:	460a      	mov	r2, r1
 8005f16:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005f1e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005f22:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8005f2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f30:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8005f34:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8005f38:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f3c:	3342      	adds	r3, #66	@ 0x42
 8005f3e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8005f42:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f46:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005f4a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8005f4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f52:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8005f56:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8005f5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f5e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8005f62:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8005f66:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f6a:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8005f6e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8005f72:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f76:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8005f7a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8005f7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f82:	332c      	adds	r3, #44	@ 0x2c
 8005f84:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8005f88:	f107 030c 	add.w	r3, r7, #12
 8005f8c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	uint16_t i                          = 0;
 8005f90:	2300      	movs	r3, #0
 8005f92:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
	uint16_t i2c_index                  = 0;
 8005f96:	2300      	movs	r3, #0
 8005f98:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 8005fa8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005fac:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005fb0:	f2a2 123d 	subw	r2, r2, #317	@ 0x13d
 8005fb4:	7812      	ldrb	r2, [r2, #0]
 8005fb6:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 8005fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fbc:	791b      	ldrb	r3, [r3, #4]
 8005fbe:	b25b      	sxtb	r3, r3
 8005fc0:	f003 030f 	and.w	r3, r3, #15
 8005fc4:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8005fc6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005fca:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8005fce:	f993 3000 	ldrsb.w	r3, [r3]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	b25b      	sxtb	r3, r3
 8005fd6:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8005fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fdc:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8005fde:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005fe2:	f8b3 2142 	ldrh.w	r2, [r3, #322]	@ 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8005fe6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005fea:	f8a3 217c 	strh.w	r2, [r3, #380]	@ 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8005fee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005ff2:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 8005ff6:	2bff      	cmp	r3, #255	@ 0xff
 8005ff8:	d104      	bne.n	8006004 <VL53L1_init_and_start_range+0x118>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8005ffa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8006004:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006008:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 800600c:	2b01      	cmp	r3, #1
 800600e:	d139      	bne.n	8006084 <VL53L1_init_and_start_range+0x198>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8006010:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006014:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8006018:	2b00      	cmp	r3, #0
 800601a:	d133      	bne.n	8006084 <VL53L1_init_and_start_range+0x198>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800601c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006020:	f893 2186 	ldrb.w	r2, [r3, #390]	@ 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 8006024:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006028:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800602c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006030:	2220      	movs	r2, #32
 8006032:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 8006036:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800603a:	f893 31c5 	ldrb.w	r3, [r3, #453]	@ 0x1c5
 800603e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10c      	bne.n	8006060 <VL53L1_init_and_start_range+0x174>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 8006046:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800604a:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	@ 0x58
 800604e:	b29b      	uxth	r3, r3
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	b29b      	uxth	r3, r3
 8006054:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 8006056:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800605a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 800605e:	e004      	b.n	800606a <VL53L1_init_and_start_range+0x17e>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 8006060:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006064:	2200      	movs	r2, #0
 8006066:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 800606a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800606e:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	2b04      	cmp	r3, #4
 8006076:	d805      	bhi.n	8006084 <VL53L1_init_and_start_range+0x198>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8006078:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800607c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8006080:	2205      	movs	r2, #5
 8006082:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8006084:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006088:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 800608c:	2b01      	cmp	r3, #1
 800608e:	d113      	bne.n	80060b8 <VL53L1_init_and_start_range+0x1cc>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8006090:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006094:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8006098:	2b01      	cmp	r3, #1
 800609a:	d10d      	bne.n	80060b8 <VL53L1_init_and_start_range+0x1cc>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800609c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80060a0:	f893 22e7 	ldrb.w	r2, [r3, #743]	@ 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 80060a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80060a8:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 80060ac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80060b0:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80060b4:	2206      	movs	r2, #6
 80060b6:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 80060b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80060bc:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	2b05      	cmp	r3, #5
 80060c6:	d827      	bhi.n	8006118 <VL53L1_init_and_start_range+0x22c>
 80060c8:	a201      	add	r2, pc, #4	@ (adr r2, 80060d0 <VL53L1_init_and_start_range+0x1e4>)
 80060ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ce:	bf00      	nop
 80060d0:	08006111 	.word	0x08006111
 80060d4:	08006109 	.word	0x08006109
 80060d8:	08006101 	.word	0x08006101
 80060dc:	080060f9 	.word	0x080060f9
 80060e0:	080060f1 	.word	0x080060f1
 80060e4:	080060e9 	.word	0x080060e9
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 80060e8:	2301      	movs	r3, #1
 80060ea:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80060ee:	e017      	b.n	8006120 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 80060f0:	230d      	movs	r3, #13
 80060f2:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80060f6:	e013      	b.n	8006120 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 80060f8:	2324      	movs	r3, #36	@ 0x24
 80060fa:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80060fe:	e00f      	b.n	8006120 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8006100:	2344      	movs	r3, #68	@ 0x44
 8006102:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8006106:	e00b      	b.n	8006120 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8006108:	235a      	movs	r3, #90	@ 0x5a
 800610a:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 800610e:	e007      	b.n	8006120 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8006110:	2371      	movs	r3, #113	@ 0x71
 8006112:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8006116:	e003      	b.n	8006120 <VL53L1_init_and_start_range+0x234>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8006118:	2383      	movs	r3, #131	@ 0x83
 800611a:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 800611e:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 8006120:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8006124:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
 8006128:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 800612c:	f107 030c 	add.w	r3, r7, #12
 8006130:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8006134:	2300      	movs	r3, #0
 8006136:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 800613a:	e00b      	b.n	8006154 <VL53L1_init_and_start_range+0x268>
		*pbuffer++ = 0;
 800613c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	f8c7 2138 	str.w	r2, [r7, #312]	@ 0x138
 8006146:	2200      	movs	r2, #0
 8006148:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800614a:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 800614e:	3301      	adds	r3, #1
 8006150:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8006154:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 8006158:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 800615c:	429a      	cmp	r2, r3
 800615e:	d3ed      	bcc.n	800613c <VL53L1_init_and_start_range+0x250>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8006160:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006164:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	2b05      	cmp	r3, #5
 800616c:	d917      	bls.n	800619e <VL53L1_init_and_start_range+0x2b2>
 800616e:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8006172:	2b00      	cmp	r3, #0
 8006174:	d113      	bne.n	800619e <VL53L1_init_and_start_range+0x2b2>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8006176:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 800617a:	f1c3 0301 	rsb	r3, r3, #1
 800617e:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006182:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 8006186:	f107 020c 	add.w	r2, r7, #12
 800618a:	4413      	add	r3, r2
 800618c:	461a      	mov	r2, r3
 800618e:	210b      	movs	r1, #11
 8006190:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8006194:	f002 f8d2 	bl	800833c <VL53L1_i2c_encode_static_nvm_managed>
 8006198:	4603      	mov	r3, r0
 800619a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800619e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80061a2:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	2b04      	cmp	r3, #4
 80061aa:	d917      	bls.n	80061dc <VL53L1_init_and_start_range+0x2f0>
 80061ac:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d113      	bne.n	80061dc <VL53L1_init_and_start_range+0x2f0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80061b4:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80061b8:	f1c3 030d 	rsb	r3, r3, #13
 80061bc:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80061c0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 80061c4:	f107 020c 	add.w	r2, r7, #12
 80061c8:	4413      	add	r3, r2
 80061ca:	461a      	mov	r2, r3
 80061cc:	2117      	movs	r1, #23
 80061ce:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 80061d2:	f002 f98f 	bl	80084f4 <VL53L1_i2c_encode_customer_nvm_managed>
 80061d6:	4603      	mov	r3, r0
 80061d8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 80061dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80061e0:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d917      	bls.n	800621a <VL53L1_init_and_start_range+0x32e>
 80061ea:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d113      	bne.n	800621a <VL53L1_init_and_start_range+0x32e>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80061f2:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80061f6:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 80061fa:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80061fe:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_config(
 8006202:	f107 020c 	add.w	r2, r7, #12
 8006206:	4413      	add	r3, r2
 8006208:	461a      	mov	r2, r3
 800620a:	2120      	movs	r1, #32
 800620c:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8006210:	f002 faae 	bl	8008770 <VL53L1_i2c_encode_static_config>
 8006214:	4603      	mov	r3, r0
 8006216:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800621a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800621e:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	2b02      	cmp	r3, #2
 8006226:	d917      	bls.n	8006258 <VL53L1_init_and_start_range+0x36c>
 8006228:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 800622c:	2b00      	cmp	r3, #0
 800622e:	d113      	bne.n	8006258 <VL53L1_init_and_start_range+0x36c>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006230:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8006234:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8006238:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800623c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_general_config(
 8006240:	f107 020c 	add.w	r2, r7, #12
 8006244:	4413      	add	r3, r2
 8006246:	461a      	mov	r2, r3
 8006248:	2116      	movs	r1, #22
 800624a:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800624e:	f002 fb72 	bl	8008936 <VL53L1_i2c_encode_general_config>
 8006252:	4603      	mov	r3, r0
 8006254:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8006258:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800625c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d917      	bls.n	8006296 <VL53L1_init_and_start_range+0x3aa>
 8006266:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 800626a:	2b00      	cmp	r3, #0
 800626c:	d113      	bne.n	8006296 <VL53L1_init_and_start_range+0x3aa>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800626e:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8006272:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8006276:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800627a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_timing_config(
 800627e:	f107 020c 	add.w	r2, r7, #12
 8006282:	4413      	add	r3, r2
 8006284:	461a      	mov	r2, r3
 8006286:	2117      	movs	r1, #23
 8006288:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800628c:	f002 fbd7 	bl	8008a3e <VL53L1_i2c_encode_timing_config>
 8006290:	4603      	mov	r3, r0
 8006292:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8006296:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800629a:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d036      	beq.n	8006312 <VL53L1_init_and_start_range+0x426>
 80062a4:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d132      	bne.n	8006312 <VL53L1_init_and_start_range+0x426>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80062ac:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80062b0:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 80062b4:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 80062b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062bc:	791b      	ldrb	r3, [r3, #4]
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d017      	beq.n	80062f6 <VL53L1_init_and_start_range+0x40a>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 80062c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80062ca:	789b      	ldrb	r3, [r3, #2]
 80062cc:	f043 0301 	orr.w	r3, r3, #1
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80062d6:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 80062d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80062dc:	789b      	ldrb	r3, [r3, #2]
 80062de:	f043 0301 	orr.w	r3, r3, #1
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80062e8:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 80062ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80062ee:	789a      	ldrb	r2, [r3, #2]
 80062f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80062f4:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80062f6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_dynamic_config(
 80062fa:	f107 020c 	add.w	r2, r7, #12
 80062fe:	4413      	add	r3, r2
 8006300:	461a      	mov	r2, r3
 8006302:	2112      	movs	r1, #18
 8006304:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8006308:	f002 fc1b 	bl	8008b42 <VL53L1_i2c_encode_dynamic_config>
 800630c:	4603      	mov	r3, r0
 800630e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 8006312:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8006316:	2b00      	cmp	r3, #0
 8006318:	d113      	bne.n	8006342 <VL53L1_init_and_start_range+0x456>

		i2c_buffer_offset_bytes = \
 800631a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 800631e:	f1c3 0383 	rsb	r3, r3, #131	@ 0x83
 8006322:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006326:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_system_control(
 800632a:	f107 020c 	add.w	r2, r7, #12
 800632e:	4413      	add	r3, r2
 8006330:	461a      	mov	r2, r3
 8006332:	2105      	movs	r1, #5
 8006334:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8006338:	f002 fc88 	bl	8008c4c <VL53L1_i2c_encode_system_control>
 800633c:	4603      	mov	r3, r0
 800633e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 8006342:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10f      	bne.n	800636a <VL53L1_init_and_start_range+0x47e>
		status =
			VL53L1_WriteMulti(
 800634a:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 800634e:	f107 020c 	add.w	r2, r7, #12
 8006352:	f8b7 1134 	ldrh.w	r1, [r7, #308]	@ 0x134
 8006356:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800635a:	f5a0 709e 	sub.w	r0, r0, #316	@ 0x13c
 800635e:	6800      	ldr	r0, [r0, #0]
 8006360:	f003 f970 	bl	8009644 <VL53L1_WriteMulti>
 8006364:	4603      	mov	r3, r0
 8006366:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 800636a:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 800636e:	2b00      	cmp	r3, #0
 8006370:	d109      	bne.n	8006386 <VL53L1_init_and_start_range+0x49a>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8006372:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006376:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800637a:	6818      	ldr	r0, [r3, #0]
 800637c:	f001 f9a0 	bl	80076c0 <VL53L1_update_ll_driver_rd_state>
 8006380:	4603      	mov	r3, r0
 8006382:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	if (status == VL53L1_ERROR_NONE)
 8006386:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 800638a:	2b00      	cmp	r3, #0
 800638c:	d109      	bne.n	80063a2 <VL53L1_init_and_start_range+0x4b6>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800638e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006392:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006396:	6818      	ldr	r0, [r3, #0]
 8006398:	f001 fa65 	bl	8007866 <VL53L1_update_ll_driver_cfg_state>
 800639c:	4603      	mov	r3, r0
 800639e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	LOG_FUNCTION_END(status);

	return status;
 80063a2:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b0c8      	sub	sp, #288	@ 0x120
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80063ba:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80063be:	6018      	str	r0, [r3, #0]
 80063c0:	460a      	mov	r2, r1
 80063c2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80063c6:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80063ca:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80063cc:	2300      	movs	r3, #0
 80063ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80063d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80063d6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 80063e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80063e4:	f503 73e7 	add.w	r3, r3, #462	@ 0x1ce
 80063e8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 80063ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80063f0:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80063f4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 80063f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80063fc:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8006400:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 8006404:	2388      	movs	r3, #136	@ 0x88
 8006406:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 800640a:	2300      	movs	r3, #0
 800640c:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8006410:	2300      	movs	r3, #0
 8006412:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 8006416:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800641a:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d008      	beq.n	8006436 <VL53L1_get_measurement_results+0x86>
 8006424:	2b02      	cmp	r3, #2
 8006426:	d10d      	bne.n	8006444 <VL53L1_get_measurement_results+0x94>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8006428:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 800642c:	f5c3 7387 	rsb	r3, r3, #270	@ 0x10e
 8006430:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8006434:	e00a      	b.n	800644c <VL53L1_get_measurement_results+0x9c>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8006436:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 800643a:	f1c3 03d5 	rsb	r3, r3, #213	@ 0xd5
 800643e:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8006442:	e003      	b.n	800644c <VL53L1_get_measurement_results+0x9c>
	default:
		i2c_buffer_size_bytes =
 8006444:	232c      	movs	r3, #44	@ 0x2c
 8006446:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 800644a:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800644c:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10f      	bne.n	8006474 <VL53L1_get_measurement_results+0xc4>
		status =
			VL53L1_ReadMulti(
 8006454:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8006458:	f107 0208 	add.w	r2, r7, #8
 800645c:	f8b7 110a 	ldrh.w	r1, [r7, #266]	@ 0x10a
 8006460:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8006464:	f5a0 708e 	sub.w	r0, r0, #284	@ 0x11c
 8006468:	6800      	ldr	r0, [r0, #0]
 800646a:	f003 f921 	bl	80096b0 <VL53L1_ReadMulti>
 800646e:	4603      	mov	r3, r0
 8006470:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8006474:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006478:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d917      	bls.n	80064b2 <VL53L1_get_measurement_results+0x102>
 8006482:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8006486:	2b00      	cmp	r3, #0
 8006488:	d113      	bne.n	80064b2 <VL53L1_get_measurement_results+0x102>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800648a:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 800648e:	f1c3 03d6 	rsb	r3, r3, #214	@ 0xd6
 8006492:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8006496:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_debug_results(
 800649a:	f107 0208 	add.w	r2, r7, #8
 800649e:	4413      	add	r3, r2
 80064a0:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80064a4:	4619      	mov	r1, r3
 80064a6:	2038      	movs	r0, #56	@ 0x38
 80064a8:	f002 fd62 	bl	8008f70 <VL53L1_i2c_decode_debug_results>
 80064ac:	4603      	mov	r3, r0
 80064ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 80064b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80064b6:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d017      	beq.n	80064f0 <VL53L1_get_measurement_results+0x140>
 80064c0:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d113      	bne.n	80064f0 <VL53L1_get_measurement_results+0x140>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80064c8:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80064cc:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 80064d0:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80064d4:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_core_results(
 80064d8:	f107 0208 	add.w	r2, r7, #8
 80064dc:	4413      	add	r3, r2
 80064de:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80064e2:	4619      	mov	r1, r3
 80064e4:	2021      	movs	r0, #33	@ 0x21
 80064e6:	f002 fce2 	bl	8008eae <VL53L1_i2c_decode_core_results>
 80064ea:	4603      	mov	r3, r0
 80064ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 80064f0:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d110      	bne.n	800651a <VL53L1_get_measurement_results+0x16a>

		i2c_buffer_offset_bytes = 0;
 80064f8:	2300      	movs	r3, #0
 80064fa:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80064fe:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_system_results(
 8006502:	f107 0208 	add.w	r2, r7, #8
 8006506:	4413      	add	r3, r2
 8006508:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800650c:	4619      	mov	r1, r3
 800650e:	202c      	movs	r0, #44	@ 0x2c
 8006510:	f002 fbd7 	bl	8008cc2 <VL53L1_i2c_decode_system_results>
 8006514:	4603      	mov	r3, r0
 8006516:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 800651a:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 800651e:	4618      	mov	r0, r3
 8006520:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b088      	sub	sp, #32
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	460b      	mov	r3, r1
 8006532:	607a      	str	r2, [r7, #4]
 8006534:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006536:	2300      	movs	r3, #0
 8006538:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8006544:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800654a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d106      	bne.n	8006560 <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 8006552:	7afb      	ldrb	r3, [r7, #11]
 8006554:	4619      	mov	r1, r3
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f7ff ff2a 	bl	80063b0 <VL53L1_get_measurement_results>
 800655c:	4603      	mov	r3, r0
 800655e:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 8006560:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10c      	bne.n	8006582 <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 800656e:	4618      	mov	r0, r3
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	f503 71e7 	add.w	r1, r3, #462	@ 0x1ce
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	f503 7222 	add.w	r2, r3, #648	@ 0x288
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	f000 f85d 	bl	800663c <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8006588:	2b01      	cmp	r3, #1
 800658a:	d11f      	bne.n	80065cc <VL53L1_get_device_results+0xa4>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 800658c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10e      	bne.n	80065b2 <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 800659a:	2b00      	cmp	r3, #0
 800659c:	d109      	bne.n	80065b2 <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f001 fe31 	bl	8008206 <VL53L1_low_power_auto_setup_manual_calibration>
 80065a4:	4603      	mov	r3, r0
 80065a6:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
 80065b0:	e00c      	b.n	80065cc <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 80065b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d108      	bne.n	80065cc <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d103      	bne.n	80065cc <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 80065e0:	2284      	movs	r2, #132	@ 0x84
 80065e2:	6939      	ldr	r1, [r7, #16]
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f004 f8d2 	bl	800a78e <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 80065ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d104      	bne.n	80065fc <VL53L1_get_device_results+0xd4>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f001 f8ec 	bl	80077d0 <VL53L1_check_ll_driver_rd_state>
 80065f8:	4603      	mov	r3, r0
 80065fa:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 80065fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3720      	adds	r7, #32
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	460b      	mov	r3, r1
 8006612:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006614:	2300      	movs	r3, #0
 8006616:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8006618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d107      	bne.n	8006630 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 8006620:	78fb      	ldrb	r3, [r7, #3]
 8006622:	2203      	movs	r2, #3
 8006624:	4619      	mov	r1, r3
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7ff fc60 	bl	8005eec <VL53L1_init_and_start_range>
 800662c:	4603      	mov	r3, r0
 800662e:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8006630:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800663c:	b480      	push	{r7}
 800663e:	b089      	sub	sp, #36	@ 0x24
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800664a:	2300      	movs	r3, #0
 800664c:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 800664e:	2300      	movs	r3, #0
 8006650:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	78da      	ldrb	r2, [r3, #3]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	3304      	adds	r3, #4
 8006662:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 8006664:	2300      	movs	r3, #0
 8006666:	77fb      	strb	r3, [r7, #31]
 8006668:	e0d0      	b.n	800680c <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	7ffa      	ldrb	r2, [r7, #31]
 800666e:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	2200      	movs	r2, #0
 8006674:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	78db      	ldrb	r3, [r3, #3]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10a      	bne.n	8006694 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	785b      	ldrb	r3, [r3, #1]
 8006682:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8006686:	2b09      	cmp	r3, #9
 8006688:	d104      	bne.n	8006694 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	2213      	movs	r2, #19
 800668e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006692:	e007      	b.n	80066a4 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	785b      	ldrb	r3, [r3, #1]
 8006698:	f003 031f 	and.w	r3, r3, #31
 800669c:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		}

		switch (i) {
 80066a4:	7ffb      	ldrb	r3, [r7, #31]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d002      	beq.n	80066b0 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d05d      	beq.n	800676a <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 80066ae:	e0a7      	b.n	8006800 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	789b      	ldrb	r3, [r3, #2]
 80066b4:	2b07      	cmp	r3, #7
 80066b6:	d104      	bne.n	80066c2 <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	821a      	strh	r2, [r3, #16]
 80066c0:	e00c      	b.n	80066dc <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	789b      	ldrb	r3, [r3, #2]
 80066c6:	2b08      	cmp	r3, #8
 80066c8:	d104      	bne.n	80066d4 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	821a      	strh	r2, [r3, #16]
 80066d2:	e003      	b.n	80066dc <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	859a      	strh	r2, [r3, #44]	@ 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	85da      	strh	r2, [r3, #46]	@ 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	861a      	strh	r2, [r3, #48]	@ 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	895b      	ldrh	r3, [r3, #10]
 80066f8:	015b      	lsls	r3, r3, #5
 80066fa:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006702:	d302      	bcc.n	800670a <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 8006704:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006708:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	b29a      	uxth	r2, r3
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	871a      	strh	r2, [r3, #56]	@ 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	875a      	strh	r2, [r3, #58]	@ 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 800671e:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	fb02 f303 	mul.w	r3, r2, r3
 8006728:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006730:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	da01      	bge.n	800673c <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 8006738:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800673c:	12db      	asrs	r3, r3, #11
 800673e:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	b21a      	sxth	r2, r3
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	879a      	strh	r2, [r3, #60]	@ 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	621a      	str	r2, [r3, #32]

			break;
 8006768:	e04a      	b.n	8006800 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	859a      	strh	r2, [r3, #44]	@ 0x2c
			pdata->avg_signal_count_rate_mcps =
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006780:	85da      	strh	r2, [r3, #46]	@ 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	861a      	strh	r2, [r3, #48]	@ 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	8bdb      	ldrh	r3, [r3, #30]
 800678e:	015b      	lsls	r3, r3, #5
 8006790:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006798:	d302      	bcc.n	80067a0 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 800679a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800679e:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	871a      	strh	r2, [r3, #56]	@ 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	875a      	strh	r2, [r3, #58]	@ 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
			range_mm =
 80067b4:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	fb02 f303 	mul.w	r3, r2, r3
 80067be:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067c6:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	da01      	bge.n	80067d2 <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 80067ce:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80067d2:	12db      	asrs	r3, r3, #11
 80067d4:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	b21a      	sxth	r2, r3
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	879a      	strh	r2, [r3, #60]	@ 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	621a      	str	r2, [r3, #32]

			break;
 80067fe:	bf00      	nop
		}

		pdata++;
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	3340      	adds	r3, #64	@ 0x40
 8006804:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 8006806:	7ffb      	ldrb	r3, [r7, #31]
 8006808:	3301      	adds	r3, #1
 800680a:	77fb      	strb	r3, [r7, #31]
 800680c:	7ffb      	ldrb	r3, [r7, #31]
 800680e:	2b01      	cmp	r3, #1
 8006810:	f67f af2b 	bls.w	800666a <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	2200      	movs	r2, #0
 8006818:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	785b      	ldrb	r3, [r3, #1]
 800681e:	f003 031f 	and.w	r3, r3, #31
 8006822:	2b11      	cmp	r3, #17
 8006824:	bf8c      	ite	hi
 8006826:	2201      	movhi	r2, #1
 8006828:	2200      	movls	r2, #0
 800682a:	b2d2      	uxtb	r2, r2
 800682c:	2a00      	cmp	r2, #0
 800682e:	d117      	bne.n	8006860 <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
 8006830:	4a0e      	ldr	r2, [pc, #56]	@ (800686c <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 8006832:	fa22 f303 	lsr.w	r3, r2, r3
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	bf14      	ite	ne
 800683e:	2301      	movne	r3, #1
 8006840:	2300      	moveq	r3, #0
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00b      	beq.n	8006860 <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	785b      	ldrb	r3, [r3, #1]
 800684c:	f003 031f 	and.w	r3, r3, #31
 8006850:	b2da      	uxtb	r2, r3
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	break;
 800685e:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8006860:	bf00      	nop
 8006862:	3724      	adds	r7, #36	@ 0x24
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	0002200e 	.word	0x0002200e

08006870 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8006870:	b480      	push	{r7}
 8006872:	b087      	sub	sp, #28
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	460b      	mov	r3, r1
 800687a:	607a      	str	r2, [r7, #4]
 800687c:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800687e:	2300      	movs	r3, #0
 8006880:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8006886:	897b      	ldrh	r3, [r7, #10]
 8006888:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800688c:	2b38      	cmp	r3, #56	@ 0x38
 800688e:	f200 8204 	bhi.w	8006c9a <VL53L1_get_tuning_parm+0x42a>
 8006892:	a201      	add	r2, pc, #4	@ (adr r2, 8006898 <VL53L1_get_tuning_parm+0x28>)
 8006894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006898:	0800697d 	.word	0x0800697d
 800689c:	0800698b 	.word	0x0800698b
 80068a0:	08006999 	.word	0x08006999
 80068a4:	080069a7 	.word	0x080069a7
 80068a8:	080069b5 	.word	0x080069b5
 80068ac:	080069c3 	.word	0x080069c3
 80068b0:	080069d1 	.word	0x080069d1
 80068b4:	080069df 	.word	0x080069df
 80068b8:	080069ed 	.word	0x080069ed
 80068bc:	080069fb 	.word	0x080069fb
 80068c0:	08006a09 	.word	0x08006a09
 80068c4:	08006a17 	.word	0x08006a17
 80068c8:	08006a25 	.word	0x08006a25
 80068cc:	08006a33 	.word	0x08006a33
 80068d0:	08006a41 	.word	0x08006a41
 80068d4:	08006a4f 	.word	0x08006a4f
 80068d8:	08006a5d 	.word	0x08006a5d
 80068dc:	08006a6b 	.word	0x08006a6b
 80068e0:	08006a79 	.word	0x08006a79
 80068e4:	08006a87 	.word	0x08006a87
 80068e8:	08006a95 	.word	0x08006a95
 80068ec:	08006aa3 	.word	0x08006aa3
 80068f0:	08006ab1 	.word	0x08006ab1
 80068f4:	08006abf 	.word	0x08006abf
 80068f8:	08006acd 	.word	0x08006acd
 80068fc:	08006adb 	.word	0x08006adb
 8006900:	08006ae9 	.word	0x08006ae9
 8006904:	08006af7 	.word	0x08006af7
 8006908:	08006b05 	.word	0x08006b05
 800690c:	08006b13 	.word	0x08006b13
 8006910:	08006b21 	.word	0x08006b21
 8006914:	08006b2f 	.word	0x08006b2f
 8006918:	08006b3d 	.word	0x08006b3d
 800691c:	08006b4b 	.word	0x08006b4b
 8006920:	08006b59 	.word	0x08006b59
 8006924:	08006b67 	.word	0x08006b67
 8006928:	08006b75 	.word	0x08006b75
 800692c:	08006b83 	.word	0x08006b83
 8006930:	08006b91 	.word	0x08006b91
 8006934:	08006b9f 	.word	0x08006b9f
 8006938:	08006bad 	.word	0x08006bad
 800693c:	08006bbb 	.word	0x08006bbb
 8006940:	08006bc9 	.word	0x08006bc9
 8006944:	08006bd7 	.word	0x08006bd7
 8006948:	08006be5 	.word	0x08006be5
 800694c:	08006bf3 	.word	0x08006bf3
 8006950:	08006c01 	.word	0x08006c01
 8006954:	08006c0f 	.word	0x08006c0f
 8006958:	08006c1d 	.word	0x08006c1d
 800695c:	08006c2b 	.word	0x08006c2b
 8006960:	08006c39 	.word	0x08006c39
 8006964:	08006c47 	.word	0x08006c47
 8006968:	08006c55 	.word	0x08006c55
 800696c:	08006c63 	.word	0x08006c63
 8006970:	08006c71 	.word	0x08006c71
 8006974:	08006c7f 	.word	0x08006c7f
 8006978:	08006c8d 	.word	0x08006c8d

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8006982:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	601a      	str	r2, [r3, #0]
	break;
 8006988:	e18e      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8006990:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	601a      	str	r2, [r3, #0]
	break;
 8006996:	e187      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 800699e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	601a      	str	r2, [r3, #0]
	break;
 80069a4:	e180      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80069ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	601a      	str	r2, [r3, #0]
	break;
 80069b2:	e179      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 80069ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	601a      	str	r2, [r3, #0]
	break;
 80069c0:	e172      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 80069c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	601a      	str	r2, [r3, #0]
	break;
 80069ce:	e16b      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 80069d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	601a      	str	r2, [r3, #0]
	break;
 80069dc:	e164      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 80069e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	601a      	str	r2, [r3, #0]
	break;
 80069ea:	e15d      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	@ 0xb6
 80069f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	601a      	str	r2, [r3, #0]
	break;
 80069f8:	e156      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8006a00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	601a      	str	r2, [r3, #0]
	break;
 8006a06:	e14f      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8006a0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	601a      	str	r2, [r3, #0]
	break;
 8006a14:	e148      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8006a1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	601a      	str	r2, [r3, #0]
	break;
 8006a22:	e141      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 8006a2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	601a      	str	r2, [r3, #0]
	break;
 8006a30:	e13a      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 8006a38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	601a      	str	r2, [r3, #0]
	break;
 8006a3e:	e133      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8006a46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	601a      	str	r2, [r3, #0]
	break;
 8006a4c:	e12c      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8006a54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	601a      	str	r2, [r3, #0]
	break;
 8006a5a:	e125      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	f893 30c4 	ldrb.w	r3, [r3, #196]	@ 0xc4
 8006a62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	601a      	str	r2, [r3, #0]
	break;
 8006a68:	e11e      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f893 3140 	ldrb.w	r3, [r3, #320]	@ 0x140
 8006a70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	601a      	str	r2, [r3, #0]
	break;
 8006a76:	e117      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 8006a7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	601a      	str	r2, [r3, #0]
	break;
 8006a84:	e110      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 8006a8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	601a      	str	r2, [r3, #0]
	break;
 8006a92:	e109      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8006a9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	601a      	str	r2, [r3, #0]
	break;
 8006aa0:	e102      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	@ 0x13e
 8006aa8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	601a      	str	r2, [r3, #0]
	break;
 8006aae:	e0fb      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 8006ab6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	601a      	str	r2, [r3, #0]
	break;
 8006abc:	e0f4      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	f893 30ab 	ldrb.w	r3, [r3, #171]	@ 0xab
 8006ac4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	601a      	str	r2, [r3, #0]
	break;
 8006aca:	e0ed      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8006ad2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	601a      	str	r2, [r3, #0]
	break;
 8006ad8:	e0e6      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8006ae0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	601a      	str	r2, [r3, #0]
	break;
 8006ae6:	e0df      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 8006aee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	601a      	str	r2, [r3, #0]
	break;
 8006af4:	e0d8      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 8006afc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	601a      	str	r2, [r3, #0]
	break;
 8006b02:	e0d1      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f893 30c6 	ldrb.w	r3, [r3, #198]	@ 0xc6
 8006b0a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	601a      	str	r2, [r3, #0]
	break;
 8006b10:	e0ca      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8006b18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	601a      	str	r2, [r3, #0]
	break;
 8006b1e:	e0c3      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8006b26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	601a      	str	r2, [r3, #0]
	break;
 8006b2c:	e0bc      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8006b34:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	601a      	str	r2, [r3, #0]
	break;
 8006b3a:	e0b5      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006b42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	601a      	str	r2, [r3, #0]
	break;
 8006b48:	e0ae      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	f8b3 3118 	ldrh.w	r3, [r3, #280]	@ 0x118
 8006b50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	601a      	str	r2, [r3, #0]
	break;
 8006b56:	e0a7      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 8006b5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	601a      	str	r2, [r3, #0]
	break;
 8006b64:	e0a0      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 8006b6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	601a      	str	r2, [r3, #0]
	break;
 8006b72:	e099      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8006b7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	601a      	str	r2, [r3, #0]
	break;
 8006b80:	e092      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8006b88:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	601a      	str	r2, [r3, #0]
	break;
 8006b8e:	e08b      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8006b96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	601a      	str	r2, [r3, #0]
	break;
 8006b9c:	e084      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8006ba4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	601a      	str	r2, [r3, #0]
	break;
 8006baa:	e07d      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8006bb2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	601a      	str	r2, [r3, #0]
	break;
 8006bb8:	e076      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 8006bc0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	601a      	str	r2, [r3, #0]
	break;
 8006bc6:	e06f      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	f893 3156 	ldrb.w	r3, [r3, #342]	@ 0x156
 8006bce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	601a      	str	r2, [r3, #0]
	break;
 8006bd4:	e068      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	f893 3121 	ldrb.w	r3, [r3, #289]	@ 0x121
 8006bdc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	601a      	str	r2, [r3, #0]
	break;
 8006be2:	e061      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 8006bea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	601a      	str	r2, [r3, #0]
	break;
 8006bf0:	e05a      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	f8b3 3128 	ldrh.w	r3, [r3, #296]	@ 0x128
 8006bf8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	601a      	str	r2, [r3, #0]
	break;
 8006bfe:	e053      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	@ 0xca
 8006c06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	601a      	str	r2, [r3, #0]
	break;
 8006c0c:	e04c      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 8006c14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	601a      	str	r2, [r3, #0]
	break;
 8006c1a:	e045      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006c22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	601a      	str	r2, [r3, #0]
	break;
 8006c28:	e03e      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006c30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	601a      	str	r2, [r3, #0]
	break;
 8006c36:	e037      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006c3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	601a      	str	r2, [r3, #0]
	break;
 8006c44:	e030      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006c4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	601a      	str	r2, [r3, #0]
	break;
 8006c52:	e029      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	601a      	str	r2, [r3, #0]
	break;
 8006c60:	e022      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	601a      	str	r2, [r3, #0]
	break;
 8006c6e:	e01b      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8006c76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	601a      	str	r2, [r3, #0]
	break;
 8006c7c:	e014      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	601a      	str	r2, [r3, #0]
	break;
 8006c8a:	e00d      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006c92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	601a      	str	r2, [r3, #0]
	break;
 8006c98:	e006      	b.n	8006ca8 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8006ca0:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8006ca2:	23fc      	movs	r3, #252	@ 0xfc
 8006ca4:	75fb      	strb	r3, [r7, #23]
	break;
 8006ca6:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8006ca8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	371c      	adds	r7, #28
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2208      	movs	r2, #8
 8006cc8:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	220b      	movs	r2, #11
 8006cce:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006cd6:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006cde:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8006ce6:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8006cee:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2212      	movs	r2, #18
 8006d16:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	220f      	movs	r2, #15
 8006d1c:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2202      	movs	r2, #2
 8006d22:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8006d2a:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	220c      	movs	r2, #12
 8006d30:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b084      	sub	sp, #16
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
 8006d4a:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	895b      	ldrh	r3, [r3, #10]
 8006d54:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	895b      	ldrh	r3, [r3, #10]
 8006d72:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	2240      	movs	r2, #64	@ 0x40
 8006d96:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10d      	bne.n	8006dbc <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d108      	bne.n	8006dbc <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d103      	bne.n	8006dbc <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	2200      	movs	r2, #0
 8006db8:	741a      	strb	r2, [r3, #16]
 8006dba:	e002      	b.n	8006dc2 <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 8006dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d114      	bne.n	8006df4 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d110      	bne.n	8006df4 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	6818      	ldr	r0, [r3, #0]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	7d1b      	ldrb	r3, [r3, #20]
 8006de6:	f000 ffc9 	bl	8007d7c <VL53L1_calc_range_ignore_threshold>
 8006dea:	4603      	mov	r3, r0
 8006dec:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	82da      	strh	r2, [r3, #22]
 8006df2:	e002      	b.n	8006dfa <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	2200      	movs	r2, #0
 8006df8:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 8006dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b085      	sub	sp, #20
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006e18:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006e20:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8006e28:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8006e30:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2208      	movs	r2, #8
 8006e36:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2228      	movs	r2, #40	@ 0x28
 8006e3c:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2209      	movs	r2, #9
 8006e42:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3714      	adds	r7, #20
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f248 0203 	movw	r2, #32771	@ 0x8003
 8006e66:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f248 0201 	movw	r2, #32769	@ 0x8001
 8006e6e:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f248 0241 	movw	r2, #32833	@ 0x8041
 8006e76:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	220e      	movs	r2, #14
 8006e7c:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	220a      	movs	r2, #10
 8006e82:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2206      	movs	r2, #6
 8006e88:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	220e      	movs	r2, #14
 8006e8e:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	220a      	movs	r2, #10
 8006e94:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2206      	movs	r2, #6
 8006e9a:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2221      	movs	r2, #33	@ 0x21
 8006ea6:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8006eba:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8006ec2:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8006eca:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	22c0      	movs	r2, #192	@ 0xc0
 8006ed0:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	22c0      	movs	r2, #192	@ 0xc0
 8006ed6:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	22c0      	movs	r2, #192	@ 0xc0
 8006edc:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2208      	movs	r2, #8
 8006ee2:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2210      	movs	r2, #16
 8006ee8:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2202      	movs	r2, #2
 8006f06:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006f18:	84da      	strh	r2, [r3, #38]	@ 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006f20:	851a      	strh	r2, [r3, #40]	@ 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f248 0230 	movw	r2, #32816	@ 0x8030
 8006f28:	62da      	str	r2, [r3, #44]	@ 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006f30:	631a      	str	r2, [r3, #48]	@ 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006f38:	635a      	str	r2, [r3, #52]	@ 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006f40:	639a      	str	r2, [r3, #56]	@ 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f24f 6218 	movw	r2, #63000	@ 0xf618
 8006f48:	641a      	str	r2, [r3, #64]	@ 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8006f50:	645a      	str	r2, [r3, #68]	@ 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8006f58:	63da      	str	r2, [r3, #60]	@ 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8006f60:	649a      	str	r2, [r3, #72]	@ 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8006f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b087      	sub	sp, #28
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	60b9      	str	r1, [r7, #8]
 8006f7c:	607a      	str	r2, [r7, #4]
 8006f7e:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006f80:	2300      	movs	r3, #0
 8006f82:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8006f8a:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2211      	movs	r2, #17
 8006fcc:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2202      	movs	r2, #2
 8006fd2:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2202      	movs	r2, #2
 8006fde:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2208      	movs	r2, #8
 8006fe4:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8006fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fee:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff6:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffe:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2201      	movs	r2, #1
 800700a:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	22ff      	movs	r2, #255	@ 0xff
 8007022:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8007024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007026:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800702c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702e:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	2200      	movs	r2, #0
 800704a:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	2200      	movs	r2, #0
 8007050:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2220      	movs	r2, #32
 8007056:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	220b      	movs	r2, #11
 800705c:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800705e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007060:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2202      	movs	r2, #2
 800706a:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	220d      	movs	r2, #13
 8007070:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8007072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007074:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2200      	movs	r2, #0
 800707e:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	2201      	movs	r2, #1
 8007084:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2200      	movs	r2, #0
 800708a:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	2200      	movs	r2, #0
 8007090:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	f44f 420c 	mov.w	r2, #35840	@ 0x8c00
 8007098:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2200      	movs	r2, #0
 800709e:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2238      	movs	r2, #56	@ 0x38
 80070a4:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	22ff      	movs	r2, #255	@ 0xff
 80070aa:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	2201      	movs	r2, #1
 80070b0:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	221a      	movs	r2, #26
 80070bc:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2220      	movs	r2, #32
 80070c8:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	22cc      	movs	r2, #204	@ 0xcc
 80070d4:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	220b      	movs	r2, #11
 80070da:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	22f5      	movs	r2, #245	@ 0xf5
 80070e6:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2209      	movs	r2, #9
 80070ec:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 80070ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f0:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 80070f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f8:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2208      	movs	r2, #8
 8007102:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2278      	movs	r2, #120	@ 0x78
 8007108:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2201      	movs	r2, #1
 800711a:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	2200      	movs	r2, #0
 8007120:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	2200      	movs	r2, #0
 8007126:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	2200      	movs	r2, #0
 800712c:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800712e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007130:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
	pdynamic->system__seed_config =
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	220b      	movs	r2, #11
 800713c:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2209      	movs	r2, #9
 8007142:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8007144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007146:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800714c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714e:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	2201      	movs	r2, #1
 8007158:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800715a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715c:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
	pdynamic->sd_config__first_order_select =
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8007164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007166:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
	pdynamic->sd_config__quantifier         =
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	22c7      	movs	r2, #199	@ 0xc7
 8007172:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	22ff      	movs	r2, #255	@ 0xff
 8007178:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	22db      	movs	r2, #219	@ 0xdb
 800717e:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	2202      	movs	r2, #2
 8007184:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	2200      	movs	r2, #0
 800718a:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	2201      	movs	r2, #1
 8007190:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	2201      	movs	r2, #1
 8007196:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	2221      	movs	r2, #33	@ 0x21
 800719c:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800719e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	371c      	adds	r7, #28
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b088      	sub	sp, #32
 80071b2:	af02      	add	r7, sp, #8
 80071b4:	60f8      	str	r0, [r7, #12]
 80071b6:	60b9      	str	r1, [r7, #8]
 80071b8:	607a      	str	r2, [r7, #4]
 80071ba:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80071bc:	2300      	movs	r3, #0
 80071be:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80071c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c2:	9301      	str	r3, [sp, #4]
 80071c4:	6a3b      	ldr	r3, [r7, #32]
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	68b9      	ldr	r1, [r7, #8]
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f7ff fecf 	bl	8006f72 <VL53L1_preset_mode_standard_ranging>
 80071d4:	4603      	mov	r3, r0
 80071d6:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80071d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d121      	bne.n	8007224 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2207      	movs	r2, #7
 80071e4:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2205      	movs	r2, #5
 80071ea:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 80071ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ee:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 80071f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f6:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2208      	movs	r2, #8
 8007200:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2238      	movs	r2, #56	@ 0x38
 8007206:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	2207      	movs	r2, #7
 800720c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2205      	movs	r2, #5
 8007212:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8007214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007216:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800721c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721e:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8007224:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007228:	4618      	mov	r0, r3
 800722a:	3718      	adds	r7, #24
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b088      	sub	sp, #32
 8007234:	af02      	add	r7, sp, #8
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800723e:	2300      	movs	r3, #0
 8007240:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8007242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007244:	9301      	str	r3, [sp, #4]
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	68b9      	ldr	r1, [r7, #8]
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f7ff fe8e 	bl	8006f72 <VL53L1_preset_mode_standard_ranging>
 8007256:	4603      	mov	r3, r0
 8007258:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800725a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d121      	bne.n	80072a6 <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	220f      	movs	r2, #15
 8007266:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	220d      	movs	r2, #13
 800726c:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800726e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007270:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8007276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007278:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2208      	movs	r2, #8
 8007282:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	22b8      	movs	r2, #184	@ 0xb8
 8007288:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	220f      	movs	r2, #15
 800728e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	220d      	movs	r2, #13
 8007294:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 8007296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007298:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800729e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a0:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 80072a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3718      	adds	r7, #24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b088      	sub	sp, #32
 80072b6:	af02      	add	r7, sp, #8
 80072b8:	60f8      	str	r0, [r7, #12]
 80072ba:	60b9      	str	r1, [r7, #8]
 80072bc:	607a      	str	r2, [r7, #4]
 80072be:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80072c0:	2300      	movs	r3, #0
 80072c2:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80072c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c6:	9301      	str	r3, [sp, #4]
 80072c8:	6a3b      	ldr	r3, [r7, #32]
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	68b9      	ldr	r1, [r7, #8]
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f7ff fe4d 	bl	8006f72 <VL53L1_preset_mode_standard_ranging>
 80072d8:	4603      	mov	r3, r0
 80072da:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80072dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d105      	bne.n	80072f0 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	2202      	movs	r2, #2
 80072e8:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	223b      	movs	r2, #59	@ 0x3b
 80072ee:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80072f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3718      	adds	r7, #24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b088      	sub	sp, #32
 8007300:	af02      	add	r7, sp, #8
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
 8007308:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800730a:	2300      	movs	r3, #0
 800730c:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800730e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007310:	9301      	str	r3, [sp, #4]
 8007312:	6a3b      	ldr	r3, [r7, #32]
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	68b9      	ldr	r1, [r7, #8]
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f7ff fe28 	bl	8006f72 <VL53L1_preset_mode_standard_ranging>
 8007322:	4603      	mov	r3, r0
 8007324:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8007326:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d105      	bne.n	800733a <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	2202      	movs	r2, #2
 8007332:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	225b      	movs	r2, #91	@ 0x5b
 8007338:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800733a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3718      	adds	r7, #24
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b088      	sub	sp, #32
 800734a:	af02      	add	r7, sp, #8
 800734c:	60f8      	str	r0, [r7, #12]
 800734e:	60b9      	str	r1, [r7, #8]
 8007350:	607a      	str	r2, [r7, #4]
 8007352:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007354:	2300      	movs	r3, #0
 8007356:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8007358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735a:	9301      	str	r3, [sp, #4]
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	68b9      	ldr	r1, [r7, #8]
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f7ff fe03 	bl	8006f72 <VL53L1_preset_mode_standard_ranging>
 800736c:	4603      	mov	r3, r0
 800736e:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8007370:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d11a      	bne.n	80073ae <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	2200      	movs	r2, #0
 800737c:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	22b1      	movs	r2, #177	@ 0xb1
 8007388:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	22d4      	movs	r2, #212	@ 0xd4
 8007394:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800739c:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800739e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a0:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	2240      	movs	r2, #64	@ 0x40
 80073ac:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80073ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3718      	adds	r7, #24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b088      	sub	sp, #32
 80073be:	af02      	add	r7, sp, #8
 80073c0:	60f8      	str	r0, [r7, #12]
 80073c2:	60b9      	str	r1, [r7, #8]
 80073c4:	607a      	str	r2, [r7, #4]
 80073c6:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80073c8:	2300      	movs	r3, #0
 80073ca:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 80073cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ce:	9301      	str	r3, [sp, #4]
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	68b9      	ldr	r1, [r7, #8]
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f7ff fee7 	bl	80071ae <VL53L1_preset_mode_standard_ranging_short_range>
 80073e0:	4603      	mov	r3, r0
 80073e2:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80073e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d11a      	bne.n	8007422 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	2200      	movs	r2, #0
 80073f0:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2284      	movs	r2, #132	@ 0x84
 80073fc:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	22b1      	movs	r2, #177	@ 0xb1
 8007408:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007410:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8007412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007414:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800741c:	6a3b      	ldr	r3, [r7, #32]
 800741e:	2240      	movs	r2, #64	@ 0x40
 8007420:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007422:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3718      	adds	r7, #24
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b088      	sub	sp, #32
 8007432:	af02      	add	r7, sp, #8
 8007434:	60f8      	str	r0, [r7, #12]
 8007436:	60b9      	str	r1, [r7, #8]
 8007438:	607a      	str	r2, [r7, #4]
 800743a:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800743c:	2300      	movs	r3, #0
 800743e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 8007440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007442:	9301      	str	r3, [sp, #4]
 8007444:	6a3b      	ldr	r3, [r7, #32]
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	68b9      	ldr	r1, [r7, #8]
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f7ff feee 	bl	8007230 <VL53L1_preset_mode_standard_ranging_long_range>
 8007454:	4603      	mov	r3, r0
 8007456:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8007458:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d11a      	bne.n	8007496 <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	2200      	movs	r2, #0
 8007464:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2297      	movs	r2, #151	@ 0x97
 8007470:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	22b1      	movs	r2, #177	@ 0xb1
 800747c:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007484:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8007486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007488:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	2240      	movs	r2, #64	@ 0x40
 8007494:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007496:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b088      	sub	sp, #32
 80074a6:	af02      	add	r7, sp, #8
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	60b9      	str	r1, [r7, #8]
 80074ac:	607a      	str	r2, [r7, #4]
 80074ae:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80074b0:	2300      	movs	r3, #0
 80074b2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 80074b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b6:	9301      	str	r3, [sp, #4]
 80074b8:	6a3b      	ldr	r3, [r7, #32]
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	68b9      	ldr	r1, [r7, #8]
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f7ff ff3f 	bl	8007346 <VL53L1_preset_mode_timed_ranging>
 80074c8:	4603      	mov	r3, r0
 80074ca:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 80074cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d106      	bne.n	80074e2 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 80074d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074d6:	6839      	ldr	r1, [r7, #0]
 80074d8:	68b8      	ldr	r0, [r7, #8]
 80074da:	f000 fe7b 	bl	80081d4 <VL53L1_config_low_power_auto_mode>
 80074de:	4603      	mov	r3, r0
 80074e0:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 80074e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b088      	sub	sp, #32
 80074f2:	af02      	add	r7, sp, #8
 80074f4:	60f8      	str	r0, [r7, #12]
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	607a      	str	r2, [r7, #4]
 80074fa:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80074fc:	2300      	movs	r3, #0
 80074fe:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 8007500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007502:	9301      	str	r3, [sp, #4]
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	68b9      	ldr	r1, [r7, #8]
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f7ff ff53 	bl	80073ba <VL53L1_preset_mode_timed_ranging_short_range>
 8007514:	4603      	mov	r3, r0
 8007516:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8007518:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d106      	bne.n	800752e <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8007520:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	68b8      	ldr	r0, [r7, #8]
 8007526:	f000 fe55 	bl	80081d4 <VL53L1_config_low_power_auto_mode>
 800752a:	4603      	mov	r3, r0
 800752c:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800752e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3718      	adds	r7, #24
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b088      	sub	sp, #32
 800753e:	af02      	add	r7, sp, #8
 8007540:	60f8      	str	r0, [r7, #12]
 8007542:	60b9      	str	r1, [r7, #8]
 8007544:	607a      	str	r2, [r7, #4]
 8007546:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007548:	2300      	movs	r3, #0
 800754a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800754c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754e:	9301      	str	r3, [sp, #4]
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	68b9      	ldr	r1, [r7, #8]
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f7ff ff67 	bl	800742e <VL53L1_preset_mode_timed_ranging_long_range>
 8007560:	4603      	mov	r3, r0
 8007562:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8007564:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d106      	bne.n	800757a <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800756c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800756e:	6839      	ldr	r1, [r7, #0]
 8007570:	68b8      	ldr	r0, [r7, #8]
 8007572:	f000 fe2f 	bl	80081d4 <VL53L1_config_low_power_auto_mode>
 8007576:	4603      	mov	r3, r0
 8007578:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800757a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b088      	sub	sp, #32
 800758a:	af02      	add	r7, sp, #8
 800758c:	60f8      	str	r0, [r7, #12]
 800758e:	60b9      	str	r1, [r7, #8]
 8007590:	607a      	str	r2, [r7, #4]
 8007592:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007594:	2300      	movs	r3, #0
 8007596:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8007598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759a:	9301      	str	r3, [sp, #4]
 800759c:	6a3b      	ldr	r3, [r7, #32]
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	68b9      	ldr	r1, [r7, #8]
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f7ff fce3 	bl	8006f72 <VL53L1_preset_mode_standard_ranging>
 80075ac:	4603      	mov	r3, r0
 80075ae:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80075b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d116      	bne.n	80075e6 <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	2200      	movs	r2, #0
 80075bc:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	22b1      	movs	r2, #177	@ 0xb1
 80075c8:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	22d4      	movs	r2, #212	@ 0xd4
 80075d4:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80075d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d8:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 80075e0:	6a3b      	ldr	r3, [r7, #32]
 80075e2:	2210      	movs	r2, #16
 80075e4:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 80075e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b088      	sub	sp, #32
 80075f6:	af02      	add	r7, sp, #8
 80075f8:	60f8      	str	r0, [r7, #12]
 80075fa:	60b9      	str	r1, [r7, #8]
 80075fc:	607a      	str	r2, [r7, #4]
 80075fe:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007600:	2300      	movs	r3, #0
 8007602:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8007604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007606:	9301      	str	r3, [sp, #4]
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	68b9      	ldr	r1, [r7, #8]
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f7ff fcad 	bl	8006f72 <VL53L1_preset_mode_standard_ranging>
 8007618:	4603      	mov	r3, r0
 800761a:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800761c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d102      	bne.n	800762a <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 8007624:	6a3b      	ldr	r3, [r7, #32]
 8007626:	2201      	movs	r2, #1
 8007628:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 800762a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 8007636:	b480      	push	{r7}
 8007638:	b085      	sub	sp, #20
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2202      	movs	r2, #2
 800764e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	220d      	movs	r2, #13
 8007656:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f640 028e 	movw	r2, #2190	@ 0x88e
 8007660:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8007662:	bf00      	nop
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800766e:	b480      	push	{r7}
 8007670:	b085      	sub	sp, #20
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	460b      	mov	r3, r1
 8007678:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	332c      	adds	r3, #44	@ 0x2c
 8007682:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	78fa      	ldrb	r2, [r7, #3]
 8007688:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	2200      	movs	r2, #0
 800768e:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2202      	movs	r2, #2
 8007694:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2200      	movs	r2, #0
 800769a:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	78fa      	ldrb	r2, [r7, #3]
 80076a0:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	2200      	movs	r2, #0
 80076a6:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2202      	movs	r2, #2
 80076ac:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	2200      	movs	r2, #0
 80076b2:	71da      	strb	r2, [r3, #7]

}
 80076b4:	bf00      	nop
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b087      	sub	sp, #28
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 80076c8:	2300      	movs	r3, #0
 80076ca:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	332c      	adds	r3, #44	@ 0x2c
 80076d4:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 80076dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10c      	bne.n	80076fe <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2203      	movs	r2, #3
 80076e8:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2202      	movs	r2, #2
 80076f4:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	71da      	strb	r2, [r3, #7]
 80076fc:	e060      	b.n	80077c0 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	795b      	ldrb	r3, [r3, #5]
 8007702:	2bff      	cmp	r3, #255	@ 0xff
 8007704:	d103      	bne.n	800770e <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2280      	movs	r2, #128	@ 0x80
 800770a:	715a      	strb	r2, [r3, #5]
 800770c:	e005      	b.n	800771a <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	795b      	ldrb	r3, [r3, #5]
 8007712:	3301      	adds	r3, #1
 8007714:	b2da      	uxtb	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	799b      	ldrb	r3, [r3, #6]
 800771e:	f083 0302 	eor.w	r3, r3, #2
 8007722:	b2da      	uxtb	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	791b      	ldrb	r3, [r3, #4]
 800772c:	3b03      	subs	r3, #3
 800772e:	2b05      	cmp	r3, #5
 8007730:	d839      	bhi.n	80077a6 <VL53L1_update_ll_driver_rd_state+0xe6>
 8007732:	a201      	add	r2, pc, #4	@ (adr r2, 8007738 <VL53L1_update_ll_driver_rd_state+0x78>)
 8007734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007738:	08007751 	.word	0x08007751
 800773c:	080077a7 	.word	0x080077a7
 8007740:	080077a7 	.word	0x080077a7
 8007744:	0800777b 	.word	0x0800777b
 8007748:	08007789 	.word	0x08007789
 800774c:	08007791 	.word	0x08007791

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f893 31c6 	ldrb.w	r3, [r3, #454]	@ 0x1c6
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	2b00      	cmp	r3, #0
 800775c:	dd03      	ble.n	8007766 <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2206      	movs	r2, #6
 8007762:	711a      	strb	r2, [r3, #4]
 8007764:	e002      	b.n	800776c <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2208      	movs	r2, #8
 800776a:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	71da      	strb	r2, [r3, #7]

		break;
 8007778:	e022      	b.n	80077c0 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2208      	movs	r2, #8
 8007784:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8007786:	e01b      	b.n	80077c0 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2208      	movs	r2, #8
 800778c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800778e:	e017      	b.n	80077c0 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	79db      	ldrb	r3, [r3, #7]
 8007794:	f083 0301 	eor.w	r3, r3, #1
 8007798:	b2da      	uxtb	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2208      	movs	r2, #8
 80077a2:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 80077a4:	e00c      	b.n	80077c0 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2203      	movs	r2, #3
 80077aa:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2202      	movs	r2, #2
 80077b6:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	71da      	strb	r2, [r3, #7]

		break;
 80077be:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 80077c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	371c      	adds	r7, #28
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b089      	sub	sp, #36	@ 0x24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 80077d8:	2300      	movs	r3, #0
 80077da:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	332c      	adds	r3, #44	@ 0x2c
 80077e4:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	f503 73e7 	add.w	r3, r3, #462	@ 0x1ce
 80077ec:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 80077ee:	2300      	movs	r3, #0
 80077f0:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 80077f2:	2300      	movs	r3, #0
 80077f4:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 80077f6:	2300      	movs	r3, #0
 80077f8:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 80077fe:	f003 031f 	and.w	r3, r3, #31
 8007802:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	78db      	ldrb	r3, [r3, #3]
 8007808:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800780e:	111b      	asrs	r3, r3, #4
 8007810:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 800781e:	f003 0320 	and.w	r3, r3, #32
 8007822:	2b00      	cmp	r3, #0
 8007824:	d017      	beq.n	8007856 <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	791b      	ldrb	r3, [r3, #4]
 800782a:	2b06      	cmp	r3, #6
 800782c:	d105      	bne.n	800783a <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 800782e:	7bfb      	ldrb	r3, [r7, #15]
 8007830:	2b12      	cmp	r3, #18
 8007832:	d010      	beq.n	8007856 <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 8007834:	23ef      	movs	r3, #239	@ 0xef
 8007836:	77fb      	strb	r3, [r7, #31]
 8007838:	e00d      	b.n	8007856 <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	795b      	ldrb	r3, [r3, #5]
 800783e:	7bba      	ldrb	r2, [r7, #14]
 8007840:	429a      	cmp	r2, r3
 8007842:	d001      	beq.n	8007848 <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 8007844:	23ee      	movs	r3, #238	@ 0xee
 8007846:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	799b      	ldrb	r3, [r3, #6]
 800784c:	7b7a      	ldrb	r2, [r7, #13]
 800784e:	429a      	cmp	r2, r3
 8007850:	d001      	beq.n	8007856 <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 8007852:	23ed      	movs	r3, #237	@ 0xed
 8007854:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 8007856:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3724      	adds	r7, #36	@ 0x24
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 8007866:	b480      	push	{r7}
 8007868:	b087      	sub	sp, #28
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800786e:	2300      	movs	r3, #0
 8007870:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	332c      	adds	r3, #44	@ 0x2c
 800787a:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8007882:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10c      	bne.n	80078a4 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2203      	movs	r2, #3
 800788e:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2202      	movs	r2, #2
 800789a:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	70da      	strb	r2, [r3, #3]
 80078a2:	e03e      	b.n	8007922 <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	785b      	ldrb	r3, [r3, #1]
 80078a8:	2bff      	cmp	r3, #255	@ 0xff
 80078aa:	d103      	bne.n	80078b4 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2280      	movs	r2, #128	@ 0x80
 80078b0:	705a      	strb	r2, [r3, #1]
 80078b2:	e005      	b.n	80078c0 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	785b      	ldrb	r3, [r3, #1]
 80078b8:	3301      	adds	r3, #1
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	789b      	ldrb	r3, [r3, #2]
 80078c4:	f083 0302 	eor.w	r3, r3, #2
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d002      	beq.n	80078dc <VL53L1_update_ll_driver_cfg_state+0x76>
 80078d6:	2b04      	cmp	r3, #4
 80078d8:	d00e      	beq.n	80078f8 <VL53L1_update_ll_driver_cfg_state+0x92>
 80078da:	e015      	b.n	8007908 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	78db      	ldrb	r3, [r3, #3]
 80078e0:	f083 0301 	eor.w	r3, r3, #1
 80078e4:	b2da      	uxtb	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2201      	movs	r2, #1
 80078ee:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2204      	movs	r2, #4
 80078f4:	701a      	strb	r2, [r3, #0]
		break;
 80078f6:	e014      	b.n	8007922 <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	78db      	ldrb	r3, [r3, #3]
 80078fc:	f083 0301 	eor.w	r3, r3, #1
 8007900:	b2da      	uxtb	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	70da      	strb	r2, [r3, #3]

		break;
 8007906:	e00c      	b.n	8007922 <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2203      	movs	r2, #3
 800790c:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2202      	movs	r2, #2
 8007918:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	70da      	strb	r2, [r3, #3]

		break;
 8007920:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8007922:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007926:	4618      	mov	r0, r3
 8007928:	371c      	adds	r7, #28
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8007932:	b480      	push	{r7}
 8007934:	b083      	sub	sp, #12
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	7c1a      	ldrb	r2, [r3, #16]
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	3301      	adds	r3, #1
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	7c52      	ldrb	r2, [r2, #17]
 800794c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	3302      	adds	r3, #2
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	7c92      	ldrb	r2, [r2, #18]
 8007956:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	3303      	adds	r3, #3
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	7cd2      	ldrb	r2, [r2, #19]
 8007960:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	3304      	adds	r3, #4
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	7d12      	ldrb	r2, [r2, #20]
 800796a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	3305      	adds	r3, #5
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	7d52      	ldrb	r2, [r2, #21]
 8007974:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	3306      	adds	r3, #6
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	7d92      	ldrb	r2, [r2, #22]
 800797e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	3307      	adds	r3, #7
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	7dd2      	ldrb	r2, [r2, #23]
 8007988:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	3308      	adds	r3, #8
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	7e12      	ldrb	r2, [r2, #24]
 8007992:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	3309      	adds	r3, #9
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	7e52      	ldrb	r2, [r2, #25]
 800799c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	330a      	adds	r3, #10
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	7e92      	ldrb	r2, [r2, #26]
 80079a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	330b      	adds	r3, #11
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	7ed2      	ldrb	r2, [r2, #27]
 80079b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	330c      	adds	r3, #12
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	7f12      	ldrb	r2, [r2, #28]
 80079ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	330d      	adds	r3, #13
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	7f52      	ldrb	r2, [r2, #29]
 80079c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	330e      	adds	r3, #14
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	7f92      	ldrb	r2, [r2, #30]
 80079ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	330f      	adds	r3, #15
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	7fd2      	ldrb	r2, [r2, #31]
 80079d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	3310      	adds	r3, #16
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80079e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	3311      	adds	r3, #17
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 80079f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	3312      	adds	r3, #18
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 80079fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	3313      	adds	r3, #19
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8007a08:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	3314      	adds	r3, #20
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8007a14:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	3315      	adds	r3, #21
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 8007a20:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	3316      	adds	r3, #22
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8007a2c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	3317      	adds	r3, #23
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8007a38:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	3318      	adds	r3, #24
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8007a44:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	3319      	adds	r3, #25
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 8007a50:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	331a      	adds	r3, #26
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8007a5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	331b      	adds	r3, #27
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 8007a68:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	331c      	adds	r3, #28
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8007a74:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	331d      	adds	r3, #29
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	f892 202d 	ldrb.w	r2, [r2, #45]	@ 0x2d
 8007a80:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	331e      	adds	r3, #30
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8007a8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	331f      	adds	r3, #31
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 8007a98:	701a      	strb	r2, [r3, #0]
}
 8007a9a:	bf00      	nop
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b085      	sub	sp, #20
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	4603      	mov	r3, r0
 8007aae:	603a      	str	r2, [r7, #0]
 8007ab0:	80fb      	strh	r3, [r7, #6]
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 8007aba:	2300      	movs	r3, #0
 8007abc:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8007abe:	88fb      	ldrh	r3, [r7, #6]
 8007ac0:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	81fb      	strh	r3, [r7, #14]
 8007ac6:	e00e      	b.n	8007ae6 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8007ac8:	88ba      	ldrh	r2, [r7, #4]
 8007aca:	89fb      	ldrh	r3, [r7, #14]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	683a      	ldr	r2, [r7, #0]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	89ba      	ldrh	r2, [r7, #12]
 8007ad6:	b2d2      	uxtb	r2, r2
 8007ad8:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8007ada:	89bb      	ldrh	r3, [r7, #12]
 8007adc:	0a1b      	lsrs	r3, r3, #8
 8007ade:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 8007ae0:	89fb      	ldrh	r3, [r7, #14]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	81fb      	strh	r3, [r7, #14]
 8007ae6:	89fa      	ldrh	r2, [r7, #14]
 8007ae8:	88bb      	ldrh	r3, [r7, #4]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d3ec      	bcc.n	8007ac8 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 8007aee:	bf00      	nop
 8007af0:	bf00      	nop
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	4603      	mov	r3, r0
 8007b04:	6039      	str	r1, [r7, #0]
 8007b06:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 8007b0c:	e00a      	b.n	8007b24 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 8007b0e:	89fb      	ldrh	r3, [r7, #14]
 8007b10:	021b      	lsls	r3, r3, #8
 8007b12:	b21a      	sxth	r2, r3
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	1c59      	adds	r1, r3, #1
 8007b18:	6039      	str	r1, [r7, #0]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	b21b      	sxth	r3, r3
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	b21b      	sxth	r3, r3
 8007b22:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 8007b24:	88fb      	ldrh	r3, [r7, #6]
 8007b26:	1e5a      	subs	r2, r3, #1
 8007b28:	80fa      	strh	r2, [r7, #6]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1ef      	bne.n	8007b0e <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 8007b2e:	89fb      	ldrh	r3, [r7, #14]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3714      	adds	r7, #20
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	4603      	mov	r3, r0
 8007b44:	603a      	str	r2, [r7, #0]
 8007b46:	80fb      	strh	r3, [r7, #6]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 8007b50:	2300      	movs	r3, #0
 8007b52:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8007b54:	88fb      	ldrh	r3, [r7, #6]
 8007b56:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 8007b58:	2300      	movs	r3, #0
 8007b5a:	81fb      	strh	r3, [r7, #14]
 8007b5c:	e00f      	b.n	8007b7e <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8007b5e:	88ba      	ldrh	r2, [r7, #4]
 8007b60:	89fb      	ldrh	r3, [r7, #14]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	3b01      	subs	r3, #1
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	4413      	add	r3, r2
 8007b6a:	89ba      	ldrh	r2, [r7, #12]
 8007b6c:	b2d2      	uxtb	r2, r2
 8007b6e:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8007b70:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007b74:	121b      	asrs	r3, r3, #8
 8007b76:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 8007b78:	89fb      	ldrh	r3, [r7, #14]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	81fb      	strh	r3, [r7, #14]
 8007b7e:	89fa      	ldrh	r2, [r7, #14]
 8007b80:	88bb      	ldrh	r3, [r7, #4]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d3eb      	bcc.n	8007b5e <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 8007b86:	bf00      	nop
 8007b88:	bf00      	nop
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	6039      	str	r1, [r7, #0]
 8007b9e:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	b25b      	sxtb	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	da0e      	bge.n	8007bcc <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 8007bae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007bb2:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 8007bb4:	e00a      	b.n	8007bcc <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 8007bb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007bba:	021b      	lsls	r3, r3, #8
 8007bbc:	b21a      	sxth	r2, r3
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	1c59      	adds	r1, r3, #1
 8007bc2:	6039      	str	r1, [r7, #0]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	b21b      	sxth	r3, r3
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 8007bcc:	88fb      	ldrh	r3, [r7, #6]
 8007bce:	1e5a      	subs	r2, r3, #1
 8007bd0:	80fa      	strh	r2, [r7, #6]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1ef      	bne.n	8007bb6 <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 8007bd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007be6:	b480      	push	{r7}
 8007be8:	b087      	sub	sp, #28
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	60f8      	str	r0, [r7, #12]
 8007bee:	460b      	mov	r3, r1
 8007bf0:	607a      	str	r2, [r7, #4]
 8007bf2:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 8007c00:	2300      	movs	r3, #0
 8007c02:	82fb      	strh	r3, [r7, #22]
 8007c04:	e00e      	b.n	8007c24 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8007c06:	897a      	ldrh	r2, [r7, #10]
 8007c08:	8afb      	ldrh	r3, [r7, #22]
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	4413      	add	r3, r2
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	b2d2      	uxtb	r2, r2
 8007c16:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	0a1b      	lsrs	r3, r3, #8
 8007c1c:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 8007c1e:	8afb      	ldrh	r3, [r7, #22]
 8007c20:	3301      	adds	r3, #1
 8007c22:	82fb      	strh	r3, [r7, #22]
 8007c24:	8afa      	ldrh	r2, [r7, #22]
 8007c26:	897b      	ldrh	r3, [r7, #10]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d3ec      	bcc.n	8007c06 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 8007c2c:	bf00      	nop
 8007c2e:	bf00      	nop
 8007c30:	371c      	adds	r7, #28
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b085      	sub	sp, #20
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	4603      	mov	r3, r0
 8007c42:	6039      	str	r1, [r7, #0]
 8007c44:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 8007c46:	2300      	movs	r3, #0
 8007c48:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 8007c4a:	e007      	b.n	8007c5c <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	021a      	lsls	r2, r3, #8
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	1c59      	adds	r1, r3, #1
 8007c54:	6039      	str	r1, [r7, #0]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 8007c5c:	88fb      	ldrh	r3, [r7, #6]
 8007c5e:	1e5a      	subs	r2, r3, #1
 8007c60:	80fa      	strh	r2, [r7, #6]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1f2      	bne.n	8007c4c <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 8007c66:	68fb      	ldr	r3, [r7, #12]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3714      	adds	r7, #20
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	6039      	str	r1, [r7, #0]
 8007c7e:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 8007c80:	2300      	movs	r3, #0
 8007c82:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	b25b      	sxtb	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	da0b      	bge.n	8007ca6 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 8007c8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c92:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 8007c94:	e007      	b.n	8007ca6 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	021a      	lsls	r2, r3, #8
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	1c59      	adds	r1, r3, #1
 8007c9e:	6039      	str	r1, [r7, #0]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 8007ca6:	88fb      	ldrh	r3, [r7, #6]
 8007ca8:	1e5a      	subs	r2, r3, #1
 8007caa:	80fa      	strh	r2, [r7, #6]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1f2      	bne.n	8007c96 <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b084      	sub	sp, #16
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set power force register
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	78fa      	ldrb	r2, [r7, #3]
 8007cd6:	f883 21c8 	strb.w	r2, [r3, #456]	@ 0x1c8

	status = VL53L1_WrByte(
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	f893 31c8 	ldrb.w	r3, [r3, #456]	@ 0x1c8
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	2183      	movs	r1, #131	@ 0x83
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f001 fd19 	bl	800971c <VL53L1_WrByte>
 8007cea:	4603      	mov	r3, r0
 8007cec:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 8007cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b084      	sub	sp, #16
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
	/*
	 * Enable power force
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8007d02:	2300      	movs	r3, #0
 8007d04:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 8007d06:	2101      	movs	r1, #1
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f7ff ffd8 	bl	8007cbe <VL53L1_set_powerforce_register>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8007d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b086      	sub	sp, #24
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	4603      	mov	r3, r0
 8007d26:	460a      	mov	r2, r1
 8007d28:	80fb      	strh	r3, [r7, #6]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 8007d32:	2300      	movs	r3, #0
 8007d34:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 8007d36:	2300      	movs	r3, #0
 8007d38:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 8007d3a:	88fb      	ldrh	r3, [r7, #6]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f000 faa7 	bl	8008290 <VL53L1_calc_pll_period_us>
 8007d42:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 8007d44:	797b      	ldrb	r3, [r7, #5]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f000 fab6 	bl	80082b8 <VL53L1_decode_vcsel_period>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	4613      	mov	r3, r2
 8007d54:	00db      	lsls	r3, r3, #3
 8007d56:	4413      	add	r3, r2
 8007d58:	021b      	lsls	r3, r3, #8
 8007d5a:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	099b      	lsrs	r3, r3, #6
 8007d60:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 8007d62:	7cfa      	ldrb	r2, [r7, #19]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	fb02 f303 	mul.w	r3, r2, r3
 8007d6a:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	099b      	lsrs	r3, r3, #6
 8007d70:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 8007d72:	68fb      	ldr	r3, [r7, #12]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3718      	adds	r7, #24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b089      	sub	sp, #36	@ 0x24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	4608      	mov	r0, r1
 8007d86:	4611      	mov	r1, r2
 8007d88:	461a      	mov	r2, r3
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	817b      	strh	r3, [r7, #10]
 8007d8e:	460b      	mov	r3, r1
 8007d90:	813b      	strh	r3, [r7, #8]
 8007d92:	4613      	mov	r3, r2
 8007d94:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 8007d96:	2300      	movs	r3, #0
 8007d98:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 8007da2:	2300      	movs	r3, #0
 8007da4:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8007da6:	2300      	movs	r3, #0
 8007da8:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	011b      	lsls	r3, r3, #4
 8007dae:	4a23      	ldr	r2, [pc, #140]	@ (8007e3c <VL53L1_calc_range_ignore_threshold+0xc0>)
 8007db0:	fb82 1203 	smull	r1, r2, r2, r3
 8007db4:	1192      	asrs	r2, r2, #6
 8007db6:	17db      	asrs	r3, r3, #31
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 8007dbc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	da03      	bge.n	8007dcc <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8007dc4:	897b      	ldrh	r3, [r7, #10]
 8007dc6:	425b      	negs	r3, r3
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 8007dcc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	da03      	bge.n	8007ddc <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8007dd4:	893b      	ldrh	r3, [r7, #8]
 8007dd6:	425b      	negs	r3, r3
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 8007ddc:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8007de0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007de4:	4413      	add	r3, r2
 8007de6:	015b      	lsls	r3, r3, #5
 8007de8:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	4a13      	ldr	r2, [pc, #76]	@ (8007e3c <VL53L1_calc_range_ignore_threshold+0xc0>)
 8007dee:	fb82 1203 	smull	r1, r2, r2, r3
 8007df2:	1192      	asrs	r2, r2, #6
 8007df4:	17db      	asrs	r3, r3, #31
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	4413      	add	r3, r2
 8007e00:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8007e02:	79fa      	ldrb	r2, [r7, #7]
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	fb02 f303 	mul.w	r3, r2, r3
 8007e0a:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	3310      	adds	r3, #16
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	da00      	bge.n	8007e16 <VL53L1_calc_range_ignore_threshold+0x9a>
 8007e14:	331f      	adds	r3, #31
 8007e16:	115b      	asrs	r3, r3, #5
 8007e18:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e20:	db03      	blt.n	8007e2a <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 8007e22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007e26:	83fb      	strh	r3, [r7, #30]
 8007e28:	e001      	b.n	8007e2e <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8007e2e:	8bfb      	ldrh	r3, [r7, #30]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3724      	adds	r7, #36	@ 0x24
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	10624dd3 	.word	0x10624dd3

08007e40 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	031a      	lsls	r2, r3, #12
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	085b      	lsrs	r3, r3, #1
 8007e56:	441a      	add	r2, r3
	timeout_mclks   =
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e5e:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8007e60:	68fb      	ldr	r3, [r7, #12]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3714      	adds	r7, #20
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b084      	sub	sp, #16
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7ff ffdc 	bl	8007e40 <VL53L1_calc_timeout_mclks>
 8007e88:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f000 f860 	bl	8007f50 <VL53L1_encode_timeout>
 8007e90:	4603      	mov	r3, r0
 8007e92:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 8007e94:	897b      	ldrh	r3, [r7, #10]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 8007e9e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 8007eaa:	2100      	movs	r1, #0
 8007eac:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 8007eae:	f04f 0000 	mov.w	r0, #0
 8007eb2:	f04f 0100 	mov.w	r1, #0
 8007eb6:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8007eba:	6879      	ldr	r1, [r7, #4]
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	4688      	mov	r8, r1
 8007ec0:	4681      	mov	r9, r0
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	460c      	mov	r4, r1
 8007ec8:	4605      	mov	r5, r0
 8007eca:	fb04 f009 	mul.w	r0, r4, r9
 8007ece:	fb08 f105 	mul.w	r1, r8, r5
 8007ed2:	4401      	add	r1, r0
 8007ed4:	fba8 2304 	umull	r2, r3, r8, r4
 8007ed8:	4419      	add	r1, r3
 8007eda:	460b      	mov	r3, r1
 8007edc:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8007ee0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 8007ee4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ee8:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 8007eec:	f143 0b00 	adc.w	fp, r3, #0
 8007ef0:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 8007ef4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ef8:	f04f 0200 	mov.w	r2, #0
 8007efc:	f04f 0300 	mov.w	r3, #0
 8007f00:	0b02      	lsrs	r2, r0, #12
 8007f02:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8007f06:	0b0b      	lsrs	r3, r1, #12
 8007f08:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 8007f10:	697b      	ldr	r3, [r7, #20]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	371c      	adds	r7, #28
 8007f16:	46bd      	mov	sp, r7
 8007f18:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007f1c:	4770      	bx	lr

08007f1e <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b084      	sub	sp, #16
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	4603      	mov	r3, r0
 8007f26:	6039      	str	r1, [r7, #0]
 8007f28:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 8007f32:	88fb      	ldrh	r3, [r7, #6]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 f835 	bl	8007fa4 <VL53L1_decode_timeout>
 8007f3a:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 8007f3c:	6839      	ldr	r1, [r7, #0]
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f7ff ffad 	bl	8007e9e <VL53L1_calc_timeout_us>
 8007f44:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 8007f46:	68bb      	ldr	r3, [r7, #8]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b087      	sub	sp, #28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8007f60:	2300      	movs	r3, #0
 8007f62:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d015      	beq.n	8007f96 <VL53L1_encode_timeout+0x46>
		ls_byte = timeout_mclks - 1;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007f70:	e005      	b.n	8007f7e <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	085b      	lsrs	r3, r3, #1
 8007f76:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8007f78:	89fb      	ldrh	r3, [r7, #14]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	2bff      	cmp	r3, #255	@ 0xff
 8007f82:	d8f6      	bhi.n	8007f72 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8007f84:	89fb      	ldrh	r3, [r7, #14]
 8007f86:	021b      	lsls	r3, r3, #8
 8007f88:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8007f92:	4413      	add	r3, r2
 8007f94:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8007f96:	8afb      	ldrh	r3, [r7, #22]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	371c      	adds	r7, #28
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	4603      	mov	r3, r0
 8007fac:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007fb2:	88fb      	ldrh	r3, [r7, #6]
 8007fb4:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8007fb6:	88fa      	ldrh	r2, [r7, #6]
 8007fb8:	0a12      	lsrs	r2, r2, #8
 8007fba:	b292      	uxth	r2, r2
 8007fbc:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3714      	adds	r7, #20
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b088      	sub	sp, #32
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
 8007fdc:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8007fee:	887b      	ldrh	r3, [r7, #2]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d102      	bne.n	8007ffa <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8007ff4:	23f1      	movs	r3, #241	@ 0xf1
 8007ff6:	77fb      	strb	r3, [r7, #31]
 8007ff8:	e05d      	b.n	80080b6 <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 8007ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ffc:	799a      	ldrb	r2, [r3, #6]
 8007ffe:	887b      	ldrh	r3, [r7, #2]
 8008000:	4611      	mov	r1, r2
 8008002:	4618      	mov	r0, r3
 8008004:	f7ff fe8b 	bl	8007d1e <VL53L1_calc_macro_period_us>
 8008008:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800800a:	6979      	ldr	r1, [r7, #20]
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f7ff ff17 	bl	8007e40 <VL53L1_calc_timeout_mclks>
 8008012:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	2bff      	cmp	r3, #255	@ 0xff
 8008018:	d901      	bls.n	800801e <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800801a:	23ff      	movs	r3, #255	@ 0xff
 800801c:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 8008022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008024:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 8008026:	6979      	ldr	r1, [r7, #20]
 8008028:	68b8      	ldr	r0, [r7, #8]
 800802a:	f7ff ff20 	bl	8007e6e <VL53L1_calc_encoded_timeout>
 800802e:	4603      	mov	r3, r0
 8008030:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008032:	8a7b      	ldrh	r3, [r7, #18]
 8008034:	0a1b      	lsrs	r3, r3, #8
 8008036:	b29b      	uxth	r3, r3
 8008038:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800803a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800803c:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800803e:	8a7b      	ldrh	r3, [r7, #18]
 8008040:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8008042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008044:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 8008046:	6979      	ldr	r1, [r7, #20]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f7ff ff10 	bl	8007e6e <VL53L1_calc_encoded_timeout>
 800804e:	4603      	mov	r3, r0
 8008050:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008052:	8a7b      	ldrh	r3, [r7, #18]
 8008054:	0a1b      	lsrs	r3, r3, #8
 8008056:	b29b      	uxth	r3, r3
 8008058:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800805a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800805c:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800805e:	8a7b      	ldrh	r3, [r7, #18]
 8008060:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8008062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008064:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 8008066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008068:	7a5a      	ldrb	r2, [r3, #9]
 800806a:	887b      	ldrh	r3, [r7, #2]
 800806c:	4611      	mov	r1, r2
 800806e:	4618      	mov	r0, r3
 8008070:	f7ff fe55 	bl	8007d1e <VL53L1_calc_macro_period_us>
 8008074:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 8008076:	6979      	ldr	r1, [r7, #20]
 8008078:	68b8      	ldr	r0, [r7, #8]
 800807a:	f7ff fef8 	bl	8007e6e <VL53L1_calc_encoded_timeout>
 800807e:	4603      	mov	r3, r0
 8008080:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008082:	8a7b      	ldrh	r3, [r7, #18]
 8008084:	0a1b      	lsrs	r3, r3, #8
 8008086:	b29b      	uxth	r3, r3
 8008088:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800808a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800808c:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800808e:	8a7b      	ldrh	r3, [r7, #18]
 8008090:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 8008092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008094:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 8008096:	6979      	ldr	r1, [r7, #20]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7ff fee8 	bl	8007e6e <VL53L1_calc_encoded_timeout>
 800809e:	4603      	mov	r3, r0
 80080a0:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80080a2:	8a7b      	ldrh	r3, [r7, #18]
 80080a4:	0a1b      	lsrs	r3, r3, #8
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 80080aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ac:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80080ae:	8a7b      	ldrh	r3, [r7, #18]
 80080b0:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 80080b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b4:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 80080b6:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3720      	adds	r7, #32
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b083      	sub	sp, #12
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	4603      	mov	r3, r0
 80080ca:	603a      	str	r2, [r7, #0]
 80080cc:	71fb      	strb	r3, [r7, #7]
 80080ce:	460b      	mov	r3, r1
 80080d0:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 80080d2:	79fb      	ldrb	r3, [r7, #7]
 80080d4:	2b07      	cmp	r3, #7
 80080d6:	d90a      	bls.n	80080ee <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 80080d8:	79bb      	ldrb	r3, [r7, #6]
 80080da:	00db      	lsls	r3, r3, #3
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	79fb      	ldrb	r3, [r7, #7]
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	3b71      	subs	r3, #113	@ 0x71
 80080e6:	b2da      	uxtb	r2, r3
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 80080ec:	e00a      	b.n	8008104 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 80080ee:	79bb      	ldrb	r3, [r7, #6]
 80080f0:	f1c3 030f 	rsb	r3, r3, #15
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	00db      	lsls	r3, r3, #3
 80080f8:	b2da      	uxtb	r2, r3
 80080fa:	79fb      	ldrb	r3, [r7, #7]
 80080fc:	4413      	add	r3, r2
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	701a      	strb	r2, [r3, #0]
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	4603      	mov	r3, r0
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
 800811c:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 800811e:	7bfb      	ldrb	r3, [r7, #15]
 8008120:	091b      	lsrs	r3, r3, #4
 8008122:	b2da      	uxtb	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8008128:	7bfb      	ldrb	r3, [r7, #15]
 800812a:	f003 030f 	and.w	r3, r3, #15
 800812e:	b2da      	uxtb	r2, r3
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	701a      	strb	r2, [r3, #0]

}
 8008134:	bf00      	nop
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	4603      	mov	r3, r0
 8008148:	603a      	str	r2, [r7, #0]
 800814a:	71fb      	strb	r3, [r7, #7]
 800814c:	460b      	mov	r3, r1
 800814e:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 8008150:	79bb      	ldrb	r3, [r7, #6]
 8008152:	011b      	lsls	r3, r3, #4
 8008154:	b2da      	uxtb	r2, r3
 8008156:	79fb      	ldrb	r3, [r7, #7]
 8008158:	4413      	add	r3, r2
 800815a:	b2da      	uxtb	r2, r3
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	701a      	strb	r2, [r3, #0]

}
 8008160:	bf00      	nop
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008174:	2300      	movs	r3, #0
 8008176:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	2203      	movs	r2, #3
 8008180:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2200      	movs	r2, #0
 80081c0:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 80081c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b087      	sub	sp, #28
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80081e0:	2300      	movs	r3, #0
 80081e2:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	229b      	movs	r2, #155	@ 0x9b
 80081f4:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 80081f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	371c      	adds	r7, #28
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 8008206:	b480      	push	{r7}
 8008208:	b085      	sub	sp, #20
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008212:	2300      	movs	r3, #0
 8008214:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f893 2163 	ldrb.w	r2, [r3, #355]	@ 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f893 2160 	ldrb.w	r2, [r3, #352]	@ 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f893 3163 	ldrb.w	r3, [r3, #355]	@ 0x163
 8008234:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008238:	b2da      	uxtb	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8008246:	f003 0303 	and.w	r3, r3, #3
 800824a:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8008256:	4413      	add	r3, r2
 8008258:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 218d 	strb.w	r2, [r3, #397]	@ 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f893 22ae 	ldrb.w	r2, [r3, #686]	@ 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f893 22ea 	ldrb.w	r2, [r3, #746]	@ 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f883 2187 	strb.w	r2, [r3, #391]	@ 0x187

	LOG_FUNCTION_END(status);

	return status;
 8008280:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3714      	adds	r7, #20
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	4603      	mov	r3, r0
 8008298:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 800829a:	2300      	movs	r3, #0
 800829c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800829e:	88fb      	ldrh	r3, [r7, #6]
 80082a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80082a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80082a8:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 80082aa:	68fb      	ldr	r3, [r7, #12]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3714      	adds	r7, #20
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	4603      	mov	r3, r0
 80082c0:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80082c2:	2300      	movs	r3, #0
 80082c4:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80082c6:	79fb      	ldrb	r3, [r7, #7]
 80082c8:	3301      	adds	r3, #1
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	005b      	lsls	r3, r3, #1
 80082ce:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3714      	adds	r7, #20
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 80082de:	b480      	push	{r7}
 80082e0:	b085      	sub	sp, #20
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	4603      	mov	r3, r0
 80082e6:	60b9      	str	r1, [r7, #8]
 80082e8:	607a      	str	r2, [r7, #4]
 80082ea:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 80082ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	da10      	bge.n	8008316 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 80082f4:	7bfb      	ldrb	r3, [r7, #15]
 80082f6:	43db      	mvns	r3, r3
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	f003 0307 	and.w	r3, r3, #7
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	3308      	adds	r3, #8
 8008302:	b2da      	uxtb	r2, r3
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 8008308:	7bfb      	ldrb	r3, [r7, #15]
 800830a:	3b80      	subs	r3, #128	@ 0x80
 800830c:	10db      	asrs	r3, r3, #3
 800830e:	b2da      	uxtb	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 8008314:	e00c      	b.n	8008330 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 8008316:	7bfb      	ldrb	r3, [r7, #15]
 8008318:	f003 0307 	and.w	r3, r3, #7
 800831c:	b2da      	uxtb	r2, r3
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 8008322:	7bfb      	ldrb	r3, [r7, #15]
 8008324:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8008328:	10db      	asrs	r3, r3, #3
 800832a:	b2da      	uxtb	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	701a      	strb	r2, [r3, #0]
}
 8008330:	bf00      	nop
 8008332:	3714      	adds	r7, #20
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	460b      	mov	r3, r1
 8008346:	607a      	str	r2, [r7, #4]
 8008348:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800834a:	2300      	movs	r3, #0
 800834c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800834e:	897b      	ldrh	r3, [r7, #10]
 8008350:	2b0a      	cmp	r3, #10
 8008352:	d802      	bhi.n	800835a <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8008354:	f06f 0309 	mvn.w	r3, #9
 8008358:	e047      	b.n	80083ea <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008362:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8008370:	f002 020f 	and.w	r2, r2, #15
 8008374:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8008376:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8008380:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008384:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8008386:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8008390:	f002 0203 	and.w	r2, r2, #3
 8008394:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8008396:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 80083a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80083a4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80083a6:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	88d8      	ldrh	r0, [r3, #6]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	3305      	adds	r3, #5
 80083b0:	461a      	mov	r2, r3
 80083b2:	2102      	movs	r1, #2
 80083b4:	f7ff fb77 	bl	8007aa6 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 80083c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 80083ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 80083d4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80083d8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80083da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 80083e4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80083e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3718      	adds	r7, #24
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b086      	sub	sp, #24
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	4603      	mov	r3, r0
 80083fa:	60b9      	str	r1, [r7, #8]
 80083fc:	607a      	str	r2, [r7, #4]
 80083fe:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008400:	2300      	movs	r3, #0
 8008402:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8008404:	89fb      	ldrh	r3, [r7, #14]
 8008406:	2b0a      	cmp	r3, #10
 8008408:	d802      	bhi.n	8008410 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800840a:	f06f 0309 	mvn.w	r3, #9
 800840e:	e046      	b.n	800849e <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008418:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	3301      	adds	r3, #1
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	f003 030f 	and.w	r3, r3, #15
 8008428:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	3302      	adds	r3, #2
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008438:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	3303      	adds	r3, #3
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	f003 0303 	and.w	r3, r3, #3
 8008448:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	3304      	adds	r3, #4
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008458:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	3305      	adds	r3, #5
 8008462:	4619      	mov	r1, r3
 8008464:	2002      	movs	r0, #2
 8008466:	f7ff fb49 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 800846a:	4603      	mov	r3, r0
 800846c:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	79da      	ldrb	r2, [r3, #7]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	7a1a      	ldrb	r2, [r3, #8]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	3309      	adds	r3, #9
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800848c:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	7a9a      	ldrb	r2, [r3, #10]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800849a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3718      	adds	r7, #24
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b086      	sub	sp, #24
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80084b0:	2300      	movs	r3, #0
 80084b2:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80084b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d108      	bne.n	80084ce <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 80084bc:	f107 020c 	add.w	r2, r7, #12
 80084c0:	230b      	movs	r3, #11
 80084c2:	2101      	movs	r1, #1
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f001 f8f3 	bl	80096b0 <VL53L1_ReadMulti>
 80084ca:	4603      	mov	r3, r0
 80084cc:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80084ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d108      	bne.n	80084e8 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 80084d6:	f107 030c 	add.w	r3, r7, #12
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	4619      	mov	r1, r3
 80084de:	200b      	movs	r0, #11
 80084e0:	f7ff ff87 	bl	80083f2 <VL53L1_i2c_decode_static_nvm_managed>
 80084e4:	4603      	mov	r3, r0
 80084e6:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80084e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3718      	adds	r7, #24
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b086      	sub	sp, #24
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	460b      	mov	r3, r1
 80084fe:	607a      	str	r2, [r7, #4]
 8008500:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008502:	2300      	movs	r3, #0
 8008504:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8008506:	897b      	ldrh	r3, [r7, #10]
 8008508:	2b16      	cmp	r3, #22
 800850a:	d802      	bhi.n	8008512 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800850c:	f06f 0309 	mvn.w	r3, #9
 8008510:	e076      	b.n	8008600 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8008522:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800852c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8008536:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8008540:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800854a:	f002 020f 	and.w	r2, r2, #15
 800854e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8008550:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800855a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8008564:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008568:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800856a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8008574:	f002 0203 	and.w	r2, r2, #3
 8008578:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800857a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	8958      	ldrh	r0, [r3, #10]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	3309      	adds	r3, #9
 8008584:	461a      	mov	r2, r3
 8008586:	2102      	movs	r1, #2
 8008588:	f7ff fa8d 	bl	8007aa6 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	330b      	adds	r3, #11
 8008596:	461a      	mov	r2, r3
 8008598:	2102      	movs	r1, #2
 800859a:	f7ff facf 	bl	8007b3c <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	330d      	adds	r3, #13
 80085a8:	461a      	mov	r2, r3
 80085aa:	2102      	movs	r1, #2
 80085ac:	f7ff fac6 	bl	8007b3c <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	8a18      	ldrh	r0, [r3, #16]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	330f      	adds	r3, #15
 80085b8:	461a      	mov	r2, r3
 80085ba:	2102      	movs	r1, #2
 80085bc:	f7ff fa73 	bl	8007aa6 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 80085c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085ca:	b218      	sxth	r0, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	3311      	adds	r3, #17
 80085d0:	461a      	mov	r2, r3
 80085d2:	2102      	movs	r1, #2
 80085d4:	f7ff fab2 	bl	8007b3c <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	3313      	adds	r3, #19
 80085e2:	461a      	mov	r2, r3
 80085e4:	2102      	movs	r1, #2
 80085e6:	f7ff faa9 	bl	8007b3c <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	3315      	adds	r3, #21
 80085f4:	461a      	mov	r2, r3
 80085f6:	2102      	movs	r1, #2
 80085f8:	f7ff faa0 	bl	8007b3c <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 80085fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3718      	adds	r7, #24
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	4603      	mov	r3, r0
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
 8008614:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008616:	2300      	movs	r3, #0
 8008618:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800861a:	89fb      	ldrh	r3, [r7, #14]
 800861c:	2b16      	cmp	r3, #22
 800861e:	d802      	bhi.n	8008626 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8008620:	f06f 0309 	mvn.w	r3, #9
 8008624:	e079      	b.n	800871a <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	785a      	ldrb	r2, [r3, #1]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	789a      	ldrb	r2, [r3, #2]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	78da      	ldrb	r2, [r3, #3]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	791a      	ldrb	r2, [r3, #4]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	3305      	adds	r3, #5
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	f003 030f 	and.w	r3, r3, #15
 8008658:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	799a      	ldrb	r2, [r3, #6]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	3307      	adds	r3, #7
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008670:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	3308      	adds	r3, #8
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	f003 0303 	and.w	r3, r3, #3
 8008680:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	3309      	adds	r3, #9
 800868a:	4619      	mov	r1, r3
 800868c:	2002      	movs	r0, #2
 800868e:	f7ff fa35 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 8008692:	4603      	mov	r3, r0
 8008694:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	330b      	adds	r3, #11
 800869e:	4619      	mov	r1, r3
 80086a0:	2002      	movs	r0, #2
 80086a2:	f7ff fa77 	bl	8007b94 <VL53L1_i2c_decode_int16_t>
 80086a6:	4603      	mov	r3, r0
 80086a8:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	330d      	adds	r3, #13
 80086b2:	4619      	mov	r1, r3
 80086b4:	2002      	movs	r0, #2
 80086b6:	f7ff fa6d 	bl	8007b94 <VL53L1_i2c_decode_int16_t>
 80086ba:	4603      	mov	r3, r0
 80086bc:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	330f      	adds	r3, #15
 80086c6:	4619      	mov	r1, r3
 80086c8:	2002      	movs	r0, #2
 80086ca:	f7ff fa17 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 80086ce:	4603      	mov	r3, r0
 80086d0:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	3311      	adds	r3, #17
 80086da:	4619      	mov	r1, r3
 80086dc:	2002      	movs	r0, #2
 80086de:	f7ff fa59 	bl	8007b94 <VL53L1_i2c_decode_int16_t>
 80086e2:	4603      	mov	r3, r0
 80086e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086e8:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	3313      	adds	r3, #19
 80086f2:	4619      	mov	r1, r3
 80086f4:	2002      	movs	r0, #2
 80086f6:	f7ff fa4d 	bl	8007b94 <VL53L1_i2c_decode_int16_t>
 80086fa:	4603      	mov	r3, r0
 80086fc:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	3315      	adds	r3, #21
 8008706:	4619      	mov	r1, r3
 8008708:	2002      	movs	r0, #2
 800870a:	f7ff fa43 	bl	8007b94 <VL53L1_i2c_decode_int16_t>
 800870e:	4603      	mov	r3, r0
 8008710:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 8008716:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3718      	adds	r7, #24
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b088      	sub	sp, #32
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800872c:	2300      	movs	r3, #0
 800872e:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8008730:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d108      	bne.n	800874a <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8008738:	f107 0208 	add.w	r2, r7, #8
 800873c:	2317      	movs	r3, #23
 800873e:	210d      	movs	r1, #13
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 ffb5 	bl	80096b0 <VL53L1_ReadMulti>
 8008746:	4603      	mov	r3, r0
 8008748:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800874a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d108      	bne.n	8008764 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8008752:	f107 0308 	add.w	r3, r7, #8
 8008756:	683a      	ldr	r2, [r7, #0]
 8008758:	4619      	mov	r1, r3
 800875a:	2017      	movs	r0, #23
 800875c:	f7ff ff54 	bl	8008608 <VL53L1_i2c_decode_customer_nvm_managed>
 8008760:	4603      	mov	r3, r0
 8008762:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8008764:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3720      	adds	r7, #32
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b086      	sub	sp, #24
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	460b      	mov	r3, r1
 800877a:	607a      	str	r2, [r7, #4]
 800877c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800877e:	2300      	movs	r3, #0
 8008780:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8008782:	897b      	ldrh	r3, [r7, #10]
 8008784:	2b1f      	cmp	r3, #31
 8008786:	d802      	bhi.n	800878e <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8008788:	f06f 0309 	mvn.w	r3, #9
 800878c:	e0cf      	b.n	800892e <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	881b      	ldrh	r3, [r3, #0]
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	2102      	movs	r1, #2
 8008796:	4618      	mov	r0, r3
 8008798:	f7ff f985 	bl	8007aa6 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 80087a4:	f002 0201 	and.w	r2, r2, #1
 80087a8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80087aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 80087b4:	f002 020f 	and.w	r2, r2, #15
 80087b8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80087ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 80087c4:	f002 020f 	and.w	r2, r2, #15
 80087c8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80087ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 80087d4:	f002 021f 	and.w	r2, r2, #31
 80087d8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80087da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80087e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80087e8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80087ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 80087f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80087f8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80087fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 8008804:	f002 0201 	and.w	r2, r2, #1
 8008808:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800880a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 8008814:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800881e:	f002 0201 	and.w	r2, r2, #1
 8008822:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8008824:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800882e:	f002 0203 	and.w	r2, r2, #3
 8008832:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8008834:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800883e:	f002 021f 	and.w	r2, r2, #31
 8008842:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8008844:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800884e:	f002 0203 	and.w	r2, r2, #3
 8008852:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8008854:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800885e:	f002 0203 	and.w	r2, r2, #3
 8008862:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 8008864:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800886e:	f002 0207 	and.w	r2, r2, #7
 8008872:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8008874:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800887e:	f002 021f 	and.w	r2, r2, #31
 8008882:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8008884:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800888e:	f002 0201 	and.w	r2, r2, #1
 8008892:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8008894:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800889e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 80088a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 80088b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 80088bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 80088c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 80088d0:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	8b18      	ldrh	r0, [r3, #24]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	3318      	adds	r3, #24
 80088da:	461a      	mov	r2, r3
 80088dc:	2102      	movs	r1, #2
 80088de:	f7ff f8e2 	bl	8007aa6 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 80088ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 80088f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 80088fe:	f002 020f 	and.w	r2, r2, #15
 8008902:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 8008904:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800890e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 8008918:	f002 020f 	and.w	r2, r2, #15
 800891c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800891e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 8008928:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800892a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800892e:	4618      	mov	r0, r3
 8008930:	3718      	adds	r7, #24
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b086      	sub	sp, #24
 800893a:	af00      	add	r7, sp, #0
 800893c:	60f8      	str	r0, [r7, #12]
 800893e:	460b      	mov	r3, r1
 8008940:	607a      	str	r2, [r7, #4]
 8008942:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008944:	2300      	movs	r3, #0
 8008946:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 8008948:	897b      	ldrh	r3, [r7, #10]
 800894a:	2b15      	cmp	r3, #21
 800894c:	d802      	bhi.n	8008954 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800894e:	f06f 0309 	mvn.w	r3, #9
 8008952:	e070      	b.n	8008a36 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8008964:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800896e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8008978:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800897c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800897e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8008984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008988:	b298      	uxth	r0, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	3304      	adds	r3, #4
 800898e:	461a      	mov	r2, r3
 8008990:	2102      	movs	r1, #2
 8008992:	f7ff f888 	bl	8007aa6 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800899e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80089a2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80089a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 80089ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 80089b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 80089c2:	f002 0201 	and.w	r2, r2, #1
 80089c6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80089c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 80089d2:	f002 0207 	and.w	r2, r2, #7
 80089d6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80089d8:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	8998      	ldrh	r0, [r3, #12]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	330c      	adds	r3, #12
 80089e2:	461a      	mov	r2, r3
 80089e4:	2102      	movs	r1, #2
 80089e6:	f7ff f85e 	bl	8007aa6 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	89d8      	ldrh	r0, [r3, #14]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	330e      	adds	r3, #14
 80089f2:	461a      	mov	r2, r3
 80089f4:	2102      	movs	r1, #2
 80089f6:	f7ff f856 	bl	8007aa6 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	8a18      	ldrh	r0, [r3, #16]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	3310      	adds	r3, #16
 8008a02:	461a      	mov	r2, r3
 8008a04:	2102      	movs	r1, #2
 8008a06:	f7ff f84e 	bl	8007aa6 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8008a12:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8008a1c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8008a26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8008a30:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8008a32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3718      	adds	r7, #24
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b086      	sub	sp, #24
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	60f8      	str	r0, [r7, #12]
 8008a46:	460b      	mov	r3, r1
 8008a48:	607a      	str	r2, [r7, #4]
 8008a4a:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 8008a50:	897b      	ldrh	r3, [r7, #10]
 8008a52:	2b16      	cmp	r3, #22
 8008a54:	d802      	bhi.n	8008a5c <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8008a56:	f06f 0309 	mvn.w	r3, #9
 8008a5a:	e06e      	b.n	8008b3a <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	f003 030f 	and.w	r3, r3, #15
 8008a64:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8008a72:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8008a7c:	f002 020f 	and.w	r2, r2, #15
 8008a80:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8008a82:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8008a8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8008a96:	f002 020f 	and.w	r2, r2, #15
 8008a9a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8008a9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8008aa6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8008ab0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008ab4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8008ab6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8008ac0:	f002 020f 	and.w	r2, r2, #15
 8008ac4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8008ac6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8008ad0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8008ada:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008ade:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8008ae0:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	8958      	ldrh	r0, [r3, #10]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	330a      	adds	r3, #10
 8008aea:	461a      	mov	r2, r3
 8008aec:	2102      	movs	r1, #2
 8008aee:	f7fe ffda 	bl	8007aa6 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	8998      	ldrh	r0, [r3, #12]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	330c      	adds	r3, #12
 8008afa:	461a      	mov	r2, r3
 8008afc:	2102      	movs	r1, #2
 8008afe:	f7fe ffd2 	bl	8007aa6 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8008b0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8008b14:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6918      	ldr	r0, [r3, #16]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	3312      	adds	r3, #18
 8008b1e:	461a      	mov	r2, r3
 8008b20:	2104      	movs	r1, #4
 8008b22:	f7ff f860 	bl	8007be6 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8008b2e:	f002 0201 	and.w	r2, r2, #1
 8008b32:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8008b34:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8008b36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3718      	adds	r7, #24
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b086      	sub	sp, #24
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	60f8      	str	r0, [r7, #12]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	607a      	str	r2, [r7, #4]
 8008b4e:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008b50:	2300      	movs	r3, #0
 8008b52:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8008b54:	897b      	ldrh	r3, [r7, #10]
 8008b56:	2b11      	cmp	r3, #17
 8008b58:	d802      	bhi.n	8008b60 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8008b5a:	f06f 0309 	mvn.w	r3, #9
 8008b5e:	e071      	b.n	8008c44 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	f003 0303 	and.w	r3, r3, #3
 8008b68:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	8858      	ldrh	r0, [r3, #2]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	3301      	adds	r3, #1
 8008b76:	461a      	mov	r2, r3
 8008b78:	2102      	movs	r1, #2
 8008b7a:	f7fe ff94 	bl	8007aa6 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	8898      	ldrh	r0, [r3, #4]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	3303      	adds	r3, #3
 8008b86:	461a      	mov	r2, r3
 8008b88:	2102      	movs	r1, #2
 8008b8a:	f7fe ff8c 	bl	8007aa6 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8008b96:	f002 0201 	and.w	r2, r2, #1
 8008b9a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8008b9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8008ba6:	f002 0207 	and.w	r2, r2, #7
 8008baa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8008bac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8008bb6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8008bc0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8008bca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008bce:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8008bd0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8008bda:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008bde:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8008be0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8008bea:	f002 0203 	and.w	r2, r2, #3
 8008bee:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8008bf0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8008bfa:	f002 0203 	and.w	r2, r2, #3
 8008bfe:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8008c00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8008c0a:	f002 020f 	and.w	r2, r2, #15
 8008c0e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8008c10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8008c1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8008c24:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8008c2e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8008c38:	f002 0203 	and.w	r2, r2, #3
 8008c3c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8008c3e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8008c40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3718      	adds	r7, #24
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b087      	sub	sp, #28
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	460b      	mov	r3, r1
 8008c56:	607a      	str	r2, [r7, #4]
 8008c58:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 8008c5e:	897b      	ldrh	r3, [r7, #10]
 8008c60:	2b04      	cmp	r3, #4
 8008c62:	d802      	bhi.n	8008c6a <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8008c64:	f06f 0309 	mvn.w	r3, #9
 8008c68:	e025      	b.n	8008cb6 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8008c80:	f002 0201 	and.w	r2, r2, #1
 8008c84:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8008c86:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8008c90:	f002 0201 	and.w	r2, r2, #1
 8008c94:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8008c96:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8008ca0:	f002 0203 	and.w	r2, r2, #3
 8008ca4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8008ca6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8008cb0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8008cb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	371c      	adds	r7, #28
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b086      	sub	sp, #24
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	4603      	mov	r3, r0
 8008cca:	60b9      	str	r1, [r7, #8]
 8008ccc:	607a      	str	r2, [r7, #4]
 8008cce:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 8008cd4:	89fb      	ldrh	r3, [r7, #14]
 8008cd6:	2b2b      	cmp	r3, #43	@ 0x2b
 8008cd8:	d802      	bhi.n	8008ce0 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8008cda:	f06f 0309 	mvn.w	r3, #9
 8008cde:	e0e2      	b.n	8008ea6 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ce8:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	785a      	ldrb	r2, [r3, #1]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	3302      	adds	r3, #2
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	f003 030f 	and.w	r3, r3, #15
 8008d00:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	78da      	ldrb	r2, [r3, #3]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	3304      	adds	r3, #4
 8008d12:	4619      	mov	r1, r3
 8008d14:	2002      	movs	r0, #2
 8008d16:	f7fe fef1 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	3306      	adds	r3, #6
 8008d26:	4619      	mov	r1, r3
 8008d28:	2002      	movs	r0, #2
 8008d2a:	f7fe fee7 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	3308      	adds	r3, #8
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	2002      	movs	r0, #2
 8008d3e:	f7fe fedd 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 8008d42:	4603      	mov	r3, r0
 8008d44:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	330a      	adds	r3, #10
 8008d4e:	4619      	mov	r1, r3
 8008d50:	2002      	movs	r0, #2
 8008d52:	f7fe fed3 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 8008d56:	4603      	mov	r3, r0
 8008d58:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	330c      	adds	r3, #12
 8008d62:	4619      	mov	r1, r3
 8008d64:	2002      	movs	r0, #2
 8008d66:	f7fe fec9 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	330e      	adds	r3, #14
 8008d76:	4619      	mov	r1, r3
 8008d78:	2002      	movs	r0, #2
 8008d7a:	f7fe febf 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	3310      	adds	r3, #16
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	2002      	movs	r0, #2
 8008d8e:	f7fe feb5 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 8008d92:	4603      	mov	r3, r0
 8008d94:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	3312      	adds	r3, #18
 8008d9e:	4619      	mov	r1, r3
 8008da0:	2002      	movs	r0, #2
 8008da2:	f7fe feab 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 8008da6:	4603      	mov	r3, r0
 8008da8:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	3314      	adds	r3, #20
 8008db2:	4619      	mov	r1, r3
 8008db4:	2002      	movs	r0, #2
 8008db6:	f7fe fea1 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	3316      	adds	r3, #22
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	2002      	movs	r0, #2
 8008dca:	f7fe fe97 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	3318      	adds	r3, #24
 8008dda:	4619      	mov	r1, r3
 8008ddc:	2002      	movs	r0, #2
 8008dde:	f7fe fe8d 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 8008de2:	4603      	mov	r3, r0
 8008de4:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	331a      	adds	r3, #26
 8008dee:	4619      	mov	r1, r3
 8008df0:	2002      	movs	r0, #2
 8008df2:	f7fe fe83 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 8008df6:	4603      	mov	r3, r0
 8008df8:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	331c      	adds	r3, #28
 8008e02:	4619      	mov	r1, r3
 8008e04:	2002      	movs	r0, #2
 8008e06:	f7fe fe79 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	331e      	adds	r3, #30
 8008e16:	4619      	mov	r1, r3
 8008e18:	2002      	movs	r0, #2
 8008e1a:	f7fe fe6f 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	3320      	adds	r3, #32
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	2002      	movs	r0, #2
 8008e2e:	f7fe fe65 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 8008e32:	4603      	mov	r3, r0
 8008e34:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	3322      	adds	r3, #34	@ 0x22
 8008e3e:	4619      	mov	r1, r3
 8008e40:	2002      	movs	r0, #2
 8008e42:	f7fe fe5b 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 8008e46:	4603      	mov	r3, r0
 8008e48:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	3324      	adds	r3, #36	@ 0x24
 8008e52:	4619      	mov	r1, r3
 8008e54:	2002      	movs	r0, #2
 8008e56:	f7fe fe51 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	3326      	adds	r3, #38	@ 0x26
 8008e66:	4619      	mov	r1, r3
 8008e68:	2002      	movs	r0, #2
 8008e6a:	f7fe fe47 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	3328      	adds	r3, #40	@ 0x28
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	2002      	movs	r0, #2
 8008e7e:	f7fe fe3d 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 8008e82:	4603      	mov	r3, r0
 8008e84:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1 =
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8008ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3718      	adds	r7, #24
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b086      	sub	sp, #24
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	60b9      	str	r1, [r7, #8]
 8008eb8:	607a      	str	r2, [r7, #4]
 8008eba:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 8008ec0:	89fb      	ldrh	r3, [r7, #14]
 8008ec2:	2b20      	cmp	r3, #32
 8008ec4:	d802      	bhi.n	8008ecc <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8008ec6:	f06f 0309 	mvn.w	r3, #9
 8008eca:	e04d      	b.n	8008f68 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 8008ecc:	68b9      	ldr	r1, [r7, #8]
 8008ece:	2004      	movs	r0, #4
 8008ed0:	f7fe feb3 	bl	8007c3a <VL53L1_i2c_decode_uint32_t>
 8008ed4:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	3304      	adds	r3, #4
 8008ede:	4619      	mov	r1, r3
 8008ee0:	2004      	movs	r0, #4
 8008ee2:	f7fe feaa 	bl	8007c3a <VL53L1_i2c_decode_uint32_t>
 8008ee6:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	3308      	adds	r3, #8
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	2004      	movs	r0, #4
 8008ef4:	f7fe febe 	bl	8007c74 <VL53L1_i2c_decode_int32_t>
 8008ef8:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	330c      	adds	r3, #12
 8008f02:	4619      	mov	r1, r3
 8008f04:	2004      	movs	r0, #4
 8008f06:	f7fe fe98 	bl	8007c3a <VL53L1_i2c_decode_uint32_t>
 8008f0a:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	3310      	adds	r3, #16
 8008f14:	4619      	mov	r1, r3
 8008f16:	2004      	movs	r0, #4
 8008f18:	f7fe fe8f 	bl	8007c3a <VL53L1_i2c_decode_uint32_t>
 8008f1c:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	3314      	adds	r3, #20
 8008f26:	4619      	mov	r1, r3
 8008f28:	2004      	movs	r0, #4
 8008f2a:	f7fe fe86 	bl	8007c3a <VL53L1_i2c_decode_uint32_t>
 8008f2e:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	3318      	adds	r3, #24
 8008f38:	4619      	mov	r1, r3
 8008f3a:	2004      	movs	r0, #4
 8008f3c:	f7fe fe9a 	bl	8007c74 <VL53L1_i2c_decode_int32_t>
 8008f40:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	331c      	adds	r3, #28
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	2004      	movs	r0, #4
 8008f4e:	f7fe fe74 	bl	8007c3a <VL53L1_i2c_decode_uint32_t>
 8008f52:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8008f64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3718      	adds	r7, #24
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b086      	sub	sp, #24
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	4603      	mov	r3, r0
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	607a      	str	r2, [r7, #4]
 8008f7c:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 8008f82:	89fb      	ldrh	r3, [r7, #14]
 8008f84:	2b37      	cmp	r3, #55	@ 0x37
 8008f86:	d802      	bhi.n	8008f8e <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8008f88:	f06f 0309 	mvn.w	r3, #9
 8008f8c:	e15e      	b.n	800924c <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 8008f8e:	68b9      	ldr	r1, [r7, #8]
 8008f90:	2002      	movs	r0, #2
 8008f92:	f7fe fdb3 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 8008f96:	4603      	mov	r3, r0
 8008f98:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	3302      	adds	r3, #2
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fa8:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	3303      	adds	r3, #3
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008fb8:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	3304      	adds	r3, #4
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	f003 0303 	and.w	r3, r3, #3
 8008fc8:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	3305      	adds	r3, #5
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	f003 0301 	and.w	r3, r3, #1
 8008fd8:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	3306      	adds	r3, #6
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008fe8:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	3307      	adds	r3, #7
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ff8:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	3308      	adds	r3, #8
 8009002:	4619      	mov	r1, r3
 8009004:	2002      	movs	r0, #2
 8009006:	f7fe fd79 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 800900a:	4603      	mov	r3, r0
 800900c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009010:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	330a      	adds	r3, #10
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	f003 0303 	and.w	r3, r3, #3
 8009020:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	330b      	adds	r3, #11
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	f003 0303 	and.w	r3, r3, #3
 8009030:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	330c      	adds	r3, #12
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	f003 030f 	and.w	r3, r3, #15
 8009040:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	330d      	adds	r3, #13
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	f003 0307 	and.w	r3, r3, #7
 8009050:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	330e      	adds	r3, #14
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	f003 0301 	and.w	r3, r3, #1
 8009060:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	330f      	adds	r3, #15
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	f003 0303 	and.w	r3, r3, #3
 8009070:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	7c1a      	ldrb	r2, [r3, #16]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	7c5a      	ldrb	r2, [r3, #17]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	3312      	adds	r3, #18
 800908a:	4619      	mov	r1, r3
 800908c:	2002      	movs	r0, #2
 800908e:	f7fe fd35 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 8009092:	4603      	mov	r3, r0
 8009094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009098:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	3316      	adds	r3, #22
 80090a2:	4619      	mov	r1, r3
 80090a4:	2002      	movs	r0, #2
 80090a6:	f7fe fd29 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 80090aa:	4603      	mov	r3, r0
 80090ac:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	3318      	adds	r3, #24
 80090b6:	4619      	mov	r1, r3
 80090b8:	2002      	movs	r0, #2
 80090ba:	f7fe fd1f 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 80090be:	4603      	mov	r3, r0
 80090c0:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	331a      	adds	r3, #26
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	f003 0301 	and.w	r3, r3, #1
 80090d0:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	331b      	adds	r3, #27
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	f003 0307 	and.w	r3, r3, #7
 80090e0:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	7f1a      	ldrb	r2, [r3, #28]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	7f5a      	ldrb	r2, [r3, #29]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	331e      	adds	r3, #30
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009100:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	331f      	adds	r3, #31
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009110:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	3320      	adds	r3, #32
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	f003 0303 	and.w	r3, r3, #3
 8009120:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	3321      	adds	r3, #33	@ 0x21
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	f003 030f 	and.w	r3, r3, #15
 8009130:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	3325      	adds	r3, #37	@ 0x25
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	f003 0301 	and.w	r3, r3, #1
 8009164:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	3326      	adds	r3, #38	@ 0x26
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	f003 0303 	and.w	r3, r3, #3
 8009176:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	3327      	adds	r3, #39	@ 0x27
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	f003 031f 	and.w	r3, r3, #31
 8009188:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	3328      	adds	r3, #40	@ 0x28
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	f003 031f 	and.w	r3, r3, #31
 800919a:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	3329      	adds	r3, #41	@ 0x29
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	f003 031f 	and.w	r3, r3, #31
 80091ac:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	332a      	adds	r3, #42	@ 0x2a
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	f003 0301 	and.w	r3, r3, #1
 80091be:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	332b      	adds	r3, #43	@ 0x2b
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	f003 0301 	and.w	r3, r3, #1
 80091d0:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	332c      	adds	r3, #44	@ 0x2c
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	f003 0303 	and.w	r3, r3, #3
 80091e2:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	332d      	adds	r3, #45	@ 0x2d
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80091f4:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	332e      	adds	r3, #46	@ 0x2e
 8009200:	4619      	mov	r1, r3
 8009202:	2004      	movs	r0, #4
 8009204:	f7fe fd19 	bl	8007c3a <VL53L1_i2c_decode_uint32_t>
 8009208:	4603      	mov	r3, r0
 800920a:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	3332      	adds	r3, #50	@ 0x32
 8009216:	4619      	mov	r1, r3
 8009218:	2004      	movs	r0, #4
 800921a:	f7fe fd0e 	bl	8007c3a <VL53L1_i2c_decode_uint32_t>
 800921e:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	631a      	str	r2, [r3, #48]	@ 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	3336      	adds	r3, #54	@ 0x36
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	f003 0301 	and.w	r3, r3, #1
 800922e:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	3337      	adds	r3, #55	@ 0x37
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	f003 0301 	and.w	r3, r3, #1
 8009240:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	LOG_FUNCTION_END(status);

	return status;
 8009248:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3718      	adds	r7, #24
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b086      	sub	sp, #24
 8009258:	af00      	add	r7, sp, #0
 800925a:	4603      	mov	r3, r0
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
 8009260:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009262:	2300      	movs	r3, #0
 8009264:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 8009266:	89fb      	ldrh	r3, [r7, #14]
 8009268:	2b30      	cmp	r3, #48	@ 0x30
 800926a:	d802      	bhi.n	8009272 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800926c:	f06f 0309 	mvn.w	r3, #9
 8009270:	e112      	b.n	8009498 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	785a      	ldrb	r2, [r3, #1]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	789a      	ldrb	r2, [r3, #2]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	3303      	adds	r3, #3
 800928e:	4619      	mov	r1, r3
 8009290:	2002      	movs	r0, #2
 8009292:	f7fe fc33 	bl	8007afc <VL53L1_i2c_decode_uint16_t>
 8009296:	4603      	mov	r3, r0
 8009298:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	3305      	adds	r3, #5
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092a8:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	3306      	adds	r3, #6
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	f003 0307 	and.w	r3, r3, #7
 80092b8:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	3307      	adds	r3, #7
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	f003 0307 	and.w	r3, r3, #7
 80092c8:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	3308      	adds	r3, #8
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092d8:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	3309      	adds	r3, #9
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092e8:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	330a      	adds	r3, #10
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	f003 0301 	and.w	r3, r3, #1
 80092f8:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	330b      	adds	r3, #11
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009308:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	330c      	adds	r3, #12
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	f003 0301 	and.w	r3, r3, #1
 8009318:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	330d      	adds	r3, #13
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009328:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	330e      	adds	r3, #14
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009338:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	7bda      	ldrb	r2, [r3, #15]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	7c1a      	ldrb	r2, [r3, #16]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	7c5a      	ldrb	r2, [r3, #17]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	7c9a      	ldrb	r2, [r3, #18]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	7cda      	ldrb	r2, [r3, #19]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	7d1a      	ldrb	r2, [r3, #20]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	7d5a      	ldrb	r2, [r3, #21]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	7d9a      	ldrb	r2, [r3, #22]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	7dda      	ldrb	r2, [r3, #23]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	7e1a      	ldrb	r2, [r3, #24]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	7e5a      	ldrb	r2, [r3, #25]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	7e9a      	ldrb	r2, [r3, #26]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	7eda      	ldrb	r2, [r3, #27]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	7f1a      	ldrb	r2, [r3, #28]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	7f5a      	ldrb	r2, [r3, #29]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	7f9a      	ldrb	r2, [r3, #30]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	7fda      	ldrb	r2, [r3, #31]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	f893 2020 	ldrb.w	r2, [r3, #32]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8009494:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009498:	4618      	mov	r0, r3
 800949a:	3718      	adds	r7, #24
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b090      	sub	sp, #64	@ 0x40
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80094aa:	2300      	movs	r3, #0
 80094ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80094b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10a      	bne.n	80094ce <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 80094b8:	f107 020c 	add.w	r2, r7, #12
 80094bc:	2331      	movs	r3, #49	@ 0x31
 80094be:	f240 110f 	movw	r1, #271	@ 0x10f
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f8f4 	bl	80096b0 <VL53L1_ReadMulti>
 80094c8:	4603      	mov	r3, r0
 80094ca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80094ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d109      	bne.n	80094ea <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 80094d6:	f107 030c 	add.w	r3, r7, #12
 80094da:	683a      	ldr	r2, [r7, #0]
 80094dc:	4619      	mov	r1, r3
 80094de:	2031      	movs	r0, #49	@ 0x31
 80094e0:	f7ff feb8 	bl	8009254 <VL53L1_i2c_decode_nvm_copy_data>
 80094e4:	4603      	mov	r3, r0
 80094e6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80094ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3740      	adds	r7, #64	@ 0x40
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b086      	sub	sp, #24
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
 80094fe:	6039      	str	r1, [r7, #0]
	 * Determines if new range data is ready by reading bit 0 of
	 * VL53L1_GPIO__TIO_HV_STATUS to determine the current state
	 * of output interrupt pin
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009500:	2300      	movs	r3, #0
 8009502:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8009508:	2300      	movs	r3, #0
 800950a:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 800950c:	2300      	movs	r3, #0
 800950e:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8009510:	2300      	movs	r3, #0
 8009512:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	f893 3170 	ldrb.w	r3, [r3, #368]	@ 0x170
	gpio__mux_active_high_hv =
 800951a:	f003 0310 	and.w	r3, r3, #16
 800951e:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8009520:	7bfb      	ldrb	r3, [r7, #15]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d102      	bne.n	800952c <VL53L1_is_new_data_ready+0x36>
		interrupt_ready = 0x01;
 8009526:	2301      	movs	r3, #1
 8009528:	75fb      	strb	r3, [r7, #23]
 800952a:	e001      	b.n	8009530 <VL53L1_is_new_data_ready+0x3a>
	else
		interrupt_ready = 0x00;
 800952c:	2300      	movs	r3, #0
 800952e:	75fb      	strb	r3, [r7, #23]

	/* read current range interrupt state */

	status = VL53L1_RdByte(
 8009530:	f107 030e 	add.w	r3, r7, #14
 8009534:	461a      	mov	r2, r3
 8009536:	2131      	movs	r1, #49	@ 0x31
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f919 	bl	8009770 <VL53L1_RdByte>
 800953e:	4603      	mov	r3, r0
 8009540:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);

	/* set *pready = 1 if new range data ready complete zero otherwise */

	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8009542:	7bbb      	ldrb	r3, [r7, #14]
 8009544:	f003 0201 	and.w	r2, r3, #1
 8009548:	7dfb      	ldrb	r3, [r7, #23]
 800954a:	429a      	cmp	r2, r3
 800954c:	d103      	bne.n	8009556 <VL53L1_is_new_data_ready+0x60>
		*pready = 0x01;
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	2201      	movs	r2, #1
 8009552:	701a      	strb	r2, [r3, #0]
 8009554:	e002      	b.n	800955c <VL53L1_is_new_data_ready+0x66>
	else
		*pready = 0x00;
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	2200      	movs	r2, #0
 800955a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800955c:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8009560:	4618      	mov	r0, r3
 8009562:	3718      	adds	r7, #24
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b086      	sub	sp, #24
 800956c:	af02      	add	r7, sp, #8
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8009572:	2300      	movs	r3, #0
 8009574:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 8009576:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 f98a 	bl	8009894 <VL53L1_WaitUs>
 8009580:	4603      	mov	r3, r0
 8009582:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8009584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d10b      	bne.n	80095a4 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 800958c:	2301      	movs	r3, #1
 800958e:	9301      	str	r3, [sp, #4]
 8009590:	2301      	movs	r3, #1
 8009592:	9300      	str	r3, [sp, #0]
 8009594:	2301      	movs	r3, #1
 8009596:	22e5      	movs	r2, #229	@ 0xe5
 8009598:	6839      	ldr	r1, [r7, #0]
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f990 	bl	80098c0 <VL53L1_WaitValueMaskEx>
 80095a0:	4603      	mov	r3, r0
 80095a2:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 80095a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d103      	bne.n	80095b4 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 80095ac:	2103      	movs	r1, #3
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f7fe f85d 	bl	800766e <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 80095b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b088      	sub	sp, #32
 80095c4:	af02      	add	r7, sp, #8
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	330a      	adds	r3, #10
 80095d0:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f8d3 03a0 	ldr.w	r0, [r3, #928]	@ 0x3a0
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f893 3398 	ldrb.w	r3, [r3, #920]	@ 0x398
 80095de:	4619      	mov	r1, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	9300      	str	r3, [sp, #0]
 80095e8:	4613      	mov	r3, r2
 80095ea:	68ba      	ldr	r2, [r7, #8]
 80095ec:	f7f8 f9d4 	bl	8001998 <HAL_I2C_Master_Transmit>
 80095f0:	4603      	mov	r3, r0
 80095f2:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80095f4:	693b      	ldr	r3, [r7, #16]
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3718      	adds	r7, #24
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}

080095fe <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 80095fe:	b580      	push	{r7, lr}
 8009600:	b088      	sub	sp, #32
 8009602:	af02      	add	r7, sp, #8
 8009604:	60f8      	str	r0, [r7, #12]
 8009606:	60b9      	str	r1, [r7, #8]
 8009608:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	330a      	adds	r3, #10
 800960e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f8d3 03a0 	ldr.w	r0, [r3, #928]	@ 0x3a0
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f893 3398 	ldrb.w	r3, [r3, #920]	@ 0x398
 800961c:	f043 0301 	orr.w	r3, r3, #1
 8009620:	b2db      	uxtb	r3, r3
 8009622:	4619      	mov	r1, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	b29a      	uxth	r2, r3
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	9300      	str	r3, [sp, #0]
 800962c:	4613      	mov	r3, r2
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	f7f8 faa6 	bl	8001b80 <HAL_I2C_Master_Receive>
 8009634:	4603      	mov	r3, r0
 8009636:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8009638:	693b      	ldr	r3, [r7, #16]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3718      	adds	r7, #24
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
	...

08009644 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8009644:	b580      	push	{r7, lr}
 8009646:	b086      	sub	sp, #24
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	607a      	str	r2, [r7, #4]
 800964e:	603b      	str	r3, [r7, #0]
 8009650:	460b      	mov	r3, r1
 8009652:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009654:	2300      	movs	r3, #0
 8009656:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	2bff      	cmp	r3, #255	@ 0xff
 800965c:	d902      	bls.n	8009664 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 800965e:	f06f 0303 	mvn.w	r3, #3
 8009662:	e01d      	b.n	80096a0 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8009664:	897b      	ldrh	r3, [r7, #10]
 8009666:	0a1b      	lsrs	r3, r3, #8
 8009668:	b29b      	uxth	r3, r3
 800966a:	b2da      	uxtb	r2, r3
 800966c:	4b0e      	ldr	r3, [pc, #56]	@ (80096a8 <VL53L1_WriteMulti+0x64>)
 800966e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8009670:	897b      	ldrh	r3, [r7, #10]
 8009672:	b2da      	uxtb	r2, r3
 8009674:	4b0c      	ldr	r3, [pc, #48]	@ (80096a8 <VL53L1_WriteMulti+0x64>)
 8009676:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8009678:	683a      	ldr	r2, [r7, #0]
 800967a:	6879      	ldr	r1, [r7, #4]
 800967c:	480b      	ldr	r0, [pc, #44]	@ (80096ac <VL53L1_WriteMulti+0x68>)
 800967e:	f001 f886 	bl	800a78e <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	3302      	adds	r3, #2
 8009686:	461a      	mov	r2, r3
 8009688:	4907      	ldr	r1, [pc, #28]	@ (80096a8 <VL53L1_WriteMulti+0x64>)
 800968a:	68f8      	ldr	r0, [r7, #12]
 800968c:	f7ff ff98 	bl	80095c0 <_I2CWrite>
 8009690:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d001      	beq.n	800969c <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8009698:	23f3      	movs	r3, #243	@ 0xf3
 800969a:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 800969c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3718      	adds	r7, #24
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	20000304 	.word	0x20000304
 80096ac:	20000306 	.word	0x20000306

080096b0 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b086      	sub	sp, #24
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	607a      	str	r2, [r7, #4]
 80096ba:	603b      	str	r3, [r7, #0]
 80096bc:	460b      	mov	r3, r1
 80096be:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80096c0:	2300      	movs	r3, #0
 80096c2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80096c4:	897b      	ldrh	r3, [r7, #10]
 80096c6:	0a1b      	lsrs	r3, r3, #8
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	b2da      	uxtb	r2, r3
 80096cc:	4b12      	ldr	r3, [pc, #72]	@ (8009718 <VL53L1_ReadMulti+0x68>)
 80096ce:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80096d0:	897b      	ldrh	r3, [r7, #10]
 80096d2:	b2da      	uxtb	r2, r3
 80096d4:	4b10      	ldr	r3, [pc, #64]	@ (8009718 <VL53L1_ReadMulti+0x68>)
 80096d6:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80096d8:	2202      	movs	r2, #2
 80096da:	490f      	ldr	r1, [pc, #60]	@ (8009718 <VL53L1_ReadMulti+0x68>)
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f7ff ff6f 	bl	80095c0 <_I2CWrite>
 80096e2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d002      	beq.n	80096f0 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80096ea:	23f3      	movs	r3, #243	@ 0xf3
 80096ec:	75fb      	strb	r3, [r7, #23]
        goto done;
 80096ee:	e00c      	b.n	800970a <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80096f0:	683a      	ldr	r2, [r7, #0]
 80096f2:	6879      	ldr	r1, [r7, #4]
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f7ff ff82 	bl	80095fe <_I2CRead>
 80096fa:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d002      	beq.n	8009708 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8009702:	23f3      	movs	r3, #243	@ 0xf3
 8009704:	75fb      	strb	r3, [r7, #23]
 8009706:	e000      	b.n	800970a <VL53L1_ReadMulti+0x5a>
    }
done:
 8009708:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800970a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800970e:	4618      	mov	r0, r3
 8009710:	3718      	adds	r7, #24
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	20000304 	.word	0x20000304

0800971c <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	460b      	mov	r3, r1
 8009726:	807b      	strh	r3, [r7, #2]
 8009728:	4613      	mov	r3, r2
 800972a:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800972c:	2300      	movs	r3, #0
 800972e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8009730:	887b      	ldrh	r3, [r7, #2]
 8009732:	0a1b      	lsrs	r3, r3, #8
 8009734:	b29b      	uxth	r3, r3
 8009736:	b2da      	uxtb	r2, r3
 8009738:	4b0c      	ldr	r3, [pc, #48]	@ (800976c <VL53L1_WrByte+0x50>)
 800973a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800973c:	887b      	ldrh	r3, [r7, #2]
 800973e:	b2da      	uxtb	r2, r3
 8009740:	4b0a      	ldr	r3, [pc, #40]	@ (800976c <VL53L1_WrByte+0x50>)
 8009742:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8009744:	4a09      	ldr	r2, [pc, #36]	@ (800976c <VL53L1_WrByte+0x50>)
 8009746:	787b      	ldrb	r3, [r7, #1]
 8009748:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800974a:	2203      	movs	r2, #3
 800974c:	4907      	ldr	r1, [pc, #28]	@ (800976c <VL53L1_WrByte+0x50>)
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f7ff ff36 	bl	80095c0 <_I2CWrite>
 8009754:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d001      	beq.n	8009760 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800975c:	23f3      	movs	r3, #243	@ 0xf3
 800975e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8009760:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	20000304 	.word	0x20000304

08009770 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8009770:	b580      	push	{r7, lr}
 8009772:	b086      	sub	sp, #24
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	460b      	mov	r3, r1
 800977a:	607a      	str	r2, [r7, #4]
 800977c:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800977e:	2300      	movs	r3, #0
 8009780:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8009782:	897b      	ldrh	r3, [r7, #10]
 8009784:	0a1b      	lsrs	r3, r3, #8
 8009786:	b29b      	uxth	r3, r3
 8009788:	b2da      	uxtb	r2, r3
 800978a:	4b12      	ldr	r3, [pc, #72]	@ (80097d4 <VL53L1_RdByte+0x64>)
 800978c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800978e:	897b      	ldrh	r3, [r7, #10]
 8009790:	b2da      	uxtb	r2, r3
 8009792:	4b10      	ldr	r3, [pc, #64]	@ (80097d4 <VL53L1_RdByte+0x64>)
 8009794:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8009796:	2202      	movs	r2, #2
 8009798:	490e      	ldr	r1, [pc, #56]	@ (80097d4 <VL53L1_RdByte+0x64>)
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f7ff ff10 	bl	80095c0 <_I2CWrite>
 80097a0:	6138      	str	r0, [r7, #16]
    if( status_int ){
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d002      	beq.n	80097ae <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80097a8:	23f3      	movs	r3, #243	@ 0xf3
 80097aa:	75fb      	strb	r3, [r7, #23]
        goto done;
 80097ac:	e00c      	b.n	80097c8 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 80097ae:	2201      	movs	r2, #1
 80097b0:	6879      	ldr	r1, [r7, #4]
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f7ff ff23 	bl	80095fe <_I2CRead>
 80097b8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d002      	beq.n	80097c6 <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80097c0:	23f3      	movs	r3, #243	@ 0xf3
 80097c2:	75fb      	strb	r3, [r7, #23]
 80097c4:	e000      	b.n	80097c8 <VL53L1_RdByte+0x58>
    }
done:
 80097c6:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 80097c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3718      	adds	r7, #24
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	20000304 	.word	0x20000304

080097d8 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 80097d8:	b580      	push	{r7, lr}
 80097da:	b086      	sub	sp, #24
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	460b      	mov	r3, r1
 80097e2:	607a      	str	r2, [r7, #4]
 80097e4:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80097e6:	2300      	movs	r3, #0
 80097e8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80097ea:	897b      	ldrh	r3, [r7, #10]
 80097ec:	0a1b      	lsrs	r3, r3, #8
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	b2da      	uxtb	r2, r3
 80097f2:	4b17      	ldr	r3, [pc, #92]	@ (8009850 <VL53L1_RdWord+0x78>)
 80097f4:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80097f6:	897b      	ldrh	r3, [r7, #10]
 80097f8:	b2da      	uxtb	r2, r3
 80097fa:	4b15      	ldr	r3, [pc, #84]	@ (8009850 <VL53L1_RdWord+0x78>)
 80097fc:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80097fe:	2202      	movs	r2, #2
 8009800:	4913      	ldr	r1, [pc, #76]	@ (8009850 <VL53L1_RdWord+0x78>)
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f7ff fedc 	bl	80095c0 <_I2CWrite>
 8009808:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d002      	beq.n	8009816 <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8009810:	23f3      	movs	r3, #243	@ 0xf3
 8009812:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009814:	e015      	b.n	8009842 <VL53L1_RdWord+0x6a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8009816:	2202      	movs	r2, #2
 8009818:	490d      	ldr	r1, [pc, #52]	@ (8009850 <VL53L1_RdWord+0x78>)
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f7ff feef 	bl	80095fe <_I2CRead>
 8009820:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d002      	beq.n	800982e <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8009828:	23f3      	movs	r3, #243	@ 0xf3
 800982a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800982c:	e009      	b.n	8009842 <VL53L1_RdWord+0x6a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800982e:	4b08      	ldr	r3, [pc, #32]	@ (8009850 <VL53L1_RdWord+0x78>)
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	021b      	lsls	r3, r3, #8
 8009834:	b29b      	uxth	r3, r3
 8009836:	4a06      	ldr	r2, [pc, #24]	@ (8009850 <VL53L1_RdWord+0x78>)
 8009838:	7852      	ldrb	r2, [r2, #1]
 800983a:	4413      	add	r3, r2
 800983c:	b29a      	uxth	r2, r3
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8009842:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3718      	adds	r7, #24
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	20000304 	.word	0x20000304

08009854 <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 8009854:	b480      	push	{r7}
 8009856:	b085      	sub	sp, #20
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800985c:	2300      	movs	r3, #0
 800985e:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8009866:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800986a:	4618      	mov	r0, r3
 800986c:	3714      	adds	r7, #20
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 8009876:	b580      	push	{r7, lr}
 8009878:	b082      	sub	sp, #8
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	4618      	mov	r0, r3
 8009884:	f7f7 fd7c 	bl	8001380 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
	...

08009894 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	4a06      	ldr	r2, [pc, #24]	@ (80098bc <VL53L1_WaitUs+0x28>)
 80098a2:	fb82 1203 	smull	r1, r2, r2, r3
 80098a6:	1192      	asrs	r2, r2, #6
 80098a8:	17db      	asrs	r3, r3, #31
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7f7 fd67 	bl	8001380 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	10624dd3 	.word	0x10624dd3

080098c0 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 80098c0:	b590      	push	{r4, r7, lr}
 80098c2:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	f507 740a 	add.w	r4, r7, #552	@ 0x228
 80098cc:	f5a4 7407 	sub.w	r4, r4, #540	@ 0x21c
 80098d0:	6020      	str	r0, [r4, #0]
 80098d2:	f507 700a 	add.w	r0, r7, #552	@ 0x228
 80098d6:	f5a0 7008 	sub.w	r0, r0, #544	@ 0x220
 80098da:	6001      	str	r1, [r0, #0]
 80098dc:	4619      	mov	r1, r3
 80098de:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80098e2:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 80098e6:	801a      	strh	r2, [r3, #0]
 80098e8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80098ec:	f2a3 2323 	subw	r3, r3, #547	@ 0x223
 80098f0:	460a      	mov	r2, r1
 80098f2:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 80098f4:	2300      	movs	r3, #0
 80098f6:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
	uint32_t     start_time_ms = 0;
 80098fa:	2300      	movs	r3, #0
 80098fc:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
	uint32_t     current_time_ms = 0;
 8009900:	2300      	movs	r3, #0
 8009902:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	uint32_t     polling_time_ms = 0;
 8009906:	2300      	movs	r3, #0
 8009908:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
	uint8_t      byte_value      = 0;
 800990c:	2300      	movs	r3, #0
 800990e:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
	uint8_t      found           = 0;
 8009912:	2300      	movs	r3, #0
 8009914:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8009918:	f107 0310 	add.w	r3, r7, #16
 800991c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009920:	493b      	ldr	r1, [pc, #236]	@ (8009a10 <VL53L1_WaitValueMaskEx+0x150>)
 8009922:	4618      	mov	r0, r3
 8009924:	f000 fea9 	bl	800a67a <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 8009928:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800992c:	4618      	mov	r0, r3
 800992e:	f7ff ff91 	bl	8009854 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 8009932:	e049      	b.n	80099c8 <VL53L1_WaitValueMaskEx+0x108>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 8009934:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8009938:	2b00      	cmp	r3, #0
 800993a:	d110      	bne.n	800995e <VL53L1_WaitValueMaskEx+0x9e>
			status = VL53L1_RdByte(
 800993c:	f207 2213 	addw	r2, r7, #531	@ 0x213
 8009940:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8009944:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 8009948:	8819      	ldrh	r1, [r3, #0]
 800994a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800994e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8009952:	6818      	ldr	r0, [r3, #0]
 8009954:	f7ff ff0c 	bl	8009770 <VL53L1_RdByte>
 8009958:	4603      	mov	r3, r0
 800995a:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 800995e:	f897 2213 	ldrb.w	r2, [r7, #531]	@ 0x213
 8009962:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 8009966:	4013      	ands	r3, r2
 8009968:	b2db      	uxtb	r3, r3
 800996a:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 800996e:	f2a2 2223 	subw	r2, r2, #547	@ 0x223
 8009972:	7812      	ldrb	r2, [r2, #0]
 8009974:	429a      	cmp	r2, r3
 8009976:	d102      	bne.n	800997e <VL53L1_WaitValueMaskEx+0xbe>
			found = 1;
 8009978:	2301      	movs	r3, #1
 800997a:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 800997e:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8009982:	2b00      	cmp	r3, #0
 8009984:	d114      	bne.n	80099b0 <VL53L1_WaitValueMaskEx+0xf0>
 8009986:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 800998a:	2b00      	cmp	r3, #0
 800998c:	d110      	bne.n	80099b0 <VL53L1_WaitValueMaskEx+0xf0>
			found == 0 &&
 800998e:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8009992:	2b00      	cmp	r3, #0
 8009994:	d00c      	beq.n	80099b0 <VL53L1_WaitValueMaskEx+0xf0>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 8009996:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 800999a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800999e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80099a2:	4611      	mov	r1, r2
 80099a4:	6818      	ldr	r0, [r3, #0]
 80099a6:	f7ff ff66 	bl	8009876 <VL53L1_WaitMs>
 80099aa:	4603      	mov	r3, r0
 80099ac:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 80099b0:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7ff ff4d 	bl	8009854 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 80099ba:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 80099be:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80099c2:	1ad3      	subs	r3, r2, r3
 80099c4:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
		   (polling_time_ms < timeout_ms) &&
 80099c8:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d10c      	bne.n	80099ea <VL53L1_WaitValueMaskEx+0x12a>
	while ((status == VL53L1_ERROR_NONE) &&
 80099d0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80099d4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80099d8:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d203      	bcs.n	80099ea <VL53L1_WaitValueMaskEx+0x12a>
		   (polling_time_ms < timeout_ms) &&
 80099e2:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d0a4      	beq.n	8009934 <VL53L1_WaitValueMaskEx+0x74>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 80099ea:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d106      	bne.n	8009a00 <VL53L1_WaitValueMaskEx+0x140>
 80099f2:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d102      	bne.n	8009a00 <VL53L1_WaitValueMaskEx+0x140>
		status = VL53L1_ERROR_TIME_OUT;
 80099fa:	23f9      	movs	r3, #249	@ 0xf9
 80099fc:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227

	return status;
 8009a00:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	f507 770b 	add.w	r7, r7, #556	@ 0x22c
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd90      	pop	{r4, r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	0800c5dc 	.word	0x0800c5dc

08009a14 <__cvt>:
 8009a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a18:	ec57 6b10 	vmov	r6, r7, d0
 8009a1c:	2f00      	cmp	r7, #0
 8009a1e:	460c      	mov	r4, r1
 8009a20:	4619      	mov	r1, r3
 8009a22:	463b      	mov	r3, r7
 8009a24:	bfbb      	ittet	lt
 8009a26:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009a2a:	461f      	movlt	r7, r3
 8009a2c:	2300      	movge	r3, #0
 8009a2e:	232d      	movlt	r3, #45	@ 0x2d
 8009a30:	700b      	strb	r3, [r1, #0]
 8009a32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a34:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009a38:	4691      	mov	r9, r2
 8009a3a:	f023 0820 	bic.w	r8, r3, #32
 8009a3e:	bfbc      	itt	lt
 8009a40:	4632      	movlt	r2, r6
 8009a42:	4616      	movlt	r6, r2
 8009a44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a48:	d005      	beq.n	8009a56 <__cvt+0x42>
 8009a4a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009a4e:	d100      	bne.n	8009a52 <__cvt+0x3e>
 8009a50:	3401      	adds	r4, #1
 8009a52:	2102      	movs	r1, #2
 8009a54:	e000      	b.n	8009a58 <__cvt+0x44>
 8009a56:	2103      	movs	r1, #3
 8009a58:	ab03      	add	r3, sp, #12
 8009a5a:	9301      	str	r3, [sp, #4]
 8009a5c:	ab02      	add	r3, sp, #8
 8009a5e:	9300      	str	r3, [sp, #0]
 8009a60:	ec47 6b10 	vmov	d0, r6, r7
 8009a64:	4653      	mov	r3, sl
 8009a66:	4622      	mov	r2, r4
 8009a68:	f000 ff2a 	bl	800a8c0 <_dtoa_r>
 8009a6c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009a70:	4605      	mov	r5, r0
 8009a72:	d119      	bne.n	8009aa8 <__cvt+0x94>
 8009a74:	f019 0f01 	tst.w	r9, #1
 8009a78:	d00e      	beq.n	8009a98 <__cvt+0x84>
 8009a7a:	eb00 0904 	add.w	r9, r0, r4
 8009a7e:	2200      	movs	r2, #0
 8009a80:	2300      	movs	r3, #0
 8009a82:	4630      	mov	r0, r6
 8009a84:	4639      	mov	r1, r7
 8009a86:	f7f7 f81f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a8a:	b108      	cbz	r0, 8009a90 <__cvt+0x7c>
 8009a8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a90:	2230      	movs	r2, #48	@ 0x30
 8009a92:	9b03      	ldr	r3, [sp, #12]
 8009a94:	454b      	cmp	r3, r9
 8009a96:	d31e      	bcc.n	8009ad6 <__cvt+0xc2>
 8009a98:	9b03      	ldr	r3, [sp, #12]
 8009a9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a9c:	1b5b      	subs	r3, r3, r5
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	6013      	str	r3, [r2, #0]
 8009aa2:	b004      	add	sp, #16
 8009aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aa8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009aac:	eb00 0904 	add.w	r9, r0, r4
 8009ab0:	d1e5      	bne.n	8009a7e <__cvt+0x6a>
 8009ab2:	7803      	ldrb	r3, [r0, #0]
 8009ab4:	2b30      	cmp	r3, #48	@ 0x30
 8009ab6:	d10a      	bne.n	8009ace <__cvt+0xba>
 8009ab8:	2200      	movs	r2, #0
 8009aba:	2300      	movs	r3, #0
 8009abc:	4630      	mov	r0, r6
 8009abe:	4639      	mov	r1, r7
 8009ac0:	f7f7 f802 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ac4:	b918      	cbnz	r0, 8009ace <__cvt+0xba>
 8009ac6:	f1c4 0401 	rsb	r4, r4, #1
 8009aca:	f8ca 4000 	str.w	r4, [sl]
 8009ace:	f8da 3000 	ldr.w	r3, [sl]
 8009ad2:	4499      	add	r9, r3
 8009ad4:	e7d3      	b.n	8009a7e <__cvt+0x6a>
 8009ad6:	1c59      	adds	r1, r3, #1
 8009ad8:	9103      	str	r1, [sp, #12]
 8009ada:	701a      	strb	r2, [r3, #0]
 8009adc:	e7d9      	b.n	8009a92 <__cvt+0x7e>

08009ade <__exponent>:
 8009ade:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ae0:	2900      	cmp	r1, #0
 8009ae2:	bfba      	itte	lt
 8009ae4:	4249      	neglt	r1, r1
 8009ae6:	232d      	movlt	r3, #45	@ 0x2d
 8009ae8:	232b      	movge	r3, #43	@ 0x2b
 8009aea:	2909      	cmp	r1, #9
 8009aec:	7002      	strb	r2, [r0, #0]
 8009aee:	7043      	strb	r3, [r0, #1]
 8009af0:	dd29      	ble.n	8009b46 <__exponent+0x68>
 8009af2:	f10d 0307 	add.w	r3, sp, #7
 8009af6:	461d      	mov	r5, r3
 8009af8:	270a      	movs	r7, #10
 8009afa:	461a      	mov	r2, r3
 8009afc:	fbb1 f6f7 	udiv	r6, r1, r7
 8009b00:	fb07 1416 	mls	r4, r7, r6, r1
 8009b04:	3430      	adds	r4, #48	@ 0x30
 8009b06:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009b0a:	460c      	mov	r4, r1
 8009b0c:	2c63      	cmp	r4, #99	@ 0x63
 8009b0e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009b12:	4631      	mov	r1, r6
 8009b14:	dcf1      	bgt.n	8009afa <__exponent+0x1c>
 8009b16:	3130      	adds	r1, #48	@ 0x30
 8009b18:	1e94      	subs	r4, r2, #2
 8009b1a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009b1e:	1c41      	adds	r1, r0, #1
 8009b20:	4623      	mov	r3, r4
 8009b22:	42ab      	cmp	r3, r5
 8009b24:	d30a      	bcc.n	8009b3c <__exponent+0x5e>
 8009b26:	f10d 0309 	add.w	r3, sp, #9
 8009b2a:	1a9b      	subs	r3, r3, r2
 8009b2c:	42ac      	cmp	r4, r5
 8009b2e:	bf88      	it	hi
 8009b30:	2300      	movhi	r3, #0
 8009b32:	3302      	adds	r3, #2
 8009b34:	4403      	add	r3, r0
 8009b36:	1a18      	subs	r0, r3, r0
 8009b38:	b003      	add	sp, #12
 8009b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b3c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009b40:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009b44:	e7ed      	b.n	8009b22 <__exponent+0x44>
 8009b46:	2330      	movs	r3, #48	@ 0x30
 8009b48:	3130      	adds	r1, #48	@ 0x30
 8009b4a:	7083      	strb	r3, [r0, #2]
 8009b4c:	70c1      	strb	r1, [r0, #3]
 8009b4e:	1d03      	adds	r3, r0, #4
 8009b50:	e7f1      	b.n	8009b36 <__exponent+0x58>
	...

08009b54 <_printf_float>:
 8009b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b58:	b08d      	sub	sp, #52	@ 0x34
 8009b5a:	460c      	mov	r4, r1
 8009b5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009b60:	4616      	mov	r6, r2
 8009b62:	461f      	mov	r7, r3
 8009b64:	4605      	mov	r5, r0
 8009b66:	f000 fd9b 	bl	800a6a0 <_localeconv_r>
 8009b6a:	6803      	ldr	r3, [r0, #0]
 8009b6c:	9304      	str	r3, [sp, #16]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7f6 fb7e 	bl	8000270 <strlen>
 8009b74:	2300      	movs	r3, #0
 8009b76:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b78:	f8d8 3000 	ldr.w	r3, [r8]
 8009b7c:	9005      	str	r0, [sp, #20]
 8009b7e:	3307      	adds	r3, #7
 8009b80:	f023 0307 	bic.w	r3, r3, #7
 8009b84:	f103 0208 	add.w	r2, r3, #8
 8009b88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009b8c:	f8d4 b000 	ldr.w	fp, [r4]
 8009b90:	f8c8 2000 	str.w	r2, [r8]
 8009b94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009b9c:	9307      	str	r3, [sp, #28]
 8009b9e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ba2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009ba6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009baa:	4b9c      	ldr	r3, [pc, #624]	@ (8009e1c <_printf_float+0x2c8>)
 8009bac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009bb0:	f7f6 ffbc 	bl	8000b2c <__aeabi_dcmpun>
 8009bb4:	bb70      	cbnz	r0, 8009c14 <_printf_float+0xc0>
 8009bb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bba:	4b98      	ldr	r3, [pc, #608]	@ (8009e1c <_printf_float+0x2c8>)
 8009bbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009bc0:	f7f6 ff96 	bl	8000af0 <__aeabi_dcmple>
 8009bc4:	bb30      	cbnz	r0, 8009c14 <_printf_float+0xc0>
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	2300      	movs	r3, #0
 8009bca:	4640      	mov	r0, r8
 8009bcc:	4649      	mov	r1, r9
 8009bce:	f7f6 ff85 	bl	8000adc <__aeabi_dcmplt>
 8009bd2:	b110      	cbz	r0, 8009bda <_printf_float+0x86>
 8009bd4:	232d      	movs	r3, #45	@ 0x2d
 8009bd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bda:	4a91      	ldr	r2, [pc, #580]	@ (8009e20 <_printf_float+0x2cc>)
 8009bdc:	4b91      	ldr	r3, [pc, #580]	@ (8009e24 <_printf_float+0x2d0>)
 8009bde:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009be2:	bf94      	ite	ls
 8009be4:	4690      	movls	r8, r2
 8009be6:	4698      	movhi	r8, r3
 8009be8:	2303      	movs	r3, #3
 8009bea:	6123      	str	r3, [r4, #16]
 8009bec:	f02b 0304 	bic.w	r3, fp, #4
 8009bf0:	6023      	str	r3, [r4, #0]
 8009bf2:	f04f 0900 	mov.w	r9, #0
 8009bf6:	9700      	str	r7, [sp, #0]
 8009bf8:	4633      	mov	r3, r6
 8009bfa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009bfc:	4621      	mov	r1, r4
 8009bfe:	4628      	mov	r0, r5
 8009c00:	f000 f9d2 	bl	8009fa8 <_printf_common>
 8009c04:	3001      	adds	r0, #1
 8009c06:	f040 808d 	bne.w	8009d24 <_printf_float+0x1d0>
 8009c0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c0e:	b00d      	add	sp, #52	@ 0x34
 8009c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c14:	4642      	mov	r2, r8
 8009c16:	464b      	mov	r3, r9
 8009c18:	4640      	mov	r0, r8
 8009c1a:	4649      	mov	r1, r9
 8009c1c:	f7f6 ff86 	bl	8000b2c <__aeabi_dcmpun>
 8009c20:	b140      	cbz	r0, 8009c34 <_printf_float+0xe0>
 8009c22:	464b      	mov	r3, r9
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	bfbc      	itt	lt
 8009c28:	232d      	movlt	r3, #45	@ 0x2d
 8009c2a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009c2e:	4a7e      	ldr	r2, [pc, #504]	@ (8009e28 <_printf_float+0x2d4>)
 8009c30:	4b7e      	ldr	r3, [pc, #504]	@ (8009e2c <_printf_float+0x2d8>)
 8009c32:	e7d4      	b.n	8009bde <_printf_float+0x8a>
 8009c34:	6863      	ldr	r3, [r4, #4]
 8009c36:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009c3a:	9206      	str	r2, [sp, #24]
 8009c3c:	1c5a      	adds	r2, r3, #1
 8009c3e:	d13b      	bne.n	8009cb8 <_printf_float+0x164>
 8009c40:	2306      	movs	r3, #6
 8009c42:	6063      	str	r3, [r4, #4]
 8009c44:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009c48:	2300      	movs	r3, #0
 8009c4a:	6022      	str	r2, [r4, #0]
 8009c4c:	9303      	str	r3, [sp, #12]
 8009c4e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009c50:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009c54:	ab09      	add	r3, sp, #36	@ 0x24
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	6861      	ldr	r1, [r4, #4]
 8009c5a:	ec49 8b10 	vmov	d0, r8, r9
 8009c5e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009c62:	4628      	mov	r0, r5
 8009c64:	f7ff fed6 	bl	8009a14 <__cvt>
 8009c68:	9b06      	ldr	r3, [sp, #24]
 8009c6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c6c:	2b47      	cmp	r3, #71	@ 0x47
 8009c6e:	4680      	mov	r8, r0
 8009c70:	d129      	bne.n	8009cc6 <_printf_float+0x172>
 8009c72:	1cc8      	adds	r0, r1, #3
 8009c74:	db02      	blt.n	8009c7c <_printf_float+0x128>
 8009c76:	6863      	ldr	r3, [r4, #4]
 8009c78:	4299      	cmp	r1, r3
 8009c7a:	dd41      	ble.n	8009d00 <_printf_float+0x1ac>
 8009c7c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009c80:	fa5f fa8a 	uxtb.w	sl, sl
 8009c84:	3901      	subs	r1, #1
 8009c86:	4652      	mov	r2, sl
 8009c88:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009c8c:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c8e:	f7ff ff26 	bl	8009ade <__exponent>
 8009c92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c94:	1813      	adds	r3, r2, r0
 8009c96:	2a01      	cmp	r2, #1
 8009c98:	4681      	mov	r9, r0
 8009c9a:	6123      	str	r3, [r4, #16]
 8009c9c:	dc02      	bgt.n	8009ca4 <_printf_float+0x150>
 8009c9e:	6822      	ldr	r2, [r4, #0]
 8009ca0:	07d2      	lsls	r2, r2, #31
 8009ca2:	d501      	bpl.n	8009ca8 <_printf_float+0x154>
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	6123      	str	r3, [r4, #16]
 8009ca8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d0a2      	beq.n	8009bf6 <_printf_float+0xa2>
 8009cb0:	232d      	movs	r3, #45	@ 0x2d
 8009cb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cb6:	e79e      	b.n	8009bf6 <_printf_float+0xa2>
 8009cb8:	9a06      	ldr	r2, [sp, #24]
 8009cba:	2a47      	cmp	r2, #71	@ 0x47
 8009cbc:	d1c2      	bne.n	8009c44 <_printf_float+0xf0>
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1c0      	bne.n	8009c44 <_printf_float+0xf0>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e7bd      	b.n	8009c42 <_printf_float+0xee>
 8009cc6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009cca:	d9db      	bls.n	8009c84 <_printf_float+0x130>
 8009ccc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009cd0:	d118      	bne.n	8009d04 <_printf_float+0x1b0>
 8009cd2:	2900      	cmp	r1, #0
 8009cd4:	6863      	ldr	r3, [r4, #4]
 8009cd6:	dd0b      	ble.n	8009cf0 <_printf_float+0x19c>
 8009cd8:	6121      	str	r1, [r4, #16]
 8009cda:	b913      	cbnz	r3, 8009ce2 <_printf_float+0x18e>
 8009cdc:	6822      	ldr	r2, [r4, #0]
 8009cde:	07d0      	lsls	r0, r2, #31
 8009ce0:	d502      	bpl.n	8009ce8 <_printf_float+0x194>
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	440b      	add	r3, r1
 8009ce6:	6123      	str	r3, [r4, #16]
 8009ce8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009cea:	f04f 0900 	mov.w	r9, #0
 8009cee:	e7db      	b.n	8009ca8 <_printf_float+0x154>
 8009cf0:	b913      	cbnz	r3, 8009cf8 <_printf_float+0x1a4>
 8009cf2:	6822      	ldr	r2, [r4, #0]
 8009cf4:	07d2      	lsls	r2, r2, #31
 8009cf6:	d501      	bpl.n	8009cfc <_printf_float+0x1a8>
 8009cf8:	3302      	adds	r3, #2
 8009cfa:	e7f4      	b.n	8009ce6 <_printf_float+0x192>
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e7f2      	b.n	8009ce6 <_printf_float+0x192>
 8009d00:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d06:	4299      	cmp	r1, r3
 8009d08:	db05      	blt.n	8009d16 <_printf_float+0x1c2>
 8009d0a:	6823      	ldr	r3, [r4, #0]
 8009d0c:	6121      	str	r1, [r4, #16]
 8009d0e:	07d8      	lsls	r0, r3, #31
 8009d10:	d5ea      	bpl.n	8009ce8 <_printf_float+0x194>
 8009d12:	1c4b      	adds	r3, r1, #1
 8009d14:	e7e7      	b.n	8009ce6 <_printf_float+0x192>
 8009d16:	2900      	cmp	r1, #0
 8009d18:	bfd4      	ite	le
 8009d1a:	f1c1 0202 	rsble	r2, r1, #2
 8009d1e:	2201      	movgt	r2, #1
 8009d20:	4413      	add	r3, r2
 8009d22:	e7e0      	b.n	8009ce6 <_printf_float+0x192>
 8009d24:	6823      	ldr	r3, [r4, #0]
 8009d26:	055a      	lsls	r2, r3, #21
 8009d28:	d407      	bmi.n	8009d3a <_printf_float+0x1e6>
 8009d2a:	6923      	ldr	r3, [r4, #16]
 8009d2c:	4642      	mov	r2, r8
 8009d2e:	4631      	mov	r1, r6
 8009d30:	4628      	mov	r0, r5
 8009d32:	47b8      	blx	r7
 8009d34:	3001      	adds	r0, #1
 8009d36:	d12b      	bne.n	8009d90 <_printf_float+0x23c>
 8009d38:	e767      	b.n	8009c0a <_printf_float+0xb6>
 8009d3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009d3e:	f240 80dd 	bls.w	8009efc <_printf_float+0x3a8>
 8009d42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d46:	2200      	movs	r2, #0
 8009d48:	2300      	movs	r3, #0
 8009d4a:	f7f6 febd 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	d033      	beq.n	8009dba <_printf_float+0x266>
 8009d52:	4a37      	ldr	r2, [pc, #220]	@ (8009e30 <_printf_float+0x2dc>)
 8009d54:	2301      	movs	r3, #1
 8009d56:	4631      	mov	r1, r6
 8009d58:	4628      	mov	r0, r5
 8009d5a:	47b8      	blx	r7
 8009d5c:	3001      	adds	r0, #1
 8009d5e:	f43f af54 	beq.w	8009c0a <_printf_float+0xb6>
 8009d62:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009d66:	4543      	cmp	r3, r8
 8009d68:	db02      	blt.n	8009d70 <_printf_float+0x21c>
 8009d6a:	6823      	ldr	r3, [r4, #0]
 8009d6c:	07d8      	lsls	r0, r3, #31
 8009d6e:	d50f      	bpl.n	8009d90 <_printf_float+0x23c>
 8009d70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d74:	4631      	mov	r1, r6
 8009d76:	4628      	mov	r0, r5
 8009d78:	47b8      	blx	r7
 8009d7a:	3001      	adds	r0, #1
 8009d7c:	f43f af45 	beq.w	8009c0a <_printf_float+0xb6>
 8009d80:	f04f 0900 	mov.w	r9, #0
 8009d84:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009d88:	f104 0a1a 	add.w	sl, r4, #26
 8009d8c:	45c8      	cmp	r8, r9
 8009d8e:	dc09      	bgt.n	8009da4 <_printf_float+0x250>
 8009d90:	6823      	ldr	r3, [r4, #0]
 8009d92:	079b      	lsls	r3, r3, #30
 8009d94:	f100 8103 	bmi.w	8009f9e <_printf_float+0x44a>
 8009d98:	68e0      	ldr	r0, [r4, #12]
 8009d9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d9c:	4298      	cmp	r0, r3
 8009d9e:	bfb8      	it	lt
 8009da0:	4618      	movlt	r0, r3
 8009da2:	e734      	b.n	8009c0e <_printf_float+0xba>
 8009da4:	2301      	movs	r3, #1
 8009da6:	4652      	mov	r2, sl
 8009da8:	4631      	mov	r1, r6
 8009daa:	4628      	mov	r0, r5
 8009dac:	47b8      	blx	r7
 8009dae:	3001      	adds	r0, #1
 8009db0:	f43f af2b 	beq.w	8009c0a <_printf_float+0xb6>
 8009db4:	f109 0901 	add.w	r9, r9, #1
 8009db8:	e7e8      	b.n	8009d8c <_printf_float+0x238>
 8009dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	dc39      	bgt.n	8009e34 <_printf_float+0x2e0>
 8009dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8009e30 <_printf_float+0x2dc>)
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	4631      	mov	r1, r6
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	47b8      	blx	r7
 8009dca:	3001      	adds	r0, #1
 8009dcc:	f43f af1d 	beq.w	8009c0a <_printf_float+0xb6>
 8009dd0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009dd4:	ea59 0303 	orrs.w	r3, r9, r3
 8009dd8:	d102      	bne.n	8009de0 <_printf_float+0x28c>
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	07d9      	lsls	r1, r3, #31
 8009dde:	d5d7      	bpl.n	8009d90 <_printf_float+0x23c>
 8009de0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009de4:	4631      	mov	r1, r6
 8009de6:	4628      	mov	r0, r5
 8009de8:	47b8      	blx	r7
 8009dea:	3001      	adds	r0, #1
 8009dec:	f43f af0d 	beq.w	8009c0a <_printf_float+0xb6>
 8009df0:	f04f 0a00 	mov.w	sl, #0
 8009df4:	f104 0b1a 	add.w	fp, r4, #26
 8009df8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dfa:	425b      	negs	r3, r3
 8009dfc:	4553      	cmp	r3, sl
 8009dfe:	dc01      	bgt.n	8009e04 <_printf_float+0x2b0>
 8009e00:	464b      	mov	r3, r9
 8009e02:	e793      	b.n	8009d2c <_printf_float+0x1d8>
 8009e04:	2301      	movs	r3, #1
 8009e06:	465a      	mov	r2, fp
 8009e08:	4631      	mov	r1, r6
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	47b8      	blx	r7
 8009e0e:	3001      	adds	r0, #1
 8009e10:	f43f aefb 	beq.w	8009c0a <_printf_float+0xb6>
 8009e14:	f10a 0a01 	add.w	sl, sl, #1
 8009e18:	e7ee      	b.n	8009df8 <_printf_float+0x2a4>
 8009e1a:	bf00      	nop
 8009e1c:	7fefffff 	.word	0x7fefffff
 8009e20:	0800c618 	.word	0x0800c618
 8009e24:	0800c61c 	.word	0x0800c61c
 8009e28:	0800c620 	.word	0x0800c620
 8009e2c:	0800c624 	.word	0x0800c624
 8009e30:	0800c628 	.word	0x0800c628
 8009e34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e3a:	4553      	cmp	r3, sl
 8009e3c:	bfa8      	it	ge
 8009e3e:	4653      	movge	r3, sl
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	4699      	mov	r9, r3
 8009e44:	dc36      	bgt.n	8009eb4 <_printf_float+0x360>
 8009e46:	f04f 0b00 	mov.w	fp, #0
 8009e4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e4e:	f104 021a 	add.w	r2, r4, #26
 8009e52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e54:	9306      	str	r3, [sp, #24]
 8009e56:	eba3 0309 	sub.w	r3, r3, r9
 8009e5a:	455b      	cmp	r3, fp
 8009e5c:	dc31      	bgt.n	8009ec2 <_printf_float+0x36e>
 8009e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e60:	459a      	cmp	sl, r3
 8009e62:	dc3a      	bgt.n	8009eda <_printf_float+0x386>
 8009e64:	6823      	ldr	r3, [r4, #0]
 8009e66:	07da      	lsls	r2, r3, #31
 8009e68:	d437      	bmi.n	8009eda <_printf_float+0x386>
 8009e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e6c:	ebaa 0903 	sub.w	r9, sl, r3
 8009e70:	9b06      	ldr	r3, [sp, #24]
 8009e72:	ebaa 0303 	sub.w	r3, sl, r3
 8009e76:	4599      	cmp	r9, r3
 8009e78:	bfa8      	it	ge
 8009e7a:	4699      	movge	r9, r3
 8009e7c:	f1b9 0f00 	cmp.w	r9, #0
 8009e80:	dc33      	bgt.n	8009eea <_printf_float+0x396>
 8009e82:	f04f 0800 	mov.w	r8, #0
 8009e86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e8a:	f104 0b1a 	add.w	fp, r4, #26
 8009e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e90:	ebaa 0303 	sub.w	r3, sl, r3
 8009e94:	eba3 0309 	sub.w	r3, r3, r9
 8009e98:	4543      	cmp	r3, r8
 8009e9a:	f77f af79 	ble.w	8009d90 <_printf_float+0x23c>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	465a      	mov	r2, fp
 8009ea2:	4631      	mov	r1, r6
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	47b8      	blx	r7
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	f43f aeae 	beq.w	8009c0a <_printf_float+0xb6>
 8009eae:	f108 0801 	add.w	r8, r8, #1
 8009eb2:	e7ec      	b.n	8009e8e <_printf_float+0x33a>
 8009eb4:	4642      	mov	r2, r8
 8009eb6:	4631      	mov	r1, r6
 8009eb8:	4628      	mov	r0, r5
 8009eba:	47b8      	blx	r7
 8009ebc:	3001      	adds	r0, #1
 8009ebe:	d1c2      	bne.n	8009e46 <_printf_float+0x2f2>
 8009ec0:	e6a3      	b.n	8009c0a <_printf_float+0xb6>
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	4631      	mov	r1, r6
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	9206      	str	r2, [sp, #24]
 8009eca:	47b8      	blx	r7
 8009ecc:	3001      	adds	r0, #1
 8009ece:	f43f ae9c 	beq.w	8009c0a <_printf_float+0xb6>
 8009ed2:	9a06      	ldr	r2, [sp, #24]
 8009ed4:	f10b 0b01 	add.w	fp, fp, #1
 8009ed8:	e7bb      	b.n	8009e52 <_printf_float+0x2fe>
 8009eda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ede:	4631      	mov	r1, r6
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	47b8      	blx	r7
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	d1c0      	bne.n	8009e6a <_printf_float+0x316>
 8009ee8:	e68f      	b.n	8009c0a <_printf_float+0xb6>
 8009eea:	9a06      	ldr	r2, [sp, #24]
 8009eec:	464b      	mov	r3, r9
 8009eee:	4442      	add	r2, r8
 8009ef0:	4631      	mov	r1, r6
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	47b8      	blx	r7
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	d1c3      	bne.n	8009e82 <_printf_float+0x32e>
 8009efa:	e686      	b.n	8009c0a <_printf_float+0xb6>
 8009efc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009f00:	f1ba 0f01 	cmp.w	sl, #1
 8009f04:	dc01      	bgt.n	8009f0a <_printf_float+0x3b6>
 8009f06:	07db      	lsls	r3, r3, #31
 8009f08:	d536      	bpl.n	8009f78 <_printf_float+0x424>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	4642      	mov	r2, r8
 8009f0e:	4631      	mov	r1, r6
 8009f10:	4628      	mov	r0, r5
 8009f12:	47b8      	blx	r7
 8009f14:	3001      	adds	r0, #1
 8009f16:	f43f ae78 	beq.w	8009c0a <_printf_float+0xb6>
 8009f1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f1e:	4631      	mov	r1, r6
 8009f20:	4628      	mov	r0, r5
 8009f22:	47b8      	blx	r7
 8009f24:	3001      	adds	r0, #1
 8009f26:	f43f ae70 	beq.w	8009c0a <_printf_float+0xb6>
 8009f2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009f2e:	2200      	movs	r2, #0
 8009f30:	2300      	movs	r3, #0
 8009f32:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009f36:	f7f6 fdc7 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f3a:	b9c0      	cbnz	r0, 8009f6e <_printf_float+0x41a>
 8009f3c:	4653      	mov	r3, sl
 8009f3e:	f108 0201 	add.w	r2, r8, #1
 8009f42:	4631      	mov	r1, r6
 8009f44:	4628      	mov	r0, r5
 8009f46:	47b8      	blx	r7
 8009f48:	3001      	adds	r0, #1
 8009f4a:	d10c      	bne.n	8009f66 <_printf_float+0x412>
 8009f4c:	e65d      	b.n	8009c0a <_printf_float+0xb6>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	465a      	mov	r2, fp
 8009f52:	4631      	mov	r1, r6
 8009f54:	4628      	mov	r0, r5
 8009f56:	47b8      	blx	r7
 8009f58:	3001      	adds	r0, #1
 8009f5a:	f43f ae56 	beq.w	8009c0a <_printf_float+0xb6>
 8009f5e:	f108 0801 	add.w	r8, r8, #1
 8009f62:	45d0      	cmp	r8, sl
 8009f64:	dbf3      	blt.n	8009f4e <_printf_float+0x3fa>
 8009f66:	464b      	mov	r3, r9
 8009f68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009f6c:	e6df      	b.n	8009d2e <_printf_float+0x1da>
 8009f6e:	f04f 0800 	mov.w	r8, #0
 8009f72:	f104 0b1a 	add.w	fp, r4, #26
 8009f76:	e7f4      	b.n	8009f62 <_printf_float+0x40e>
 8009f78:	2301      	movs	r3, #1
 8009f7a:	4642      	mov	r2, r8
 8009f7c:	e7e1      	b.n	8009f42 <_printf_float+0x3ee>
 8009f7e:	2301      	movs	r3, #1
 8009f80:	464a      	mov	r2, r9
 8009f82:	4631      	mov	r1, r6
 8009f84:	4628      	mov	r0, r5
 8009f86:	47b8      	blx	r7
 8009f88:	3001      	adds	r0, #1
 8009f8a:	f43f ae3e 	beq.w	8009c0a <_printf_float+0xb6>
 8009f8e:	f108 0801 	add.w	r8, r8, #1
 8009f92:	68e3      	ldr	r3, [r4, #12]
 8009f94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f96:	1a5b      	subs	r3, r3, r1
 8009f98:	4543      	cmp	r3, r8
 8009f9a:	dcf0      	bgt.n	8009f7e <_printf_float+0x42a>
 8009f9c:	e6fc      	b.n	8009d98 <_printf_float+0x244>
 8009f9e:	f04f 0800 	mov.w	r8, #0
 8009fa2:	f104 0919 	add.w	r9, r4, #25
 8009fa6:	e7f4      	b.n	8009f92 <_printf_float+0x43e>

08009fa8 <_printf_common>:
 8009fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fac:	4616      	mov	r6, r2
 8009fae:	4698      	mov	r8, r3
 8009fb0:	688a      	ldr	r2, [r1, #8]
 8009fb2:	690b      	ldr	r3, [r1, #16]
 8009fb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	bfb8      	it	lt
 8009fbc:	4613      	movlt	r3, r2
 8009fbe:	6033      	str	r3, [r6, #0]
 8009fc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009fc4:	4607      	mov	r7, r0
 8009fc6:	460c      	mov	r4, r1
 8009fc8:	b10a      	cbz	r2, 8009fce <_printf_common+0x26>
 8009fca:	3301      	adds	r3, #1
 8009fcc:	6033      	str	r3, [r6, #0]
 8009fce:	6823      	ldr	r3, [r4, #0]
 8009fd0:	0699      	lsls	r1, r3, #26
 8009fd2:	bf42      	ittt	mi
 8009fd4:	6833      	ldrmi	r3, [r6, #0]
 8009fd6:	3302      	addmi	r3, #2
 8009fd8:	6033      	strmi	r3, [r6, #0]
 8009fda:	6825      	ldr	r5, [r4, #0]
 8009fdc:	f015 0506 	ands.w	r5, r5, #6
 8009fe0:	d106      	bne.n	8009ff0 <_printf_common+0x48>
 8009fe2:	f104 0a19 	add.w	sl, r4, #25
 8009fe6:	68e3      	ldr	r3, [r4, #12]
 8009fe8:	6832      	ldr	r2, [r6, #0]
 8009fea:	1a9b      	subs	r3, r3, r2
 8009fec:	42ab      	cmp	r3, r5
 8009fee:	dc26      	bgt.n	800a03e <_printf_common+0x96>
 8009ff0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009ff4:	6822      	ldr	r2, [r4, #0]
 8009ff6:	3b00      	subs	r3, #0
 8009ff8:	bf18      	it	ne
 8009ffa:	2301      	movne	r3, #1
 8009ffc:	0692      	lsls	r2, r2, #26
 8009ffe:	d42b      	bmi.n	800a058 <_printf_common+0xb0>
 800a000:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a004:	4641      	mov	r1, r8
 800a006:	4638      	mov	r0, r7
 800a008:	47c8      	blx	r9
 800a00a:	3001      	adds	r0, #1
 800a00c:	d01e      	beq.n	800a04c <_printf_common+0xa4>
 800a00e:	6823      	ldr	r3, [r4, #0]
 800a010:	6922      	ldr	r2, [r4, #16]
 800a012:	f003 0306 	and.w	r3, r3, #6
 800a016:	2b04      	cmp	r3, #4
 800a018:	bf02      	ittt	eq
 800a01a:	68e5      	ldreq	r5, [r4, #12]
 800a01c:	6833      	ldreq	r3, [r6, #0]
 800a01e:	1aed      	subeq	r5, r5, r3
 800a020:	68a3      	ldr	r3, [r4, #8]
 800a022:	bf0c      	ite	eq
 800a024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a028:	2500      	movne	r5, #0
 800a02a:	4293      	cmp	r3, r2
 800a02c:	bfc4      	itt	gt
 800a02e:	1a9b      	subgt	r3, r3, r2
 800a030:	18ed      	addgt	r5, r5, r3
 800a032:	2600      	movs	r6, #0
 800a034:	341a      	adds	r4, #26
 800a036:	42b5      	cmp	r5, r6
 800a038:	d11a      	bne.n	800a070 <_printf_common+0xc8>
 800a03a:	2000      	movs	r0, #0
 800a03c:	e008      	b.n	800a050 <_printf_common+0xa8>
 800a03e:	2301      	movs	r3, #1
 800a040:	4652      	mov	r2, sl
 800a042:	4641      	mov	r1, r8
 800a044:	4638      	mov	r0, r7
 800a046:	47c8      	blx	r9
 800a048:	3001      	adds	r0, #1
 800a04a:	d103      	bne.n	800a054 <_printf_common+0xac>
 800a04c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a054:	3501      	adds	r5, #1
 800a056:	e7c6      	b.n	8009fe6 <_printf_common+0x3e>
 800a058:	18e1      	adds	r1, r4, r3
 800a05a:	1c5a      	adds	r2, r3, #1
 800a05c:	2030      	movs	r0, #48	@ 0x30
 800a05e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a062:	4422      	add	r2, r4
 800a064:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a068:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a06c:	3302      	adds	r3, #2
 800a06e:	e7c7      	b.n	800a000 <_printf_common+0x58>
 800a070:	2301      	movs	r3, #1
 800a072:	4622      	mov	r2, r4
 800a074:	4641      	mov	r1, r8
 800a076:	4638      	mov	r0, r7
 800a078:	47c8      	blx	r9
 800a07a:	3001      	adds	r0, #1
 800a07c:	d0e6      	beq.n	800a04c <_printf_common+0xa4>
 800a07e:	3601      	adds	r6, #1
 800a080:	e7d9      	b.n	800a036 <_printf_common+0x8e>
	...

0800a084 <_printf_i>:
 800a084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a088:	7e0f      	ldrb	r7, [r1, #24]
 800a08a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a08c:	2f78      	cmp	r7, #120	@ 0x78
 800a08e:	4691      	mov	r9, r2
 800a090:	4680      	mov	r8, r0
 800a092:	460c      	mov	r4, r1
 800a094:	469a      	mov	sl, r3
 800a096:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a09a:	d807      	bhi.n	800a0ac <_printf_i+0x28>
 800a09c:	2f62      	cmp	r7, #98	@ 0x62
 800a09e:	d80a      	bhi.n	800a0b6 <_printf_i+0x32>
 800a0a0:	2f00      	cmp	r7, #0
 800a0a2:	f000 80d2 	beq.w	800a24a <_printf_i+0x1c6>
 800a0a6:	2f58      	cmp	r7, #88	@ 0x58
 800a0a8:	f000 80b9 	beq.w	800a21e <_printf_i+0x19a>
 800a0ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a0b4:	e03a      	b.n	800a12c <_printf_i+0xa8>
 800a0b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a0ba:	2b15      	cmp	r3, #21
 800a0bc:	d8f6      	bhi.n	800a0ac <_printf_i+0x28>
 800a0be:	a101      	add	r1, pc, #4	@ (adr r1, 800a0c4 <_printf_i+0x40>)
 800a0c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0c4:	0800a11d 	.word	0x0800a11d
 800a0c8:	0800a131 	.word	0x0800a131
 800a0cc:	0800a0ad 	.word	0x0800a0ad
 800a0d0:	0800a0ad 	.word	0x0800a0ad
 800a0d4:	0800a0ad 	.word	0x0800a0ad
 800a0d8:	0800a0ad 	.word	0x0800a0ad
 800a0dc:	0800a131 	.word	0x0800a131
 800a0e0:	0800a0ad 	.word	0x0800a0ad
 800a0e4:	0800a0ad 	.word	0x0800a0ad
 800a0e8:	0800a0ad 	.word	0x0800a0ad
 800a0ec:	0800a0ad 	.word	0x0800a0ad
 800a0f0:	0800a231 	.word	0x0800a231
 800a0f4:	0800a15b 	.word	0x0800a15b
 800a0f8:	0800a1eb 	.word	0x0800a1eb
 800a0fc:	0800a0ad 	.word	0x0800a0ad
 800a100:	0800a0ad 	.word	0x0800a0ad
 800a104:	0800a253 	.word	0x0800a253
 800a108:	0800a0ad 	.word	0x0800a0ad
 800a10c:	0800a15b 	.word	0x0800a15b
 800a110:	0800a0ad 	.word	0x0800a0ad
 800a114:	0800a0ad 	.word	0x0800a0ad
 800a118:	0800a1f3 	.word	0x0800a1f3
 800a11c:	6833      	ldr	r3, [r6, #0]
 800a11e:	1d1a      	adds	r2, r3, #4
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	6032      	str	r2, [r6, #0]
 800a124:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a128:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a12c:	2301      	movs	r3, #1
 800a12e:	e09d      	b.n	800a26c <_printf_i+0x1e8>
 800a130:	6833      	ldr	r3, [r6, #0]
 800a132:	6820      	ldr	r0, [r4, #0]
 800a134:	1d19      	adds	r1, r3, #4
 800a136:	6031      	str	r1, [r6, #0]
 800a138:	0606      	lsls	r6, r0, #24
 800a13a:	d501      	bpl.n	800a140 <_printf_i+0xbc>
 800a13c:	681d      	ldr	r5, [r3, #0]
 800a13e:	e003      	b.n	800a148 <_printf_i+0xc4>
 800a140:	0645      	lsls	r5, r0, #25
 800a142:	d5fb      	bpl.n	800a13c <_printf_i+0xb8>
 800a144:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a148:	2d00      	cmp	r5, #0
 800a14a:	da03      	bge.n	800a154 <_printf_i+0xd0>
 800a14c:	232d      	movs	r3, #45	@ 0x2d
 800a14e:	426d      	negs	r5, r5
 800a150:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a154:	4859      	ldr	r0, [pc, #356]	@ (800a2bc <_printf_i+0x238>)
 800a156:	230a      	movs	r3, #10
 800a158:	e011      	b.n	800a17e <_printf_i+0xfa>
 800a15a:	6821      	ldr	r1, [r4, #0]
 800a15c:	6833      	ldr	r3, [r6, #0]
 800a15e:	0608      	lsls	r0, r1, #24
 800a160:	f853 5b04 	ldr.w	r5, [r3], #4
 800a164:	d402      	bmi.n	800a16c <_printf_i+0xe8>
 800a166:	0649      	lsls	r1, r1, #25
 800a168:	bf48      	it	mi
 800a16a:	b2ad      	uxthmi	r5, r5
 800a16c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a16e:	4853      	ldr	r0, [pc, #332]	@ (800a2bc <_printf_i+0x238>)
 800a170:	6033      	str	r3, [r6, #0]
 800a172:	bf14      	ite	ne
 800a174:	230a      	movne	r3, #10
 800a176:	2308      	moveq	r3, #8
 800a178:	2100      	movs	r1, #0
 800a17a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a17e:	6866      	ldr	r6, [r4, #4]
 800a180:	60a6      	str	r6, [r4, #8]
 800a182:	2e00      	cmp	r6, #0
 800a184:	bfa2      	ittt	ge
 800a186:	6821      	ldrge	r1, [r4, #0]
 800a188:	f021 0104 	bicge.w	r1, r1, #4
 800a18c:	6021      	strge	r1, [r4, #0]
 800a18e:	b90d      	cbnz	r5, 800a194 <_printf_i+0x110>
 800a190:	2e00      	cmp	r6, #0
 800a192:	d04b      	beq.n	800a22c <_printf_i+0x1a8>
 800a194:	4616      	mov	r6, r2
 800a196:	fbb5 f1f3 	udiv	r1, r5, r3
 800a19a:	fb03 5711 	mls	r7, r3, r1, r5
 800a19e:	5dc7      	ldrb	r7, [r0, r7]
 800a1a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a1a4:	462f      	mov	r7, r5
 800a1a6:	42bb      	cmp	r3, r7
 800a1a8:	460d      	mov	r5, r1
 800a1aa:	d9f4      	bls.n	800a196 <_printf_i+0x112>
 800a1ac:	2b08      	cmp	r3, #8
 800a1ae:	d10b      	bne.n	800a1c8 <_printf_i+0x144>
 800a1b0:	6823      	ldr	r3, [r4, #0]
 800a1b2:	07df      	lsls	r7, r3, #31
 800a1b4:	d508      	bpl.n	800a1c8 <_printf_i+0x144>
 800a1b6:	6923      	ldr	r3, [r4, #16]
 800a1b8:	6861      	ldr	r1, [r4, #4]
 800a1ba:	4299      	cmp	r1, r3
 800a1bc:	bfde      	ittt	le
 800a1be:	2330      	movle	r3, #48	@ 0x30
 800a1c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a1c4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a1c8:	1b92      	subs	r2, r2, r6
 800a1ca:	6122      	str	r2, [r4, #16]
 800a1cc:	f8cd a000 	str.w	sl, [sp]
 800a1d0:	464b      	mov	r3, r9
 800a1d2:	aa03      	add	r2, sp, #12
 800a1d4:	4621      	mov	r1, r4
 800a1d6:	4640      	mov	r0, r8
 800a1d8:	f7ff fee6 	bl	8009fa8 <_printf_common>
 800a1dc:	3001      	adds	r0, #1
 800a1de:	d14a      	bne.n	800a276 <_printf_i+0x1f2>
 800a1e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1e4:	b004      	add	sp, #16
 800a1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ea:	6823      	ldr	r3, [r4, #0]
 800a1ec:	f043 0320 	orr.w	r3, r3, #32
 800a1f0:	6023      	str	r3, [r4, #0]
 800a1f2:	4833      	ldr	r0, [pc, #204]	@ (800a2c0 <_printf_i+0x23c>)
 800a1f4:	2778      	movs	r7, #120	@ 0x78
 800a1f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	6831      	ldr	r1, [r6, #0]
 800a1fe:	061f      	lsls	r7, r3, #24
 800a200:	f851 5b04 	ldr.w	r5, [r1], #4
 800a204:	d402      	bmi.n	800a20c <_printf_i+0x188>
 800a206:	065f      	lsls	r7, r3, #25
 800a208:	bf48      	it	mi
 800a20a:	b2ad      	uxthmi	r5, r5
 800a20c:	6031      	str	r1, [r6, #0]
 800a20e:	07d9      	lsls	r1, r3, #31
 800a210:	bf44      	itt	mi
 800a212:	f043 0320 	orrmi.w	r3, r3, #32
 800a216:	6023      	strmi	r3, [r4, #0]
 800a218:	b11d      	cbz	r5, 800a222 <_printf_i+0x19e>
 800a21a:	2310      	movs	r3, #16
 800a21c:	e7ac      	b.n	800a178 <_printf_i+0xf4>
 800a21e:	4827      	ldr	r0, [pc, #156]	@ (800a2bc <_printf_i+0x238>)
 800a220:	e7e9      	b.n	800a1f6 <_printf_i+0x172>
 800a222:	6823      	ldr	r3, [r4, #0]
 800a224:	f023 0320 	bic.w	r3, r3, #32
 800a228:	6023      	str	r3, [r4, #0]
 800a22a:	e7f6      	b.n	800a21a <_printf_i+0x196>
 800a22c:	4616      	mov	r6, r2
 800a22e:	e7bd      	b.n	800a1ac <_printf_i+0x128>
 800a230:	6833      	ldr	r3, [r6, #0]
 800a232:	6825      	ldr	r5, [r4, #0]
 800a234:	6961      	ldr	r1, [r4, #20]
 800a236:	1d18      	adds	r0, r3, #4
 800a238:	6030      	str	r0, [r6, #0]
 800a23a:	062e      	lsls	r6, r5, #24
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	d501      	bpl.n	800a244 <_printf_i+0x1c0>
 800a240:	6019      	str	r1, [r3, #0]
 800a242:	e002      	b.n	800a24a <_printf_i+0x1c6>
 800a244:	0668      	lsls	r0, r5, #25
 800a246:	d5fb      	bpl.n	800a240 <_printf_i+0x1bc>
 800a248:	8019      	strh	r1, [r3, #0]
 800a24a:	2300      	movs	r3, #0
 800a24c:	6123      	str	r3, [r4, #16]
 800a24e:	4616      	mov	r6, r2
 800a250:	e7bc      	b.n	800a1cc <_printf_i+0x148>
 800a252:	6833      	ldr	r3, [r6, #0]
 800a254:	1d1a      	adds	r2, r3, #4
 800a256:	6032      	str	r2, [r6, #0]
 800a258:	681e      	ldr	r6, [r3, #0]
 800a25a:	6862      	ldr	r2, [r4, #4]
 800a25c:	2100      	movs	r1, #0
 800a25e:	4630      	mov	r0, r6
 800a260:	f7f5 ffb6 	bl	80001d0 <memchr>
 800a264:	b108      	cbz	r0, 800a26a <_printf_i+0x1e6>
 800a266:	1b80      	subs	r0, r0, r6
 800a268:	6060      	str	r0, [r4, #4]
 800a26a:	6863      	ldr	r3, [r4, #4]
 800a26c:	6123      	str	r3, [r4, #16]
 800a26e:	2300      	movs	r3, #0
 800a270:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a274:	e7aa      	b.n	800a1cc <_printf_i+0x148>
 800a276:	6923      	ldr	r3, [r4, #16]
 800a278:	4632      	mov	r2, r6
 800a27a:	4649      	mov	r1, r9
 800a27c:	4640      	mov	r0, r8
 800a27e:	47d0      	blx	sl
 800a280:	3001      	adds	r0, #1
 800a282:	d0ad      	beq.n	800a1e0 <_printf_i+0x15c>
 800a284:	6823      	ldr	r3, [r4, #0]
 800a286:	079b      	lsls	r3, r3, #30
 800a288:	d413      	bmi.n	800a2b2 <_printf_i+0x22e>
 800a28a:	68e0      	ldr	r0, [r4, #12]
 800a28c:	9b03      	ldr	r3, [sp, #12]
 800a28e:	4298      	cmp	r0, r3
 800a290:	bfb8      	it	lt
 800a292:	4618      	movlt	r0, r3
 800a294:	e7a6      	b.n	800a1e4 <_printf_i+0x160>
 800a296:	2301      	movs	r3, #1
 800a298:	4632      	mov	r2, r6
 800a29a:	4649      	mov	r1, r9
 800a29c:	4640      	mov	r0, r8
 800a29e:	47d0      	blx	sl
 800a2a0:	3001      	adds	r0, #1
 800a2a2:	d09d      	beq.n	800a1e0 <_printf_i+0x15c>
 800a2a4:	3501      	adds	r5, #1
 800a2a6:	68e3      	ldr	r3, [r4, #12]
 800a2a8:	9903      	ldr	r1, [sp, #12]
 800a2aa:	1a5b      	subs	r3, r3, r1
 800a2ac:	42ab      	cmp	r3, r5
 800a2ae:	dcf2      	bgt.n	800a296 <_printf_i+0x212>
 800a2b0:	e7eb      	b.n	800a28a <_printf_i+0x206>
 800a2b2:	2500      	movs	r5, #0
 800a2b4:	f104 0619 	add.w	r6, r4, #25
 800a2b8:	e7f5      	b.n	800a2a6 <_printf_i+0x222>
 800a2ba:	bf00      	nop
 800a2bc:	0800c62a 	.word	0x0800c62a
 800a2c0:	0800c63b 	.word	0x0800c63b

0800a2c4 <std>:
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	b510      	push	{r4, lr}
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	e9c0 3300 	strd	r3, r3, [r0]
 800a2ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2d2:	6083      	str	r3, [r0, #8]
 800a2d4:	8181      	strh	r1, [r0, #12]
 800a2d6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a2d8:	81c2      	strh	r2, [r0, #14]
 800a2da:	6183      	str	r3, [r0, #24]
 800a2dc:	4619      	mov	r1, r3
 800a2de:	2208      	movs	r2, #8
 800a2e0:	305c      	adds	r0, #92	@ 0x5c
 800a2e2:	f000 f9c2 	bl	800a66a <memset>
 800a2e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a31c <std+0x58>)
 800a2e8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a2ea:	4b0d      	ldr	r3, [pc, #52]	@ (800a320 <std+0x5c>)
 800a2ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a2ee:	4b0d      	ldr	r3, [pc, #52]	@ (800a324 <std+0x60>)
 800a2f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a2f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a328 <std+0x64>)
 800a2f4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a2f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a32c <std+0x68>)
 800a2f8:	6224      	str	r4, [r4, #32]
 800a2fa:	429c      	cmp	r4, r3
 800a2fc:	d006      	beq.n	800a30c <std+0x48>
 800a2fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a302:	4294      	cmp	r4, r2
 800a304:	d002      	beq.n	800a30c <std+0x48>
 800a306:	33d0      	adds	r3, #208	@ 0xd0
 800a308:	429c      	cmp	r4, r3
 800a30a:	d105      	bne.n	800a318 <std+0x54>
 800a30c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a314:	f000 ba38 	b.w	800a788 <__retarget_lock_init_recursive>
 800a318:	bd10      	pop	{r4, pc}
 800a31a:	bf00      	nop
 800a31c:	0800a5e5 	.word	0x0800a5e5
 800a320:	0800a607 	.word	0x0800a607
 800a324:	0800a63f 	.word	0x0800a63f
 800a328:	0800a663 	.word	0x0800a663
 800a32c:	20000404 	.word	0x20000404

0800a330 <stdio_exit_handler>:
 800a330:	4a02      	ldr	r2, [pc, #8]	@ (800a33c <stdio_exit_handler+0xc>)
 800a332:	4903      	ldr	r1, [pc, #12]	@ (800a340 <stdio_exit_handler+0x10>)
 800a334:	4803      	ldr	r0, [pc, #12]	@ (800a344 <stdio_exit_handler+0x14>)
 800a336:	f000 b869 	b.w	800a40c <_fwalk_sglue>
 800a33a:	bf00      	nop
 800a33c:	2000003c 	.word	0x2000003c
 800a340:	0800c0d9 	.word	0x0800c0d9
 800a344:	2000004c 	.word	0x2000004c

0800a348 <cleanup_stdio>:
 800a348:	6841      	ldr	r1, [r0, #4]
 800a34a:	4b0c      	ldr	r3, [pc, #48]	@ (800a37c <cleanup_stdio+0x34>)
 800a34c:	4299      	cmp	r1, r3
 800a34e:	b510      	push	{r4, lr}
 800a350:	4604      	mov	r4, r0
 800a352:	d001      	beq.n	800a358 <cleanup_stdio+0x10>
 800a354:	f001 fec0 	bl	800c0d8 <_fflush_r>
 800a358:	68a1      	ldr	r1, [r4, #8]
 800a35a:	4b09      	ldr	r3, [pc, #36]	@ (800a380 <cleanup_stdio+0x38>)
 800a35c:	4299      	cmp	r1, r3
 800a35e:	d002      	beq.n	800a366 <cleanup_stdio+0x1e>
 800a360:	4620      	mov	r0, r4
 800a362:	f001 feb9 	bl	800c0d8 <_fflush_r>
 800a366:	68e1      	ldr	r1, [r4, #12]
 800a368:	4b06      	ldr	r3, [pc, #24]	@ (800a384 <cleanup_stdio+0x3c>)
 800a36a:	4299      	cmp	r1, r3
 800a36c:	d004      	beq.n	800a378 <cleanup_stdio+0x30>
 800a36e:	4620      	mov	r0, r4
 800a370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a374:	f001 beb0 	b.w	800c0d8 <_fflush_r>
 800a378:	bd10      	pop	{r4, pc}
 800a37a:	bf00      	nop
 800a37c:	20000404 	.word	0x20000404
 800a380:	2000046c 	.word	0x2000046c
 800a384:	200004d4 	.word	0x200004d4

0800a388 <global_stdio_init.part.0>:
 800a388:	b510      	push	{r4, lr}
 800a38a:	4b0b      	ldr	r3, [pc, #44]	@ (800a3b8 <global_stdio_init.part.0+0x30>)
 800a38c:	4c0b      	ldr	r4, [pc, #44]	@ (800a3bc <global_stdio_init.part.0+0x34>)
 800a38e:	4a0c      	ldr	r2, [pc, #48]	@ (800a3c0 <global_stdio_init.part.0+0x38>)
 800a390:	601a      	str	r2, [r3, #0]
 800a392:	4620      	mov	r0, r4
 800a394:	2200      	movs	r2, #0
 800a396:	2104      	movs	r1, #4
 800a398:	f7ff ff94 	bl	800a2c4 <std>
 800a39c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	2109      	movs	r1, #9
 800a3a4:	f7ff ff8e 	bl	800a2c4 <std>
 800a3a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a3ac:	2202      	movs	r2, #2
 800a3ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3b2:	2112      	movs	r1, #18
 800a3b4:	f7ff bf86 	b.w	800a2c4 <std>
 800a3b8:	2000053c 	.word	0x2000053c
 800a3bc:	20000404 	.word	0x20000404
 800a3c0:	0800a331 	.word	0x0800a331

0800a3c4 <__sfp_lock_acquire>:
 800a3c4:	4801      	ldr	r0, [pc, #4]	@ (800a3cc <__sfp_lock_acquire+0x8>)
 800a3c6:	f000 b9e0 	b.w	800a78a <__retarget_lock_acquire_recursive>
 800a3ca:	bf00      	nop
 800a3cc:	20000545 	.word	0x20000545

0800a3d0 <__sfp_lock_release>:
 800a3d0:	4801      	ldr	r0, [pc, #4]	@ (800a3d8 <__sfp_lock_release+0x8>)
 800a3d2:	f000 b9db 	b.w	800a78c <__retarget_lock_release_recursive>
 800a3d6:	bf00      	nop
 800a3d8:	20000545 	.word	0x20000545

0800a3dc <__sinit>:
 800a3dc:	b510      	push	{r4, lr}
 800a3de:	4604      	mov	r4, r0
 800a3e0:	f7ff fff0 	bl	800a3c4 <__sfp_lock_acquire>
 800a3e4:	6a23      	ldr	r3, [r4, #32]
 800a3e6:	b11b      	cbz	r3, 800a3f0 <__sinit+0x14>
 800a3e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3ec:	f7ff bff0 	b.w	800a3d0 <__sfp_lock_release>
 800a3f0:	4b04      	ldr	r3, [pc, #16]	@ (800a404 <__sinit+0x28>)
 800a3f2:	6223      	str	r3, [r4, #32]
 800a3f4:	4b04      	ldr	r3, [pc, #16]	@ (800a408 <__sinit+0x2c>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d1f5      	bne.n	800a3e8 <__sinit+0xc>
 800a3fc:	f7ff ffc4 	bl	800a388 <global_stdio_init.part.0>
 800a400:	e7f2      	b.n	800a3e8 <__sinit+0xc>
 800a402:	bf00      	nop
 800a404:	0800a349 	.word	0x0800a349
 800a408:	2000053c 	.word	0x2000053c

0800a40c <_fwalk_sglue>:
 800a40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a410:	4607      	mov	r7, r0
 800a412:	4688      	mov	r8, r1
 800a414:	4614      	mov	r4, r2
 800a416:	2600      	movs	r6, #0
 800a418:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a41c:	f1b9 0901 	subs.w	r9, r9, #1
 800a420:	d505      	bpl.n	800a42e <_fwalk_sglue+0x22>
 800a422:	6824      	ldr	r4, [r4, #0]
 800a424:	2c00      	cmp	r4, #0
 800a426:	d1f7      	bne.n	800a418 <_fwalk_sglue+0xc>
 800a428:	4630      	mov	r0, r6
 800a42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a42e:	89ab      	ldrh	r3, [r5, #12]
 800a430:	2b01      	cmp	r3, #1
 800a432:	d907      	bls.n	800a444 <_fwalk_sglue+0x38>
 800a434:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a438:	3301      	adds	r3, #1
 800a43a:	d003      	beq.n	800a444 <_fwalk_sglue+0x38>
 800a43c:	4629      	mov	r1, r5
 800a43e:	4638      	mov	r0, r7
 800a440:	47c0      	blx	r8
 800a442:	4306      	orrs	r6, r0
 800a444:	3568      	adds	r5, #104	@ 0x68
 800a446:	e7e9      	b.n	800a41c <_fwalk_sglue+0x10>

0800a448 <iprintf>:
 800a448:	b40f      	push	{r0, r1, r2, r3}
 800a44a:	b507      	push	{r0, r1, r2, lr}
 800a44c:	4906      	ldr	r1, [pc, #24]	@ (800a468 <iprintf+0x20>)
 800a44e:	ab04      	add	r3, sp, #16
 800a450:	6808      	ldr	r0, [r1, #0]
 800a452:	f853 2b04 	ldr.w	r2, [r3], #4
 800a456:	6881      	ldr	r1, [r0, #8]
 800a458:	9301      	str	r3, [sp, #4]
 800a45a:	f001 fca1 	bl	800bda0 <_vfiprintf_r>
 800a45e:	b003      	add	sp, #12
 800a460:	f85d eb04 	ldr.w	lr, [sp], #4
 800a464:	b004      	add	sp, #16
 800a466:	4770      	bx	lr
 800a468:	20000048 	.word	0x20000048

0800a46c <setbuf>:
 800a46c:	fab1 f281 	clz	r2, r1
 800a470:	0952      	lsrs	r2, r2, #5
 800a472:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a476:	0052      	lsls	r2, r2, #1
 800a478:	f000 b800 	b.w	800a47c <setvbuf>

0800a47c <setvbuf>:
 800a47c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a480:	461d      	mov	r5, r3
 800a482:	4b57      	ldr	r3, [pc, #348]	@ (800a5e0 <setvbuf+0x164>)
 800a484:	681f      	ldr	r7, [r3, #0]
 800a486:	4604      	mov	r4, r0
 800a488:	460e      	mov	r6, r1
 800a48a:	4690      	mov	r8, r2
 800a48c:	b127      	cbz	r7, 800a498 <setvbuf+0x1c>
 800a48e:	6a3b      	ldr	r3, [r7, #32]
 800a490:	b913      	cbnz	r3, 800a498 <setvbuf+0x1c>
 800a492:	4638      	mov	r0, r7
 800a494:	f7ff ffa2 	bl	800a3dc <__sinit>
 800a498:	f1b8 0f02 	cmp.w	r8, #2
 800a49c:	d006      	beq.n	800a4ac <setvbuf+0x30>
 800a49e:	f1b8 0f01 	cmp.w	r8, #1
 800a4a2:	f200 809a 	bhi.w	800a5da <setvbuf+0x15e>
 800a4a6:	2d00      	cmp	r5, #0
 800a4a8:	f2c0 8097 	blt.w	800a5da <setvbuf+0x15e>
 800a4ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a4ae:	07d9      	lsls	r1, r3, #31
 800a4b0:	d405      	bmi.n	800a4be <setvbuf+0x42>
 800a4b2:	89a3      	ldrh	r3, [r4, #12]
 800a4b4:	059a      	lsls	r2, r3, #22
 800a4b6:	d402      	bmi.n	800a4be <setvbuf+0x42>
 800a4b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4ba:	f000 f966 	bl	800a78a <__retarget_lock_acquire_recursive>
 800a4be:	4621      	mov	r1, r4
 800a4c0:	4638      	mov	r0, r7
 800a4c2:	f001 fe09 	bl	800c0d8 <_fflush_r>
 800a4c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4c8:	b141      	cbz	r1, 800a4dc <setvbuf+0x60>
 800a4ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4ce:	4299      	cmp	r1, r3
 800a4d0:	d002      	beq.n	800a4d8 <setvbuf+0x5c>
 800a4d2:	4638      	mov	r0, r7
 800a4d4:	f000 ffb8 	bl	800b448 <_free_r>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4dc:	2300      	movs	r3, #0
 800a4de:	61a3      	str	r3, [r4, #24]
 800a4e0:	6063      	str	r3, [r4, #4]
 800a4e2:	89a3      	ldrh	r3, [r4, #12]
 800a4e4:	061b      	lsls	r3, r3, #24
 800a4e6:	d503      	bpl.n	800a4f0 <setvbuf+0x74>
 800a4e8:	6921      	ldr	r1, [r4, #16]
 800a4ea:	4638      	mov	r0, r7
 800a4ec:	f000 ffac 	bl	800b448 <_free_r>
 800a4f0:	89a3      	ldrh	r3, [r4, #12]
 800a4f2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800a4f6:	f023 0303 	bic.w	r3, r3, #3
 800a4fa:	f1b8 0f02 	cmp.w	r8, #2
 800a4fe:	81a3      	strh	r3, [r4, #12]
 800a500:	d061      	beq.n	800a5c6 <setvbuf+0x14a>
 800a502:	ab01      	add	r3, sp, #4
 800a504:	466a      	mov	r2, sp
 800a506:	4621      	mov	r1, r4
 800a508:	4638      	mov	r0, r7
 800a50a:	f001 fe0d 	bl	800c128 <__swhatbuf_r>
 800a50e:	89a3      	ldrh	r3, [r4, #12]
 800a510:	4318      	orrs	r0, r3
 800a512:	81a0      	strh	r0, [r4, #12]
 800a514:	bb2d      	cbnz	r5, 800a562 <setvbuf+0xe6>
 800a516:	9d00      	ldr	r5, [sp, #0]
 800a518:	4628      	mov	r0, r5
 800a51a:	f000 ffdf 	bl	800b4dc <malloc>
 800a51e:	4606      	mov	r6, r0
 800a520:	2800      	cmp	r0, #0
 800a522:	d152      	bne.n	800a5ca <setvbuf+0x14e>
 800a524:	f8dd 9000 	ldr.w	r9, [sp]
 800a528:	45a9      	cmp	r9, r5
 800a52a:	d140      	bne.n	800a5ae <setvbuf+0x132>
 800a52c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a534:	f043 0202 	orr.w	r2, r3, #2
 800a538:	81a2      	strh	r2, [r4, #12]
 800a53a:	2200      	movs	r2, #0
 800a53c:	60a2      	str	r2, [r4, #8]
 800a53e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800a542:	6022      	str	r2, [r4, #0]
 800a544:	6122      	str	r2, [r4, #16]
 800a546:	2201      	movs	r2, #1
 800a548:	6162      	str	r2, [r4, #20]
 800a54a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a54c:	07d6      	lsls	r6, r2, #31
 800a54e:	d404      	bmi.n	800a55a <setvbuf+0xde>
 800a550:	0598      	lsls	r0, r3, #22
 800a552:	d402      	bmi.n	800a55a <setvbuf+0xde>
 800a554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a556:	f000 f919 	bl	800a78c <__retarget_lock_release_recursive>
 800a55a:	4628      	mov	r0, r5
 800a55c:	b003      	add	sp, #12
 800a55e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a562:	2e00      	cmp	r6, #0
 800a564:	d0d8      	beq.n	800a518 <setvbuf+0x9c>
 800a566:	6a3b      	ldr	r3, [r7, #32]
 800a568:	b913      	cbnz	r3, 800a570 <setvbuf+0xf4>
 800a56a:	4638      	mov	r0, r7
 800a56c:	f7ff ff36 	bl	800a3dc <__sinit>
 800a570:	f1b8 0f01 	cmp.w	r8, #1
 800a574:	bf08      	it	eq
 800a576:	89a3      	ldrheq	r3, [r4, #12]
 800a578:	6026      	str	r6, [r4, #0]
 800a57a:	bf04      	itt	eq
 800a57c:	f043 0301 	orreq.w	r3, r3, #1
 800a580:	81a3      	strheq	r3, [r4, #12]
 800a582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a586:	f013 0208 	ands.w	r2, r3, #8
 800a58a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800a58e:	d01e      	beq.n	800a5ce <setvbuf+0x152>
 800a590:	07d9      	lsls	r1, r3, #31
 800a592:	bf41      	itttt	mi
 800a594:	2200      	movmi	r2, #0
 800a596:	426d      	negmi	r5, r5
 800a598:	60a2      	strmi	r2, [r4, #8]
 800a59a:	61a5      	strmi	r5, [r4, #24]
 800a59c:	bf58      	it	pl
 800a59e:	60a5      	strpl	r5, [r4, #8]
 800a5a0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a5a2:	07d2      	lsls	r2, r2, #31
 800a5a4:	d401      	bmi.n	800a5aa <setvbuf+0x12e>
 800a5a6:	059b      	lsls	r3, r3, #22
 800a5a8:	d513      	bpl.n	800a5d2 <setvbuf+0x156>
 800a5aa:	2500      	movs	r5, #0
 800a5ac:	e7d5      	b.n	800a55a <setvbuf+0xde>
 800a5ae:	4648      	mov	r0, r9
 800a5b0:	f000 ff94 	bl	800b4dc <malloc>
 800a5b4:	4606      	mov	r6, r0
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	d0b8      	beq.n	800a52c <setvbuf+0xb0>
 800a5ba:	89a3      	ldrh	r3, [r4, #12]
 800a5bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5c0:	81a3      	strh	r3, [r4, #12]
 800a5c2:	464d      	mov	r5, r9
 800a5c4:	e7cf      	b.n	800a566 <setvbuf+0xea>
 800a5c6:	2500      	movs	r5, #0
 800a5c8:	e7b2      	b.n	800a530 <setvbuf+0xb4>
 800a5ca:	46a9      	mov	r9, r5
 800a5cc:	e7f5      	b.n	800a5ba <setvbuf+0x13e>
 800a5ce:	60a2      	str	r2, [r4, #8]
 800a5d0:	e7e6      	b.n	800a5a0 <setvbuf+0x124>
 800a5d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5d4:	f000 f8da 	bl	800a78c <__retarget_lock_release_recursive>
 800a5d8:	e7e7      	b.n	800a5aa <setvbuf+0x12e>
 800a5da:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a5de:	e7bc      	b.n	800a55a <setvbuf+0xde>
 800a5e0:	20000048 	.word	0x20000048

0800a5e4 <__sread>:
 800a5e4:	b510      	push	{r4, lr}
 800a5e6:	460c      	mov	r4, r1
 800a5e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ec:	f000 f87e 	bl	800a6ec <_read_r>
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	bfab      	itete	ge
 800a5f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a5f6:	89a3      	ldrhlt	r3, [r4, #12]
 800a5f8:	181b      	addge	r3, r3, r0
 800a5fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a5fe:	bfac      	ite	ge
 800a600:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a602:	81a3      	strhlt	r3, [r4, #12]
 800a604:	bd10      	pop	{r4, pc}

0800a606 <__swrite>:
 800a606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a60a:	461f      	mov	r7, r3
 800a60c:	898b      	ldrh	r3, [r1, #12]
 800a60e:	05db      	lsls	r3, r3, #23
 800a610:	4605      	mov	r5, r0
 800a612:	460c      	mov	r4, r1
 800a614:	4616      	mov	r6, r2
 800a616:	d505      	bpl.n	800a624 <__swrite+0x1e>
 800a618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a61c:	2302      	movs	r3, #2
 800a61e:	2200      	movs	r2, #0
 800a620:	f000 f852 	bl	800a6c8 <_lseek_r>
 800a624:	89a3      	ldrh	r3, [r4, #12]
 800a626:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a62a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a62e:	81a3      	strh	r3, [r4, #12]
 800a630:	4632      	mov	r2, r6
 800a632:	463b      	mov	r3, r7
 800a634:	4628      	mov	r0, r5
 800a636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a63a:	f000 b869 	b.w	800a710 <_write_r>

0800a63e <__sseek>:
 800a63e:	b510      	push	{r4, lr}
 800a640:	460c      	mov	r4, r1
 800a642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a646:	f000 f83f 	bl	800a6c8 <_lseek_r>
 800a64a:	1c43      	adds	r3, r0, #1
 800a64c:	89a3      	ldrh	r3, [r4, #12]
 800a64e:	bf15      	itete	ne
 800a650:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a652:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a656:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a65a:	81a3      	strheq	r3, [r4, #12]
 800a65c:	bf18      	it	ne
 800a65e:	81a3      	strhne	r3, [r4, #12]
 800a660:	bd10      	pop	{r4, pc}

0800a662 <__sclose>:
 800a662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a666:	f000 b81f 	b.w	800a6a8 <_close_r>

0800a66a <memset>:
 800a66a:	4402      	add	r2, r0
 800a66c:	4603      	mov	r3, r0
 800a66e:	4293      	cmp	r3, r2
 800a670:	d100      	bne.n	800a674 <memset+0xa>
 800a672:	4770      	bx	lr
 800a674:	f803 1b01 	strb.w	r1, [r3], #1
 800a678:	e7f9      	b.n	800a66e <memset+0x4>

0800a67a <strncpy>:
 800a67a:	b510      	push	{r4, lr}
 800a67c:	3901      	subs	r1, #1
 800a67e:	4603      	mov	r3, r0
 800a680:	b132      	cbz	r2, 800a690 <strncpy+0x16>
 800a682:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a686:	f803 4b01 	strb.w	r4, [r3], #1
 800a68a:	3a01      	subs	r2, #1
 800a68c:	2c00      	cmp	r4, #0
 800a68e:	d1f7      	bne.n	800a680 <strncpy+0x6>
 800a690:	441a      	add	r2, r3
 800a692:	2100      	movs	r1, #0
 800a694:	4293      	cmp	r3, r2
 800a696:	d100      	bne.n	800a69a <strncpy+0x20>
 800a698:	bd10      	pop	{r4, pc}
 800a69a:	f803 1b01 	strb.w	r1, [r3], #1
 800a69e:	e7f9      	b.n	800a694 <strncpy+0x1a>

0800a6a0 <_localeconv_r>:
 800a6a0:	4800      	ldr	r0, [pc, #0]	@ (800a6a4 <_localeconv_r+0x4>)
 800a6a2:	4770      	bx	lr
 800a6a4:	20000188 	.word	0x20000188

0800a6a8 <_close_r>:
 800a6a8:	b538      	push	{r3, r4, r5, lr}
 800a6aa:	4d06      	ldr	r5, [pc, #24]	@ (800a6c4 <_close_r+0x1c>)
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	4608      	mov	r0, r1
 800a6b2:	602b      	str	r3, [r5, #0]
 800a6b4:	f7f6 fd57 	bl	8001166 <_close>
 800a6b8:	1c43      	adds	r3, r0, #1
 800a6ba:	d102      	bne.n	800a6c2 <_close_r+0x1a>
 800a6bc:	682b      	ldr	r3, [r5, #0]
 800a6be:	b103      	cbz	r3, 800a6c2 <_close_r+0x1a>
 800a6c0:	6023      	str	r3, [r4, #0]
 800a6c2:	bd38      	pop	{r3, r4, r5, pc}
 800a6c4:	20000540 	.word	0x20000540

0800a6c8 <_lseek_r>:
 800a6c8:	b538      	push	{r3, r4, r5, lr}
 800a6ca:	4d07      	ldr	r5, [pc, #28]	@ (800a6e8 <_lseek_r+0x20>)
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	4608      	mov	r0, r1
 800a6d0:	4611      	mov	r1, r2
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	602a      	str	r2, [r5, #0]
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	f7f6 fd6c 	bl	80011b4 <_lseek>
 800a6dc:	1c43      	adds	r3, r0, #1
 800a6de:	d102      	bne.n	800a6e6 <_lseek_r+0x1e>
 800a6e0:	682b      	ldr	r3, [r5, #0]
 800a6e2:	b103      	cbz	r3, 800a6e6 <_lseek_r+0x1e>
 800a6e4:	6023      	str	r3, [r4, #0]
 800a6e6:	bd38      	pop	{r3, r4, r5, pc}
 800a6e8:	20000540 	.word	0x20000540

0800a6ec <_read_r>:
 800a6ec:	b538      	push	{r3, r4, r5, lr}
 800a6ee:	4d07      	ldr	r5, [pc, #28]	@ (800a70c <_read_r+0x20>)
 800a6f0:	4604      	mov	r4, r0
 800a6f2:	4608      	mov	r0, r1
 800a6f4:	4611      	mov	r1, r2
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	602a      	str	r2, [r5, #0]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	f7f6 fd16 	bl	800112c <_read>
 800a700:	1c43      	adds	r3, r0, #1
 800a702:	d102      	bne.n	800a70a <_read_r+0x1e>
 800a704:	682b      	ldr	r3, [r5, #0]
 800a706:	b103      	cbz	r3, 800a70a <_read_r+0x1e>
 800a708:	6023      	str	r3, [r4, #0]
 800a70a:	bd38      	pop	{r3, r4, r5, pc}
 800a70c:	20000540 	.word	0x20000540

0800a710 <_write_r>:
 800a710:	b538      	push	{r3, r4, r5, lr}
 800a712:	4d07      	ldr	r5, [pc, #28]	@ (800a730 <_write_r+0x20>)
 800a714:	4604      	mov	r4, r0
 800a716:	4608      	mov	r0, r1
 800a718:	4611      	mov	r1, r2
 800a71a:	2200      	movs	r2, #0
 800a71c:	602a      	str	r2, [r5, #0]
 800a71e:	461a      	mov	r2, r3
 800a720:	f7f6 fa42 	bl	8000ba8 <_write>
 800a724:	1c43      	adds	r3, r0, #1
 800a726:	d102      	bne.n	800a72e <_write_r+0x1e>
 800a728:	682b      	ldr	r3, [r5, #0]
 800a72a:	b103      	cbz	r3, 800a72e <_write_r+0x1e>
 800a72c:	6023      	str	r3, [r4, #0]
 800a72e:	bd38      	pop	{r3, r4, r5, pc}
 800a730:	20000540 	.word	0x20000540

0800a734 <__errno>:
 800a734:	4b01      	ldr	r3, [pc, #4]	@ (800a73c <__errno+0x8>)
 800a736:	6818      	ldr	r0, [r3, #0]
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	20000048 	.word	0x20000048

0800a740 <__libc_init_array>:
 800a740:	b570      	push	{r4, r5, r6, lr}
 800a742:	4d0d      	ldr	r5, [pc, #52]	@ (800a778 <__libc_init_array+0x38>)
 800a744:	4c0d      	ldr	r4, [pc, #52]	@ (800a77c <__libc_init_array+0x3c>)
 800a746:	1b64      	subs	r4, r4, r5
 800a748:	10a4      	asrs	r4, r4, #2
 800a74a:	2600      	movs	r6, #0
 800a74c:	42a6      	cmp	r6, r4
 800a74e:	d109      	bne.n	800a764 <__libc_init_array+0x24>
 800a750:	4d0b      	ldr	r5, [pc, #44]	@ (800a780 <__libc_init_array+0x40>)
 800a752:	4c0c      	ldr	r4, [pc, #48]	@ (800a784 <__libc_init_array+0x44>)
 800a754:	f001 fec0 	bl	800c4d8 <_init>
 800a758:	1b64      	subs	r4, r4, r5
 800a75a:	10a4      	asrs	r4, r4, #2
 800a75c:	2600      	movs	r6, #0
 800a75e:	42a6      	cmp	r6, r4
 800a760:	d105      	bne.n	800a76e <__libc_init_array+0x2e>
 800a762:	bd70      	pop	{r4, r5, r6, pc}
 800a764:	f855 3b04 	ldr.w	r3, [r5], #4
 800a768:	4798      	blx	r3
 800a76a:	3601      	adds	r6, #1
 800a76c:	e7ee      	b.n	800a74c <__libc_init_array+0xc>
 800a76e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a772:	4798      	blx	r3
 800a774:	3601      	adds	r6, #1
 800a776:	e7f2      	b.n	800a75e <__libc_init_array+0x1e>
 800a778:	0800c990 	.word	0x0800c990
 800a77c:	0800c990 	.word	0x0800c990
 800a780:	0800c990 	.word	0x0800c990
 800a784:	0800c994 	.word	0x0800c994

0800a788 <__retarget_lock_init_recursive>:
 800a788:	4770      	bx	lr

0800a78a <__retarget_lock_acquire_recursive>:
 800a78a:	4770      	bx	lr

0800a78c <__retarget_lock_release_recursive>:
 800a78c:	4770      	bx	lr

0800a78e <memcpy>:
 800a78e:	440a      	add	r2, r1
 800a790:	4291      	cmp	r1, r2
 800a792:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a796:	d100      	bne.n	800a79a <memcpy+0xc>
 800a798:	4770      	bx	lr
 800a79a:	b510      	push	{r4, lr}
 800a79c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7a4:	4291      	cmp	r1, r2
 800a7a6:	d1f9      	bne.n	800a79c <memcpy+0xe>
 800a7a8:	bd10      	pop	{r4, pc}

0800a7aa <quorem>:
 800a7aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ae:	6903      	ldr	r3, [r0, #16]
 800a7b0:	690c      	ldr	r4, [r1, #16]
 800a7b2:	42a3      	cmp	r3, r4
 800a7b4:	4607      	mov	r7, r0
 800a7b6:	db7e      	blt.n	800a8b6 <quorem+0x10c>
 800a7b8:	3c01      	subs	r4, #1
 800a7ba:	f101 0814 	add.w	r8, r1, #20
 800a7be:	00a3      	lsls	r3, r4, #2
 800a7c0:	f100 0514 	add.w	r5, r0, #20
 800a7c4:	9300      	str	r3, [sp, #0]
 800a7c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7ca:	9301      	str	r3, [sp, #4]
 800a7cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a7d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a7dc:	fbb2 f6f3 	udiv	r6, r2, r3
 800a7e0:	d32e      	bcc.n	800a840 <quorem+0x96>
 800a7e2:	f04f 0a00 	mov.w	sl, #0
 800a7e6:	46c4      	mov	ip, r8
 800a7e8:	46ae      	mov	lr, r5
 800a7ea:	46d3      	mov	fp, sl
 800a7ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a7f0:	b298      	uxth	r0, r3
 800a7f2:	fb06 a000 	mla	r0, r6, r0, sl
 800a7f6:	0c02      	lsrs	r2, r0, #16
 800a7f8:	0c1b      	lsrs	r3, r3, #16
 800a7fa:	fb06 2303 	mla	r3, r6, r3, r2
 800a7fe:	f8de 2000 	ldr.w	r2, [lr]
 800a802:	b280      	uxth	r0, r0
 800a804:	b292      	uxth	r2, r2
 800a806:	1a12      	subs	r2, r2, r0
 800a808:	445a      	add	r2, fp
 800a80a:	f8de 0000 	ldr.w	r0, [lr]
 800a80e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a812:	b29b      	uxth	r3, r3
 800a814:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a818:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a81c:	b292      	uxth	r2, r2
 800a81e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a822:	45e1      	cmp	r9, ip
 800a824:	f84e 2b04 	str.w	r2, [lr], #4
 800a828:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a82c:	d2de      	bcs.n	800a7ec <quorem+0x42>
 800a82e:	9b00      	ldr	r3, [sp, #0]
 800a830:	58eb      	ldr	r3, [r5, r3]
 800a832:	b92b      	cbnz	r3, 800a840 <quorem+0x96>
 800a834:	9b01      	ldr	r3, [sp, #4]
 800a836:	3b04      	subs	r3, #4
 800a838:	429d      	cmp	r5, r3
 800a83a:	461a      	mov	r2, r3
 800a83c:	d32f      	bcc.n	800a89e <quorem+0xf4>
 800a83e:	613c      	str	r4, [r7, #16]
 800a840:	4638      	mov	r0, r7
 800a842:	f001 f97b 	bl	800bb3c <__mcmp>
 800a846:	2800      	cmp	r0, #0
 800a848:	db25      	blt.n	800a896 <quorem+0xec>
 800a84a:	4629      	mov	r1, r5
 800a84c:	2000      	movs	r0, #0
 800a84e:	f858 2b04 	ldr.w	r2, [r8], #4
 800a852:	f8d1 c000 	ldr.w	ip, [r1]
 800a856:	fa1f fe82 	uxth.w	lr, r2
 800a85a:	fa1f f38c 	uxth.w	r3, ip
 800a85e:	eba3 030e 	sub.w	r3, r3, lr
 800a862:	4403      	add	r3, r0
 800a864:	0c12      	lsrs	r2, r2, #16
 800a866:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a86a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a86e:	b29b      	uxth	r3, r3
 800a870:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a874:	45c1      	cmp	r9, r8
 800a876:	f841 3b04 	str.w	r3, [r1], #4
 800a87a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a87e:	d2e6      	bcs.n	800a84e <quorem+0xa4>
 800a880:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a884:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a888:	b922      	cbnz	r2, 800a894 <quorem+0xea>
 800a88a:	3b04      	subs	r3, #4
 800a88c:	429d      	cmp	r5, r3
 800a88e:	461a      	mov	r2, r3
 800a890:	d30b      	bcc.n	800a8aa <quorem+0x100>
 800a892:	613c      	str	r4, [r7, #16]
 800a894:	3601      	adds	r6, #1
 800a896:	4630      	mov	r0, r6
 800a898:	b003      	add	sp, #12
 800a89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a89e:	6812      	ldr	r2, [r2, #0]
 800a8a0:	3b04      	subs	r3, #4
 800a8a2:	2a00      	cmp	r2, #0
 800a8a4:	d1cb      	bne.n	800a83e <quorem+0x94>
 800a8a6:	3c01      	subs	r4, #1
 800a8a8:	e7c6      	b.n	800a838 <quorem+0x8e>
 800a8aa:	6812      	ldr	r2, [r2, #0]
 800a8ac:	3b04      	subs	r3, #4
 800a8ae:	2a00      	cmp	r2, #0
 800a8b0:	d1ef      	bne.n	800a892 <quorem+0xe8>
 800a8b2:	3c01      	subs	r4, #1
 800a8b4:	e7ea      	b.n	800a88c <quorem+0xe2>
 800a8b6:	2000      	movs	r0, #0
 800a8b8:	e7ee      	b.n	800a898 <quorem+0xee>
 800a8ba:	0000      	movs	r0, r0
 800a8bc:	0000      	movs	r0, r0
	...

0800a8c0 <_dtoa_r>:
 800a8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c4:	69c7      	ldr	r7, [r0, #28]
 800a8c6:	b099      	sub	sp, #100	@ 0x64
 800a8c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a8cc:	ec55 4b10 	vmov	r4, r5, d0
 800a8d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a8d2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a8d4:	4683      	mov	fp, r0
 800a8d6:	920e      	str	r2, [sp, #56]	@ 0x38
 800a8d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a8da:	b97f      	cbnz	r7, 800a8fc <_dtoa_r+0x3c>
 800a8dc:	2010      	movs	r0, #16
 800a8de:	f000 fdfd 	bl	800b4dc <malloc>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	f8cb 001c 	str.w	r0, [fp, #28]
 800a8e8:	b920      	cbnz	r0, 800a8f4 <_dtoa_r+0x34>
 800a8ea:	4ba7      	ldr	r3, [pc, #668]	@ (800ab88 <_dtoa_r+0x2c8>)
 800a8ec:	21ef      	movs	r1, #239	@ 0xef
 800a8ee:	48a7      	ldr	r0, [pc, #668]	@ (800ab8c <_dtoa_r+0x2cc>)
 800a8f0:	f001 fd42 	bl	800c378 <__assert_func>
 800a8f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a8f8:	6007      	str	r7, [r0, #0]
 800a8fa:	60c7      	str	r7, [r0, #12]
 800a8fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a900:	6819      	ldr	r1, [r3, #0]
 800a902:	b159      	cbz	r1, 800a91c <_dtoa_r+0x5c>
 800a904:	685a      	ldr	r2, [r3, #4]
 800a906:	604a      	str	r2, [r1, #4]
 800a908:	2301      	movs	r3, #1
 800a90a:	4093      	lsls	r3, r2
 800a90c:	608b      	str	r3, [r1, #8]
 800a90e:	4658      	mov	r0, fp
 800a910:	f000 feda 	bl	800b6c8 <_Bfree>
 800a914:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a918:	2200      	movs	r2, #0
 800a91a:	601a      	str	r2, [r3, #0]
 800a91c:	1e2b      	subs	r3, r5, #0
 800a91e:	bfb9      	ittee	lt
 800a920:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a924:	9303      	strlt	r3, [sp, #12]
 800a926:	2300      	movge	r3, #0
 800a928:	6033      	strge	r3, [r6, #0]
 800a92a:	9f03      	ldr	r7, [sp, #12]
 800a92c:	4b98      	ldr	r3, [pc, #608]	@ (800ab90 <_dtoa_r+0x2d0>)
 800a92e:	bfbc      	itt	lt
 800a930:	2201      	movlt	r2, #1
 800a932:	6032      	strlt	r2, [r6, #0]
 800a934:	43bb      	bics	r3, r7
 800a936:	d112      	bne.n	800a95e <_dtoa_r+0x9e>
 800a938:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a93a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a93e:	6013      	str	r3, [r2, #0]
 800a940:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a944:	4323      	orrs	r3, r4
 800a946:	f000 854d 	beq.w	800b3e4 <_dtoa_r+0xb24>
 800a94a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a94c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800aba4 <_dtoa_r+0x2e4>
 800a950:	2b00      	cmp	r3, #0
 800a952:	f000 854f 	beq.w	800b3f4 <_dtoa_r+0xb34>
 800a956:	f10a 0303 	add.w	r3, sl, #3
 800a95a:	f000 bd49 	b.w	800b3f0 <_dtoa_r+0xb30>
 800a95e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a962:	2200      	movs	r2, #0
 800a964:	ec51 0b17 	vmov	r0, r1, d7
 800a968:	2300      	movs	r3, #0
 800a96a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a96e:	f7f6 f8ab 	bl	8000ac8 <__aeabi_dcmpeq>
 800a972:	4680      	mov	r8, r0
 800a974:	b158      	cbz	r0, 800a98e <_dtoa_r+0xce>
 800a976:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a978:	2301      	movs	r3, #1
 800a97a:	6013      	str	r3, [r2, #0]
 800a97c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a97e:	b113      	cbz	r3, 800a986 <_dtoa_r+0xc6>
 800a980:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a982:	4b84      	ldr	r3, [pc, #528]	@ (800ab94 <_dtoa_r+0x2d4>)
 800a984:	6013      	str	r3, [r2, #0]
 800a986:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800aba8 <_dtoa_r+0x2e8>
 800a98a:	f000 bd33 	b.w	800b3f4 <_dtoa_r+0xb34>
 800a98e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a992:	aa16      	add	r2, sp, #88	@ 0x58
 800a994:	a917      	add	r1, sp, #92	@ 0x5c
 800a996:	4658      	mov	r0, fp
 800a998:	f001 f980 	bl	800bc9c <__d2b>
 800a99c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a9a0:	4681      	mov	r9, r0
 800a9a2:	2e00      	cmp	r6, #0
 800a9a4:	d077      	beq.n	800aa96 <_dtoa_r+0x1d6>
 800a9a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a9a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a9ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a9b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a9bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	4b74      	ldr	r3, [pc, #464]	@ (800ab98 <_dtoa_r+0x2d8>)
 800a9c6:	f7f5 fc5f 	bl	8000288 <__aeabi_dsub>
 800a9ca:	a369      	add	r3, pc, #420	@ (adr r3, 800ab70 <_dtoa_r+0x2b0>)
 800a9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d0:	f7f5 fe12 	bl	80005f8 <__aeabi_dmul>
 800a9d4:	a368      	add	r3, pc, #416	@ (adr r3, 800ab78 <_dtoa_r+0x2b8>)
 800a9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9da:	f7f5 fc57 	bl	800028c <__adddf3>
 800a9de:	4604      	mov	r4, r0
 800a9e0:	4630      	mov	r0, r6
 800a9e2:	460d      	mov	r5, r1
 800a9e4:	f7f5 fd9e 	bl	8000524 <__aeabi_i2d>
 800a9e8:	a365      	add	r3, pc, #404	@ (adr r3, 800ab80 <_dtoa_r+0x2c0>)
 800a9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ee:	f7f5 fe03 	bl	80005f8 <__aeabi_dmul>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	4629      	mov	r1, r5
 800a9fa:	f7f5 fc47 	bl	800028c <__adddf3>
 800a9fe:	4604      	mov	r4, r0
 800aa00:	460d      	mov	r5, r1
 800aa02:	f7f6 f8a9 	bl	8000b58 <__aeabi_d2iz>
 800aa06:	2200      	movs	r2, #0
 800aa08:	4607      	mov	r7, r0
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	4629      	mov	r1, r5
 800aa10:	f7f6 f864 	bl	8000adc <__aeabi_dcmplt>
 800aa14:	b140      	cbz	r0, 800aa28 <_dtoa_r+0x168>
 800aa16:	4638      	mov	r0, r7
 800aa18:	f7f5 fd84 	bl	8000524 <__aeabi_i2d>
 800aa1c:	4622      	mov	r2, r4
 800aa1e:	462b      	mov	r3, r5
 800aa20:	f7f6 f852 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa24:	b900      	cbnz	r0, 800aa28 <_dtoa_r+0x168>
 800aa26:	3f01      	subs	r7, #1
 800aa28:	2f16      	cmp	r7, #22
 800aa2a:	d851      	bhi.n	800aad0 <_dtoa_r+0x210>
 800aa2c:	4b5b      	ldr	r3, [pc, #364]	@ (800ab9c <_dtoa_r+0x2dc>)
 800aa2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aa32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa3a:	f7f6 f84f 	bl	8000adc <__aeabi_dcmplt>
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	d048      	beq.n	800aad4 <_dtoa_r+0x214>
 800aa42:	3f01      	subs	r7, #1
 800aa44:	2300      	movs	r3, #0
 800aa46:	9312      	str	r3, [sp, #72]	@ 0x48
 800aa48:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aa4a:	1b9b      	subs	r3, r3, r6
 800aa4c:	1e5a      	subs	r2, r3, #1
 800aa4e:	bf44      	itt	mi
 800aa50:	f1c3 0801 	rsbmi	r8, r3, #1
 800aa54:	2300      	movmi	r3, #0
 800aa56:	9208      	str	r2, [sp, #32]
 800aa58:	bf54      	ite	pl
 800aa5a:	f04f 0800 	movpl.w	r8, #0
 800aa5e:	9308      	strmi	r3, [sp, #32]
 800aa60:	2f00      	cmp	r7, #0
 800aa62:	db39      	blt.n	800aad8 <_dtoa_r+0x218>
 800aa64:	9b08      	ldr	r3, [sp, #32]
 800aa66:	970f      	str	r7, [sp, #60]	@ 0x3c
 800aa68:	443b      	add	r3, r7
 800aa6a:	9308      	str	r3, [sp, #32]
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa72:	2b09      	cmp	r3, #9
 800aa74:	d864      	bhi.n	800ab40 <_dtoa_r+0x280>
 800aa76:	2b05      	cmp	r3, #5
 800aa78:	bfc4      	itt	gt
 800aa7a:	3b04      	subgt	r3, #4
 800aa7c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800aa7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa80:	f1a3 0302 	sub.w	r3, r3, #2
 800aa84:	bfcc      	ite	gt
 800aa86:	2400      	movgt	r4, #0
 800aa88:	2401      	movle	r4, #1
 800aa8a:	2b03      	cmp	r3, #3
 800aa8c:	d863      	bhi.n	800ab56 <_dtoa_r+0x296>
 800aa8e:	e8df f003 	tbb	[pc, r3]
 800aa92:	372a      	.short	0x372a
 800aa94:	5535      	.short	0x5535
 800aa96:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800aa9a:	441e      	add	r6, r3
 800aa9c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aaa0:	2b20      	cmp	r3, #32
 800aaa2:	bfc1      	itttt	gt
 800aaa4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800aaa8:	409f      	lslgt	r7, r3
 800aaaa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800aaae:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aab2:	bfd6      	itet	le
 800aab4:	f1c3 0320 	rsble	r3, r3, #32
 800aab8:	ea47 0003 	orrgt.w	r0, r7, r3
 800aabc:	fa04 f003 	lslle.w	r0, r4, r3
 800aac0:	f7f5 fd20 	bl	8000504 <__aeabi_ui2d>
 800aac4:	2201      	movs	r2, #1
 800aac6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aaca:	3e01      	subs	r6, #1
 800aacc:	9214      	str	r2, [sp, #80]	@ 0x50
 800aace:	e777      	b.n	800a9c0 <_dtoa_r+0x100>
 800aad0:	2301      	movs	r3, #1
 800aad2:	e7b8      	b.n	800aa46 <_dtoa_r+0x186>
 800aad4:	9012      	str	r0, [sp, #72]	@ 0x48
 800aad6:	e7b7      	b.n	800aa48 <_dtoa_r+0x188>
 800aad8:	427b      	negs	r3, r7
 800aada:	930a      	str	r3, [sp, #40]	@ 0x28
 800aadc:	2300      	movs	r3, #0
 800aade:	eba8 0807 	sub.w	r8, r8, r7
 800aae2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aae4:	e7c4      	b.n	800aa70 <_dtoa_r+0x1b0>
 800aae6:	2300      	movs	r3, #0
 800aae8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aaea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	dc35      	bgt.n	800ab5c <_dtoa_r+0x29c>
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	9300      	str	r3, [sp, #0]
 800aaf4:	9307      	str	r3, [sp, #28]
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	920e      	str	r2, [sp, #56]	@ 0x38
 800aafa:	e00b      	b.n	800ab14 <_dtoa_r+0x254>
 800aafc:	2301      	movs	r3, #1
 800aafe:	e7f3      	b.n	800aae8 <_dtoa_r+0x228>
 800ab00:	2300      	movs	r3, #0
 800ab02:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab06:	18fb      	adds	r3, r7, r3
 800ab08:	9300      	str	r3, [sp, #0]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	9307      	str	r3, [sp, #28]
 800ab10:	bfb8      	it	lt
 800ab12:	2301      	movlt	r3, #1
 800ab14:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ab18:	2100      	movs	r1, #0
 800ab1a:	2204      	movs	r2, #4
 800ab1c:	f102 0514 	add.w	r5, r2, #20
 800ab20:	429d      	cmp	r5, r3
 800ab22:	d91f      	bls.n	800ab64 <_dtoa_r+0x2a4>
 800ab24:	6041      	str	r1, [r0, #4]
 800ab26:	4658      	mov	r0, fp
 800ab28:	f000 fd8e 	bl	800b648 <_Balloc>
 800ab2c:	4682      	mov	sl, r0
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	d13c      	bne.n	800abac <_dtoa_r+0x2ec>
 800ab32:	4b1b      	ldr	r3, [pc, #108]	@ (800aba0 <_dtoa_r+0x2e0>)
 800ab34:	4602      	mov	r2, r0
 800ab36:	f240 11af 	movw	r1, #431	@ 0x1af
 800ab3a:	e6d8      	b.n	800a8ee <_dtoa_r+0x2e>
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	e7e0      	b.n	800ab02 <_dtoa_r+0x242>
 800ab40:	2401      	movs	r4, #1
 800ab42:	2300      	movs	r3, #0
 800ab44:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab46:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ab48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab4c:	9300      	str	r3, [sp, #0]
 800ab4e:	9307      	str	r3, [sp, #28]
 800ab50:	2200      	movs	r2, #0
 800ab52:	2312      	movs	r3, #18
 800ab54:	e7d0      	b.n	800aaf8 <_dtoa_r+0x238>
 800ab56:	2301      	movs	r3, #1
 800ab58:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab5a:	e7f5      	b.n	800ab48 <_dtoa_r+0x288>
 800ab5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab5e:	9300      	str	r3, [sp, #0]
 800ab60:	9307      	str	r3, [sp, #28]
 800ab62:	e7d7      	b.n	800ab14 <_dtoa_r+0x254>
 800ab64:	3101      	adds	r1, #1
 800ab66:	0052      	lsls	r2, r2, #1
 800ab68:	e7d8      	b.n	800ab1c <_dtoa_r+0x25c>
 800ab6a:	bf00      	nop
 800ab6c:	f3af 8000 	nop.w
 800ab70:	636f4361 	.word	0x636f4361
 800ab74:	3fd287a7 	.word	0x3fd287a7
 800ab78:	8b60c8b3 	.word	0x8b60c8b3
 800ab7c:	3fc68a28 	.word	0x3fc68a28
 800ab80:	509f79fb 	.word	0x509f79fb
 800ab84:	3fd34413 	.word	0x3fd34413
 800ab88:	0800c659 	.word	0x0800c659
 800ab8c:	0800c670 	.word	0x0800c670
 800ab90:	7ff00000 	.word	0x7ff00000
 800ab94:	0800c629 	.word	0x0800c629
 800ab98:	3ff80000 	.word	0x3ff80000
 800ab9c:	0800c768 	.word	0x0800c768
 800aba0:	0800c6c8 	.word	0x0800c6c8
 800aba4:	0800c655 	.word	0x0800c655
 800aba8:	0800c628 	.word	0x0800c628
 800abac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800abb0:	6018      	str	r0, [r3, #0]
 800abb2:	9b07      	ldr	r3, [sp, #28]
 800abb4:	2b0e      	cmp	r3, #14
 800abb6:	f200 80a4 	bhi.w	800ad02 <_dtoa_r+0x442>
 800abba:	2c00      	cmp	r4, #0
 800abbc:	f000 80a1 	beq.w	800ad02 <_dtoa_r+0x442>
 800abc0:	2f00      	cmp	r7, #0
 800abc2:	dd33      	ble.n	800ac2c <_dtoa_r+0x36c>
 800abc4:	4bad      	ldr	r3, [pc, #692]	@ (800ae7c <_dtoa_r+0x5bc>)
 800abc6:	f007 020f 	and.w	r2, r7, #15
 800abca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abce:	ed93 7b00 	vldr	d7, [r3]
 800abd2:	05f8      	lsls	r0, r7, #23
 800abd4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800abd8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800abdc:	d516      	bpl.n	800ac0c <_dtoa_r+0x34c>
 800abde:	4ba8      	ldr	r3, [pc, #672]	@ (800ae80 <_dtoa_r+0x5c0>)
 800abe0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800abe4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800abe8:	f7f5 fe30 	bl	800084c <__aeabi_ddiv>
 800abec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abf0:	f004 040f 	and.w	r4, r4, #15
 800abf4:	2603      	movs	r6, #3
 800abf6:	4da2      	ldr	r5, [pc, #648]	@ (800ae80 <_dtoa_r+0x5c0>)
 800abf8:	b954      	cbnz	r4, 800ac10 <_dtoa_r+0x350>
 800abfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac02:	f7f5 fe23 	bl	800084c <__aeabi_ddiv>
 800ac06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac0a:	e028      	b.n	800ac5e <_dtoa_r+0x39e>
 800ac0c:	2602      	movs	r6, #2
 800ac0e:	e7f2      	b.n	800abf6 <_dtoa_r+0x336>
 800ac10:	07e1      	lsls	r1, r4, #31
 800ac12:	d508      	bpl.n	800ac26 <_dtoa_r+0x366>
 800ac14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac18:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac1c:	f7f5 fcec 	bl	80005f8 <__aeabi_dmul>
 800ac20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac24:	3601      	adds	r6, #1
 800ac26:	1064      	asrs	r4, r4, #1
 800ac28:	3508      	adds	r5, #8
 800ac2a:	e7e5      	b.n	800abf8 <_dtoa_r+0x338>
 800ac2c:	f000 80d2 	beq.w	800add4 <_dtoa_r+0x514>
 800ac30:	427c      	negs	r4, r7
 800ac32:	4b92      	ldr	r3, [pc, #584]	@ (800ae7c <_dtoa_r+0x5bc>)
 800ac34:	4d92      	ldr	r5, [pc, #584]	@ (800ae80 <_dtoa_r+0x5c0>)
 800ac36:	f004 020f 	and.w	r2, r4, #15
 800ac3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac46:	f7f5 fcd7 	bl	80005f8 <__aeabi_dmul>
 800ac4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac4e:	1124      	asrs	r4, r4, #4
 800ac50:	2300      	movs	r3, #0
 800ac52:	2602      	movs	r6, #2
 800ac54:	2c00      	cmp	r4, #0
 800ac56:	f040 80b2 	bne.w	800adbe <_dtoa_r+0x4fe>
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d1d3      	bne.n	800ac06 <_dtoa_r+0x346>
 800ac5e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ac60:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f000 80b7 	beq.w	800add8 <_dtoa_r+0x518>
 800ac6a:	4b86      	ldr	r3, [pc, #536]	@ (800ae84 <_dtoa_r+0x5c4>)
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	4620      	mov	r0, r4
 800ac70:	4629      	mov	r1, r5
 800ac72:	f7f5 ff33 	bl	8000adc <__aeabi_dcmplt>
 800ac76:	2800      	cmp	r0, #0
 800ac78:	f000 80ae 	beq.w	800add8 <_dtoa_r+0x518>
 800ac7c:	9b07      	ldr	r3, [sp, #28]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	f000 80aa 	beq.w	800add8 <_dtoa_r+0x518>
 800ac84:	9b00      	ldr	r3, [sp, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	dd37      	ble.n	800acfa <_dtoa_r+0x43a>
 800ac8a:	1e7b      	subs	r3, r7, #1
 800ac8c:	9304      	str	r3, [sp, #16]
 800ac8e:	4620      	mov	r0, r4
 800ac90:	4b7d      	ldr	r3, [pc, #500]	@ (800ae88 <_dtoa_r+0x5c8>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	4629      	mov	r1, r5
 800ac96:	f7f5 fcaf 	bl	80005f8 <__aeabi_dmul>
 800ac9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac9e:	9c00      	ldr	r4, [sp, #0]
 800aca0:	3601      	adds	r6, #1
 800aca2:	4630      	mov	r0, r6
 800aca4:	f7f5 fc3e 	bl	8000524 <__aeabi_i2d>
 800aca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800acac:	f7f5 fca4 	bl	80005f8 <__aeabi_dmul>
 800acb0:	4b76      	ldr	r3, [pc, #472]	@ (800ae8c <_dtoa_r+0x5cc>)
 800acb2:	2200      	movs	r2, #0
 800acb4:	f7f5 faea 	bl	800028c <__adddf3>
 800acb8:	4605      	mov	r5, r0
 800acba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800acbe:	2c00      	cmp	r4, #0
 800acc0:	f040 808d 	bne.w	800adde <_dtoa_r+0x51e>
 800acc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acc8:	4b71      	ldr	r3, [pc, #452]	@ (800ae90 <_dtoa_r+0x5d0>)
 800acca:	2200      	movs	r2, #0
 800accc:	f7f5 fadc 	bl	8000288 <__aeabi_dsub>
 800acd0:	4602      	mov	r2, r0
 800acd2:	460b      	mov	r3, r1
 800acd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800acd8:	462a      	mov	r2, r5
 800acda:	4633      	mov	r3, r6
 800acdc:	f7f5 ff1c 	bl	8000b18 <__aeabi_dcmpgt>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	f040 828b 	bne.w	800b1fc <_dtoa_r+0x93c>
 800ace6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acea:	462a      	mov	r2, r5
 800acec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800acf0:	f7f5 fef4 	bl	8000adc <__aeabi_dcmplt>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	f040 8128 	bne.w	800af4a <_dtoa_r+0x68a>
 800acfa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800acfe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ad02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f2c0 815a 	blt.w	800afbe <_dtoa_r+0x6fe>
 800ad0a:	2f0e      	cmp	r7, #14
 800ad0c:	f300 8157 	bgt.w	800afbe <_dtoa_r+0x6fe>
 800ad10:	4b5a      	ldr	r3, [pc, #360]	@ (800ae7c <_dtoa_r+0x5bc>)
 800ad12:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ad16:	ed93 7b00 	vldr	d7, [r3]
 800ad1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	ed8d 7b00 	vstr	d7, [sp]
 800ad22:	da03      	bge.n	800ad2c <_dtoa_r+0x46c>
 800ad24:	9b07      	ldr	r3, [sp, #28]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	f340 8101 	ble.w	800af2e <_dtoa_r+0x66e>
 800ad2c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ad30:	4656      	mov	r6, sl
 800ad32:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad36:	4620      	mov	r0, r4
 800ad38:	4629      	mov	r1, r5
 800ad3a:	f7f5 fd87 	bl	800084c <__aeabi_ddiv>
 800ad3e:	f7f5 ff0b 	bl	8000b58 <__aeabi_d2iz>
 800ad42:	4680      	mov	r8, r0
 800ad44:	f7f5 fbee 	bl	8000524 <__aeabi_i2d>
 800ad48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad4c:	f7f5 fc54 	bl	80005f8 <__aeabi_dmul>
 800ad50:	4602      	mov	r2, r0
 800ad52:	460b      	mov	r3, r1
 800ad54:	4620      	mov	r0, r4
 800ad56:	4629      	mov	r1, r5
 800ad58:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ad5c:	f7f5 fa94 	bl	8000288 <__aeabi_dsub>
 800ad60:	f806 4b01 	strb.w	r4, [r6], #1
 800ad64:	9d07      	ldr	r5, [sp, #28]
 800ad66:	eba6 040a 	sub.w	r4, r6, sl
 800ad6a:	42a5      	cmp	r5, r4
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	460b      	mov	r3, r1
 800ad70:	f040 8117 	bne.w	800afa2 <_dtoa_r+0x6e2>
 800ad74:	f7f5 fa8a 	bl	800028c <__adddf3>
 800ad78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad7c:	4604      	mov	r4, r0
 800ad7e:	460d      	mov	r5, r1
 800ad80:	f7f5 feca 	bl	8000b18 <__aeabi_dcmpgt>
 800ad84:	2800      	cmp	r0, #0
 800ad86:	f040 80f9 	bne.w	800af7c <_dtoa_r+0x6bc>
 800ad8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad8e:	4620      	mov	r0, r4
 800ad90:	4629      	mov	r1, r5
 800ad92:	f7f5 fe99 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad96:	b118      	cbz	r0, 800ada0 <_dtoa_r+0x4e0>
 800ad98:	f018 0f01 	tst.w	r8, #1
 800ad9c:	f040 80ee 	bne.w	800af7c <_dtoa_r+0x6bc>
 800ada0:	4649      	mov	r1, r9
 800ada2:	4658      	mov	r0, fp
 800ada4:	f000 fc90 	bl	800b6c8 <_Bfree>
 800ada8:	2300      	movs	r3, #0
 800adaa:	7033      	strb	r3, [r6, #0]
 800adac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800adae:	3701      	adds	r7, #1
 800adb0:	601f      	str	r7, [r3, #0]
 800adb2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f000 831d 	beq.w	800b3f4 <_dtoa_r+0xb34>
 800adba:	601e      	str	r6, [r3, #0]
 800adbc:	e31a      	b.n	800b3f4 <_dtoa_r+0xb34>
 800adbe:	07e2      	lsls	r2, r4, #31
 800adc0:	d505      	bpl.n	800adce <_dtoa_r+0x50e>
 800adc2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800adc6:	f7f5 fc17 	bl	80005f8 <__aeabi_dmul>
 800adca:	3601      	adds	r6, #1
 800adcc:	2301      	movs	r3, #1
 800adce:	1064      	asrs	r4, r4, #1
 800add0:	3508      	adds	r5, #8
 800add2:	e73f      	b.n	800ac54 <_dtoa_r+0x394>
 800add4:	2602      	movs	r6, #2
 800add6:	e742      	b.n	800ac5e <_dtoa_r+0x39e>
 800add8:	9c07      	ldr	r4, [sp, #28]
 800adda:	9704      	str	r7, [sp, #16]
 800addc:	e761      	b.n	800aca2 <_dtoa_r+0x3e2>
 800adde:	4b27      	ldr	r3, [pc, #156]	@ (800ae7c <_dtoa_r+0x5bc>)
 800ade0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ade2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ade6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800adea:	4454      	add	r4, sl
 800adec:	2900      	cmp	r1, #0
 800adee:	d053      	beq.n	800ae98 <_dtoa_r+0x5d8>
 800adf0:	4928      	ldr	r1, [pc, #160]	@ (800ae94 <_dtoa_r+0x5d4>)
 800adf2:	2000      	movs	r0, #0
 800adf4:	f7f5 fd2a 	bl	800084c <__aeabi_ddiv>
 800adf8:	4633      	mov	r3, r6
 800adfa:	462a      	mov	r2, r5
 800adfc:	f7f5 fa44 	bl	8000288 <__aeabi_dsub>
 800ae00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ae04:	4656      	mov	r6, sl
 800ae06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae0a:	f7f5 fea5 	bl	8000b58 <__aeabi_d2iz>
 800ae0e:	4605      	mov	r5, r0
 800ae10:	f7f5 fb88 	bl	8000524 <__aeabi_i2d>
 800ae14:	4602      	mov	r2, r0
 800ae16:	460b      	mov	r3, r1
 800ae18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae1c:	f7f5 fa34 	bl	8000288 <__aeabi_dsub>
 800ae20:	3530      	adds	r5, #48	@ 0x30
 800ae22:	4602      	mov	r2, r0
 800ae24:	460b      	mov	r3, r1
 800ae26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae2a:	f806 5b01 	strb.w	r5, [r6], #1
 800ae2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae32:	f7f5 fe53 	bl	8000adc <__aeabi_dcmplt>
 800ae36:	2800      	cmp	r0, #0
 800ae38:	d171      	bne.n	800af1e <_dtoa_r+0x65e>
 800ae3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae3e:	4911      	ldr	r1, [pc, #68]	@ (800ae84 <_dtoa_r+0x5c4>)
 800ae40:	2000      	movs	r0, #0
 800ae42:	f7f5 fa21 	bl	8000288 <__aeabi_dsub>
 800ae46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae4a:	f7f5 fe47 	bl	8000adc <__aeabi_dcmplt>
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	f040 8095 	bne.w	800af7e <_dtoa_r+0x6be>
 800ae54:	42a6      	cmp	r6, r4
 800ae56:	f43f af50 	beq.w	800acfa <_dtoa_r+0x43a>
 800ae5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ae5e:	4b0a      	ldr	r3, [pc, #40]	@ (800ae88 <_dtoa_r+0x5c8>)
 800ae60:	2200      	movs	r2, #0
 800ae62:	f7f5 fbc9 	bl	80005f8 <__aeabi_dmul>
 800ae66:	4b08      	ldr	r3, [pc, #32]	@ (800ae88 <_dtoa_r+0x5c8>)
 800ae68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae72:	f7f5 fbc1 	bl	80005f8 <__aeabi_dmul>
 800ae76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae7a:	e7c4      	b.n	800ae06 <_dtoa_r+0x546>
 800ae7c:	0800c768 	.word	0x0800c768
 800ae80:	0800c740 	.word	0x0800c740
 800ae84:	3ff00000 	.word	0x3ff00000
 800ae88:	40240000 	.word	0x40240000
 800ae8c:	401c0000 	.word	0x401c0000
 800ae90:	40140000 	.word	0x40140000
 800ae94:	3fe00000 	.word	0x3fe00000
 800ae98:	4631      	mov	r1, r6
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	f7f5 fbac 	bl	80005f8 <__aeabi_dmul>
 800aea0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aea4:	9415      	str	r4, [sp, #84]	@ 0x54
 800aea6:	4656      	mov	r6, sl
 800aea8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeac:	f7f5 fe54 	bl	8000b58 <__aeabi_d2iz>
 800aeb0:	4605      	mov	r5, r0
 800aeb2:	f7f5 fb37 	bl	8000524 <__aeabi_i2d>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	460b      	mov	r3, r1
 800aeba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aebe:	f7f5 f9e3 	bl	8000288 <__aeabi_dsub>
 800aec2:	3530      	adds	r5, #48	@ 0x30
 800aec4:	f806 5b01 	strb.w	r5, [r6], #1
 800aec8:	4602      	mov	r2, r0
 800aeca:	460b      	mov	r3, r1
 800aecc:	42a6      	cmp	r6, r4
 800aece:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aed2:	f04f 0200 	mov.w	r2, #0
 800aed6:	d124      	bne.n	800af22 <_dtoa_r+0x662>
 800aed8:	4bac      	ldr	r3, [pc, #688]	@ (800b18c <_dtoa_r+0x8cc>)
 800aeda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aede:	f7f5 f9d5 	bl	800028c <__adddf3>
 800aee2:	4602      	mov	r2, r0
 800aee4:	460b      	mov	r3, r1
 800aee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeea:	f7f5 fe15 	bl	8000b18 <__aeabi_dcmpgt>
 800aeee:	2800      	cmp	r0, #0
 800aef0:	d145      	bne.n	800af7e <_dtoa_r+0x6be>
 800aef2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aef6:	49a5      	ldr	r1, [pc, #660]	@ (800b18c <_dtoa_r+0x8cc>)
 800aef8:	2000      	movs	r0, #0
 800aefa:	f7f5 f9c5 	bl	8000288 <__aeabi_dsub>
 800aefe:	4602      	mov	r2, r0
 800af00:	460b      	mov	r3, r1
 800af02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af06:	f7f5 fde9 	bl	8000adc <__aeabi_dcmplt>
 800af0a:	2800      	cmp	r0, #0
 800af0c:	f43f aef5 	beq.w	800acfa <_dtoa_r+0x43a>
 800af10:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800af12:	1e73      	subs	r3, r6, #1
 800af14:	9315      	str	r3, [sp, #84]	@ 0x54
 800af16:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800af1a:	2b30      	cmp	r3, #48	@ 0x30
 800af1c:	d0f8      	beq.n	800af10 <_dtoa_r+0x650>
 800af1e:	9f04      	ldr	r7, [sp, #16]
 800af20:	e73e      	b.n	800ada0 <_dtoa_r+0x4e0>
 800af22:	4b9b      	ldr	r3, [pc, #620]	@ (800b190 <_dtoa_r+0x8d0>)
 800af24:	f7f5 fb68 	bl	80005f8 <__aeabi_dmul>
 800af28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af2c:	e7bc      	b.n	800aea8 <_dtoa_r+0x5e8>
 800af2e:	d10c      	bne.n	800af4a <_dtoa_r+0x68a>
 800af30:	4b98      	ldr	r3, [pc, #608]	@ (800b194 <_dtoa_r+0x8d4>)
 800af32:	2200      	movs	r2, #0
 800af34:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af38:	f7f5 fb5e 	bl	80005f8 <__aeabi_dmul>
 800af3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af40:	f7f5 fde0 	bl	8000b04 <__aeabi_dcmpge>
 800af44:	2800      	cmp	r0, #0
 800af46:	f000 8157 	beq.w	800b1f8 <_dtoa_r+0x938>
 800af4a:	2400      	movs	r4, #0
 800af4c:	4625      	mov	r5, r4
 800af4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af50:	43db      	mvns	r3, r3
 800af52:	9304      	str	r3, [sp, #16]
 800af54:	4656      	mov	r6, sl
 800af56:	2700      	movs	r7, #0
 800af58:	4621      	mov	r1, r4
 800af5a:	4658      	mov	r0, fp
 800af5c:	f000 fbb4 	bl	800b6c8 <_Bfree>
 800af60:	2d00      	cmp	r5, #0
 800af62:	d0dc      	beq.n	800af1e <_dtoa_r+0x65e>
 800af64:	b12f      	cbz	r7, 800af72 <_dtoa_r+0x6b2>
 800af66:	42af      	cmp	r7, r5
 800af68:	d003      	beq.n	800af72 <_dtoa_r+0x6b2>
 800af6a:	4639      	mov	r1, r7
 800af6c:	4658      	mov	r0, fp
 800af6e:	f000 fbab 	bl	800b6c8 <_Bfree>
 800af72:	4629      	mov	r1, r5
 800af74:	4658      	mov	r0, fp
 800af76:	f000 fba7 	bl	800b6c8 <_Bfree>
 800af7a:	e7d0      	b.n	800af1e <_dtoa_r+0x65e>
 800af7c:	9704      	str	r7, [sp, #16]
 800af7e:	4633      	mov	r3, r6
 800af80:	461e      	mov	r6, r3
 800af82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af86:	2a39      	cmp	r2, #57	@ 0x39
 800af88:	d107      	bne.n	800af9a <_dtoa_r+0x6da>
 800af8a:	459a      	cmp	sl, r3
 800af8c:	d1f8      	bne.n	800af80 <_dtoa_r+0x6c0>
 800af8e:	9a04      	ldr	r2, [sp, #16]
 800af90:	3201      	adds	r2, #1
 800af92:	9204      	str	r2, [sp, #16]
 800af94:	2230      	movs	r2, #48	@ 0x30
 800af96:	f88a 2000 	strb.w	r2, [sl]
 800af9a:	781a      	ldrb	r2, [r3, #0]
 800af9c:	3201      	adds	r2, #1
 800af9e:	701a      	strb	r2, [r3, #0]
 800afa0:	e7bd      	b.n	800af1e <_dtoa_r+0x65e>
 800afa2:	4b7b      	ldr	r3, [pc, #492]	@ (800b190 <_dtoa_r+0x8d0>)
 800afa4:	2200      	movs	r2, #0
 800afa6:	f7f5 fb27 	bl	80005f8 <__aeabi_dmul>
 800afaa:	2200      	movs	r2, #0
 800afac:	2300      	movs	r3, #0
 800afae:	4604      	mov	r4, r0
 800afb0:	460d      	mov	r5, r1
 800afb2:	f7f5 fd89 	bl	8000ac8 <__aeabi_dcmpeq>
 800afb6:	2800      	cmp	r0, #0
 800afb8:	f43f aebb 	beq.w	800ad32 <_dtoa_r+0x472>
 800afbc:	e6f0      	b.n	800ada0 <_dtoa_r+0x4e0>
 800afbe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800afc0:	2a00      	cmp	r2, #0
 800afc2:	f000 80db 	beq.w	800b17c <_dtoa_r+0x8bc>
 800afc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afc8:	2a01      	cmp	r2, #1
 800afca:	f300 80bf 	bgt.w	800b14c <_dtoa_r+0x88c>
 800afce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800afd0:	2a00      	cmp	r2, #0
 800afd2:	f000 80b7 	beq.w	800b144 <_dtoa_r+0x884>
 800afd6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800afda:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800afdc:	4646      	mov	r6, r8
 800afde:	9a08      	ldr	r2, [sp, #32]
 800afe0:	2101      	movs	r1, #1
 800afe2:	441a      	add	r2, r3
 800afe4:	4658      	mov	r0, fp
 800afe6:	4498      	add	r8, r3
 800afe8:	9208      	str	r2, [sp, #32]
 800afea:	f000 fc21 	bl	800b830 <__i2b>
 800afee:	4605      	mov	r5, r0
 800aff0:	b15e      	cbz	r6, 800b00a <_dtoa_r+0x74a>
 800aff2:	9b08      	ldr	r3, [sp, #32]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	dd08      	ble.n	800b00a <_dtoa_r+0x74a>
 800aff8:	42b3      	cmp	r3, r6
 800affa:	9a08      	ldr	r2, [sp, #32]
 800affc:	bfa8      	it	ge
 800affe:	4633      	movge	r3, r6
 800b000:	eba8 0803 	sub.w	r8, r8, r3
 800b004:	1af6      	subs	r6, r6, r3
 800b006:	1ad3      	subs	r3, r2, r3
 800b008:	9308      	str	r3, [sp, #32]
 800b00a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b00c:	b1f3      	cbz	r3, 800b04c <_dtoa_r+0x78c>
 800b00e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b010:	2b00      	cmp	r3, #0
 800b012:	f000 80b7 	beq.w	800b184 <_dtoa_r+0x8c4>
 800b016:	b18c      	cbz	r4, 800b03c <_dtoa_r+0x77c>
 800b018:	4629      	mov	r1, r5
 800b01a:	4622      	mov	r2, r4
 800b01c:	4658      	mov	r0, fp
 800b01e:	f000 fcc7 	bl	800b9b0 <__pow5mult>
 800b022:	464a      	mov	r2, r9
 800b024:	4601      	mov	r1, r0
 800b026:	4605      	mov	r5, r0
 800b028:	4658      	mov	r0, fp
 800b02a:	f000 fc17 	bl	800b85c <__multiply>
 800b02e:	4649      	mov	r1, r9
 800b030:	9004      	str	r0, [sp, #16]
 800b032:	4658      	mov	r0, fp
 800b034:	f000 fb48 	bl	800b6c8 <_Bfree>
 800b038:	9b04      	ldr	r3, [sp, #16]
 800b03a:	4699      	mov	r9, r3
 800b03c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b03e:	1b1a      	subs	r2, r3, r4
 800b040:	d004      	beq.n	800b04c <_dtoa_r+0x78c>
 800b042:	4649      	mov	r1, r9
 800b044:	4658      	mov	r0, fp
 800b046:	f000 fcb3 	bl	800b9b0 <__pow5mult>
 800b04a:	4681      	mov	r9, r0
 800b04c:	2101      	movs	r1, #1
 800b04e:	4658      	mov	r0, fp
 800b050:	f000 fbee 	bl	800b830 <__i2b>
 800b054:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b056:	4604      	mov	r4, r0
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f000 81cf 	beq.w	800b3fc <_dtoa_r+0xb3c>
 800b05e:	461a      	mov	r2, r3
 800b060:	4601      	mov	r1, r0
 800b062:	4658      	mov	r0, fp
 800b064:	f000 fca4 	bl	800b9b0 <__pow5mult>
 800b068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	4604      	mov	r4, r0
 800b06e:	f300 8095 	bgt.w	800b19c <_dtoa_r+0x8dc>
 800b072:	9b02      	ldr	r3, [sp, #8]
 800b074:	2b00      	cmp	r3, #0
 800b076:	f040 8087 	bne.w	800b188 <_dtoa_r+0x8c8>
 800b07a:	9b03      	ldr	r3, [sp, #12]
 800b07c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b080:	2b00      	cmp	r3, #0
 800b082:	f040 8089 	bne.w	800b198 <_dtoa_r+0x8d8>
 800b086:	9b03      	ldr	r3, [sp, #12]
 800b088:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b08c:	0d1b      	lsrs	r3, r3, #20
 800b08e:	051b      	lsls	r3, r3, #20
 800b090:	b12b      	cbz	r3, 800b09e <_dtoa_r+0x7de>
 800b092:	9b08      	ldr	r3, [sp, #32]
 800b094:	3301      	adds	r3, #1
 800b096:	9308      	str	r3, [sp, #32]
 800b098:	f108 0801 	add.w	r8, r8, #1
 800b09c:	2301      	movs	r3, #1
 800b09e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f000 81b0 	beq.w	800b408 <_dtoa_r+0xb48>
 800b0a8:	6923      	ldr	r3, [r4, #16]
 800b0aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b0ae:	6918      	ldr	r0, [r3, #16]
 800b0b0:	f000 fb72 	bl	800b798 <__hi0bits>
 800b0b4:	f1c0 0020 	rsb	r0, r0, #32
 800b0b8:	9b08      	ldr	r3, [sp, #32]
 800b0ba:	4418      	add	r0, r3
 800b0bc:	f010 001f 	ands.w	r0, r0, #31
 800b0c0:	d077      	beq.n	800b1b2 <_dtoa_r+0x8f2>
 800b0c2:	f1c0 0320 	rsb	r3, r0, #32
 800b0c6:	2b04      	cmp	r3, #4
 800b0c8:	dd6b      	ble.n	800b1a2 <_dtoa_r+0x8e2>
 800b0ca:	9b08      	ldr	r3, [sp, #32]
 800b0cc:	f1c0 001c 	rsb	r0, r0, #28
 800b0d0:	4403      	add	r3, r0
 800b0d2:	4480      	add	r8, r0
 800b0d4:	4406      	add	r6, r0
 800b0d6:	9308      	str	r3, [sp, #32]
 800b0d8:	f1b8 0f00 	cmp.w	r8, #0
 800b0dc:	dd05      	ble.n	800b0ea <_dtoa_r+0x82a>
 800b0de:	4649      	mov	r1, r9
 800b0e0:	4642      	mov	r2, r8
 800b0e2:	4658      	mov	r0, fp
 800b0e4:	f000 fcbe 	bl	800ba64 <__lshift>
 800b0e8:	4681      	mov	r9, r0
 800b0ea:	9b08      	ldr	r3, [sp, #32]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	dd05      	ble.n	800b0fc <_dtoa_r+0x83c>
 800b0f0:	4621      	mov	r1, r4
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	4658      	mov	r0, fp
 800b0f6:	f000 fcb5 	bl	800ba64 <__lshift>
 800b0fa:	4604      	mov	r4, r0
 800b0fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d059      	beq.n	800b1b6 <_dtoa_r+0x8f6>
 800b102:	4621      	mov	r1, r4
 800b104:	4648      	mov	r0, r9
 800b106:	f000 fd19 	bl	800bb3c <__mcmp>
 800b10a:	2800      	cmp	r0, #0
 800b10c:	da53      	bge.n	800b1b6 <_dtoa_r+0x8f6>
 800b10e:	1e7b      	subs	r3, r7, #1
 800b110:	9304      	str	r3, [sp, #16]
 800b112:	4649      	mov	r1, r9
 800b114:	2300      	movs	r3, #0
 800b116:	220a      	movs	r2, #10
 800b118:	4658      	mov	r0, fp
 800b11a:	f000 faf7 	bl	800b70c <__multadd>
 800b11e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b120:	4681      	mov	r9, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	f000 8172 	beq.w	800b40c <_dtoa_r+0xb4c>
 800b128:	2300      	movs	r3, #0
 800b12a:	4629      	mov	r1, r5
 800b12c:	220a      	movs	r2, #10
 800b12e:	4658      	mov	r0, fp
 800b130:	f000 faec 	bl	800b70c <__multadd>
 800b134:	9b00      	ldr	r3, [sp, #0]
 800b136:	2b00      	cmp	r3, #0
 800b138:	4605      	mov	r5, r0
 800b13a:	dc67      	bgt.n	800b20c <_dtoa_r+0x94c>
 800b13c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b13e:	2b02      	cmp	r3, #2
 800b140:	dc41      	bgt.n	800b1c6 <_dtoa_r+0x906>
 800b142:	e063      	b.n	800b20c <_dtoa_r+0x94c>
 800b144:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b146:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b14a:	e746      	b.n	800afda <_dtoa_r+0x71a>
 800b14c:	9b07      	ldr	r3, [sp, #28]
 800b14e:	1e5c      	subs	r4, r3, #1
 800b150:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b152:	42a3      	cmp	r3, r4
 800b154:	bfbf      	itttt	lt
 800b156:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b158:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b15a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b15c:	1ae3      	sublt	r3, r4, r3
 800b15e:	bfb4      	ite	lt
 800b160:	18d2      	addlt	r2, r2, r3
 800b162:	1b1c      	subge	r4, r3, r4
 800b164:	9b07      	ldr	r3, [sp, #28]
 800b166:	bfbc      	itt	lt
 800b168:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b16a:	2400      	movlt	r4, #0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	bfb5      	itete	lt
 800b170:	eba8 0603 	sublt.w	r6, r8, r3
 800b174:	9b07      	ldrge	r3, [sp, #28]
 800b176:	2300      	movlt	r3, #0
 800b178:	4646      	movge	r6, r8
 800b17a:	e730      	b.n	800afde <_dtoa_r+0x71e>
 800b17c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b17e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b180:	4646      	mov	r6, r8
 800b182:	e735      	b.n	800aff0 <_dtoa_r+0x730>
 800b184:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b186:	e75c      	b.n	800b042 <_dtoa_r+0x782>
 800b188:	2300      	movs	r3, #0
 800b18a:	e788      	b.n	800b09e <_dtoa_r+0x7de>
 800b18c:	3fe00000 	.word	0x3fe00000
 800b190:	40240000 	.word	0x40240000
 800b194:	40140000 	.word	0x40140000
 800b198:	9b02      	ldr	r3, [sp, #8]
 800b19a:	e780      	b.n	800b09e <_dtoa_r+0x7de>
 800b19c:	2300      	movs	r3, #0
 800b19e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1a0:	e782      	b.n	800b0a8 <_dtoa_r+0x7e8>
 800b1a2:	d099      	beq.n	800b0d8 <_dtoa_r+0x818>
 800b1a4:	9a08      	ldr	r2, [sp, #32]
 800b1a6:	331c      	adds	r3, #28
 800b1a8:	441a      	add	r2, r3
 800b1aa:	4498      	add	r8, r3
 800b1ac:	441e      	add	r6, r3
 800b1ae:	9208      	str	r2, [sp, #32]
 800b1b0:	e792      	b.n	800b0d8 <_dtoa_r+0x818>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	e7f6      	b.n	800b1a4 <_dtoa_r+0x8e4>
 800b1b6:	9b07      	ldr	r3, [sp, #28]
 800b1b8:	9704      	str	r7, [sp, #16]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	dc20      	bgt.n	800b200 <_dtoa_r+0x940>
 800b1be:	9300      	str	r3, [sp, #0]
 800b1c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	dd1e      	ble.n	800b204 <_dtoa_r+0x944>
 800b1c6:	9b00      	ldr	r3, [sp, #0]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	f47f aec0 	bne.w	800af4e <_dtoa_r+0x68e>
 800b1ce:	4621      	mov	r1, r4
 800b1d0:	2205      	movs	r2, #5
 800b1d2:	4658      	mov	r0, fp
 800b1d4:	f000 fa9a 	bl	800b70c <__multadd>
 800b1d8:	4601      	mov	r1, r0
 800b1da:	4604      	mov	r4, r0
 800b1dc:	4648      	mov	r0, r9
 800b1de:	f000 fcad 	bl	800bb3c <__mcmp>
 800b1e2:	2800      	cmp	r0, #0
 800b1e4:	f77f aeb3 	ble.w	800af4e <_dtoa_r+0x68e>
 800b1e8:	4656      	mov	r6, sl
 800b1ea:	2331      	movs	r3, #49	@ 0x31
 800b1ec:	f806 3b01 	strb.w	r3, [r6], #1
 800b1f0:	9b04      	ldr	r3, [sp, #16]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	9304      	str	r3, [sp, #16]
 800b1f6:	e6ae      	b.n	800af56 <_dtoa_r+0x696>
 800b1f8:	9c07      	ldr	r4, [sp, #28]
 800b1fa:	9704      	str	r7, [sp, #16]
 800b1fc:	4625      	mov	r5, r4
 800b1fe:	e7f3      	b.n	800b1e8 <_dtoa_r+0x928>
 800b200:	9b07      	ldr	r3, [sp, #28]
 800b202:	9300      	str	r3, [sp, #0]
 800b204:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b206:	2b00      	cmp	r3, #0
 800b208:	f000 8104 	beq.w	800b414 <_dtoa_r+0xb54>
 800b20c:	2e00      	cmp	r6, #0
 800b20e:	dd05      	ble.n	800b21c <_dtoa_r+0x95c>
 800b210:	4629      	mov	r1, r5
 800b212:	4632      	mov	r2, r6
 800b214:	4658      	mov	r0, fp
 800b216:	f000 fc25 	bl	800ba64 <__lshift>
 800b21a:	4605      	mov	r5, r0
 800b21c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d05a      	beq.n	800b2d8 <_dtoa_r+0xa18>
 800b222:	6869      	ldr	r1, [r5, #4]
 800b224:	4658      	mov	r0, fp
 800b226:	f000 fa0f 	bl	800b648 <_Balloc>
 800b22a:	4606      	mov	r6, r0
 800b22c:	b928      	cbnz	r0, 800b23a <_dtoa_r+0x97a>
 800b22e:	4b84      	ldr	r3, [pc, #528]	@ (800b440 <_dtoa_r+0xb80>)
 800b230:	4602      	mov	r2, r0
 800b232:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b236:	f7ff bb5a 	b.w	800a8ee <_dtoa_r+0x2e>
 800b23a:	692a      	ldr	r2, [r5, #16]
 800b23c:	3202      	adds	r2, #2
 800b23e:	0092      	lsls	r2, r2, #2
 800b240:	f105 010c 	add.w	r1, r5, #12
 800b244:	300c      	adds	r0, #12
 800b246:	f7ff faa2 	bl	800a78e <memcpy>
 800b24a:	2201      	movs	r2, #1
 800b24c:	4631      	mov	r1, r6
 800b24e:	4658      	mov	r0, fp
 800b250:	f000 fc08 	bl	800ba64 <__lshift>
 800b254:	f10a 0301 	add.w	r3, sl, #1
 800b258:	9307      	str	r3, [sp, #28]
 800b25a:	9b00      	ldr	r3, [sp, #0]
 800b25c:	4453      	add	r3, sl
 800b25e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b260:	9b02      	ldr	r3, [sp, #8]
 800b262:	f003 0301 	and.w	r3, r3, #1
 800b266:	462f      	mov	r7, r5
 800b268:	930a      	str	r3, [sp, #40]	@ 0x28
 800b26a:	4605      	mov	r5, r0
 800b26c:	9b07      	ldr	r3, [sp, #28]
 800b26e:	4621      	mov	r1, r4
 800b270:	3b01      	subs	r3, #1
 800b272:	4648      	mov	r0, r9
 800b274:	9300      	str	r3, [sp, #0]
 800b276:	f7ff fa98 	bl	800a7aa <quorem>
 800b27a:	4639      	mov	r1, r7
 800b27c:	9002      	str	r0, [sp, #8]
 800b27e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b282:	4648      	mov	r0, r9
 800b284:	f000 fc5a 	bl	800bb3c <__mcmp>
 800b288:	462a      	mov	r2, r5
 800b28a:	9008      	str	r0, [sp, #32]
 800b28c:	4621      	mov	r1, r4
 800b28e:	4658      	mov	r0, fp
 800b290:	f000 fc70 	bl	800bb74 <__mdiff>
 800b294:	68c2      	ldr	r2, [r0, #12]
 800b296:	4606      	mov	r6, r0
 800b298:	bb02      	cbnz	r2, 800b2dc <_dtoa_r+0xa1c>
 800b29a:	4601      	mov	r1, r0
 800b29c:	4648      	mov	r0, r9
 800b29e:	f000 fc4d 	bl	800bb3c <__mcmp>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	4631      	mov	r1, r6
 800b2a6:	4658      	mov	r0, fp
 800b2a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b2aa:	f000 fa0d 	bl	800b6c8 <_Bfree>
 800b2ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2b2:	9e07      	ldr	r6, [sp, #28]
 800b2b4:	ea43 0102 	orr.w	r1, r3, r2
 800b2b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2ba:	4319      	orrs	r1, r3
 800b2bc:	d110      	bne.n	800b2e0 <_dtoa_r+0xa20>
 800b2be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b2c2:	d029      	beq.n	800b318 <_dtoa_r+0xa58>
 800b2c4:	9b08      	ldr	r3, [sp, #32]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	dd02      	ble.n	800b2d0 <_dtoa_r+0xa10>
 800b2ca:	9b02      	ldr	r3, [sp, #8]
 800b2cc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b2d0:	9b00      	ldr	r3, [sp, #0]
 800b2d2:	f883 8000 	strb.w	r8, [r3]
 800b2d6:	e63f      	b.n	800af58 <_dtoa_r+0x698>
 800b2d8:	4628      	mov	r0, r5
 800b2da:	e7bb      	b.n	800b254 <_dtoa_r+0x994>
 800b2dc:	2201      	movs	r2, #1
 800b2de:	e7e1      	b.n	800b2a4 <_dtoa_r+0x9e4>
 800b2e0:	9b08      	ldr	r3, [sp, #32]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	db04      	blt.n	800b2f0 <_dtoa_r+0xa30>
 800b2e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b2e8:	430b      	orrs	r3, r1
 800b2ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b2ec:	430b      	orrs	r3, r1
 800b2ee:	d120      	bne.n	800b332 <_dtoa_r+0xa72>
 800b2f0:	2a00      	cmp	r2, #0
 800b2f2:	dded      	ble.n	800b2d0 <_dtoa_r+0xa10>
 800b2f4:	4649      	mov	r1, r9
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	4658      	mov	r0, fp
 800b2fa:	f000 fbb3 	bl	800ba64 <__lshift>
 800b2fe:	4621      	mov	r1, r4
 800b300:	4681      	mov	r9, r0
 800b302:	f000 fc1b 	bl	800bb3c <__mcmp>
 800b306:	2800      	cmp	r0, #0
 800b308:	dc03      	bgt.n	800b312 <_dtoa_r+0xa52>
 800b30a:	d1e1      	bne.n	800b2d0 <_dtoa_r+0xa10>
 800b30c:	f018 0f01 	tst.w	r8, #1
 800b310:	d0de      	beq.n	800b2d0 <_dtoa_r+0xa10>
 800b312:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b316:	d1d8      	bne.n	800b2ca <_dtoa_r+0xa0a>
 800b318:	9a00      	ldr	r2, [sp, #0]
 800b31a:	2339      	movs	r3, #57	@ 0x39
 800b31c:	7013      	strb	r3, [r2, #0]
 800b31e:	4633      	mov	r3, r6
 800b320:	461e      	mov	r6, r3
 800b322:	3b01      	subs	r3, #1
 800b324:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b328:	2a39      	cmp	r2, #57	@ 0x39
 800b32a:	d052      	beq.n	800b3d2 <_dtoa_r+0xb12>
 800b32c:	3201      	adds	r2, #1
 800b32e:	701a      	strb	r2, [r3, #0]
 800b330:	e612      	b.n	800af58 <_dtoa_r+0x698>
 800b332:	2a00      	cmp	r2, #0
 800b334:	dd07      	ble.n	800b346 <_dtoa_r+0xa86>
 800b336:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b33a:	d0ed      	beq.n	800b318 <_dtoa_r+0xa58>
 800b33c:	9a00      	ldr	r2, [sp, #0]
 800b33e:	f108 0301 	add.w	r3, r8, #1
 800b342:	7013      	strb	r3, [r2, #0]
 800b344:	e608      	b.n	800af58 <_dtoa_r+0x698>
 800b346:	9b07      	ldr	r3, [sp, #28]
 800b348:	9a07      	ldr	r2, [sp, #28]
 800b34a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b34e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b350:	4293      	cmp	r3, r2
 800b352:	d028      	beq.n	800b3a6 <_dtoa_r+0xae6>
 800b354:	4649      	mov	r1, r9
 800b356:	2300      	movs	r3, #0
 800b358:	220a      	movs	r2, #10
 800b35a:	4658      	mov	r0, fp
 800b35c:	f000 f9d6 	bl	800b70c <__multadd>
 800b360:	42af      	cmp	r7, r5
 800b362:	4681      	mov	r9, r0
 800b364:	f04f 0300 	mov.w	r3, #0
 800b368:	f04f 020a 	mov.w	r2, #10
 800b36c:	4639      	mov	r1, r7
 800b36e:	4658      	mov	r0, fp
 800b370:	d107      	bne.n	800b382 <_dtoa_r+0xac2>
 800b372:	f000 f9cb 	bl	800b70c <__multadd>
 800b376:	4607      	mov	r7, r0
 800b378:	4605      	mov	r5, r0
 800b37a:	9b07      	ldr	r3, [sp, #28]
 800b37c:	3301      	adds	r3, #1
 800b37e:	9307      	str	r3, [sp, #28]
 800b380:	e774      	b.n	800b26c <_dtoa_r+0x9ac>
 800b382:	f000 f9c3 	bl	800b70c <__multadd>
 800b386:	4629      	mov	r1, r5
 800b388:	4607      	mov	r7, r0
 800b38a:	2300      	movs	r3, #0
 800b38c:	220a      	movs	r2, #10
 800b38e:	4658      	mov	r0, fp
 800b390:	f000 f9bc 	bl	800b70c <__multadd>
 800b394:	4605      	mov	r5, r0
 800b396:	e7f0      	b.n	800b37a <_dtoa_r+0xaba>
 800b398:	9b00      	ldr	r3, [sp, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	bfcc      	ite	gt
 800b39e:	461e      	movgt	r6, r3
 800b3a0:	2601      	movle	r6, #1
 800b3a2:	4456      	add	r6, sl
 800b3a4:	2700      	movs	r7, #0
 800b3a6:	4649      	mov	r1, r9
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	4658      	mov	r0, fp
 800b3ac:	f000 fb5a 	bl	800ba64 <__lshift>
 800b3b0:	4621      	mov	r1, r4
 800b3b2:	4681      	mov	r9, r0
 800b3b4:	f000 fbc2 	bl	800bb3c <__mcmp>
 800b3b8:	2800      	cmp	r0, #0
 800b3ba:	dcb0      	bgt.n	800b31e <_dtoa_r+0xa5e>
 800b3bc:	d102      	bne.n	800b3c4 <_dtoa_r+0xb04>
 800b3be:	f018 0f01 	tst.w	r8, #1
 800b3c2:	d1ac      	bne.n	800b31e <_dtoa_r+0xa5e>
 800b3c4:	4633      	mov	r3, r6
 800b3c6:	461e      	mov	r6, r3
 800b3c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3cc:	2a30      	cmp	r2, #48	@ 0x30
 800b3ce:	d0fa      	beq.n	800b3c6 <_dtoa_r+0xb06>
 800b3d0:	e5c2      	b.n	800af58 <_dtoa_r+0x698>
 800b3d2:	459a      	cmp	sl, r3
 800b3d4:	d1a4      	bne.n	800b320 <_dtoa_r+0xa60>
 800b3d6:	9b04      	ldr	r3, [sp, #16]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	9304      	str	r3, [sp, #16]
 800b3dc:	2331      	movs	r3, #49	@ 0x31
 800b3de:	f88a 3000 	strb.w	r3, [sl]
 800b3e2:	e5b9      	b.n	800af58 <_dtoa_r+0x698>
 800b3e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b3e6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b444 <_dtoa_r+0xb84>
 800b3ea:	b11b      	cbz	r3, 800b3f4 <_dtoa_r+0xb34>
 800b3ec:	f10a 0308 	add.w	r3, sl, #8
 800b3f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b3f2:	6013      	str	r3, [r2, #0]
 800b3f4:	4650      	mov	r0, sl
 800b3f6:	b019      	add	sp, #100	@ 0x64
 800b3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	f77f ae37 	ble.w	800b072 <_dtoa_r+0x7b2>
 800b404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b406:	930a      	str	r3, [sp, #40]	@ 0x28
 800b408:	2001      	movs	r0, #1
 800b40a:	e655      	b.n	800b0b8 <_dtoa_r+0x7f8>
 800b40c:	9b00      	ldr	r3, [sp, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	f77f aed6 	ble.w	800b1c0 <_dtoa_r+0x900>
 800b414:	4656      	mov	r6, sl
 800b416:	4621      	mov	r1, r4
 800b418:	4648      	mov	r0, r9
 800b41a:	f7ff f9c6 	bl	800a7aa <quorem>
 800b41e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b422:	f806 8b01 	strb.w	r8, [r6], #1
 800b426:	9b00      	ldr	r3, [sp, #0]
 800b428:	eba6 020a 	sub.w	r2, r6, sl
 800b42c:	4293      	cmp	r3, r2
 800b42e:	ddb3      	ble.n	800b398 <_dtoa_r+0xad8>
 800b430:	4649      	mov	r1, r9
 800b432:	2300      	movs	r3, #0
 800b434:	220a      	movs	r2, #10
 800b436:	4658      	mov	r0, fp
 800b438:	f000 f968 	bl	800b70c <__multadd>
 800b43c:	4681      	mov	r9, r0
 800b43e:	e7ea      	b.n	800b416 <_dtoa_r+0xb56>
 800b440:	0800c6c8 	.word	0x0800c6c8
 800b444:	0800c64c 	.word	0x0800c64c

0800b448 <_free_r>:
 800b448:	b538      	push	{r3, r4, r5, lr}
 800b44a:	4605      	mov	r5, r0
 800b44c:	2900      	cmp	r1, #0
 800b44e:	d041      	beq.n	800b4d4 <_free_r+0x8c>
 800b450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b454:	1f0c      	subs	r4, r1, #4
 800b456:	2b00      	cmp	r3, #0
 800b458:	bfb8      	it	lt
 800b45a:	18e4      	addlt	r4, r4, r3
 800b45c:	f000 f8e8 	bl	800b630 <__malloc_lock>
 800b460:	4a1d      	ldr	r2, [pc, #116]	@ (800b4d8 <_free_r+0x90>)
 800b462:	6813      	ldr	r3, [r2, #0]
 800b464:	b933      	cbnz	r3, 800b474 <_free_r+0x2c>
 800b466:	6063      	str	r3, [r4, #4]
 800b468:	6014      	str	r4, [r2, #0]
 800b46a:	4628      	mov	r0, r5
 800b46c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b470:	f000 b8e4 	b.w	800b63c <__malloc_unlock>
 800b474:	42a3      	cmp	r3, r4
 800b476:	d908      	bls.n	800b48a <_free_r+0x42>
 800b478:	6820      	ldr	r0, [r4, #0]
 800b47a:	1821      	adds	r1, r4, r0
 800b47c:	428b      	cmp	r3, r1
 800b47e:	bf01      	itttt	eq
 800b480:	6819      	ldreq	r1, [r3, #0]
 800b482:	685b      	ldreq	r3, [r3, #4]
 800b484:	1809      	addeq	r1, r1, r0
 800b486:	6021      	streq	r1, [r4, #0]
 800b488:	e7ed      	b.n	800b466 <_free_r+0x1e>
 800b48a:	461a      	mov	r2, r3
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	b10b      	cbz	r3, 800b494 <_free_r+0x4c>
 800b490:	42a3      	cmp	r3, r4
 800b492:	d9fa      	bls.n	800b48a <_free_r+0x42>
 800b494:	6811      	ldr	r1, [r2, #0]
 800b496:	1850      	adds	r0, r2, r1
 800b498:	42a0      	cmp	r0, r4
 800b49a:	d10b      	bne.n	800b4b4 <_free_r+0x6c>
 800b49c:	6820      	ldr	r0, [r4, #0]
 800b49e:	4401      	add	r1, r0
 800b4a0:	1850      	adds	r0, r2, r1
 800b4a2:	4283      	cmp	r3, r0
 800b4a4:	6011      	str	r1, [r2, #0]
 800b4a6:	d1e0      	bne.n	800b46a <_free_r+0x22>
 800b4a8:	6818      	ldr	r0, [r3, #0]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	6053      	str	r3, [r2, #4]
 800b4ae:	4408      	add	r0, r1
 800b4b0:	6010      	str	r0, [r2, #0]
 800b4b2:	e7da      	b.n	800b46a <_free_r+0x22>
 800b4b4:	d902      	bls.n	800b4bc <_free_r+0x74>
 800b4b6:	230c      	movs	r3, #12
 800b4b8:	602b      	str	r3, [r5, #0]
 800b4ba:	e7d6      	b.n	800b46a <_free_r+0x22>
 800b4bc:	6820      	ldr	r0, [r4, #0]
 800b4be:	1821      	adds	r1, r4, r0
 800b4c0:	428b      	cmp	r3, r1
 800b4c2:	bf04      	itt	eq
 800b4c4:	6819      	ldreq	r1, [r3, #0]
 800b4c6:	685b      	ldreq	r3, [r3, #4]
 800b4c8:	6063      	str	r3, [r4, #4]
 800b4ca:	bf04      	itt	eq
 800b4cc:	1809      	addeq	r1, r1, r0
 800b4ce:	6021      	streq	r1, [r4, #0]
 800b4d0:	6054      	str	r4, [r2, #4]
 800b4d2:	e7ca      	b.n	800b46a <_free_r+0x22>
 800b4d4:	bd38      	pop	{r3, r4, r5, pc}
 800b4d6:	bf00      	nop
 800b4d8:	2000054c 	.word	0x2000054c

0800b4dc <malloc>:
 800b4dc:	4b02      	ldr	r3, [pc, #8]	@ (800b4e8 <malloc+0xc>)
 800b4de:	4601      	mov	r1, r0
 800b4e0:	6818      	ldr	r0, [r3, #0]
 800b4e2:	f000 b825 	b.w	800b530 <_malloc_r>
 800b4e6:	bf00      	nop
 800b4e8:	20000048 	.word	0x20000048

0800b4ec <sbrk_aligned>:
 800b4ec:	b570      	push	{r4, r5, r6, lr}
 800b4ee:	4e0f      	ldr	r6, [pc, #60]	@ (800b52c <sbrk_aligned+0x40>)
 800b4f0:	460c      	mov	r4, r1
 800b4f2:	6831      	ldr	r1, [r6, #0]
 800b4f4:	4605      	mov	r5, r0
 800b4f6:	b911      	cbnz	r1, 800b4fe <sbrk_aligned+0x12>
 800b4f8:	f000 ff2e 	bl	800c358 <_sbrk_r>
 800b4fc:	6030      	str	r0, [r6, #0]
 800b4fe:	4621      	mov	r1, r4
 800b500:	4628      	mov	r0, r5
 800b502:	f000 ff29 	bl	800c358 <_sbrk_r>
 800b506:	1c43      	adds	r3, r0, #1
 800b508:	d103      	bne.n	800b512 <sbrk_aligned+0x26>
 800b50a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b50e:	4620      	mov	r0, r4
 800b510:	bd70      	pop	{r4, r5, r6, pc}
 800b512:	1cc4      	adds	r4, r0, #3
 800b514:	f024 0403 	bic.w	r4, r4, #3
 800b518:	42a0      	cmp	r0, r4
 800b51a:	d0f8      	beq.n	800b50e <sbrk_aligned+0x22>
 800b51c:	1a21      	subs	r1, r4, r0
 800b51e:	4628      	mov	r0, r5
 800b520:	f000 ff1a 	bl	800c358 <_sbrk_r>
 800b524:	3001      	adds	r0, #1
 800b526:	d1f2      	bne.n	800b50e <sbrk_aligned+0x22>
 800b528:	e7ef      	b.n	800b50a <sbrk_aligned+0x1e>
 800b52a:	bf00      	nop
 800b52c:	20000548 	.word	0x20000548

0800b530 <_malloc_r>:
 800b530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b534:	1ccd      	adds	r5, r1, #3
 800b536:	f025 0503 	bic.w	r5, r5, #3
 800b53a:	3508      	adds	r5, #8
 800b53c:	2d0c      	cmp	r5, #12
 800b53e:	bf38      	it	cc
 800b540:	250c      	movcc	r5, #12
 800b542:	2d00      	cmp	r5, #0
 800b544:	4606      	mov	r6, r0
 800b546:	db01      	blt.n	800b54c <_malloc_r+0x1c>
 800b548:	42a9      	cmp	r1, r5
 800b54a:	d904      	bls.n	800b556 <_malloc_r+0x26>
 800b54c:	230c      	movs	r3, #12
 800b54e:	6033      	str	r3, [r6, #0]
 800b550:	2000      	movs	r0, #0
 800b552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b556:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b62c <_malloc_r+0xfc>
 800b55a:	f000 f869 	bl	800b630 <__malloc_lock>
 800b55e:	f8d8 3000 	ldr.w	r3, [r8]
 800b562:	461c      	mov	r4, r3
 800b564:	bb44      	cbnz	r4, 800b5b8 <_malloc_r+0x88>
 800b566:	4629      	mov	r1, r5
 800b568:	4630      	mov	r0, r6
 800b56a:	f7ff ffbf 	bl	800b4ec <sbrk_aligned>
 800b56e:	1c43      	adds	r3, r0, #1
 800b570:	4604      	mov	r4, r0
 800b572:	d158      	bne.n	800b626 <_malloc_r+0xf6>
 800b574:	f8d8 4000 	ldr.w	r4, [r8]
 800b578:	4627      	mov	r7, r4
 800b57a:	2f00      	cmp	r7, #0
 800b57c:	d143      	bne.n	800b606 <_malloc_r+0xd6>
 800b57e:	2c00      	cmp	r4, #0
 800b580:	d04b      	beq.n	800b61a <_malloc_r+0xea>
 800b582:	6823      	ldr	r3, [r4, #0]
 800b584:	4639      	mov	r1, r7
 800b586:	4630      	mov	r0, r6
 800b588:	eb04 0903 	add.w	r9, r4, r3
 800b58c:	f000 fee4 	bl	800c358 <_sbrk_r>
 800b590:	4581      	cmp	r9, r0
 800b592:	d142      	bne.n	800b61a <_malloc_r+0xea>
 800b594:	6821      	ldr	r1, [r4, #0]
 800b596:	1a6d      	subs	r5, r5, r1
 800b598:	4629      	mov	r1, r5
 800b59a:	4630      	mov	r0, r6
 800b59c:	f7ff ffa6 	bl	800b4ec <sbrk_aligned>
 800b5a0:	3001      	adds	r0, #1
 800b5a2:	d03a      	beq.n	800b61a <_malloc_r+0xea>
 800b5a4:	6823      	ldr	r3, [r4, #0]
 800b5a6:	442b      	add	r3, r5
 800b5a8:	6023      	str	r3, [r4, #0]
 800b5aa:	f8d8 3000 	ldr.w	r3, [r8]
 800b5ae:	685a      	ldr	r2, [r3, #4]
 800b5b0:	bb62      	cbnz	r2, 800b60c <_malloc_r+0xdc>
 800b5b2:	f8c8 7000 	str.w	r7, [r8]
 800b5b6:	e00f      	b.n	800b5d8 <_malloc_r+0xa8>
 800b5b8:	6822      	ldr	r2, [r4, #0]
 800b5ba:	1b52      	subs	r2, r2, r5
 800b5bc:	d420      	bmi.n	800b600 <_malloc_r+0xd0>
 800b5be:	2a0b      	cmp	r2, #11
 800b5c0:	d917      	bls.n	800b5f2 <_malloc_r+0xc2>
 800b5c2:	1961      	adds	r1, r4, r5
 800b5c4:	42a3      	cmp	r3, r4
 800b5c6:	6025      	str	r5, [r4, #0]
 800b5c8:	bf18      	it	ne
 800b5ca:	6059      	strne	r1, [r3, #4]
 800b5cc:	6863      	ldr	r3, [r4, #4]
 800b5ce:	bf08      	it	eq
 800b5d0:	f8c8 1000 	streq.w	r1, [r8]
 800b5d4:	5162      	str	r2, [r4, r5]
 800b5d6:	604b      	str	r3, [r1, #4]
 800b5d8:	4630      	mov	r0, r6
 800b5da:	f000 f82f 	bl	800b63c <__malloc_unlock>
 800b5de:	f104 000b 	add.w	r0, r4, #11
 800b5e2:	1d23      	adds	r3, r4, #4
 800b5e4:	f020 0007 	bic.w	r0, r0, #7
 800b5e8:	1ac2      	subs	r2, r0, r3
 800b5ea:	bf1c      	itt	ne
 800b5ec:	1a1b      	subne	r3, r3, r0
 800b5ee:	50a3      	strne	r3, [r4, r2]
 800b5f0:	e7af      	b.n	800b552 <_malloc_r+0x22>
 800b5f2:	6862      	ldr	r2, [r4, #4]
 800b5f4:	42a3      	cmp	r3, r4
 800b5f6:	bf0c      	ite	eq
 800b5f8:	f8c8 2000 	streq.w	r2, [r8]
 800b5fc:	605a      	strne	r2, [r3, #4]
 800b5fe:	e7eb      	b.n	800b5d8 <_malloc_r+0xa8>
 800b600:	4623      	mov	r3, r4
 800b602:	6864      	ldr	r4, [r4, #4]
 800b604:	e7ae      	b.n	800b564 <_malloc_r+0x34>
 800b606:	463c      	mov	r4, r7
 800b608:	687f      	ldr	r7, [r7, #4]
 800b60a:	e7b6      	b.n	800b57a <_malloc_r+0x4a>
 800b60c:	461a      	mov	r2, r3
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	42a3      	cmp	r3, r4
 800b612:	d1fb      	bne.n	800b60c <_malloc_r+0xdc>
 800b614:	2300      	movs	r3, #0
 800b616:	6053      	str	r3, [r2, #4]
 800b618:	e7de      	b.n	800b5d8 <_malloc_r+0xa8>
 800b61a:	230c      	movs	r3, #12
 800b61c:	6033      	str	r3, [r6, #0]
 800b61e:	4630      	mov	r0, r6
 800b620:	f000 f80c 	bl	800b63c <__malloc_unlock>
 800b624:	e794      	b.n	800b550 <_malloc_r+0x20>
 800b626:	6005      	str	r5, [r0, #0]
 800b628:	e7d6      	b.n	800b5d8 <_malloc_r+0xa8>
 800b62a:	bf00      	nop
 800b62c:	2000054c 	.word	0x2000054c

0800b630 <__malloc_lock>:
 800b630:	4801      	ldr	r0, [pc, #4]	@ (800b638 <__malloc_lock+0x8>)
 800b632:	f7ff b8aa 	b.w	800a78a <__retarget_lock_acquire_recursive>
 800b636:	bf00      	nop
 800b638:	20000544 	.word	0x20000544

0800b63c <__malloc_unlock>:
 800b63c:	4801      	ldr	r0, [pc, #4]	@ (800b644 <__malloc_unlock+0x8>)
 800b63e:	f7ff b8a5 	b.w	800a78c <__retarget_lock_release_recursive>
 800b642:	bf00      	nop
 800b644:	20000544 	.word	0x20000544

0800b648 <_Balloc>:
 800b648:	b570      	push	{r4, r5, r6, lr}
 800b64a:	69c6      	ldr	r6, [r0, #28]
 800b64c:	4604      	mov	r4, r0
 800b64e:	460d      	mov	r5, r1
 800b650:	b976      	cbnz	r6, 800b670 <_Balloc+0x28>
 800b652:	2010      	movs	r0, #16
 800b654:	f7ff ff42 	bl	800b4dc <malloc>
 800b658:	4602      	mov	r2, r0
 800b65a:	61e0      	str	r0, [r4, #28]
 800b65c:	b920      	cbnz	r0, 800b668 <_Balloc+0x20>
 800b65e:	4b18      	ldr	r3, [pc, #96]	@ (800b6c0 <_Balloc+0x78>)
 800b660:	4818      	ldr	r0, [pc, #96]	@ (800b6c4 <_Balloc+0x7c>)
 800b662:	216b      	movs	r1, #107	@ 0x6b
 800b664:	f000 fe88 	bl	800c378 <__assert_func>
 800b668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b66c:	6006      	str	r6, [r0, #0]
 800b66e:	60c6      	str	r6, [r0, #12]
 800b670:	69e6      	ldr	r6, [r4, #28]
 800b672:	68f3      	ldr	r3, [r6, #12]
 800b674:	b183      	cbz	r3, 800b698 <_Balloc+0x50>
 800b676:	69e3      	ldr	r3, [r4, #28]
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b67e:	b9b8      	cbnz	r0, 800b6b0 <_Balloc+0x68>
 800b680:	2101      	movs	r1, #1
 800b682:	fa01 f605 	lsl.w	r6, r1, r5
 800b686:	1d72      	adds	r2, r6, #5
 800b688:	0092      	lsls	r2, r2, #2
 800b68a:	4620      	mov	r0, r4
 800b68c:	f000 fe92 	bl	800c3b4 <_calloc_r>
 800b690:	b160      	cbz	r0, 800b6ac <_Balloc+0x64>
 800b692:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b696:	e00e      	b.n	800b6b6 <_Balloc+0x6e>
 800b698:	2221      	movs	r2, #33	@ 0x21
 800b69a:	2104      	movs	r1, #4
 800b69c:	4620      	mov	r0, r4
 800b69e:	f000 fe89 	bl	800c3b4 <_calloc_r>
 800b6a2:	69e3      	ldr	r3, [r4, #28]
 800b6a4:	60f0      	str	r0, [r6, #12]
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d1e4      	bne.n	800b676 <_Balloc+0x2e>
 800b6ac:	2000      	movs	r0, #0
 800b6ae:	bd70      	pop	{r4, r5, r6, pc}
 800b6b0:	6802      	ldr	r2, [r0, #0]
 800b6b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b6bc:	e7f7      	b.n	800b6ae <_Balloc+0x66>
 800b6be:	bf00      	nop
 800b6c0:	0800c659 	.word	0x0800c659
 800b6c4:	0800c6d9 	.word	0x0800c6d9

0800b6c8 <_Bfree>:
 800b6c8:	b570      	push	{r4, r5, r6, lr}
 800b6ca:	69c6      	ldr	r6, [r0, #28]
 800b6cc:	4605      	mov	r5, r0
 800b6ce:	460c      	mov	r4, r1
 800b6d0:	b976      	cbnz	r6, 800b6f0 <_Bfree+0x28>
 800b6d2:	2010      	movs	r0, #16
 800b6d4:	f7ff ff02 	bl	800b4dc <malloc>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	61e8      	str	r0, [r5, #28]
 800b6dc:	b920      	cbnz	r0, 800b6e8 <_Bfree+0x20>
 800b6de:	4b09      	ldr	r3, [pc, #36]	@ (800b704 <_Bfree+0x3c>)
 800b6e0:	4809      	ldr	r0, [pc, #36]	@ (800b708 <_Bfree+0x40>)
 800b6e2:	218f      	movs	r1, #143	@ 0x8f
 800b6e4:	f000 fe48 	bl	800c378 <__assert_func>
 800b6e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6ec:	6006      	str	r6, [r0, #0]
 800b6ee:	60c6      	str	r6, [r0, #12]
 800b6f0:	b13c      	cbz	r4, 800b702 <_Bfree+0x3a>
 800b6f2:	69eb      	ldr	r3, [r5, #28]
 800b6f4:	6862      	ldr	r2, [r4, #4]
 800b6f6:	68db      	ldr	r3, [r3, #12]
 800b6f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b6fc:	6021      	str	r1, [r4, #0]
 800b6fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b702:	bd70      	pop	{r4, r5, r6, pc}
 800b704:	0800c659 	.word	0x0800c659
 800b708:	0800c6d9 	.word	0x0800c6d9

0800b70c <__multadd>:
 800b70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b710:	690d      	ldr	r5, [r1, #16]
 800b712:	4607      	mov	r7, r0
 800b714:	460c      	mov	r4, r1
 800b716:	461e      	mov	r6, r3
 800b718:	f101 0c14 	add.w	ip, r1, #20
 800b71c:	2000      	movs	r0, #0
 800b71e:	f8dc 3000 	ldr.w	r3, [ip]
 800b722:	b299      	uxth	r1, r3
 800b724:	fb02 6101 	mla	r1, r2, r1, r6
 800b728:	0c1e      	lsrs	r6, r3, #16
 800b72a:	0c0b      	lsrs	r3, r1, #16
 800b72c:	fb02 3306 	mla	r3, r2, r6, r3
 800b730:	b289      	uxth	r1, r1
 800b732:	3001      	adds	r0, #1
 800b734:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b738:	4285      	cmp	r5, r0
 800b73a:	f84c 1b04 	str.w	r1, [ip], #4
 800b73e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b742:	dcec      	bgt.n	800b71e <__multadd+0x12>
 800b744:	b30e      	cbz	r6, 800b78a <__multadd+0x7e>
 800b746:	68a3      	ldr	r3, [r4, #8]
 800b748:	42ab      	cmp	r3, r5
 800b74a:	dc19      	bgt.n	800b780 <__multadd+0x74>
 800b74c:	6861      	ldr	r1, [r4, #4]
 800b74e:	4638      	mov	r0, r7
 800b750:	3101      	adds	r1, #1
 800b752:	f7ff ff79 	bl	800b648 <_Balloc>
 800b756:	4680      	mov	r8, r0
 800b758:	b928      	cbnz	r0, 800b766 <__multadd+0x5a>
 800b75a:	4602      	mov	r2, r0
 800b75c:	4b0c      	ldr	r3, [pc, #48]	@ (800b790 <__multadd+0x84>)
 800b75e:	480d      	ldr	r0, [pc, #52]	@ (800b794 <__multadd+0x88>)
 800b760:	21ba      	movs	r1, #186	@ 0xba
 800b762:	f000 fe09 	bl	800c378 <__assert_func>
 800b766:	6922      	ldr	r2, [r4, #16]
 800b768:	3202      	adds	r2, #2
 800b76a:	f104 010c 	add.w	r1, r4, #12
 800b76e:	0092      	lsls	r2, r2, #2
 800b770:	300c      	adds	r0, #12
 800b772:	f7ff f80c 	bl	800a78e <memcpy>
 800b776:	4621      	mov	r1, r4
 800b778:	4638      	mov	r0, r7
 800b77a:	f7ff ffa5 	bl	800b6c8 <_Bfree>
 800b77e:	4644      	mov	r4, r8
 800b780:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b784:	3501      	adds	r5, #1
 800b786:	615e      	str	r6, [r3, #20]
 800b788:	6125      	str	r5, [r4, #16]
 800b78a:	4620      	mov	r0, r4
 800b78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b790:	0800c6c8 	.word	0x0800c6c8
 800b794:	0800c6d9 	.word	0x0800c6d9

0800b798 <__hi0bits>:
 800b798:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b79c:	4603      	mov	r3, r0
 800b79e:	bf36      	itet	cc
 800b7a0:	0403      	lslcc	r3, r0, #16
 800b7a2:	2000      	movcs	r0, #0
 800b7a4:	2010      	movcc	r0, #16
 800b7a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b7aa:	bf3c      	itt	cc
 800b7ac:	021b      	lslcc	r3, r3, #8
 800b7ae:	3008      	addcc	r0, #8
 800b7b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b7b4:	bf3c      	itt	cc
 800b7b6:	011b      	lslcc	r3, r3, #4
 800b7b8:	3004      	addcc	r0, #4
 800b7ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7be:	bf3c      	itt	cc
 800b7c0:	009b      	lslcc	r3, r3, #2
 800b7c2:	3002      	addcc	r0, #2
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	db05      	blt.n	800b7d4 <__hi0bits+0x3c>
 800b7c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b7cc:	f100 0001 	add.w	r0, r0, #1
 800b7d0:	bf08      	it	eq
 800b7d2:	2020      	moveq	r0, #32
 800b7d4:	4770      	bx	lr

0800b7d6 <__lo0bits>:
 800b7d6:	6803      	ldr	r3, [r0, #0]
 800b7d8:	4602      	mov	r2, r0
 800b7da:	f013 0007 	ands.w	r0, r3, #7
 800b7de:	d00b      	beq.n	800b7f8 <__lo0bits+0x22>
 800b7e0:	07d9      	lsls	r1, r3, #31
 800b7e2:	d421      	bmi.n	800b828 <__lo0bits+0x52>
 800b7e4:	0798      	lsls	r0, r3, #30
 800b7e6:	bf49      	itett	mi
 800b7e8:	085b      	lsrmi	r3, r3, #1
 800b7ea:	089b      	lsrpl	r3, r3, #2
 800b7ec:	2001      	movmi	r0, #1
 800b7ee:	6013      	strmi	r3, [r2, #0]
 800b7f0:	bf5c      	itt	pl
 800b7f2:	6013      	strpl	r3, [r2, #0]
 800b7f4:	2002      	movpl	r0, #2
 800b7f6:	4770      	bx	lr
 800b7f8:	b299      	uxth	r1, r3
 800b7fa:	b909      	cbnz	r1, 800b800 <__lo0bits+0x2a>
 800b7fc:	0c1b      	lsrs	r3, r3, #16
 800b7fe:	2010      	movs	r0, #16
 800b800:	b2d9      	uxtb	r1, r3
 800b802:	b909      	cbnz	r1, 800b808 <__lo0bits+0x32>
 800b804:	3008      	adds	r0, #8
 800b806:	0a1b      	lsrs	r3, r3, #8
 800b808:	0719      	lsls	r1, r3, #28
 800b80a:	bf04      	itt	eq
 800b80c:	091b      	lsreq	r3, r3, #4
 800b80e:	3004      	addeq	r0, #4
 800b810:	0799      	lsls	r1, r3, #30
 800b812:	bf04      	itt	eq
 800b814:	089b      	lsreq	r3, r3, #2
 800b816:	3002      	addeq	r0, #2
 800b818:	07d9      	lsls	r1, r3, #31
 800b81a:	d403      	bmi.n	800b824 <__lo0bits+0x4e>
 800b81c:	085b      	lsrs	r3, r3, #1
 800b81e:	f100 0001 	add.w	r0, r0, #1
 800b822:	d003      	beq.n	800b82c <__lo0bits+0x56>
 800b824:	6013      	str	r3, [r2, #0]
 800b826:	4770      	bx	lr
 800b828:	2000      	movs	r0, #0
 800b82a:	4770      	bx	lr
 800b82c:	2020      	movs	r0, #32
 800b82e:	4770      	bx	lr

0800b830 <__i2b>:
 800b830:	b510      	push	{r4, lr}
 800b832:	460c      	mov	r4, r1
 800b834:	2101      	movs	r1, #1
 800b836:	f7ff ff07 	bl	800b648 <_Balloc>
 800b83a:	4602      	mov	r2, r0
 800b83c:	b928      	cbnz	r0, 800b84a <__i2b+0x1a>
 800b83e:	4b05      	ldr	r3, [pc, #20]	@ (800b854 <__i2b+0x24>)
 800b840:	4805      	ldr	r0, [pc, #20]	@ (800b858 <__i2b+0x28>)
 800b842:	f240 1145 	movw	r1, #325	@ 0x145
 800b846:	f000 fd97 	bl	800c378 <__assert_func>
 800b84a:	2301      	movs	r3, #1
 800b84c:	6144      	str	r4, [r0, #20]
 800b84e:	6103      	str	r3, [r0, #16]
 800b850:	bd10      	pop	{r4, pc}
 800b852:	bf00      	nop
 800b854:	0800c6c8 	.word	0x0800c6c8
 800b858:	0800c6d9 	.word	0x0800c6d9

0800b85c <__multiply>:
 800b85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b860:	4614      	mov	r4, r2
 800b862:	690a      	ldr	r2, [r1, #16]
 800b864:	6923      	ldr	r3, [r4, #16]
 800b866:	429a      	cmp	r2, r3
 800b868:	bfa8      	it	ge
 800b86a:	4623      	movge	r3, r4
 800b86c:	460f      	mov	r7, r1
 800b86e:	bfa4      	itt	ge
 800b870:	460c      	movge	r4, r1
 800b872:	461f      	movge	r7, r3
 800b874:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b878:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b87c:	68a3      	ldr	r3, [r4, #8]
 800b87e:	6861      	ldr	r1, [r4, #4]
 800b880:	eb0a 0609 	add.w	r6, sl, r9
 800b884:	42b3      	cmp	r3, r6
 800b886:	b085      	sub	sp, #20
 800b888:	bfb8      	it	lt
 800b88a:	3101      	addlt	r1, #1
 800b88c:	f7ff fedc 	bl	800b648 <_Balloc>
 800b890:	b930      	cbnz	r0, 800b8a0 <__multiply+0x44>
 800b892:	4602      	mov	r2, r0
 800b894:	4b44      	ldr	r3, [pc, #272]	@ (800b9a8 <__multiply+0x14c>)
 800b896:	4845      	ldr	r0, [pc, #276]	@ (800b9ac <__multiply+0x150>)
 800b898:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b89c:	f000 fd6c 	bl	800c378 <__assert_func>
 800b8a0:	f100 0514 	add.w	r5, r0, #20
 800b8a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b8a8:	462b      	mov	r3, r5
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	4543      	cmp	r3, r8
 800b8ae:	d321      	bcc.n	800b8f4 <__multiply+0x98>
 800b8b0:	f107 0114 	add.w	r1, r7, #20
 800b8b4:	f104 0214 	add.w	r2, r4, #20
 800b8b8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b8bc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b8c0:	9302      	str	r3, [sp, #8]
 800b8c2:	1b13      	subs	r3, r2, r4
 800b8c4:	3b15      	subs	r3, #21
 800b8c6:	f023 0303 	bic.w	r3, r3, #3
 800b8ca:	3304      	adds	r3, #4
 800b8cc:	f104 0715 	add.w	r7, r4, #21
 800b8d0:	42ba      	cmp	r2, r7
 800b8d2:	bf38      	it	cc
 800b8d4:	2304      	movcc	r3, #4
 800b8d6:	9301      	str	r3, [sp, #4]
 800b8d8:	9b02      	ldr	r3, [sp, #8]
 800b8da:	9103      	str	r1, [sp, #12]
 800b8dc:	428b      	cmp	r3, r1
 800b8de:	d80c      	bhi.n	800b8fa <__multiply+0x9e>
 800b8e0:	2e00      	cmp	r6, #0
 800b8e2:	dd03      	ble.n	800b8ec <__multiply+0x90>
 800b8e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d05b      	beq.n	800b9a4 <__multiply+0x148>
 800b8ec:	6106      	str	r6, [r0, #16]
 800b8ee:	b005      	add	sp, #20
 800b8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8f4:	f843 2b04 	str.w	r2, [r3], #4
 800b8f8:	e7d8      	b.n	800b8ac <__multiply+0x50>
 800b8fa:	f8b1 a000 	ldrh.w	sl, [r1]
 800b8fe:	f1ba 0f00 	cmp.w	sl, #0
 800b902:	d024      	beq.n	800b94e <__multiply+0xf2>
 800b904:	f104 0e14 	add.w	lr, r4, #20
 800b908:	46a9      	mov	r9, r5
 800b90a:	f04f 0c00 	mov.w	ip, #0
 800b90e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b912:	f8d9 3000 	ldr.w	r3, [r9]
 800b916:	fa1f fb87 	uxth.w	fp, r7
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	fb0a 330b 	mla	r3, sl, fp, r3
 800b920:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b924:	f8d9 7000 	ldr.w	r7, [r9]
 800b928:	4463      	add	r3, ip
 800b92a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b92e:	fb0a c70b 	mla	r7, sl, fp, ip
 800b932:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b936:	b29b      	uxth	r3, r3
 800b938:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b93c:	4572      	cmp	r2, lr
 800b93e:	f849 3b04 	str.w	r3, [r9], #4
 800b942:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b946:	d8e2      	bhi.n	800b90e <__multiply+0xb2>
 800b948:	9b01      	ldr	r3, [sp, #4]
 800b94a:	f845 c003 	str.w	ip, [r5, r3]
 800b94e:	9b03      	ldr	r3, [sp, #12]
 800b950:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b954:	3104      	adds	r1, #4
 800b956:	f1b9 0f00 	cmp.w	r9, #0
 800b95a:	d021      	beq.n	800b9a0 <__multiply+0x144>
 800b95c:	682b      	ldr	r3, [r5, #0]
 800b95e:	f104 0c14 	add.w	ip, r4, #20
 800b962:	46ae      	mov	lr, r5
 800b964:	f04f 0a00 	mov.w	sl, #0
 800b968:	f8bc b000 	ldrh.w	fp, [ip]
 800b96c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b970:	fb09 770b 	mla	r7, r9, fp, r7
 800b974:	4457      	add	r7, sl
 800b976:	b29b      	uxth	r3, r3
 800b978:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b97c:	f84e 3b04 	str.w	r3, [lr], #4
 800b980:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b984:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b988:	f8be 3000 	ldrh.w	r3, [lr]
 800b98c:	fb09 330a 	mla	r3, r9, sl, r3
 800b990:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b994:	4562      	cmp	r2, ip
 800b996:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b99a:	d8e5      	bhi.n	800b968 <__multiply+0x10c>
 800b99c:	9f01      	ldr	r7, [sp, #4]
 800b99e:	51eb      	str	r3, [r5, r7]
 800b9a0:	3504      	adds	r5, #4
 800b9a2:	e799      	b.n	800b8d8 <__multiply+0x7c>
 800b9a4:	3e01      	subs	r6, #1
 800b9a6:	e79b      	b.n	800b8e0 <__multiply+0x84>
 800b9a8:	0800c6c8 	.word	0x0800c6c8
 800b9ac:	0800c6d9 	.word	0x0800c6d9

0800b9b0 <__pow5mult>:
 800b9b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9b4:	4615      	mov	r5, r2
 800b9b6:	f012 0203 	ands.w	r2, r2, #3
 800b9ba:	4607      	mov	r7, r0
 800b9bc:	460e      	mov	r6, r1
 800b9be:	d007      	beq.n	800b9d0 <__pow5mult+0x20>
 800b9c0:	4c25      	ldr	r4, [pc, #148]	@ (800ba58 <__pow5mult+0xa8>)
 800b9c2:	3a01      	subs	r2, #1
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b9ca:	f7ff fe9f 	bl	800b70c <__multadd>
 800b9ce:	4606      	mov	r6, r0
 800b9d0:	10ad      	asrs	r5, r5, #2
 800b9d2:	d03d      	beq.n	800ba50 <__pow5mult+0xa0>
 800b9d4:	69fc      	ldr	r4, [r7, #28]
 800b9d6:	b97c      	cbnz	r4, 800b9f8 <__pow5mult+0x48>
 800b9d8:	2010      	movs	r0, #16
 800b9da:	f7ff fd7f 	bl	800b4dc <malloc>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	61f8      	str	r0, [r7, #28]
 800b9e2:	b928      	cbnz	r0, 800b9f0 <__pow5mult+0x40>
 800b9e4:	4b1d      	ldr	r3, [pc, #116]	@ (800ba5c <__pow5mult+0xac>)
 800b9e6:	481e      	ldr	r0, [pc, #120]	@ (800ba60 <__pow5mult+0xb0>)
 800b9e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b9ec:	f000 fcc4 	bl	800c378 <__assert_func>
 800b9f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9f4:	6004      	str	r4, [r0, #0]
 800b9f6:	60c4      	str	r4, [r0, #12]
 800b9f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b9fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba00:	b94c      	cbnz	r4, 800ba16 <__pow5mult+0x66>
 800ba02:	f240 2171 	movw	r1, #625	@ 0x271
 800ba06:	4638      	mov	r0, r7
 800ba08:	f7ff ff12 	bl	800b830 <__i2b>
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba12:	4604      	mov	r4, r0
 800ba14:	6003      	str	r3, [r0, #0]
 800ba16:	f04f 0900 	mov.w	r9, #0
 800ba1a:	07eb      	lsls	r3, r5, #31
 800ba1c:	d50a      	bpl.n	800ba34 <__pow5mult+0x84>
 800ba1e:	4631      	mov	r1, r6
 800ba20:	4622      	mov	r2, r4
 800ba22:	4638      	mov	r0, r7
 800ba24:	f7ff ff1a 	bl	800b85c <__multiply>
 800ba28:	4631      	mov	r1, r6
 800ba2a:	4680      	mov	r8, r0
 800ba2c:	4638      	mov	r0, r7
 800ba2e:	f7ff fe4b 	bl	800b6c8 <_Bfree>
 800ba32:	4646      	mov	r6, r8
 800ba34:	106d      	asrs	r5, r5, #1
 800ba36:	d00b      	beq.n	800ba50 <__pow5mult+0xa0>
 800ba38:	6820      	ldr	r0, [r4, #0]
 800ba3a:	b938      	cbnz	r0, 800ba4c <__pow5mult+0x9c>
 800ba3c:	4622      	mov	r2, r4
 800ba3e:	4621      	mov	r1, r4
 800ba40:	4638      	mov	r0, r7
 800ba42:	f7ff ff0b 	bl	800b85c <__multiply>
 800ba46:	6020      	str	r0, [r4, #0]
 800ba48:	f8c0 9000 	str.w	r9, [r0]
 800ba4c:	4604      	mov	r4, r0
 800ba4e:	e7e4      	b.n	800ba1a <__pow5mult+0x6a>
 800ba50:	4630      	mov	r0, r6
 800ba52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba56:	bf00      	nop
 800ba58:	0800c734 	.word	0x0800c734
 800ba5c:	0800c659 	.word	0x0800c659
 800ba60:	0800c6d9 	.word	0x0800c6d9

0800ba64 <__lshift>:
 800ba64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba68:	460c      	mov	r4, r1
 800ba6a:	6849      	ldr	r1, [r1, #4]
 800ba6c:	6923      	ldr	r3, [r4, #16]
 800ba6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba72:	68a3      	ldr	r3, [r4, #8]
 800ba74:	4607      	mov	r7, r0
 800ba76:	4691      	mov	r9, r2
 800ba78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba7c:	f108 0601 	add.w	r6, r8, #1
 800ba80:	42b3      	cmp	r3, r6
 800ba82:	db0b      	blt.n	800ba9c <__lshift+0x38>
 800ba84:	4638      	mov	r0, r7
 800ba86:	f7ff fddf 	bl	800b648 <_Balloc>
 800ba8a:	4605      	mov	r5, r0
 800ba8c:	b948      	cbnz	r0, 800baa2 <__lshift+0x3e>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	4b28      	ldr	r3, [pc, #160]	@ (800bb34 <__lshift+0xd0>)
 800ba92:	4829      	ldr	r0, [pc, #164]	@ (800bb38 <__lshift+0xd4>)
 800ba94:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ba98:	f000 fc6e 	bl	800c378 <__assert_func>
 800ba9c:	3101      	adds	r1, #1
 800ba9e:	005b      	lsls	r3, r3, #1
 800baa0:	e7ee      	b.n	800ba80 <__lshift+0x1c>
 800baa2:	2300      	movs	r3, #0
 800baa4:	f100 0114 	add.w	r1, r0, #20
 800baa8:	f100 0210 	add.w	r2, r0, #16
 800baac:	4618      	mov	r0, r3
 800baae:	4553      	cmp	r3, sl
 800bab0:	db33      	blt.n	800bb1a <__lshift+0xb6>
 800bab2:	6920      	ldr	r0, [r4, #16]
 800bab4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bab8:	f104 0314 	add.w	r3, r4, #20
 800babc:	f019 091f 	ands.w	r9, r9, #31
 800bac0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bac4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bac8:	d02b      	beq.n	800bb22 <__lshift+0xbe>
 800baca:	f1c9 0e20 	rsb	lr, r9, #32
 800bace:	468a      	mov	sl, r1
 800bad0:	2200      	movs	r2, #0
 800bad2:	6818      	ldr	r0, [r3, #0]
 800bad4:	fa00 f009 	lsl.w	r0, r0, r9
 800bad8:	4310      	orrs	r0, r2
 800bada:	f84a 0b04 	str.w	r0, [sl], #4
 800bade:	f853 2b04 	ldr.w	r2, [r3], #4
 800bae2:	459c      	cmp	ip, r3
 800bae4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bae8:	d8f3      	bhi.n	800bad2 <__lshift+0x6e>
 800baea:	ebac 0304 	sub.w	r3, ip, r4
 800baee:	3b15      	subs	r3, #21
 800baf0:	f023 0303 	bic.w	r3, r3, #3
 800baf4:	3304      	adds	r3, #4
 800baf6:	f104 0015 	add.w	r0, r4, #21
 800bafa:	4584      	cmp	ip, r0
 800bafc:	bf38      	it	cc
 800bafe:	2304      	movcc	r3, #4
 800bb00:	50ca      	str	r2, [r1, r3]
 800bb02:	b10a      	cbz	r2, 800bb08 <__lshift+0xa4>
 800bb04:	f108 0602 	add.w	r6, r8, #2
 800bb08:	3e01      	subs	r6, #1
 800bb0a:	4638      	mov	r0, r7
 800bb0c:	612e      	str	r6, [r5, #16]
 800bb0e:	4621      	mov	r1, r4
 800bb10:	f7ff fdda 	bl	800b6c8 <_Bfree>
 800bb14:	4628      	mov	r0, r5
 800bb16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb1a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb1e:	3301      	adds	r3, #1
 800bb20:	e7c5      	b.n	800baae <__lshift+0x4a>
 800bb22:	3904      	subs	r1, #4
 800bb24:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb28:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb2c:	459c      	cmp	ip, r3
 800bb2e:	d8f9      	bhi.n	800bb24 <__lshift+0xc0>
 800bb30:	e7ea      	b.n	800bb08 <__lshift+0xa4>
 800bb32:	bf00      	nop
 800bb34:	0800c6c8 	.word	0x0800c6c8
 800bb38:	0800c6d9 	.word	0x0800c6d9

0800bb3c <__mcmp>:
 800bb3c:	690a      	ldr	r2, [r1, #16]
 800bb3e:	4603      	mov	r3, r0
 800bb40:	6900      	ldr	r0, [r0, #16]
 800bb42:	1a80      	subs	r0, r0, r2
 800bb44:	b530      	push	{r4, r5, lr}
 800bb46:	d10e      	bne.n	800bb66 <__mcmp+0x2a>
 800bb48:	3314      	adds	r3, #20
 800bb4a:	3114      	adds	r1, #20
 800bb4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bb50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bb54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bb58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bb5c:	4295      	cmp	r5, r2
 800bb5e:	d003      	beq.n	800bb68 <__mcmp+0x2c>
 800bb60:	d205      	bcs.n	800bb6e <__mcmp+0x32>
 800bb62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb66:	bd30      	pop	{r4, r5, pc}
 800bb68:	42a3      	cmp	r3, r4
 800bb6a:	d3f3      	bcc.n	800bb54 <__mcmp+0x18>
 800bb6c:	e7fb      	b.n	800bb66 <__mcmp+0x2a>
 800bb6e:	2001      	movs	r0, #1
 800bb70:	e7f9      	b.n	800bb66 <__mcmp+0x2a>
	...

0800bb74 <__mdiff>:
 800bb74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb78:	4689      	mov	r9, r1
 800bb7a:	4606      	mov	r6, r0
 800bb7c:	4611      	mov	r1, r2
 800bb7e:	4648      	mov	r0, r9
 800bb80:	4614      	mov	r4, r2
 800bb82:	f7ff ffdb 	bl	800bb3c <__mcmp>
 800bb86:	1e05      	subs	r5, r0, #0
 800bb88:	d112      	bne.n	800bbb0 <__mdiff+0x3c>
 800bb8a:	4629      	mov	r1, r5
 800bb8c:	4630      	mov	r0, r6
 800bb8e:	f7ff fd5b 	bl	800b648 <_Balloc>
 800bb92:	4602      	mov	r2, r0
 800bb94:	b928      	cbnz	r0, 800bba2 <__mdiff+0x2e>
 800bb96:	4b3f      	ldr	r3, [pc, #252]	@ (800bc94 <__mdiff+0x120>)
 800bb98:	f240 2137 	movw	r1, #567	@ 0x237
 800bb9c:	483e      	ldr	r0, [pc, #248]	@ (800bc98 <__mdiff+0x124>)
 800bb9e:	f000 fbeb 	bl	800c378 <__assert_func>
 800bba2:	2301      	movs	r3, #1
 800bba4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bba8:	4610      	mov	r0, r2
 800bbaa:	b003      	add	sp, #12
 800bbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb0:	bfbc      	itt	lt
 800bbb2:	464b      	movlt	r3, r9
 800bbb4:	46a1      	movlt	r9, r4
 800bbb6:	4630      	mov	r0, r6
 800bbb8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bbbc:	bfba      	itte	lt
 800bbbe:	461c      	movlt	r4, r3
 800bbc0:	2501      	movlt	r5, #1
 800bbc2:	2500      	movge	r5, #0
 800bbc4:	f7ff fd40 	bl	800b648 <_Balloc>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	b918      	cbnz	r0, 800bbd4 <__mdiff+0x60>
 800bbcc:	4b31      	ldr	r3, [pc, #196]	@ (800bc94 <__mdiff+0x120>)
 800bbce:	f240 2145 	movw	r1, #581	@ 0x245
 800bbd2:	e7e3      	b.n	800bb9c <__mdiff+0x28>
 800bbd4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bbd8:	6926      	ldr	r6, [r4, #16]
 800bbda:	60c5      	str	r5, [r0, #12]
 800bbdc:	f109 0310 	add.w	r3, r9, #16
 800bbe0:	f109 0514 	add.w	r5, r9, #20
 800bbe4:	f104 0e14 	add.w	lr, r4, #20
 800bbe8:	f100 0b14 	add.w	fp, r0, #20
 800bbec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bbf0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bbf4:	9301      	str	r3, [sp, #4]
 800bbf6:	46d9      	mov	r9, fp
 800bbf8:	f04f 0c00 	mov.w	ip, #0
 800bbfc:	9b01      	ldr	r3, [sp, #4]
 800bbfe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bc02:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bc06:	9301      	str	r3, [sp, #4]
 800bc08:	fa1f f38a 	uxth.w	r3, sl
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	b283      	uxth	r3, r0
 800bc10:	1acb      	subs	r3, r1, r3
 800bc12:	0c00      	lsrs	r0, r0, #16
 800bc14:	4463      	add	r3, ip
 800bc16:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bc1a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bc24:	4576      	cmp	r6, lr
 800bc26:	f849 3b04 	str.w	r3, [r9], #4
 800bc2a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bc2e:	d8e5      	bhi.n	800bbfc <__mdiff+0x88>
 800bc30:	1b33      	subs	r3, r6, r4
 800bc32:	3b15      	subs	r3, #21
 800bc34:	f023 0303 	bic.w	r3, r3, #3
 800bc38:	3415      	adds	r4, #21
 800bc3a:	3304      	adds	r3, #4
 800bc3c:	42a6      	cmp	r6, r4
 800bc3e:	bf38      	it	cc
 800bc40:	2304      	movcc	r3, #4
 800bc42:	441d      	add	r5, r3
 800bc44:	445b      	add	r3, fp
 800bc46:	461e      	mov	r6, r3
 800bc48:	462c      	mov	r4, r5
 800bc4a:	4544      	cmp	r4, r8
 800bc4c:	d30e      	bcc.n	800bc6c <__mdiff+0xf8>
 800bc4e:	f108 0103 	add.w	r1, r8, #3
 800bc52:	1b49      	subs	r1, r1, r5
 800bc54:	f021 0103 	bic.w	r1, r1, #3
 800bc58:	3d03      	subs	r5, #3
 800bc5a:	45a8      	cmp	r8, r5
 800bc5c:	bf38      	it	cc
 800bc5e:	2100      	movcc	r1, #0
 800bc60:	440b      	add	r3, r1
 800bc62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bc66:	b191      	cbz	r1, 800bc8e <__mdiff+0x11a>
 800bc68:	6117      	str	r7, [r2, #16]
 800bc6a:	e79d      	b.n	800bba8 <__mdiff+0x34>
 800bc6c:	f854 1b04 	ldr.w	r1, [r4], #4
 800bc70:	46e6      	mov	lr, ip
 800bc72:	0c08      	lsrs	r0, r1, #16
 800bc74:	fa1c fc81 	uxtah	ip, ip, r1
 800bc78:	4471      	add	r1, lr
 800bc7a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bc7e:	b289      	uxth	r1, r1
 800bc80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bc84:	f846 1b04 	str.w	r1, [r6], #4
 800bc88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bc8c:	e7dd      	b.n	800bc4a <__mdiff+0xd6>
 800bc8e:	3f01      	subs	r7, #1
 800bc90:	e7e7      	b.n	800bc62 <__mdiff+0xee>
 800bc92:	bf00      	nop
 800bc94:	0800c6c8 	.word	0x0800c6c8
 800bc98:	0800c6d9 	.word	0x0800c6d9

0800bc9c <__d2b>:
 800bc9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bca0:	460f      	mov	r7, r1
 800bca2:	2101      	movs	r1, #1
 800bca4:	ec59 8b10 	vmov	r8, r9, d0
 800bca8:	4616      	mov	r6, r2
 800bcaa:	f7ff fccd 	bl	800b648 <_Balloc>
 800bcae:	4604      	mov	r4, r0
 800bcb0:	b930      	cbnz	r0, 800bcc0 <__d2b+0x24>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	4b23      	ldr	r3, [pc, #140]	@ (800bd44 <__d2b+0xa8>)
 800bcb6:	4824      	ldr	r0, [pc, #144]	@ (800bd48 <__d2b+0xac>)
 800bcb8:	f240 310f 	movw	r1, #783	@ 0x30f
 800bcbc:	f000 fb5c 	bl	800c378 <__assert_func>
 800bcc0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bcc4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bcc8:	b10d      	cbz	r5, 800bcce <__d2b+0x32>
 800bcca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bcce:	9301      	str	r3, [sp, #4]
 800bcd0:	f1b8 0300 	subs.w	r3, r8, #0
 800bcd4:	d023      	beq.n	800bd1e <__d2b+0x82>
 800bcd6:	4668      	mov	r0, sp
 800bcd8:	9300      	str	r3, [sp, #0]
 800bcda:	f7ff fd7c 	bl	800b7d6 <__lo0bits>
 800bcde:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bce2:	b1d0      	cbz	r0, 800bd1a <__d2b+0x7e>
 800bce4:	f1c0 0320 	rsb	r3, r0, #32
 800bce8:	fa02 f303 	lsl.w	r3, r2, r3
 800bcec:	430b      	orrs	r3, r1
 800bcee:	40c2      	lsrs	r2, r0
 800bcf0:	6163      	str	r3, [r4, #20]
 800bcf2:	9201      	str	r2, [sp, #4]
 800bcf4:	9b01      	ldr	r3, [sp, #4]
 800bcf6:	61a3      	str	r3, [r4, #24]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	bf0c      	ite	eq
 800bcfc:	2201      	moveq	r2, #1
 800bcfe:	2202      	movne	r2, #2
 800bd00:	6122      	str	r2, [r4, #16]
 800bd02:	b1a5      	cbz	r5, 800bd2e <__d2b+0x92>
 800bd04:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bd08:	4405      	add	r5, r0
 800bd0a:	603d      	str	r5, [r7, #0]
 800bd0c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bd10:	6030      	str	r0, [r6, #0]
 800bd12:	4620      	mov	r0, r4
 800bd14:	b003      	add	sp, #12
 800bd16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd1a:	6161      	str	r1, [r4, #20]
 800bd1c:	e7ea      	b.n	800bcf4 <__d2b+0x58>
 800bd1e:	a801      	add	r0, sp, #4
 800bd20:	f7ff fd59 	bl	800b7d6 <__lo0bits>
 800bd24:	9b01      	ldr	r3, [sp, #4]
 800bd26:	6163      	str	r3, [r4, #20]
 800bd28:	3020      	adds	r0, #32
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	e7e8      	b.n	800bd00 <__d2b+0x64>
 800bd2e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd32:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bd36:	6038      	str	r0, [r7, #0]
 800bd38:	6918      	ldr	r0, [r3, #16]
 800bd3a:	f7ff fd2d 	bl	800b798 <__hi0bits>
 800bd3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd42:	e7e5      	b.n	800bd10 <__d2b+0x74>
 800bd44:	0800c6c8 	.word	0x0800c6c8
 800bd48:	0800c6d9 	.word	0x0800c6d9

0800bd4c <__sfputc_r>:
 800bd4c:	6893      	ldr	r3, [r2, #8]
 800bd4e:	3b01      	subs	r3, #1
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	b410      	push	{r4}
 800bd54:	6093      	str	r3, [r2, #8]
 800bd56:	da08      	bge.n	800bd6a <__sfputc_r+0x1e>
 800bd58:	6994      	ldr	r4, [r2, #24]
 800bd5a:	42a3      	cmp	r3, r4
 800bd5c:	db01      	blt.n	800bd62 <__sfputc_r+0x16>
 800bd5e:	290a      	cmp	r1, #10
 800bd60:	d103      	bne.n	800bd6a <__sfputc_r+0x1e>
 800bd62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd66:	f000 ba41 	b.w	800c1ec <__swbuf_r>
 800bd6a:	6813      	ldr	r3, [r2, #0]
 800bd6c:	1c58      	adds	r0, r3, #1
 800bd6e:	6010      	str	r0, [r2, #0]
 800bd70:	7019      	strb	r1, [r3, #0]
 800bd72:	4608      	mov	r0, r1
 800bd74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd78:	4770      	bx	lr

0800bd7a <__sfputs_r>:
 800bd7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd7c:	4606      	mov	r6, r0
 800bd7e:	460f      	mov	r7, r1
 800bd80:	4614      	mov	r4, r2
 800bd82:	18d5      	adds	r5, r2, r3
 800bd84:	42ac      	cmp	r4, r5
 800bd86:	d101      	bne.n	800bd8c <__sfputs_r+0x12>
 800bd88:	2000      	movs	r0, #0
 800bd8a:	e007      	b.n	800bd9c <__sfputs_r+0x22>
 800bd8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd90:	463a      	mov	r2, r7
 800bd92:	4630      	mov	r0, r6
 800bd94:	f7ff ffda 	bl	800bd4c <__sfputc_r>
 800bd98:	1c43      	adds	r3, r0, #1
 800bd9a:	d1f3      	bne.n	800bd84 <__sfputs_r+0xa>
 800bd9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bda0 <_vfiprintf_r>:
 800bda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bda4:	460d      	mov	r5, r1
 800bda6:	b09d      	sub	sp, #116	@ 0x74
 800bda8:	4614      	mov	r4, r2
 800bdaa:	4698      	mov	r8, r3
 800bdac:	4606      	mov	r6, r0
 800bdae:	b118      	cbz	r0, 800bdb8 <_vfiprintf_r+0x18>
 800bdb0:	6a03      	ldr	r3, [r0, #32]
 800bdb2:	b90b      	cbnz	r3, 800bdb8 <_vfiprintf_r+0x18>
 800bdb4:	f7fe fb12 	bl	800a3dc <__sinit>
 800bdb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdba:	07d9      	lsls	r1, r3, #31
 800bdbc:	d405      	bmi.n	800bdca <_vfiprintf_r+0x2a>
 800bdbe:	89ab      	ldrh	r3, [r5, #12]
 800bdc0:	059a      	lsls	r2, r3, #22
 800bdc2:	d402      	bmi.n	800bdca <_vfiprintf_r+0x2a>
 800bdc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdc6:	f7fe fce0 	bl	800a78a <__retarget_lock_acquire_recursive>
 800bdca:	89ab      	ldrh	r3, [r5, #12]
 800bdcc:	071b      	lsls	r3, r3, #28
 800bdce:	d501      	bpl.n	800bdd4 <_vfiprintf_r+0x34>
 800bdd0:	692b      	ldr	r3, [r5, #16]
 800bdd2:	b99b      	cbnz	r3, 800bdfc <_vfiprintf_r+0x5c>
 800bdd4:	4629      	mov	r1, r5
 800bdd6:	4630      	mov	r0, r6
 800bdd8:	f000 fa46 	bl	800c268 <__swsetup_r>
 800bddc:	b170      	cbz	r0, 800bdfc <_vfiprintf_r+0x5c>
 800bdde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bde0:	07dc      	lsls	r4, r3, #31
 800bde2:	d504      	bpl.n	800bdee <_vfiprintf_r+0x4e>
 800bde4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bde8:	b01d      	add	sp, #116	@ 0x74
 800bdea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdee:	89ab      	ldrh	r3, [r5, #12]
 800bdf0:	0598      	lsls	r0, r3, #22
 800bdf2:	d4f7      	bmi.n	800bde4 <_vfiprintf_r+0x44>
 800bdf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdf6:	f7fe fcc9 	bl	800a78c <__retarget_lock_release_recursive>
 800bdfa:	e7f3      	b.n	800bde4 <_vfiprintf_r+0x44>
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	9309      	str	r3, [sp, #36]	@ 0x24
 800be00:	2320      	movs	r3, #32
 800be02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be06:	f8cd 800c 	str.w	r8, [sp, #12]
 800be0a:	2330      	movs	r3, #48	@ 0x30
 800be0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bfbc <_vfiprintf_r+0x21c>
 800be10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800be14:	f04f 0901 	mov.w	r9, #1
 800be18:	4623      	mov	r3, r4
 800be1a:	469a      	mov	sl, r3
 800be1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be20:	b10a      	cbz	r2, 800be26 <_vfiprintf_r+0x86>
 800be22:	2a25      	cmp	r2, #37	@ 0x25
 800be24:	d1f9      	bne.n	800be1a <_vfiprintf_r+0x7a>
 800be26:	ebba 0b04 	subs.w	fp, sl, r4
 800be2a:	d00b      	beq.n	800be44 <_vfiprintf_r+0xa4>
 800be2c:	465b      	mov	r3, fp
 800be2e:	4622      	mov	r2, r4
 800be30:	4629      	mov	r1, r5
 800be32:	4630      	mov	r0, r6
 800be34:	f7ff ffa1 	bl	800bd7a <__sfputs_r>
 800be38:	3001      	adds	r0, #1
 800be3a:	f000 80a7 	beq.w	800bf8c <_vfiprintf_r+0x1ec>
 800be3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be40:	445a      	add	r2, fp
 800be42:	9209      	str	r2, [sp, #36]	@ 0x24
 800be44:	f89a 3000 	ldrb.w	r3, [sl]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	f000 809f 	beq.w	800bf8c <_vfiprintf_r+0x1ec>
 800be4e:	2300      	movs	r3, #0
 800be50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be58:	f10a 0a01 	add.w	sl, sl, #1
 800be5c:	9304      	str	r3, [sp, #16]
 800be5e:	9307      	str	r3, [sp, #28]
 800be60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be64:	931a      	str	r3, [sp, #104]	@ 0x68
 800be66:	4654      	mov	r4, sl
 800be68:	2205      	movs	r2, #5
 800be6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be6e:	4853      	ldr	r0, [pc, #332]	@ (800bfbc <_vfiprintf_r+0x21c>)
 800be70:	f7f4 f9ae 	bl	80001d0 <memchr>
 800be74:	9a04      	ldr	r2, [sp, #16]
 800be76:	b9d8      	cbnz	r0, 800beb0 <_vfiprintf_r+0x110>
 800be78:	06d1      	lsls	r1, r2, #27
 800be7a:	bf44      	itt	mi
 800be7c:	2320      	movmi	r3, #32
 800be7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be82:	0713      	lsls	r3, r2, #28
 800be84:	bf44      	itt	mi
 800be86:	232b      	movmi	r3, #43	@ 0x2b
 800be88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be8c:	f89a 3000 	ldrb.w	r3, [sl]
 800be90:	2b2a      	cmp	r3, #42	@ 0x2a
 800be92:	d015      	beq.n	800bec0 <_vfiprintf_r+0x120>
 800be94:	9a07      	ldr	r2, [sp, #28]
 800be96:	4654      	mov	r4, sl
 800be98:	2000      	movs	r0, #0
 800be9a:	f04f 0c0a 	mov.w	ip, #10
 800be9e:	4621      	mov	r1, r4
 800bea0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bea4:	3b30      	subs	r3, #48	@ 0x30
 800bea6:	2b09      	cmp	r3, #9
 800bea8:	d94b      	bls.n	800bf42 <_vfiprintf_r+0x1a2>
 800beaa:	b1b0      	cbz	r0, 800beda <_vfiprintf_r+0x13a>
 800beac:	9207      	str	r2, [sp, #28]
 800beae:	e014      	b.n	800beda <_vfiprintf_r+0x13a>
 800beb0:	eba0 0308 	sub.w	r3, r0, r8
 800beb4:	fa09 f303 	lsl.w	r3, r9, r3
 800beb8:	4313      	orrs	r3, r2
 800beba:	9304      	str	r3, [sp, #16]
 800bebc:	46a2      	mov	sl, r4
 800bebe:	e7d2      	b.n	800be66 <_vfiprintf_r+0xc6>
 800bec0:	9b03      	ldr	r3, [sp, #12]
 800bec2:	1d19      	adds	r1, r3, #4
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	9103      	str	r1, [sp, #12]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	bfbb      	ittet	lt
 800becc:	425b      	neglt	r3, r3
 800bece:	f042 0202 	orrlt.w	r2, r2, #2
 800bed2:	9307      	strge	r3, [sp, #28]
 800bed4:	9307      	strlt	r3, [sp, #28]
 800bed6:	bfb8      	it	lt
 800bed8:	9204      	strlt	r2, [sp, #16]
 800beda:	7823      	ldrb	r3, [r4, #0]
 800bedc:	2b2e      	cmp	r3, #46	@ 0x2e
 800bede:	d10a      	bne.n	800bef6 <_vfiprintf_r+0x156>
 800bee0:	7863      	ldrb	r3, [r4, #1]
 800bee2:	2b2a      	cmp	r3, #42	@ 0x2a
 800bee4:	d132      	bne.n	800bf4c <_vfiprintf_r+0x1ac>
 800bee6:	9b03      	ldr	r3, [sp, #12]
 800bee8:	1d1a      	adds	r2, r3, #4
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	9203      	str	r2, [sp, #12]
 800beee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bef2:	3402      	adds	r4, #2
 800bef4:	9305      	str	r3, [sp, #20]
 800bef6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bfcc <_vfiprintf_r+0x22c>
 800befa:	7821      	ldrb	r1, [r4, #0]
 800befc:	2203      	movs	r2, #3
 800befe:	4650      	mov	r0, sl
 800bf00:	f7f4 f966 	bl	80001d0 <memchr>
 800bf04:	b138      	cbz	r0, 800bf16 <_vfiprintf_r+0x176>
 800bf06:	9b04      	ldr	r3, [sp, #16]
 800bf08:	eba0 000a 	sub.w	r0, r0, sl
 800bf0c:	2240      	movs	r2, #64	@ 0x40
 800bf0e:	4082      	lsls	r2, r0
 800bf10:	4313      	orrs	r3, r2
 800bf12:	3401      	adds	r4, #1
 800bf14:	9304      	str	r3, [sp, #16]
 800bf16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf1a:	4829      	ldr	r0, [pc, #164]	@ (800bfc0 <_vfiprintf_r+0x220>)
 800bf1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bf20:	2206      	movs	r2, #6
 800bf22:	f7f4 f955 	bl	80001d0 <memchr>
 800bf26:	2800      	cmp	r0, #0
 800bf28:	d03f      	beq.n	800bfaa <_vfiprintf_r+0x20a>
 800bf2a:	4b26      	ldr	r3, [pc, #152]	@ (800bfc4 <_vfiprintf_r+0x224>)
 800bf2c:	bb1b      	cbnz	r3, 800bf76 <_vfiprintf_r+0x1d6>
 800bf2e:	9b03      	ldr	r3, [sp, #12]
 800bf30:	3307      	adds	r3, #7
 800bf32:	f023 0307 	bic.w	r3, r3, #7
 800bf36:	3308      	adds	r3, #8
 800bf38:	9303      	str	r3, [sp, #12]
 800bf3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf3c:	443b      	add	r3, r7
 800bf3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf40:	e76a      	b.n	800be18 <_vfiprintf_r+0x78>
 800bf42:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf46:	460c      	mov	r4, r1
 800bf48:	2001      	movs	r0, #1
 800bf4a:	e7a8      	b.n	800be9e <_vfiprintf_r+0xfe>
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	3401      	adds	r4, #1
 800bf50:	9305      	str	r3, [sp, #20]
 800bf52:	4619      	mov	r1, r3
 800bf54:	f04f 0c0a 	mov.w	ip, #10
 800bf58:	4620      	mov	r0, r4
 800bf5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf5e:	3a30      	subs	r2, #48	@ 0x30
 800bf60:	2a09      	cmp	r2, #9
 800bf62:	d903      	bls.n	800bf6c <_vfiprintf_r+0x1cc>
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d0c6      	beq.n	800bef6 <_vfiprintf_r+0x156>
 800bf68:	9105      	str	r1, [sp, #20]
 800bf6a:	e7c4      	b.n	800bef6 <_vfiprintf_r+0x156>
 800bf6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf70:	4604      	mov	r4, r0
 800bf72:	2301      	movs	r3, #1
 800bf74:	e7f0      	b.n	800bf58 <_vfiprintf_r+0x1b8>
 800bf76:	ab03      	add	r3, sp, #12
 800bf78:	9300      	str	r3, [sp, #0]
 800bf7a:	462a      	mov	r2, r5
 800bf7c:	4b12      	ldr	r3, [pc, #72]	@ (800bfc8 <_vfiprintf_r+0x228>)
 800bf7e:	a904      	add	r1, sp, #16
 800bf80:	4630      	mov	r0, r6
 800bf82:	f7fd fde7 	bl	8009b54 <_printf_float>
 800bf86:	4607      	mov	r7, r0
 800bf88:	1c78      	adds	r0, r7, #1
 800bf8a:	d1d6      	bne.n	800bf3a <_vfiprintf_r+0x19a>
 800bf8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf8e:	07d9      	lsls	r1, r3, #31
 800bf90:	d405      	bmi.n	800bf9e <_vfiprintf_r+0x1fe>
 800bf92:	89ab      	ldrh	r3, [r5, #12]
 800bf94:	059a      	lsls	r2, r3, #22
 800bf96:	d402      	bmi.n	800bf9e <_vfiprintf_r+0x1fe>
 800bf98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf9a:	f7fe fbf7 	bl	800a78c <__retarget_lock_release_recursive>
 800bf9e:	89ab      	ldrh	r3, [r5, #12]
 800bfa0:	065b      	lsls	r3, r3, #25
 800bfa2:	f53f af1f 	bmi.w	800bde4 <_vfiprintf_r+0x44>
 800bfa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bfa8:	e71e      	b.n	800bde8 <_vfiprintf_r+0x48>
 800bfaa:	ab03      	add	r3, sp, #12
 800bfac:	9300      	str	r3, [sp, #0]
 800bfae:	462a      	mov	r2, r5
 800bfb0:	4b05      	ldr	r3, [pc, #20]	@ (800bfc8 <_vfiprintf_r+0x228>)
 800bfb2:	a904      	add	r1, sp, #16
 800bfb4:	4630      	mov	r0, r6
 800bfb6:	f7fe f865 	bl	800a084 <_printf_i>
 800bfba:	e7e4      	b.n	800bf86 <_vfiprintf_r+0x1e6>
 800bfbc:	0800c830 	.word	0x0800c830
 800bfc0:	0800c83a 	.word	0x0800c83a
 800bfc4:	08009b55 	.word	0x08009b55
 800bfc8:	0800bd7b 	.word	0x0800bd7b
 800bfcc:	0800c836 	.word	0x0800c836

0800bfd0 <__sflush_r>:
 800bfd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bfd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd8:	0716      	lsls	r6, r2, #28
 800bfda:	4605      	mov	r5, r0
 800bfdc:	460c      	mov	r4, r1
 800bfde:	d454      	bmi.n	800c08a <__sflush_r+0xba>
 800bfe0:	684b      	ldr	r3, [r1, #4]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	dc02      	bgt.n	800bfec <__sflush_r+0x1c>
 800bfe6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	dd48      	ble.n	800c07e <__sflush_r+0xae>
 800bfec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bfee:	2e00      	cmp	r6, #0
 800bff0:	d045      	beq.n	800c07e <__sflush_r+0xae>
 800bff2:	2300      	movs	r3, #0
 800bff4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bff8:	682f      	ldr	r7, [r5, #0]
 800bffa:	6a21      	ldr	r1, [r4, #32]
 800bffc:	602b      	str	r3, [r5, #0]
 800bffe:	d030      	beq.n	800c062 <__sflush_r+0x92>
 800c000:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c002:	89a3      	ldrh	r3, [r4, #12]
 800c004:	0759      	lsls	r1, r3, #29
 800c006:	d505      	bpl.n	800c014 <__sflush_r+0x44>
 800c008:	6863      	ldr	r3, [r4, #4]
 800c00a:	1ad2      	subs	r2, r2, r3
 800c00c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c00e:	b10b      	cbz	r3, 800c014 <__sflush_r+0x44>
 800c010:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c012:	1ad2      	subs	r2, r2, r3
 800c014:	2300      	movs	r3, #0
 800c016:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c018:	6a21      	ldr	r1, [r4, #32]
 800c01a:	4628      	mov	r0, r5
 800c01c:	47b0      	blx	r6
 800c01e:	1c43      	adds	r3, r0, #1
 800c020:	89a3      	ldrh	r3, [r4, #12]
 800c022:	d106      	bne.n	800c032 <__sflush_r+0x62>
 800c024:	6829      	ldr	r1, [r5, #0]
 800c026:	291d      	cmp	r1, #29
 800c028:	d82b      	bhi.n	800c082 <__sflush_r+0xb2>
 800c02a:	4a2a      	ldr	r2, [pc, #168]	@ (800c0d4 <__sflush_r+0x104>)
 800c02c:	410a      	asrs	r2, r1
 800c02e:	07d6      	lsls	r6, r2, #31
 800c030:	d427      	bmi.n	800c082 <__sflush_r+0xb2>
 800c032:	2200      	movs	r2, #0
 800c034:	6062      	str	r2, [r4, #4]
 800c036:	04d9      	lsls	r1, r3, #19
 800c038:	6922      	ldr	r2, [r4, #16]
 800c03a:	6022      	str	r2, [r4, #0]
 800c03c:	d504      	bpl.n	800c048 <__sflush_r+0x78>
 800c03e:	1c42      	adds	r2, r0, #1
 800c040:	d101      	bne.n	800c046 <__sflush_r+0x76>
 800c042:	682b      	ldr	r3, [r5, #0]
 800c044:	b903      	cbnz	r3, 800c048 <__sflush_r+0x78>
 800c046:	6560      	str	r0, [r4, #84]	@ 0x54
 800c048:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c04a:	602f      	str	r7, [r5, #0]
 800c04c:	b1b9      	cbz	r1, 800c07e <__sflush_r+0xae>
 800c04e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c052:	4299      	cmp	r1, r3
 800c054:	d002      	beq.n	800c05c <__sflush_r+0x8c>
 800c056:	4628      	mov	r0, r5
 800c058:	f7ff f9f6 	bl	800b448 <_free_r>
 800c05c:	2300      	movs	r3, #0
 800c05e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c060:	e00d      	b.n	800c07e <__sflush_r+0xae>
 800c062:	2301      	movs	r3, #1
 800c064:	4628      	mov	r0, r5
 800c066:	47b0      	blx	r6
 800c068:	4602      	mov	r2, r0
 800c06a:	1c50      	adds	r0, r2, #1
 800c06c:	d1c9      	bne.n	800c002 <__sflush_r+0x32>
 800c06e:	682b      	ldr	r3, [r5, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d0c6      	beq.n	800c002 <__sflush_r+0x32>
 800c074:	2b1d      	cmp	r3, #29
 800c076:	d001      	beq.n	800c07c <__sflush_r+0xac>
 800c078:	2b16      	cmp	r3, #22
 800c07a:	d11e      	bne.n	800c0ba <__sflush_r+0xea>
 800c07c:	602f      	str	r7, [r5, #0]
 800c07e:	2000      	movs	r0, #0
 800c080:	e022      	b.n	800c0c8 <__sflush_r+0xf8>
 800c082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c086:	b21b      	sxth	r3, r3
 800c088:	e01b      	b.n	800c0c2 <__sflush_r+0xf2>
 800c08a:	690f      	ldr	r7, [r1, #16]
 800c08c:	2f00      	cmp	r7, #0
 800c08e:	d0f6      	beq.n	800c07e <__sflush_r+0xae>
 800c090:	0793      	lsls	r3, r2, #30
 800c092:	680e      	ldr	r6, [r1, #0]
 800c094:	bf08      	it	eq
 800c096:	694b      	ldreq	r3, [r1, #20]
 800c098:	600f      	str	r7, [r1, #0]
 800c09a:	bf18      	it	ne
 800c09c:	2300      	movne	r3, #0
 800c09e:	eba6 0807 	sub.w	r8, r6, r7
 800c0a2:	608b      	str	r3, [r1, #8]
 800c0a4:	f1b8 0f00 	cmp.w	r8, #0
 800c0a8:	dde9      	ble.n	800c07e <__sflush_r+0xae>
 800c0aa:	6a21      	ldr	r1, [r4, #32]
 800c0ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c0ae:	4643      	mov	r3, r8
 800c0b0:	463a      	mov	r2, r7
 800c0b2:	4628      	mov	r0, r5
 800c0b4:	47b0      	blx	r6
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	dc08      	bgt.n	800c0cc <__sflush_r+0xfc>
 800c0ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0c2:	81a3      	strh	r3, [r4, #12]
 800c0c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0cc:	4407      	add	r7, r0
 800c0ce:	eba8 0800 	sub.w	r8, r8, r0
 800c0d2:	e7e7      	b.n	800c0a4 <__sflush_r+0xd4>
 800c0d4:	dfbffffe 	.word	0xdfbffffe

0800c0d8 <_fflush_r>:
 800c0d8:	b538      	push	{r3, r4, r5, lr}
 800c0da:	690b      	ldr	r3, [r1, #16]
 800c0dc:	4605      	mov	r5, r0
 800c0de:	460c      	mov	r4, r1
 800c0e0:	b913      	cbnz	r3, 800c0e8 <_fflush_r+0x10>
 800c0e2:	2500      	movs	r5, #0
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	bd38      	pop	{r3, r4, r5, pc}
 800c0e8:	b118      	cbz	r0, 800c0f2 <_fflush_r+0x1a>
 800c0ea:	6a03      	ldr	r3, [r0, #32]
 800c0ec:	b90b      	cbnz	r3, 800c0f2 <_fflush_r+0x1a>
 800c0ee:	f7fe f975 	bl	800a3dc <__sinit>
 800c0f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d0f3      	beq.n	800c0e2 <_fflush_r+0xa>
 800c0fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c0fc:	07d0      	lsls	r0, r2, #31
 800c0fe:	d404      	bmi.n	800c10a <_fflush_r+0x32>
 800c100:	0599      	lsls	r1, r3, #22
 800c102:	d402      	bmi.n	800c10a <_fflush_r+0x32>
 800c104:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c106:	f7fe fb40 	bl	800a78a <__retarget_lock_acquire_recursive>
 800c10a:	4628      	mov	r0, r5
 800c10c:	4621      	mov	r1, r4
 800c10e:	f7ff ff5f 	bl	800bfd0 <__sflush_r>
 800c112:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c114:	07da      	lsls	r2, r3, #31
 800c116:	4605      	mov	r5, r0
 800c118:	d4e4      	bmi.n	800c0e4 <_fflush_r+0xc>
 800c11a:	89a3      	ldrh	r3, [r4, #12]
 800c11c:	059b      	lsls	r3, r3, #22
 800c11e:	d4e1      	bmi.n	800c0e4 <_fflush_r+0xc>
 800c120:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c122:	f7fe fb33 	bl	800a78c <__retarget_lock_release_recursive>
 800c126:	e7dd      	b.n	800c0e4 <_fflush_r+0xc>

0800c128 <__swhatbuf_r>:
 800c128:	b570      	push	{r4, r5, r6, lr}
 800c12a:	460c      	mov	r4, r1
 800c12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c130:	2900      	cmp	r1, #0
 800c132:	b096      	sub	sp, #88	@ 0x58
 800c134:	4615      	mov	r5, r2
 800c136:	461e      	mov	r6, r3
 800c138:	da0d      	bge.n	800c156 <__swhatbuf_r+0x2e>
 800c13a:	89a3      	ldrh	r3, [r4, #12]
 800c13c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c140:	f04f 0100 	mov.w	r1, #0
 800c144:	bf14      	ite	ne
 800c146:	2340      	movne	r3, #64	@ 0x40
 800c148:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c14c:	2000      	movs	r0, #0
 800c14e:	6031      	str	r1, [r6, #0]
 800c150:	602b      	str	r3, [r5, #0]
 800c152:	b016      	add	sp, #88	@ 0x58
 800c154:	bd70      	pop	{r4, r5, r6, pc}
 800c156:	466a      	mov	r2, sp
 800c158:	f000 f8dc 	bl	800c314 <_fstat_r>
 800c15c:	2800      	cmp	r0, #0
 800c15e:	dbec      	blt.n	800c13a <__swhatbuf_r+0x12>
 800c160:	9901      	ldr	r1, [sp, #4]
 800c162:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c166:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c16a:	4259      	negs	r1, r3
 800c16c:	4159      	adcs	r1, r3
 800c16e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c172:	e7eb      	b.n	800c14c <__swhatbuf_r+0x24>

0800c174 <__smakebuf_r>:
 800c174:	898b      	ldrh	r3, [r1, #12]
 800c176:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c178:	079d      	lsls	r5, r3, #30
 800c17a:	4606      	mov	r6, r0
 800c17c:	460c      	mov	r4, r1
 800c17e:	d507      	bpl.n	800c190 <__smakebuf_r+0x1c>
 800c180:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c184:	6023      	str	r3, [r4, #0]
 800c186:	6123      	str	r3, [r4, #16]
 800c188:	2301      	movs	r3, #1
 800c18a:	6163      	str	r3, [r4, #20]
 800c18c:	b003      	add	sp, #12
 800c18e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c190:	ab01      	add	r3, sp, #4
 800c192:	466a      	mov	r2, sp
 800c194:	f7ff ffc8 	bl	800c128 <__swhatbuf_r>
 800c198:	9f00      	ldr	r7, [sp, #0]
 800c19a:	4605      	mov	r5, r0
 800c19c:	4639      	mov	r1, r7
 800c19e:	4630      	mov	r0, r6
 800c1a0:	f7ff f9c6 	bl	800b530 <_malloc_r>
 800c1a4:	b948      	cbnz	r0, 800c1ba <__smakebuf_r+0x46>
 800c1a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1aa:	059a      	lsls	r2, r3, #22
 800c1ac:	d4ee      	bmi.n	800c18c <__smakebuf_r+0x18>
 800c1ae:	f023 0303 	bic.w	r3, r3, #3
 800c1b2:	f043 0302 	orr.w	r3, r3, #2
 800c1b6:	81a3      	strh	r3, [r4, #12]
 800c1b8:	e7e2      	b.n	800c180 <__smakebuf_r+0xc>
 800c1ba:	89a3      	ldrh	r3, [r4, #12]
 800c1bc:	6020      	str	r0, [r4, #0]
 800c1be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1c2:	81a3      	strh	r3, [r4, #12]
 800c1c4:	9b01      	ldr	r3, [sp, #4]
 800c1c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c1ca:	b15b      	cbz	r3, 800c1e4 <__smakebuf_r+0x70>
 800c1cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1d0:	4630      	mov	r0, r6
 800c1d2:	f000 f8b1 	bl	800c338 <_isatty_r>
 800c1d6:	b128      	cbz	r0, 800c1e4 <__smakebuf_r+0x70>
 800c1d8:	89a3      	ldrh	r3, [r4, #12]
 800c1da:	f023 0303 	bic.w	r3, r3, #3
 800c1de:	f043 0301 	orr.w	r3, r3, #1
 800c1e2:	81a3      	strh	r3, [r4, #12]
 800c1e4:	89a3      	ldrh	r3, [r4, #12]
 800c1e6:	431d      	orrs	r5, r3
 800c1e8:	81a5      	strh	r5, [r4, #12]
 800c1ea:	e7cf      	b.n	800c18c <__smakebuf_r+0x18>

0800c1ec <__swbuf_r>:
 800c1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ee:	460e      	mov	r6, r1
 800c1f0:	4614      	mov	r4, r2
 800c1f2:	4605      	mov	r5, r0
 800c1f4:	b118      	cbz	r0, 800c1fe <__swbuf_r+0x12>
 800c1f6:	6a03      	ldr	r3, [r0, #32]
 800c1f8:	b90b      	cbnz	r3, 800c1fe <__swbuf_r+0x12>
 800c1fa:	f7fe f8ef 	bl	800a3dc <__sinit>
 800c1fe:	69a3      	ldr	r3, [r4, #24]
 800c200:	60a3      	str	r3, [r4, #8]
 800c202:	89a3      	ldrh	r3, [r4, #12]
 800c204:	071a      	lsls	r2, r3, #28
 800c206:	d501      	bpl.n	800c20c <__swbuf_r+0x20>
 800c208:	6923      	ldr	r3, [r4, #16]
 800c20a:	b943      	cbnz	r3, 800c21e <__swbuf_r+0x32>
 800c20c:	4621      	mov	r1, r4
 800c20e:	4628      	mov	r0, r5
 800c210:	f000 f82a 	bl	800c268 <__swsetup_r>
 800c214:	b118      	cbz	r0, 800c21e <__swbuf_r+0x32>
 800c216:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c21a:	4638      	mov	r0, r7
 800c21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c21e:	6823      	ldr	r3, [r4, #0]
 800c220:	6922      	ldr	r2, [r4, #16]
 800c222:	1a98      	subs	r0, r3, r2
 800c224:	6963      	ldr	r3, [r4, #20]
 800c226:	b2f6      	uxtb	r6, r6
 800c228:	4283      	cmp	r3, r0
 800c22a:	4637      	mov	r7, r6
 800c22c:	dc05      	bgt.n	800c23a <__swbuf_r+0x4e>
 800c22e:	4621      	mov	r1, r4
 800c230:	4628      	mov	r0, r5
 800c232:	f7ff ff51 	bl	800c0d8 <_fflush_r>
 800c236:	2800      	cmp	r0, #0
 800c238:	d1ed      	bne.n	800c216 <__swbuf_r+0x2a>
 800c23a:	68a3      	ldr	r3, [r4, #8]
 800c23c:	3b01      	subs	r3, #1
 800c23e:	60a3      	str	r3, [r4, #8]
 800c240:	6823      	ldr	r3, [r4, #0]
 800c242:	1c5a      	adds	r2, r3, #1
 800c244:	6022      	str	r2, [r4, #0]
 800c246:	701e      	strb	r6, [r3, #0]
 800c248:	6962      	ldr	r2, [r4, #20]
 800c24a:	1c43      	adds	r3, r0, #1
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d004      	beq.n	800c25a <__swbuf_r+0x6e>
 800c250:	89a3      	ldrh	r3, [r4, #12]
 800c252:	07db      	lsls	r3, r3, #31
 800c254:	d5e1      	bpl.n	800c21a <__swbuf_r+0x2e>
 800c256:	2e0a      	cmp	r6, #10
 800c258:	d1df      	bne.n	800c21a <__swbuf_r+0x2e>
 800c25a:	4621      	mov	r1, r4
 800c25c:	4628      	mov	r0, r5
 800c25e:	f7ff ff3b 	bl	800c0d8 <_fflush_r>
 800c262:	2800      	cmp	r0, #0
 800c264:	d0d9      	beq.n	800c21a <__swbuf_r+0x2e>
 800c266:	e7d6      	b.n	800c216 <__swbuf_r+0x2a>

0800c268 <__swsetup_r>:
 800c268:	b538      	push	{r3, r4, r5, lr}
 800c26a:	4b29      	ldr	r3, [pc, #164]	@ (800c310 <__swsetup_r+0xa8>)
 800c26c:	4605      	mov	r5, r0
 800c26e:	6818      	ldr	r0, [r3, #0]
 800c270:	460c      	mov	r4, r1
 800c272:	b118      	cbz	r0, 800c27c <__swsetup_r+0x14>
 800c274:	6a03      	ldr	r3, [r0, #32]
 800c276:	b90b      	cbnz	r3, 800c27c <__swsetup_r+0x14>
 800c278:	f7fe f8b0 	bl	800a3dc <__sinit>
 800c27c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c280:	0719      	lsls	r1, r3, #28
 800c282:	d422      	bmi.n	800c2ca <__swsetup_r+0x62>
 800c284:	06da      	lsls	r2, r3, #27
 800c286:	d407      	bmi.n	800c298 <__swsetup_r+0x30>
 800c288:	2209      	movs	r2, #9
 800c28a:	602a      	str	r2, [r5, #0]
 800c28c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c290:	81a3      	strh	r3, [r4, #12]
 800c292:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c296:	e033      	b.n	800c300 <__swsetup_r+0x98>
 800c298:	0758      	lsls	r0, r3, #29
 800c29a:	d512      	bpl.n	800c2c2 <__swsetup_r+0x5a>
 800c29c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c29e:	b141      	cbz	r1, 800c2b2 <__swsetup_r+0x4a>
 800c2a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2a4:	4299      	cmp	r1, r3
 800c2a6:	d002      	beq.n	800c2ae <__swsetup_r+0x46>
 800c2a8:	4628      	mov	r0, r5
 800c2aa:	f7ff f8cd 	bl	800b448 <_free_r>
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2b2:	89a3      	ldrh	r3, [r4, #12]
 800c2b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c2b8:	81a3      	strh	r3, [r4, #12]
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	6063      	str	r3, [r4, #4]
 800c2be:	6923      	ldr	r3, [r4, #16]
 800c2c0:	6023      	str	r3, [r4, #0]
 800c2c2:	89a3      	ldrh	r3, [r4, #12]
 800c2c4:	f043 0308 	orr.w	r3, r3, #8
 800c2c8:	81a3      	strh	r3, [r4, #12]
 800c2ca:	6923      	ldr	r3, [r4, #16]
 800c2cc:	b94b      	cbnz	r3, 800c2e2 <__swsetup_r+0x7a>
 800c2ce:	89a3      	ldrh	r3, [r4, #12]
 800c2d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c2d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2d8:	d003      	beq.n	800c2e2 <__swsetup_r+0x7a>
 800c2da:	4621      	mov	r1, r4
 800c2dc:	4628      	mov	r0, r5
 800c2de:	f7ff ff49 	bl	800c174 <__smakebuf_r>
 800c2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2e6:	f013 0201 	ands.w	r2, r3, #1
 800c2ea:	d00a      	beq.n	800c302 <__swsetup_r+0x9a>
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	60a2      	str	r2, [r4, #8]
 800c2f0:	6962      	ldr	r2, [r4, #20]
 800c2f2:	4252      	negs	r2, r2
 800c2f4:	61a2      	str	r2, [r4, #24]
 800c2f6:	6922      	ldr	r2, [r4, #16]
 800c2f8:	b942      	cbnz	r2, 800c30c <__swsetup_r+0xa4>
 800c2fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c2fe:	d1c5      	bne.n	800c28c <__swsetup_r+0x24>
 800c300:	bd38      	pop	{r3, r4, r5, pc}
 800c302:	0799      	lsls	r1, r3, #30
 800c304:	bf58      	it	pl
 800c306:	6962      	ldrpl	r2, [r4, #20]
 800c308:	60a2      	str	r2, [r4, #8]
 800c30a:	e7f4      	b.n	800c2f6 <__swsetup_r+0x8e>
 800c30c:	2000      	movs	r0, #0
 800c30e:	e7f7      	b.n	800c300 <__swsetup_r+0x98>
 800c310:	20000048 	.word	0x20000048

0800c314 <_fstat_r>:
 800c314:	b538      	push	{r3, r4, r5, lr}
 800c316:	4d07      	ldr	r5, [pc, #28]	@ (800c334 <_fstat_r+0x20>)
 800c318:	2300      	movs	r3, #0
 800c31a:	4604      	mov	r4, r0
 800c31c:	4608      	mov	r0, r1
 800c31e:	4611      	mov	r1, r2
 800c320:	602b      	str	r3, [r5, #0]
 800c322:	f7f4 ff2c 	bl	800117e <_fstat>
 800c326:	1c43      	adds	r3, r0, #1
 800c328:	d102      	bne.n	800c330 <_fstat_r+0x1c>
 800c32a:	682b      	ldr	r3, [r5, #0]
 800c32c:	b103      	cbz	r3, 800c330 <_fstat_r+0x1c>
 800c32e:	6023      	str	r3, [r4, #0]
 800c330:	bd38      	pop	{r3, r4, r5, pc}
 800c332:	bf00      	nop
 800c334:	20000540 	.word	0x20000540

0800c338 <_isatty_r>:
 800c338:	b538      	push	{r3, r4, r5, lr}
 800c33a:	4d06      	ldr	r5, [pc, #24]	@ (800c354 <_isatty_r+0x1c>)
 800c33c:	2300      	movs	r3, #0
 800c33e:	4604      	mov	r4, r0
 800c340:	4608      	mov	r0, r1
 800c342:	602b      	str	r3, [r5, #0]
 800c344:	f7f4 ff2b 	bl	800119e <_isatty>
 800c348:	1c43      	adds	r3, r0, #1
 800c34a:	d102      	bne.n	800c352 <_isatty_r+0x1a>
 800c34c:	682b      	ldr	r3, [r5, #0]
 800c34e:	b103      	cbz	r3, 800c352 <_isatty_r+0x1a>
 800c350:	6023      	str	r3, [r4, #0]
 800c352:	bd38      	pop	{r3, r4, r5, pc}
 800c354:	20000540 	.word	0x20000540

0800c358 <_sbrk_r>:
 800c358:	b538      	push	{r3, r4, r5, lr}
 800c35a:	4d06      	ldr	r5, [pc, #24]	@ (800c374 <_sbrk_r+0x1c>)
 800c35c:	2300      	movs	r3, #0
 800c35e:	4604      	mov	r4, r0
 800c360:	4608      	mov	r0, r1
 800c362:	602b      	str	r3, [r5, #0]
 800c364:	f7f4 ff34 	bl	80011d0 <_sbrk>
 800c368:	1c43      	adds	r3, r0, #1
 800c36a:	d102      	bne.n	800c372 <_sbrk_r+0x1a>
 800c36c:	682b      	ldr	r3, [r5, #0]
 800c36e:	b103      	cbz	r3, 800c372 <_sbrk_r+0x1a>
 800c370:	6023      	str	r3, [r4, #0]
 800c372:	bd38      	pop	{r3, r4, r5, pc}
 800c374:	20000540 	.word	0x20000540

0800c378 <__assert_func>:
 800c378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c37a:	4614      	mov	r4, r2
 800c37c:	461a      	mov	r2, r3
 800c37e:	4b09      	ldr	r3, [pc, #36]	@ (800c3a4 <__assert_func+0x2c>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4605      	mov	r5, r0
 800c384:	68d8      	ldr	r0, [r3, #12]
 800c386:	b954      	cbnz	r4, 800c39e <__assert_func+0x26>
 800c388:	4b07      	ldr	r3, [pc, #28]	@ (800c3a8 <__assert_func+0x30>)
 800c38a:	461c      	mov	r4, r3
 800c38c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c390:	9100      	str	r1, [sp, #0]
 800c392:	462b      	mov	r3, r5
 800c394:	4905      	ldr	r1, [pc, #20]	@ (800c3ac <__assert_func+0x34>)
 800c396:	f000 f841 	bl	800c41c <fiprintf>
 800c39a:	f000 f851 	bl	800c440 <abort>
 800c39e:	4b04      	ldr	r3, [pc, #16]	@ (800c3b0 <__assert_func+0x38>)
 800c3a0:	e7f4      	b.n	800c38c <__assert_func+0x14>
 800c3a2:	bf00      	nop
 800c3a4:	20000048 	.word	0x20000048
 800c3a8:	0800c886 	.word	0x0800c886
 800c3ac:	0800c858 	.word	0x0800c858
 800c3b0:	0800c84b 	.word	0x0800c84b

0800c3b4 <_calloc_r>:
 800c3b4:	b570      	push	{r4, r5, r6, lr}
 800c3b6:	fba1 5402 	umull	r5, r4, r1, r2
 800c3ba:	b93c      	cbnz	r4, 800c3cc <_calloc_r+0x18>
 800c3bc:	4629      	mov	r1, r5
 800c3be:	f7ff f8b7 	bl	800b530 <_malloc_r>
 800c3c2:	4606      	mov	r6, r0
 800c3c4:	b928      	cbnz	r0, 800c3d2 <_calloc_r+0x1e>
 800c3c6:	2600      	movs	r6, #0
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	bd70      	pop	{r4, r5, r6, pc}
 800c3cc:	220c      	movs	r2, #12
 800c3ce:	6002      	str	r2, [r0, #0]
 800c3d0:	e7f9      	b.n	800c3c6 <_calloc_r+0x12>
 800c3d2:	462a      	mov	r2, r5
 800c3d4:	4621      	mov	r1, r4
 800c3d6:	f7fe f948 	bl	800a66a <memset>
 800c3da:	e7f5      	b.n	800c3c8 <_calloc_r+0x14>

0800c3dc <__ascii_mbtowc>:
 800c3dc:	b082      	sub	sp, #8
 800c3de:	b901      	cbnz	r1, 800c3e2 <__ascii_mbtowc+0x6>
 800c3e0:	a901      	add	r1, sp, #4
 800c3e2:	b142      	cbz	r2, 800c3f6 <__ascii_mbtowc+0x1a>
 800c3e4:	b14b      	cbz	r3, 800c3fa <__ascii_mbtowc+0x1e>
 800c3e6:	7813      	ldrb	r3, [r2, #0]
 800c3e8:	600b      	str	r3, [r1, #0]
 800c3ea:	7812      	ldrb	r2, [r2, #0]
 800c3ec:	1e10      	subs	r0, r2, #0
 800c3ee:	bf18      	it	ne
 800c3f0:	2001      	movne	r0, #1
 800c3f2:	b002      	add	sp, #8
 800c3f4:	4770      	bx	lr
 800c3f6:	4610      	mov	r0, r2
 800c3f8:	e7fb      	b.n	800c3f2 <__ascii_mbtowc+0x16>
 800c3fa:	f06f 0001 	mvn.w	r0, #1
 800c3fe:	e7f8      	b.n	800c3f2 <__ascii_mbtowc+0x16>

0800c400 <__ascii_wctomb>:
 800c400:	4603      	mov	r3, r0
 800c402:	4608      	mov	r0, r1
 800c404:	b141      	cbz	r1, 800c418 <__ascii_wctomb+0x18>
 800c406:	2aff      	cmp	r2, #255	@ 0xff
 800c408:	d904      	bls.n	800c414 <__ascii_wctomb+0x14>
 800c40a:	228a      	movs	r2, #138	@ 0x8a
 800c40c:	601a      	str	r2, [r3, #0]
 800c40e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c412:	4770      	bx	lr
 800c414:	700a      	strb	r2, [r1, #0]
 800c416:	2001      	movs	r0, #1
 800c418:	4770      	bx	lr
	...

0800c41c <fiprintf>:
 800c41c:	b40e      	push	{r1, r2, r3}
 800c41e:	b503      	push	{r0, r1, lr}
 800c420:	4601      	mov	r1, r0
 800c422:	ab03      	add	r3, sp, #12
 800c424:	4805      	ldr	r0, [pc, #20]	@ (800c43c <fiprintf+0x20>)
 800c426:	f853 2b04 	ldr.w	r2, [r3], #4
 800c42a:	6800      	ldr	r0, [r0, #0]
 800c42c:	9301      	str	r3, [sp, #4]
 800c42e:	f7ff fcb7 	bl	800bda0 <_vfiprintf_r>
 800c432:	b002      	add	sp, #8
 800c434:	f85d eb04 	ldr.w	lr, [sp], #4
 800c438:	b003      	add	sp, #12
 800c43a:	4770      	bx	lr
 800c43c:	20000048 	.word	0x20000048

0800c440 <abort>:
 800c440:	b508      	push	{r3, lr}
 800c442:	2006      	movs	r0, #6
 800c444:	f000 f82c 	bl	800c4a0 <raise>
 800c448:	2001      	movs	r0, #1
 800c44a:	f7f4 fe64 	bl	8001116 <_exit>

0800c44e <_raise_r>:
 800c44e:	291f      	cmp	r1, #31
 800c450:	b538      	push	{r3, r4, r5, lr}
 800c452:	4605      	mov	r5, r0
 800c454:	460c      	mov	r4, r1
 800c456:	d904      	bls.n	800c462 <_raise_r+0x14>
 800c458:	2316      	movs	r3, #22
 800c45a:	6003      	str	r3, [r0, #0]
 800c45c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c460:	bd38      	pop	{r3, r4, r5, pc}
 800c462:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c464:	b112      	cbz	r2, 800c46c <_raise_r+0x1e>
 800c466:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c46a:	b94b      	cbnz	r3, 800c480 <_raise_r+0x32>
 800c46c:	4628      	mov	r0, r5
 800c46e:	f000 f831 	bl	800c4d4 <_getpid_r>
 800c472:	4622      	mov	r2, r4
 800c474:	4601      	mov	r1, r0
 800c476:	4628      	mov	r0, r5
 800c478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c47c:	f000 b818 	b.w	800c4b0 <_kill_r>
 800c480:	2b01      	cmp	r3, #1
 800c482:	d00a      	beq.n	800c49a <_raise_r+0x4c>
 800c484:	1c59      	adds	r1, r3, #1
 800c486:	d103      	bne.n	800c490 <_raise_r+0x42>
 800c488:	2316      	movs	r3, #22
 800c48a:	6003      	str	r3, [r0, #0]
 800c48c:	2001      	movs	r0, #1
 800c48e:	e7e7      	b.n	800c460 <_raise_r+0x12>
 800c490:	2100      	movs	r1, #0
 800c492:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c496:	4620      	mov	r0, r4
 800c498:	4798      	blx	r3
 800c49a:	2000      	movs	r0, #0
 800c49c:	e7e0      	b.n	800c460 <_raise_r+0x12>
	...

0800c4a0 <raise>:
 800c4a0:	4b02      	ldr	r3, [pc, #8]	@ (800c4ac <raise+0xc>)
 800c4a2:	4601      	mov	r1, r0
 800c4a4:	6818      	ldr	r0, [r3, #0]
 800c4a6:	f7ff bfd2 	b.w	800c44e <_raise_r>
 800c4aa:	bf00      	nop
 800c4ac:	20000048 	.word	0x20000048

0800c4b0 <_kill_r>:
 800c4b0:	b538      	push	{r3, r4, r5, lr}
 800c4b2:	4d07      	ldr	r5, [pc, #28]	@ (800c4d0 <_kill_r+0x20>)
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	4608      	mov	r0, r1
 800c4ba:	4611      	mov	r1, r2
 800c4bc:	602b      	str	r3, [r5, #0]
 800c4be:	f7f4 fe1a 	bl	80010f6 <_kill>
 800c4c2:	1c43      	adds	r3, r0, #1
 800c4c4:	d102      	bne.n	800c4cc <_kill_r+0x1c>
 800c4c6:	682b      	ldr	r3, [r5, #0]
 800c4c8:	b103      	cbz	r3, 800c4cc <_kill_r+0x1c>
 800c4ca:	6023      	str	r3, [r4, #0]
 800c4cc:	bd38      	pop	{r3, r4, r5, pc}
 800c4ce:	bf00      	nop
 800c4d0:	20000540 	.word	0x20000540

0800c4d4 <_getpid_r>:
 800c4d4:	f7f4 be07 	b.w	80010e6 <_getpid>

0800c4d8 <_init>:
 800c4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4da:	bf00      	nop
 800c4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4de:	bc08      	pop	{r3}
 800c4e0:	469e      	mov	lr, r3
 800c4e2:	4770      	bx	lr

0800c4e4 <_fini>:
 800c4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4e6:	bf00      	nop
 800c4e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ea:	bc08      	pop	{r3}
 800c4ec:	469e      	mov	lr, r3
 800c4ee:	4770      	bx	lr
