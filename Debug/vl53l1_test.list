
vl53l1_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7f0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  0800c980  0800c980  0000d980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd90  0800cd90  0000e204  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd90  0800cd90  0000dd90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd98  0800cd98  0000e204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd98  0800cd98  0000dd98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cd9c  0800cd9c  0000dd9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000204  20000000  0800cda0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e204  2**0
                  CONTENTS
 10 .bss          0000034c  20000204  20000204  0000e204  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000550  20000550  0000e204  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023f0a  00000000  00000000  0000e234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e69  00000000  00000000  0003213e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b8  00000000  00000000  00034fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e6e  00000000  00000000  00036260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000211fb  00000000  00000000  000370ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018ee5  00000000  00000000  000582c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be01a  00000000  00000000  000711ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012f1c8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f98  00000000  00000000  0012f20c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  001351a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c968 	.word	0x0800c968

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	0800c968 	.word	0x0800c968

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	230a      	movs	r3, #10
 8000bba:	68b9      	ldr	r1, [r7, #8]
 8000bbc:	4803      	ldr	r0, [pc, #12]	@ (8000bcc <_write+0x24>)
 8000bbe:	f003 f9c5 	bl	8003f4c <HAL_UART_Transmit>
  return len;
 8000bc2:	687b      	ldr	r3, [r7, #4]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000274 	.word	0x20000274

08000bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  setbuf(stdout, NULL);
 8000bd8:	4be1      	ldr	r3, [pc, #900]	@ (8000f60 <main+0x390>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f009 fe8d 	bl	800a900 <setbuf>
  VL53L1_Dev_t Dev;
  VL53L1_RangingMeasurementData_t data;
  int8_t Status;

  VL53L1_UserRoi_t roiConfig;
  int roi[65] = {0, 15, 0, 0,
 8000be6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000bea:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	f009 ff81 	bl	800aafe <memset>
 8000bfc:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000c00:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000c04:	220f      	movs	r2, #15
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000c0c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000c10:	2201      	movs	r2, #1
 8000c12:	611a      	str	r2, [r3, #16]
 8000c14:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000c18:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000c1c:	220f      	movs	r2, #15
 8000c1e:	615a      	str	r2, [r3, #20]
 8000c20:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000c24:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000c28:	2201      	movs	r2, #1
 8000c2a:	619a      	str	r2, [r3, #24]
 8000c2c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000c30:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000c34:	2202      	movs	r2, #2
 8000c36:	621a      	str	r2, [r3, #32]
 8000c38:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000c3c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000c40:	220f      	movs	r2, #15
 8000c42:	625a      	str	r2, [r3, #36]	@ 0x24
 8000c44:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000c48:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c50:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000c54:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000c58:	2203      	movs	r2, #3
 8000c5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c5c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000c60:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000c64:	220f      	movs	r2, #15
 8000c66:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c68:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000c6c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000c70:	2203      	movs	r2, #3
 8000c72:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c74:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000c78:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c80:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000c84:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000c88:	220f      	movs	r2, #15
 8000c8a:	645a      	str	r2, [r3, #68]	@ 0x44
 8000c8c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000c90:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000c94:	2204      	movs	r2, #4
 8000c96:	649a      	str	r2, [r3, #72]	@ 0x48
 8000c98:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000c9c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000ca0:	2205      	movs	r2, #5
 8000ca2:	651a      	str	r2, [r3, #80]	@ 0x50
 8000ca4:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000ca8:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000cac:	220f      	movs	r2, #15
 8000cae:	655a      	str	r2, [r3, #84]	@ 0x54
 8000cb0:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000cb4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000cb8:	2205      	movs	r2, #5
 8000cba:	659a      	str	r2, [r3, #88]	@ 0x58
 8000cbc:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000cc0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000cc4:	2206      	movs	r2, #6
 8000cc6:	661a      	str	r2, [r3, #96]	@ 0x60
 8000cc8:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000ccc:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000cd0:	220f      	movs	r2, #15
 8000cd2:	665a      	str	r2, [r3, #100]	@ 0x64
 8000cd4:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000cd8:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000cdc:	2206      	movs	r2, #6
 8000cde:	669a      	str	r2, [r3, #104]	@ 0x68
 8000ce0:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000ce4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000ce8:	2207      	movs	r2, #7
 8000cea:	671a      	str	r2, [r3, #112]	@ 0x70
 8000cec:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000cf0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000cf4:	220f      	movs	r2, #15
 8000cf6:	675a      	str	r2, [r3, #116]	@ 0x74
 8000cf8:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000cfc:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000d00:	2207      	movs	r2, #7
 8000d02:	679a      	str	r2, [r3, #120]	@ 0x78
 8000d04:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000d08:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000d0c:	2208      	movs	r2, #8
 8000d0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000d12:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000d16:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000d1a:	220f      	movs	r2, #15
 8000d1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8000d20:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000d24:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000d28:	2208      	movs	r2, #8
 8000d2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8000d2e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000d32:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000d36:	2209      	movs	r2, #9
 8000d38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8000d3c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000d40:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000d44:	220f      	movs	r2, #15
 8000d46:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8000d4a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000d4e:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000d52:	2209      	movs	r2, #9
 8000d54:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8000d58:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000d5c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000d60:	220a      	movs	r2, #10
 8000d62:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8000d66:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000d6a:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000d6e:	220f      	movs	r2, #15
 8000d70:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8000d74:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000d78:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000d7c:	220a      	movs	r2, #10
 8000d7e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8000d82:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000d86:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000d8a:	220b      	movs	r2, #11
 8000d8c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8000d90:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000d94:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000d98:	220f      	movs	r2, #15
 8000d9a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 8000d9e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000da2:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000da6:	220b      	movs	r2, #11
 8000da8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8000dac:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000db0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000db4:	220c      	movs	r2, #12
 8000db6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 8000dba:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000dbe:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000dc2:	220f      	movs	r2, #15
 8000dc4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 8000dc8:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000dcc:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000dd0:	220c      	movs	r2, #12
 8000dd2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8000dd6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000dda:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000dde:	220d      	movs	r2, #13
 8000de0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8000de4:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000de8:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000dec:	220f      	movs	r2, #15
 8000dee:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8000df2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000df6:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000dfa:	220d      	movs	r2, #13
 8000dfc:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8000e00:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000e04:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000e08:	220e      	movs	r2, #14
 8000e0a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000e0e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000e12:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000e16:	220f      	movs	r2, #15
 8000e18:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8000e1c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000e20:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000e24:	220e      	movs	r2, #14
 8000e26:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8000e2a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000e2e:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000e32:	220f      	movs	r2, #15
 8000e34:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8000e38:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000e3c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000e40:	220f      	movs	r2, #15
 8000e42:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8000e46:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000e4a:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000e4e:	220f      	movs	r2, #15
 8000e50:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e54:	f000 fc0a 	bl	800166c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e58:	f000 f950 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e5c:	f000 fa0e 	bl	800127c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e60:	f000 f9dc 	bl	800121c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e64:	f000 f99c 	bl	80011a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Dev.I2cDevAddr = 0x52;
 8000e68:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000e6c:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 8000e70:	2252      	movs	r2, #82	@ 0x52
 8000e72:	f883 2398 	strb.w	r2, [r3, #920]	@ 0x398
  Dev.I2cHandle = &hi2c1;
 8000e76:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000e7a:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 8000e7e:	4a39      	ldr	r2, [pc, #228]	@ (8000f64 <main+0x394>)
 8000e80:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
//  Dev.comms_type = 1;
//  Dev.comms_speed_khz = 400;

  //sensor initialize;
  while(1){
	  Status = VL53L1_WaitDeviceBooted(&Dev);
 8000e84:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f003 fccc 	bl	8004826 <VL53L1_WaitDeviceBooted>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f887 3517 	strb.w	r3, [r7, #1303]	@ 0x517
	  if(Status == 0){
 8000e94:	f997 3517 	ldrsb.w	r3, [r7, #1303]	@ 0x517
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d000      	beq.n	8000e9e <main+0x2ce>
	  Status = VL53L1_WaitDeviceBooted(&Dev);
 8000e9c:	e7f2      	b.n	8000e84 <main+0x2b4>
	  	  break;
 8000e9e:	bf00      	nop
	    }
  }
  printf("%d\n\r",Status);
 8000ea0:	f997 3517 	ldrsb.w	r3, [r7, #1303]	@ 0x517
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4830      	ldr	r0, [pc, #192]	@ (8000f68 <main+0x398>)
 8000ea8:	f009 fd18 	bl	800a8dc <iprintf>
  Status = VL53L1_DataInit(&Dev);
 8000eac:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f003 fc46 	bl	8004742 <VL53L1_DataInit>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f887 3517 	strb.w	r3, [r7, #1303]	@ 0x517
  printf("%d\n\r",Status);
 8000ebc:	f997 3517 	ldrsb.w	r3, [r7, #1303]	@ 0x517
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4829      	ldr	r0, [pc, #164]	@ (8000f68 <main+0x398>)
 8000ec4:	f009 fd0a 	bl	800a8dc <iprintf>
  Status = VL53L1_StaticInit(&Dev);
 8000ec8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f003 fc8b 	bl	80047e8 <VL53L1_StaticInit>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	f887 3517 	strb.w	r3, [r7, #1303]	@ 0x517
  printf("%d\n\r",Status);
 8000ed8:	f997 3517 	ldrsb.w	r3, [r7, #1303]	@ 0x517
 8000edc:	4619      	mov	r1, r3
 8000ede:	4822      	ldr	r0, [pc, #136]	@ (8000f68 <main+0x398>)
 8000ee0:	f009 fcfc 	bl	800a8dc <iprintf>
  Status = VL53L1_SetPresetMode(&Dev, VL53L1_PRESETMODE_LITE_RANGING);
 8000ee4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8000ee8:	2104      	movs	r1, #4
 8000eea:	4618      	mov	r0, r3
 8000eec:	f003 fd85 	bl	80049fa <VL53L1_SetPresetMode>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	f887 3517 	strb.w	r3, [r7, #1303]	@ 0x517
  printf("%d\n\r",Status);
 8000ef6:	f997 3517 	ldrsb.w	r3, [r7, #1303]	@ 0x517
 8000efa:	4619      	mov	r1, r3
 8000efc:	481a      	ldr	r0, [pc, #104]	@ (8000f68 <main+0x398>)
 8000efe:	f009 fced 	bl	800a8dc <iprintf>
  Status = VL53L1_SetDistanceMode(&Dev, VL53L1_DISTANCEMODE_SHORT);
 8000f02:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8000f06:	2101      	movs	r1, #1
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f003 fdbb 	bl	8004a84 <VL53L1_SetDistanceMode>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	f887 3517 	strb.w	r3, [r7, #1303]	@ 0x517
  printf("%d\n\r",Status);
 8000f14:	f997 3517 	ldrsb.w	r3, [r7, #1303]	@ 0x517
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4813      	ldr	r0, [pc, #76]	@ (8000f68 <main+0x398>)
 8000f1c:	f009 fcde 	bl	800a8dc <iprintf>
  Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(&Dev, 15);
 8000f20:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8000f24:	210f      	movs	r1, #15
 8000f26:	4618      	mov	r0, r3
 8000f28:	f003 ffac 	bl	8004e84 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	f887 3517 	strb.w	r3, [r7, #1303]	@ 0x517
  printf("%d\n\r",Status);
 8000f32:	f997 3517 	ldrsb.w	r3, [r7, #1303]	@ 0x517
 8000f36:	4619      	mov	r1, r3
 8000f38:	480b      	ldr	r0, [pc, #44]	@ (8000f68 <main+0x398>)
 8000f3a:	f009 fccf 	bl	800a8dc <iprintf>
  VL53L1_SetMeasurementTimingBudgetMicroSeconds(&Dev, 10000);
 8000f3e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8000f42:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 fe12 	bl	8004b70 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>

  //start
  VL53L1_StartMeasurement(&Dev);
 8000f4c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8000f50:	4618      	mov	r0, r3
 8000f52:	f004 f929 	bl	80051a8 <VL53L1_StartMeasurement>
//   roiConfig.TopLeftY = 0;
//   roiConfig.BotRightX = 15;
//   roiConfig.BotRightY = 15;


   for(i=0; i <= 16; i++){
 8000f56:	2300      	movs	r3, #0
 8000f58:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
 8000f5c:	e079      	b.n	8001052 <main+0x482>
 8000f5e:	bf00      	nop
 8000f60:	20000048 	.word	0x20000048
 8000f64:	20000220 	.word	0x20000220
 8000f68:	0800c980 	.word	0x0800c980
 8000f6c:	447a0000 	.word	0x447a0000
	   int j;
	   j = i+(i*3);
 8000f70:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
	   roiConfig.TopLeftX = roi[j];
 8000f7a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000f7e:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000f82:	f8d7 250c 	ldr.w	r2, [r7, #1292]	@ 0x50c
 8000f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000f90:	f5a3 7376 	sub.w	r3, r3, #984	@ 0x3d8
 8000f94:	701a      	strb	r2, [r3, #0]
	   roiConfig.TopLeftY = roi[j+1];
 8000f96:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 8000f9a:	1c5a      	adds	r2, r3, #1
 8000f9c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000fa0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000fae:	f5a3 7376 	sub.w	r3, r3, #984	@ 0x3d8
 8000fb2:	705a      	strb	r2, [r3, #1]
	   roiConfig.BotRightX = roi[j+2];
 8000fb4:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 8000fb8:	1c9a      	adds	r2, r3, #2
 8000fba:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000fbe:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000fcc:	f5a3 7376 	sub.w	r3, r3, #984	@ 0x3d8
 8000fd0:	709a      	strb	r2, [r3, #2]
	   roiConfig.BotRightY = roi[j+3];
 8000fd2:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 8000fd6:	1cda      	adds	r2, r3, #3
 8000fd8:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000fdc:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8000fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000fea:	f5a3 7376 	sub.w	r3, r3, #984	@ 0x3d8
 8000fee:	70da      	strb	r2, [r3, #3]
	   Status = VL53L1_SetUserROI(&Dev, &roiConfig);
 8000ff0:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8000ff4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f004 f869 	bl	80050d2 <VL53L1_SetUserROI>
 8001000:	4603      	mov	r3, r0
 8001002:	f887 3517 	strb.w	r3, [r7, #1303]	@ 0x517

	   VL53L1_WaitMeasurementDataReady(&Dev);
 8001006:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800100a:	4618      	mov	r0, r3
 800100c:	f004 f94e 	bl	80052ac <VL53L1_WaitMeasurementDataReady>
	   VL53L1_GetRangingMeasurementData(&Dev,&data);
 8001010:	f507 72a6 	add.w	r2, r7, #332	@ 0x14c
 8001014:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001018:	4611      	mov	r1, r2
 800101a:	4618      	mov	r0, r3
 800101c:	f004 fb02 	bl	8005624 <VL53L1_GetRangingMeasurementData>
	   range[i] = data.RangeMilliMeter;
 8001020:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8001024:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 8001028:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800102c:	4619      	mov	r1, r3
 800102e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8001032:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8001036:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800103a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	   VL53L1_ClearInterruptAndStartMeasurement(&Dev);
 800103e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001042:	4618      	mov	r0, r3
 8001044:	f004 f91c 	bl	8005280 <VL53L1_ClearInterruptAndStartMeasurement>
   for(i=0; i <= 16; i++){
 8001048:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800104c:	3301      	adds	r3, #1
 800104e:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
 8001052:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8001056:	2b10      	cmp	r3, #16
 8001058:	dd8a      	ble.n	8000f70 <main+0x3a0>
   }
   hz = 1/((float)HAL_GetTick()-(float)pre_tim)*1000;
 800105a:	f000 fb61 	bl	8001720 <HAL_GetTick>
 800105e:	ee07 0a90 	vmov	s15, r0
 8001062:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001066:	f8d7 3518 	ldr.w	r3, [r7, #1304]	@ 0x518
 800106a:	ee07 3a90 	vmov	s15, r3
 800106e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001072:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800107a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800107e:	ed1f 7a45 	vldr	s14, [pc, #-276]	@ 8000f6c <main+0x39c>
 8001082:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001086:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800108a:	edc3 7a00 	vstr	s15, [r3]

   printf("%d VL53L1X: ", HAL_GetTick());
 800108e:	f000 fb47 	bl	8001720 <HAL_GetTick>
 8001092:	4603      	mov	r3, r0
 8001094:	4619      	mov	r1, r3
 8001096:	4816      	ldr	r0, [pc, #88]	@ (80010f0 <main+0x520>)
 8001098:	f009 fc20 	bl	800a8dc <iprintf>
   for(i=0; i <= 16; i++){
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
 80010a2:	e010      	b.n	80010c6 <main+0x4f6>
	   printf("%d, ", range[i]);
 80010a4:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80010a8:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 80010ac:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 80010b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b4:	4619      	mov	r1, r3
 80010b6:	480f      	ldr	r0, [pc, #60]	@ (80010f4 <main+0x524>)
 80010b8:	f009 fc10 	bl	800a8dc <iprintf>
   for(i=0; i <= 16; i++){
 80010bc:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 80010c0:	3301      	adds	r3, #1
 80010c2:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
 80010c6:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 80010ca:	2b10      	cmp	r3, #16
 80010cc:	ddea      	ble.n	80010a4 <main+0x4d4>
   }
   printf("%fHz\n\r", hz);
 80010ce:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80010d2:	6818      	ldr	r0, [r3, #0]
 80010d4:	f7ff fa38 	bl	8000548 <__aeabi_f2d>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4806      	ldr	r0, [pc, #24]	@ (80010f8 <main+0x528>)
 80010de:	f009 fbfd 	bl	800a8dc <iprintf>
   pre_tim = HAL_GetTick();
 80010e2:	f000 fb1d 	bl	8001720 <HAL_GetTick>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
  {
 80010ec:	e733      	b.n	8000f56 <main+0x386>
 80010ee:	bf00      	nop
 80010f0:	0800c988 	.word	0x0800c988
 80010f4:	0800c998 	.word	0x0800c998
 80010f8:	0800c9a0 	.word	0x0800c9a0

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b096      	sub	sp, #88	@ 0x58
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001106:	2228      	movs	r2, #40	@ 0x28
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f009 fcf7 	bl	800aafe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]
 800112e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001130:	2302      	movs	r3, #2
 8001132:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001134:	2301      	movs	r3, #1
 8001136:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001138:	2310      	movs	r3, #16
 800113a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800113c:	2300      	movs	r3, #0
 800113e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001140:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001144:	4618      	mov	r0, r3
 8001146:	f001 fb17 	bl	8002778 <HAL_RCC_OscConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001150:	f000 f8c4 	bl	80012dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001154:	230f      	movs	r3, #15
 8001156:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f002 fb40 	bl	80037f4 <HAL_RCC_ClockConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800117a:	f000 f8af 	bl	80012dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800117e:	2320      	movs	r3, #32
 8001180:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	4618      	mov	r0, r3
 800118a:	f002 fd6b 	bl	8003c64 <HAL_RCCEx_PeriphCLKConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001194:	f000 f8a2 	bl	80012dc <Error_Handler>
  }
}
 8001198:	bf00      	nop
 800119a:	3758      	adds	r7, #88	@ 0x58
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <MX_I2C1_Init+0x74>)
 80011a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001218 <MX_I2C1_Init+0x78>)
 80011a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80011aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001214 <MX_I2C1_Init+0x74>)
 80011ac:	f240 220b 	movw	r2, #523	@ 0x20b
 80011b0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011b2:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <MX_I2C1_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b8:	4b16      	ldr	r3, [pc, #88]	@ (8001214 <MX_I2C1_Init+0x74>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <MX_I2C1_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011c4:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <MX_I2C1_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011ca:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <MX_I2C1_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d0:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <MX_I2C1_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <MX_I2C1_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011dc:	480d      	ldr	r0, [pc, #52]	@ (8001214 <MX_I2C1_Init+0x74>)
 80011de:	f000 fd27 	bl	8001c30 <HAL_I2C_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011e8:	f000 f878 	bl	80012dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011ec:	2100      	movs	r1, #0
 80011ee:	4809      	ldr	r0, [pc, #36]	@ (8001214 <MX_I2C1_Init+0x74>)
 80011f0:	f001 fa2a 	bl	8002648 <HAL_I2CEx_ConfigAnalogFilter>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80011fa:	f000 f86f 	bl	80012dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011fe:	2100      	movs	r1, #0
 8001200:	4804      	ldr	r0, [pc, #16]	@ (8001214 <MX_I2C1_Init+0x74>)
 8001202:	f001 fa6c 	bl	80026de <HAL_I2CEx_ConfigDigitalFilter>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800120c:	f000 f866 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000220 	.word	0x20000220
 8001218:	40005400 	.word	0x40005400

0800121c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001220:	4b14      	ldr	r3, [pc, #80]	@ (8001274 <MX_USART2_UART_Init+0x58>)
 8001222:	4a15      	ldr	r2, [pc, #84]	@ (8001278 <MX_USART2_UART_Init+0x5c>)
 8001224:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001226:	4b13      	ldr	r3, [pc, #76]	@ (8001274 <MX_USART2_UART_Init+0x58>)
 8001228:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800122c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <MX_USART2_UART_Init+0x58>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <MX_USART2_UART_Init+0x58>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800123a:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <MX_USART2_UART_Init+0x58>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <MX_USART2_UART_Init+0x58>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b0b      	ldr	r3, [pc, #44]	@ (8001274 <MX_USART2_UART_Init+0x58>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800124c:	4b09      	ldr	r3, [pc, #36]	@ (8001274 <MX_USART2_UART_Init+0x58>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001252:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <MX_USART2_UART_Init+0x58>)
 8001254:	2200      	movs	r2, #0
 8001256:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001258:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <MX_USART2_UART_Init+0x58>)
 800125a:	2200      	movs	r2, #0
 800125c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800125e:	4805      	ldr	r0, [pc, #20]	@ (8001274 <MX_USART2_UART_Init+0x58>)
 8001260:	f002 fe26 	bl	8003eb0 <HAL_UART_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800126a:	f000 f837 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000274 	.word	0x20000274
 8001278:	40004400 	.word	0x40004400

0800127c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001282:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <MX_GPIO_Init+0x5c>)
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	4a14      	ldr	r2, [pc, #80]	@ (80012d8 <MX_GPIO_Init+0x5c>)
 8001288:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800128c:	6153      	str	r3, [r2, #20]
 800128e:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <MX_GPIO_Init+0x5c>)
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <MX_GPIO_Init+0x5c>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	4a0e      	ldr	r2, [pc, #56]	@ (80012d8 <MX_GPIO_Init+0x5c>)
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a4:	6153      	str	r3, [r2, #20]
 80012a6:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <MX_GPIO_Init+0x5c>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <MX_GPIO_Init+0x5c>)
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	4a08      	ldr	r2, [pc, #32]	@ (80012d8 <MX_GPIO_Init+0x5c>)
 80012b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012bc:	6153      	str	r3, [r2, #20]
 80012be:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <MX_GPIO_Init+0x5c>)
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40021000 	.word	0x40021000

080012dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e0:	b672      	cpsid	i
}
 80012e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <Error_Handler+0x8>

080012e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	4b0f      	ldr	r3, [pc, #60]	@ (800132c <HAL_MspInit+0x44>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	4a0e      	ldr	r2, [pc, #56]	@ (800132c <HAL_MspInit+0x44>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6193      	str	r3, [r2, #24]
 80012fa:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <HAL_MspInit+0x44>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	4b09      	ldr	r3, [pc, #36]	@ (800132c <HAL_MspInit+0x44>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	4a08      	ldr	r2, [pc, #32]	@ (800132c <HAL_MspInit+0x44>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001310:	61d3      	str	r3, [r2, #28]
 8001312:	4b06      	ldr	r3, [pc, #24]	@ (800132c <HAL_MspInit+0x44>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000

08001330 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	@ 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a17      	ldr	r2, [pc, #92]	@ (80013ac <HAL_I2C_MspInit+0x7c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d127      	bne.n	80013a2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001352:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <HAL_I2C_MspInit+0x80>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	4a16      	ldr	r2, [pc, #88]	@ (80013b0 <HAL_I2C_MspInit+0x80>)
 8001358:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800135c:	6153      	str	r3, [r2, #20]
 800135e:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <HAL_I2C_MspInit+0x80>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800136a:	23c0      	movs	r3, #192	@ 0xc0
 800136c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800136e:	2312      	movs	r3, #18
 8001370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001376:	2303      	movs	r3, #3
 8001378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800137a:	2304      	movs	r3, #4
 800137c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	480b      	ldr	r0, [pc, #44]	@ (80013b4 <HAL_I2C_MspInit+0x84>)
 8001386:	f000 fae1 	bl	800194c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800138a:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <HAL_I2C_MspInit+0x80>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	4a08      	ldr	r2, [pc, #32]	@ (80013b0 <HAL_I2C_MspInit+0x80>)
 8001390:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001394:	61d3      	str	r3, [r2, #28]
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <HAL_I2C_MspInit+0x80>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013a2:	bf00      	nop
 80013a4:	3728      	adds	r7, #40	@ 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40005400 	.word	0x40005400
 80013b0:	40021000 	.word	0x40021000
 80013b4:	48000400 	.word	0x48000400

080013b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	@ 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a18      	ldr	r2, [pc, #96]	@ (8001438 <HAL_UART_MspInit+0x80>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d129      	bne.n	800142e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013da:	4b18      	ldr	r3, [pc, #96]	@ (800143c <HAL_UART_MspInit+0x84>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	4a17      	ldr	r2, [pc, #92]	@ (800143c <HAL_UART_MspInit+0x84>)
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013e4:	61d3      	str	r3, [r2, #28]
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <HAL_UART_MspInit+0x84>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	4b12      	ldr	r3, [pc, #72]	@ (800143c <HAL_UART_MspInit+0x84>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	4a11      	ldr	r2, [pc, #68]	@ (800143c <HAL_UART_MspInit+0x84>)
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013fc:	6153      	str	r3, [r2, #20]
 80013fe:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <HAL_UART_MspInit+0x84>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800140a:	f248 0304 	movw	r3, #32772	@ 0x8004
 800140e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001418:	2303      	movs	r3, #3
 800141a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800141c:	2307      	movs	r3, #7
 800141e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800142a:	f000 fa8f 	bl	800194c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800142e:	bf00      	nop
 8001430:	3728      	adds	r7, #40	@ 0x28
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40004400 	.word	0x40004400
 800143c:	40021000 	.word	0x40021000

08001440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <NMI_Handler+0x4>

08001448 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <HardFault_Handler+0x4>

08001450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <MemManage_Handler+0x4>

08001458 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <BusFault_Handler+0x4>

08001460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <UsageFault_Handler+0x4>

08001468 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001496:	f000 f92f 	bl	80016f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}

0800149e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  return 1;
 80014a2:	2301      	movs	r3, #1
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <_kill>:

int _kill(int pid, int sig)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014b8:	f009 fb86 	bl	800abc8 <__errno>
 80014bc:	4603      	mov	r3, r0
 80014be:	2216      	movs	r2, #22
 80014c0:	601a      	str	r2, [r3, #0]
  return -1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <_exit>:

void _exit (int status)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014d6:	f04f 31ff 	mov.w	r1, #4294967295
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff ffe7 	bl	80014ae <_kill>
  while (1) {}    /* Make sure we hang here */
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <_exit+0x12>

080014e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	e00a      	b.n	800150c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014f6:	f3af 8000 	nop.w
 80014fa:	4601      	mov	r1, r0
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	60ba      	str	r2, [r7, #8]
 8001502:	b2ca      	uxtb	r2, r1
 8001504:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3301      	adds	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	429a      	cmp	r2, r3
 8001512:	dbf0      	blt.n	80014f6 <_read+0x12>
  }

  return len;
 8001514:	687b      	ldr	r3, [r7, #4]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <_close>:
  }
  return len;
}

int _close(int file)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001546:	605a      	str	r2, [r3, #4]
  return 0;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <_isatty>:

int _isatty(int file)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800155e:	2301      	movs	r3, #1
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001590:	4a14      	ldr	r2, [pc, #80]	@ (80015e4 <_sbrk+0x5c>)
 8001592:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <_sbrk+0x60>)
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800159c:	4b13      	ldr	r3, [pc, #76]	@ (80015ec <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a4:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <_sbrk+0x64>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	@ (80015f0 <_sbrk+0x68>)
 80015a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015aa:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d207      	bcs.n	80015c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b8:	f009 fb06 	bl	800abc8 <__errno>
 80015bc:	4603      	mov	r3, r0
 80015be:	220c      	movs	r2, #12
 80015c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	e009      	b.n	80015dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c8:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ce:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <_sbrk+0x64>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	4a05      	ldr	r2, [pc, #20]	@ (80015ec <_sbrk+0x64>)
 80015d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015da:	68fb      	ldr	r3, [r7, #12]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20003000 	.word	0x20003000
 80015e8:	00000400 	.word	0x00000400
 80015ec:	200002fc 	.word	0x200002fc
 80015f0:	20000550 	.word	0x20000550

080015f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <SystemInit+0x20>)
 80015fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015fe:	4a05      	ldr	r2, [pc, #20]	@ (8001614 <SystemInit+0x20>)
 8001600:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001604:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001618:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001650 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800161c:	f7ff ffea 	bl	80015f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001620:	480c      	ldr	r0, [pc, #48]	@ (8001654 <LoopForever+0x6>)
  ldr r1, =_edata
 8001622:	490d      	ldr	r1, [pc, #52]	@ (8001658 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001624:	4a0d      	ldr	r2, [pc, #52]	@ (800165c <LoopForever+0xe>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001628:	e002      	b.n	8001630 <LoopCopyDataInit>

0800162a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800162c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162e:	3304      	adds	r3, #4

08001630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001634:	d3f9      	bcc.n	800162a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001636:	4a0a      	ldr	r2, [pc, #40]	@ (8001660 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001638:	4c0a      	ldr	r4, [pc, #40]	@ (8001664 <LoopForever+0x16>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800163c:	e001      	b.n	8001642 <LoopFillZerobss>

0800163e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001640:	3204      	adds	r2, #4

08001642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001644:	d3fb      	bcc.n	800163e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001646:	f009 fac5 	bl	800abd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800164a:	f7ff fac1 	bl	8000bd0 <main>

0800164e <LoopForever>:

LoopForever:
    b LoopForever
 800164e:	e7fe      	b.n	800164e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001650:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001658:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 800165c:	0800cda0 	.word	0x0800cda0
  ldr r2, =_sbss
 8001660:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8001664:	20000550 	.word	0x20000550

08001668 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001668:	e7fe      	b.n	8001668 <ADC1_2_IRQHandler>
	...

0800166c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001670:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <HAL_Init+0x28>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a07      	ldr	r2, [pc, #28]	@ (8001694 <HAL_Init+0x28>)
 8001676:	f043 0310 	orr.w	r3, r3, #16
 800167a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167c:	2003      	movs	r0, #3
 800167e:	f000 f931 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001682:	2000      	movs	r0, #0
 8001684:	f000 f808 	bl	8001698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001688:	f7ff fe2e 	bl	80012e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40022000 	.word	0x40022000

08001698 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a0:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <HAL_InitTick+0x54>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b12      	ldr	r3, [pc, #72]	@ (80016f0 <HAL_InitTick+0x58>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f93b 	bl	8001932 <HAL_SYSTICK_Config>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00e      	b.n	80016e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b0f      	cmp	r3, #15
 80016ca:	d80a      	bhi.n	80016e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016cc:	2200      	movs	r2, #0
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f000 f911 	bl	80018fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d8:	4a06      	ldr	r2, [pc, #24]	@ (80016f4 <HAL_InitTick+0x5c>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	e000      	b.n	80016e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000000 	.word	0x20000000
 80016f0:	20000008 	.word	0x20000008
 80016f4:	20000004 	.word	0x20000004

080016f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <HAL_IncTick+0x20>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b06      	ldr	r3, [pc, #24]	@ (800171c <HAL_IncTick+0x24>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4413      	add	r3, r2
 8001708:	4a04      	ldr	r2, [pc, #16]	@ (800171c <HAL_IncTick+0x24>)
 800170a:	6013      	str	r3, [r2, #0]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000008 	.word	0x20000008
 800171c:	20000300 	.word	0x20000300

08001720 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return uwTick;  
 8001724:	4b03      	ldr	r3, [pc, #12]	@ (8001734 <HAL_GetTick+0x14>)
 8001726:	681b      	ldr	r3, [r3, #0]
}
 8001728:	4618      	mov	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000300 	.word	0x20000300

08001738 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff ffee 	bl	8001720 <HAL_GetTick>
 8001744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001750:	d005      	beq.n	800175e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001752:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <HAL_Delay+0x44>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800175e:	bf00      	nop
 8001760:	f7ff ffde 	bl	8001720 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	429a      	cmp	r2, r3
 800176e:	d8f7      	bhi.n	8001760 <HAL_Delay+0x28>
  {
  }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000008 	.word	0x20000008

08001780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800179c:	4013      	ands	r3, r2
 800179e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b2:	4a04      	ldr	r2, [pc, #16]	@ (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	60d3      	str	r3, [r2, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b04      	ldr	r3, [pc, #16]	@ (80017e0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	f003 0307 	and.w	r3, r3, #7
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	db0a      	blt.n	800180e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	490c      	ldr	r1, [pc, #48]	@ (8001830 <__NVIC_SetPriority+0x4c>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	0112      	lsls	r2, r2, #4
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	440b      	add	r3, r1
 8001808:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800180c:	e00a      	b.n	8001824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4908      	ldr	r1, [pc, #32]	@ (8001834 <__NVIC_SetPriority+0x50>)
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	3b04      	subs	r3, #4
 800181c:	0112      	lsls	r2, r2, #4
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	440b      	add	r3, r1
 8001822:	761a      	strb	r2, [r3, #24]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000e100 	.word	0xe000e100
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	@ 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f1c3 0307 	rsb	r3, r3, #7
 8001852:	2b04      	cmp	r3, #4
 8001854:	bf28      	it	cs
 8001856:	2304      	movcs	r3, #4
 8001858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3304      	adds	r3, #4
 800185e:	2b06      	cmp	r3, #6
 8001860:	d902      	bls.n	8001868 <NVIC_EncodePriority+0x30>
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3b03      	subs	r3, #3
 8001866:	e000      	b.n	800186a <NVIC_EncodePriority+0x32>
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	f04f 32ff 	mov.w	r2, #4294967295
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	401a      	ands	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001880:	f04f 31ff 	mov.w	r1, #4294967295
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	43d9      	mvns	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	4313      	orrs	r3, r2
         );
}
 8001892:	4618      	mov	r0, r3
 8001894:	3724      	adds	r7, #36	@ 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018b0:	d301      	bcc.n	80018b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00f      	b.n	80018d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b6:	4a0a      	ldr	r2, [pc, #40]	@ (80018e0 <SysTick_Config+0x40>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018be:	210f      	movs	r1, #15
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f7ff ff8e 	bl	80017e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c8:	4b05      	ldr	r3, [pc, #20]	@ (80018e0 <SysTick_Config+0x40>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ce:	4b04      	ldr	r3, [pc, #16]	@ (80018e0 <SysTick_Config+0x40>)
 80018d0:	2207      	movs	r2, #7
 80018d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	e000e010 	.word	0xe000e010

080018e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff47 	bl	8001780 <__NVIC_SetPriorityGrouping>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800190c:	f7ff ff5c 	bl	80017c8 <__NVIC_GetPriorityGrouping>
 8001910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	6978      	ldr	r0, [r7, #20]
 8001918:	f7ff ff8e 	bl	8001838 <NVIC_EncodePriority>
 800191c:	4602      	mov	r2, r0
 800191e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff5d 	bl	80017e4 <__NVIC_SetPriority>
}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ffb0 	bl	80018a0 <SysTick_Config>
 8001940:	4603      	mov	r3, r0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800194c:	b480      	push	{r7}
 800194e:	b087      	sub	sp, #28
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195a:	e14e      	b.n	8001bfa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	2101      	movs	r1, #1
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	fa01 f303 	lsl.w	r3, r1, r3
 8001968:	4013      	ands	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 8140 	beq.w	8001bf4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	2b01      	cmp	r3, #1
 800197e:	d005      	beq.n	800198c <HAL_GPIO_Init+0x40>
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d130      	bne.n	80019ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	2203      	movs	r2, #3
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	68da      	ldr	r2, [r3, #12]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c2:	2201      	movs	r2, #1
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	4013      	ands	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	091b      	lsrs	r3, r3, #4
 80019d8:	f003 0201 	and.w	r2, r3, #1
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d017      	beq.n	8001a2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	2203      	movs	r2, #3
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d123      	bne.n	8001a7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	08da      	lsrs	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3208      	adds	r2, #8
 8001a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	220f      	movs	r2, #15
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	691a      	ldr	r2, [r3, #16]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	08da      	lsrs	r2, r3, #3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3208      	adds	r2, #8
 8001a78:	6939      	ldr	r1, [r7, #16]
 8001a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	2203      	movs	r2, #3
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0203 	and.w	r2, r3, #3
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 809a 	beq.w	8001bf4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac0:	4b55      	ldr	r3, [pc, #340]	@ (8001c18 <HAL_GPIO_Init+0x2cc>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	4a54      	ldr	r2, [pc, #336]	@ (8001c18 <HAL_GPIO_Init+0x2cc>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6193      	str	r3, [r2, #24]
 8001acc:	4b52      	ldr	r3, [pc, #328]	@ (8001c18 <HAL_GPIO_Init+0x2cc>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ad8:	4a50      	ldr	r2, [pc, #320]	@ (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	089b      	lsrs	r3, r3, #2
 8001ade:	3302      	adds	r3, #2
 8001ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	220f      	movs	r2, #15
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b02:	d013      	beq.n	8001b2c <HAL_GPIO_Init+0x1e0>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a46      	ldr	r2, [pc, #280]	@ (8001c20 <HAL_GPIO_Init+0x2d4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d00d      	beq.n	8001b28 <HAL_GPIO_Init+0x1dc>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a45      	ldr	r2, [pc, #276]	@ (8001c24 <HAL_GPIO_Init+0x2d8>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d007      	beq.n	8001b24 <HAL_GPIO_Init+0x1d8>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a44      	ldr	r2, [pc, #272]	@ (8001c28 <HAL_GPIO_Init+0x2dc>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d101      	bne.n	8001b20 <HAL_GPIO_Init+0x1d4>
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e006      	b.n	8001b2e <HAL_GPIO_Init+0x1e2>
 8001b20:	2305      	movs	r3, #5
 8001b22:	e004      	b.n	8001b2e <HAL_GPIO_Init+0x1e2>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e002      	b.n	8001b2e <HAL_GPIO_Init+0x1e2>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <HAL_GPIO_Init+0x1e2>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	f002 0203 	and.w	r2, r2, #3
 8001b34:	0092      	lsls	r2, r2, #2
 8001b36:	4093      	lsls	r3, r2
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b3e:	4937      	ldr	r1, [pc, #220]	@ (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	089b      	lsrs	r3, r3, #2
 8001b44:	3302      	adds	r3, #2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b4c:	4b37      	ldr	r3, [pc, #220]	@ (8001c2c <HAL_GPIO_Init+0x2e0>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b70:	4a2e      	ldr	r2, [pc, #184]	@ (8001c2c <HAL_GPIO_Init+0x2e0>)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b76:	4b2d      	ldr	r3, [pc, #180]	@ (8001c2c <HAL_GPIO_Init+0x2e0>)
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4013      	ands	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b9a:	4a24      	ldr	r2, [pc, #144]	@ (8001c2c <HAL_GPIO_Init+0x2e0>)
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ba0:	4b22      	ldr	r3, [pc, #136]	@ (8001c2c <HAL_GPIO_Init+0x2e0>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bc4:	4a19      	ldr	r2, [pc, #100]	@ (8001c2c <HAL_GPIO_Init+0x2e0>)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bca:	4b18      	ldr	r3, [pc, #96]	@ (8001c2c <HAL_GPIO_Init+0x2e0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bee:	4a0f      	ldr	r2, [pc, #60]	@ (8001c2c <HAL_GPIO_Init+0x2e0>)
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f47f aea9 	bne.w	800195c <HAL_GPIO_Init+0x10>
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	bf00      	nop
 8001c0e:	371c      	adds	r7, #28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010000 	.word	0x40010000
 8001c20:	48000400 	.word	0x48000400
 8001c24:	48000800 	.word	0x48000800
 8001c28:	48000c00 	.word	0x48000c00
 8001c2c:	40010400 	.word	0x40010400

08001c30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e081      	b.n	8001d46 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d106      	bne.n	8001c5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff fb6a 	bl	8001330 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2224      	movs	r2, #36	@ 0x24
 8001c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0201 	bic.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d107      	bne.n	8001caa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	e006      	b.n	8001cb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001cb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d104      	bne.n	8001cca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cdc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691a      	ldr	r2, [r3, #16]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69d9      	ldr	r1, [r3, #28]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a1a      	ldr	r2, [r3, #32]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2220      	movs	r2, #32
 8001d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af02      	add	r7, sp, #8
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	817b      	strh	r3, [r7, #10]
 8001d60:	4613      	mov	r3, r2
 8001d62:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b20      	cmp	r3, #32
 8001d6e:	f040 80da 	bne.w	8001f26 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <HAL_I2C_Master_Transmit+0x30>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e0d3      	b.n	8001f28 <HAL_I2C_Master_Transmit+0x1d8>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d88:	f7ff fcca 	bl	8001720 <HAL_GetTick>
 8001d8c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	2319      	movs	r3, #25
 8001d94:	2201      	movs	r2, #1
 8001d96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 f9e6 	bl	800216c <I2C_WaitOnFlagUntilTimeout>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e0be      	b.n	8001f28 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2221      	movs	r2, #33	@ 0x21
 8001dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2210      	movs	r2, #16
 8001db6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	893a      	ldrh	r2, [r7, #8]
 8001dca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	2bff      	cmp	r3, #255	@ 0xff
 8001dda:	d90e      	bls.n	8001dfa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	22ff      	movs	r2, #255	@ 0xff
 8001de0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	8979      	ldrh	r1, [r7, #10]
 8001dea:	4b51      	ldr	r3, [pc, #324]	@ (8001f30 <HAL_I2C_Master_Transmit+0x1e0>)
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 fbf6 	bl	80025e4 <I2C_TransferConfig>
 8001df8:	e06c      	b.n	8001ed4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	8979      	ldrh	r1, [r7, #10]
 8001e0c:	4b48      	ldr	r3, [pc, #288]	@ (8001f30 <HAL_I2C_Master_Transmit+0x1e0>)
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 fbe5 	bl	80025e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001e1a:	e05b      	b.n	8001ed4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	6a39      	ldr	r1, [r7, #32]
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 f9f2 	bl	800220a <I2C_WaitOnTXISFlagUntilTimeout>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e07b      	b.n	8001f28 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e34:	781a      	ldrb	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d034      	beq.n	8001ed4 <HAL_I2C_Master_Transmit+0x184>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d130      	bne.n	8001ed4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2180      	movs	r1, #128	@ 0x80
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 f975 	bl	800216c <I2C_WaitOnFlagUntilTimeout>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e04d      	b.n	8001f28 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	2bff      	cmp	r3, #255	@ 0xff
 8001e94:	d90e      	bls.n	8001eb4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	22ff      	movs	r2, #255	@ 0xff
 8001e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	8979      	ldrh	r1, [r7, #10]
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 fb99 	bl	80025e4 <I2C_TransferConfig>
 8001eb2:	e00f      	b.n	8001ed4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	8979      	ldrh	r1, [r7, #10]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 fb88 	bl	80025e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d19e      	bne.n	8001e1c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	6a39      	ldr	r1, [r7, #32]
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 f9d8 	bl	8002298 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e01a      	b.n	8001f28 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6859      	ldr	r1, [r3, #4]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4b0b      	ldr	r3, [pc, #44]	@ (8001f34 <HAL_I2C_Master_Transmit+0x1e4>)
 8001f06:	400b      	ands	r3, r1
 8001f08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	e000      	b.n	8001f28 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001f26:	2302      	movs	r3, #2
  }
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	80002000 	.word	0x80002000
 8001f34:	fe00e800 	.word	0xfe00e800

08001f38 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af02      	add	r7, sp, #8
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	461a      	mov	r2, r3
 8001f44:	460b      	mov	r3, r1
 8001f46:	817b      	strh	r3, [r7, #10]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b20      	cmp	r3, #32
 8001f56:	f040 80db 	bne.w	8002110 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d101      	bne.n	8001f68 <HAL_I2C_Master_Receive+0x30>
 8001f64:	2302      	movs	r3, #2
 8001f66:	e0d4      	b.n	8002112 <HAL_I2C_Master_Receive+0x1da>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f70:	f7ff fbd6 	bl	8001720 <HAL_GetTick>
 8001f74:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	2319      	movs	r3, #25
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 f8f2 	bl	800216c <I2C_WaitOnFlagUntilTimeout>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e0bf      	b.n	8002112 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2222      	movs	r2, #34	@ 0x22
 8001f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2210      	movs	r2, #16
 8001f9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	893a      	ldrh	r2, [r7, #8]
 8001fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	2bff      	cmp	r3, #255	@ 0xff
 8001fc2:	d90e      	bls.n	8001fe2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	22ff      	movs	r2, #255	@ 0xff
 8001fc8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	8979      	ldrh	r1, [r7, #10]
 8001fd2:	4b52      	ldr	r3, [pc, #328]	@ (800211c <HAL_I2C_Master_Receive+0x1e4>)
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 fb02 	bl	80025e4 <I2C_TransferConfig>
 8001fe0:	e06d      	b.n	80020be <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	8979      	ldrh	r1, [r7, #10]
 8001ff4:	4b49      	ldr	r3, [pc, #292]	@ (800211c <HAL_I2C_Master_Receive+0x1e4>)
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 faf1 	bl	80025e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002002:	e05c      	b.n	80020be <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	6a39      	ldr	r1, [r7, #32]
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 f989 	bl	8002320 <I2C_WaitOnRXNEFlagUntilTimeout>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e07c      	b.n	8002112 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002034:	3b01      	subs	r3, #1
 8002036:	b29a      	uxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002040:	b29b      	uxth	r3, r3
 8002042:	3b01      	subs	r3, #1
 8002044:	b29a      	uxth	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800204e:	b29b      	uxth	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d034      	beq.n	80020be <HAL_I2C_Master_Receive+0x186>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002058:	2b00      	cmp	r3, #0
 800205a:	d130      	bne.n	80020be <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	2200      	movs	r2, #0
 8002064:	2180      	movs	r1, #128	@ 0x80
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 f880 	bl	800216c <I2C_WaitOnFlagUntilTimeout>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e04d      	b.n	8002112 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800207a:	b29b      	uxth	r3, r3
 800207c:	2bff      	cmp	r3, #255	@ 0xff
 800207e:	d90e      	bls.n	800209e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	22ff      	movs	r2, #255	@ 0xff
 8002084:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800208a:	b2da      	uxtb	r2, r3
 800208c:	8979      	ldrh	r1, [r7, #10]
 800208e:	2300      	movs	r3, #0
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 faa4 	bl	80025e4 <I2C_TransferConfig>
 800209c:	e00f      	b.n	80020be <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	8979      	ldrh	r1, [r7, #10]
 80020b0:	2300      	movs	r3, #0
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 fa93 	bl	80025e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d19d      	bne.n	8002004 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	6a39      	ldr	r1, [r7, #32]
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f8e3 	bl	8002298 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e01a      	b.n	8002112 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2220      	movs	r2, #32
 80020e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6859      	ldr	r1, [r3, #4]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002120 <HAL_I2C_Master_Receive+0x1e8>)
 80020f0:	400b      	ands	r3, r1
 80020f2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2220      	movs	r2, #32
 80020f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	e000      	b.n	8002112 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002110:	2302      	movs	r3, #2
  }
}
 8002112:	4618      	mov	r0, r3
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	80002400 	.word	0x80002400
 8002120:	fe00e800 	.word	0xfe00e800

08002124 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b02      	cmp	r3, #2
 8002138:	d103      	bne.n	8002142 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2200      	movs	r2, #0
 8002140:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b01      	cmp	r3, #1
 800214e:	d007      	beq.n	8002160 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699a      	ldr	r2, [r3, #24]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0201 	orr.w	r2, r2, #1
 800215e:	619a      	str	r2, [r3, #24]
  }
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	603b      	str	r3, [r7, #0]
 8002178:	4613      	mov	r3, r2
 800217a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800217c:	e031      	b.n	80021e2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002184:	d02d      	beq.n	80021e2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002186:	f7ff facb 	bl	8001720 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d302      	bcc.n	800219c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d122      	bne.n	80021e2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	699a      	ldr	r2, [r3, #24]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	4013      	ands	r3, r2
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	bf0c      	ite	eq
 80021ac:	2301      	moveq	r3, #1
 80021ae:	2300      	movne	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	461a      	mov	r2, r3
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d113      	bne.n	80021e2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021be:	f043 0220 	orr.w	r2, r3, #32
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e00f      	b.n	8002202 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	699a      	ldr	r2, [r3, #24]
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	4013      	ands	r3, r2
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	bf0c      	ite	eq
 80021f2:	2301      	moveq	r3, #1
 80021f4:	2300      	movne	r3, #0
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	461a      	mov	r2, r3
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d0be      	beq.n	800217e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b084      	sub	sp, #16
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002216:	e033      	b.n	8002280 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	68b9      	ldr	r1, [r7, #8]
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 f901 	bl	8002424 <I2C_IsErrorOccurred>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e031      	b.n	8002290 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002232:	d025      	beq.n	8002280 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002234:	f7ff fa74 	bl	8001720 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	429a      	cmp	r2, r3
 8002242:	d302      	bcc.n	800224a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d11a      	bne.n	8002280 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b02      	cmp	r3, #2
 8002256:	d013      	beq.n	8002280 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225c:	f043 0220 	orr.w	r2, r3, #32
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e007      	b.n	8002290 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b02      	cmp	r3, #2
 800228c:	d1c4      	bne.n	8002218 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022a4:	e02f      	b.n	8002306 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 f8ba 	bl	8002424 <I2C_IsErrorOccurred>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e02d      	b.n	8002316 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ba:	f7ff fa31 	bl	8001720 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d302      	bcc.n	80022d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d11a      	bne.n	8002306 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f003 0320 	and.w	r3, r3, #32
 80022da:	2b20      	cmp	r3, #32
 80022dc:	d013      	beq.n	8002306 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e2:	f043 0220 	orr.w	r2, r3, #32
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2220      	movs	r2, #32
 80022ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e007      	b.n	8002316 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f003 0320 	and.w	r3, r3, #32
 8002310:	2b20      	cmp	r3, #32
 8002312:	d1c8      	bne.n	80022a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800232c:	e06b      	b.n	8002406 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f876 	bl	8002424 <I2C_IsErrorOccurred>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e069      	b.n	8002416 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	2b20      	cmp	r3, #32
 800234e:	d138      	bne.n	80023c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b04      	cmp	r3, #4
 800235c:	d105      	bne.n	800236a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	e055      	b.n	8002416 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0310 	and.w	r3, r3, #16
 8002374:	2b10      	cmp	r3, #16
 8002376:	d107      	bne.n	8002388 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2210      	movs	r2, #16
 800237e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2204      	movs	r2, #4
 8002384:	645a      	str	r2, [r3, #68]	@ 0x44
 8002386:	e002      	b.n	800238e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2220      	movs	r2, #32
 8002394:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6859      	ldr	r1, [r3, #4]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002420 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80023a2:	400b      	ands	r3, r1
 80023a4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2220      	movs	r2, #32
 80023aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e029      	b.n	8002416 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c2:	f7ff f9ad 	bl	8001720 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d302      	bcc.n	80023d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d116      	bne.n	8002406 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d00f      	beq.n	8002406 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ea:	f043 0220 	orr.w	r2, r3, #32
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2220      	movs	r2, #32
 80023f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e007      	b.n	8002416 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b04      	cmp	r3, #4
 8002412:	d18c      	bne.n	800232e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	fe00e800 	.word	0xfe00e800

08002424 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	@ 0x28
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b00      	cmp	r3, #0
 800244e:	d068      	beq.n	8002522 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2210      	movs	r2, #16
 8002456:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002458:	e049      	b.n	80024ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002460:	d045      	beq.n	80024ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002462:	f7ff f95d 	bl	8001720 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	429a      	cmp	r2, r3
 8002470:	d302      	bcc.n	8002478 <I2C_IsErrorOccurred+0x54>
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d13a      	bne.n	80024ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002482:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800248a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002496:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800249a:	d121      	bne.n	80024e0 <I2C_IsErrorOccurred+0xbc>
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024a2:	d01d      	beq.n	80024e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	2b20      	cmp	r3, #32
 80024a8:	d01a      	beq.n	80024e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80024ba:	f7ff f931 	bl	8001720 <HAL_GetTick>
 80024be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024c0:	e00e      	b.n	80024e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80024c2:	f7ff f92d 	bl	8001720 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b19      	cmp	r3, #25
 80024ce:	d907      	bls.n	80024e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	f043 0320 	orr.w	r3, r3, #32
 80024d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80024de:	e006      	b.n	80024ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f003 0320 	and.w	r3, r3, #32
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	d1e9      	bne.n	80024c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	f003 0320 	and.w	r3, r3, #32
 80024f8:	2b20      	cmp	r3, #32
 80024fa:	d003      	beq.n	8002504 <I2C_IsErrorOccurred+0xe0>
 80024fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0aa      	beq.n	800245a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002508:	2b00      	cmp	r3, #0
 800250a:	d103      	bne.n	8002514 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2220      	movs	r2, #32
 8002512:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	f043 0304 	orr.w	r3, r3, #4
 800251a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00b      	beq.n	800254c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002544:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00b      	beq.n	800256e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	f043 0308 	orr.w	r3, r3, #8
 800255c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002566:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00b      	beq.n	8002590 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	f043 0302 	orr.w	r3, r3, #2
 800257e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002588:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002590:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002594:	2b00      	cmp	r3, #0
 8002596:	d01c      	beq.n	80025d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f7ff fdc3 	bl	8002124 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6859      	ldr	r1, [r3, #4]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4b0d      	ldr	r3, [pc, #52]	@ (80025e0 <I2C_IsErrorOccurred+0x1bc>)
 80025aa:	400b      	ands	r3, r1
 80025ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	431a      	orrs	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2220      	movs	r2, #32
 80025be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80025d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3728      	adds	r7, #40	@ 0x28
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	fe00e800 	.word	0xfe00e800

080025e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	607b      	str	r3, [r7, #4]
 80025ee:	460b      	mov	r3, r1
 80025f0:	817b      	strh	r3, [r7, #10]
 80025f2:	4613      	mov	r3, r2
 80025f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025f6:	897b      	ldrh	r3, [r7, #10]
 80025f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025fc:	7a7b      	ldrb	r3, [r7, #9]
 80025fe:	041b      	lsls	r3, r3, #16
 8002600:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002604:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	4313      	orrs	r3, r2
 800260e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002612:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	0d5b      	lsrs	r3, r3, #21
 800261e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002622:	4b08      	ldr	r3, [pc, #32]	@ (8002644 <I2C_TransferConfig+0x60>)
 8002624:	430b      	orrs	r3, r1
 8002626:	43db      	mvns	r3, r3
 8002628:	ea02 0103 	and.w	r1, r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	430a      	orrs	r2, r1
 8002634:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002636:	bf00      	nop
 8002638:	371c      	adds	r7, #28
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	03ff63ff 	.word	0x03ff63ff

08002648 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b20      	cmp	r3, #32
 800265c:	d138      	bne.n	80026d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002668:	2302      	movs	r3, #2
 800266a:	e032      	b.n	80026d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2224      	movs	r2, #36	@ 0x24
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800269a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6819      	ldr	r1, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	e000      	b.n	80026d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026d0:	2302      	movs	r3, #2
  }
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026de:	b480      	push	{r7}
 80026e0:	b085      	sub	sp, #20
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b20      	cmp	r3, #32
 80026f2:	d139      	bne.n	8002768 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026fe:	2302      	movs	r3, #2
 8002700:	e033      	b.n	800276a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2224      	movs	r2, #36	@ 0x24
 800270e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0201 	bic.w	r2, r2, #1
 8002720:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002730:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	e000      	b.n	800276a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002768:	2302      	movs	r3, #2
  }
}
 800276a:	4618      	mov	r0, r3
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
	...

08002778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800277e:	af00      	add	r7, sp, #0
 8002780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002784:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002788:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800278a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800278e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d102      	bne.n	800279e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	f001 b823 	b.w	80037e4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800279e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 817d 	beq.w	8002aae <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027b4:	4bbc      	ldr	r3, [pc, #752]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 030c 	and.w	r3, r3, #12
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d00c      	beq.n	80027da <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027c0:	4bb9      	ldr	r3, [pc, #740]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 030c 	and.w	r3, r3, #12
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d15c      	bne.n	8002886 <HAL_RCC_OscConfig+0x10e>
 80027cc:	4bb6      	ldr	r3, [pc, #728]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027d8:	d155      	bne.n	8002886 <HAL_RCC_OscConfig+0x10e>
 80027da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027de:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f2:	fab3 f383 	clz	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d102      	bne.n	800280c <HAL_RCC_OscConfig+0x94>
 8002806:	4ba8      	ldr	r3, [pc, #672]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	e015      	b.n	8002838 <HAL_RCC_OscConfig+0xc0>
 800280c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002810:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002818:	fa93 f3a3 	rbit	r3, r3
 800281c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002820:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002824:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002828:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002834:	4b9c      	ldr	r3, [pc, #624]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002838:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800283c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002840:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002844:	fa92 f2a2 	rbit	r2, r2
 8002848:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800284c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002850:	fab2 f282 	clz	r2, r2
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	f042 0220 	orr.w	r2, r2, #32
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	f002 021f 	and.w	r2, r2, #31
 8002860:	2101      	movs	r1, #1
 8002862:	fa01 f202 	lsl.w	r2, r1, r2
 8002866:	4013      	ands	r3, r2
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 811f 	beq.w	8002aac <HAL_RCC_OscConfig+0x334>
 800286e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002872:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f040 8116 	bne.w	8002aac <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	f000 bfaf 	b.w	80037e4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800288a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002896:	d106      	bne.n	80028a6 <HAL_RCC_OscConfig+0x12e>
 8002898:	4b83      	ldr	r3, [pc, #524]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a82      	ldr	r2, [pc, #520]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 800289e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	e036      	b.n	8002914 <HAL_RCC_OscConfig+0x19c>
 80028a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCC_OscConfig+0x158>
 80028b6:	4b7c      	ldr	r3, [pc, #496]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a7b      	ldr	r2, [pc, #492]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80028bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	4b79      	ldr	r3, [pc, #484]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a78      	ldr	r2, [pc, #480]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80028c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e021      	b.n	8002914 <HAL_RCC_OscConfig+0x19c>
 80028d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028e0:	d10c      	bne.n	80028fc <HAL_RCC_OscConfig+0x184>
 80028e2:	4b71      	ldr	r3, [pc, #452]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a70      	ldr	r2, [pc, #448]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80028e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	4b6e      	ldr	r3, [pc, #440]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a6d      	ldr	r2, [pc, #436]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80028f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f8:	6013      	str	r3, [r2, #0]
 80028fa:	e00b      	b.n	8002914 <HAL_RCC_OscConfig+0x19c>
 80028fc:	4b6a      	ldr	r3, [pc, #424]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a69      	ldr	r2, [pc, #420]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	4b67      	ldr	r3, [pc, #412]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a66      	ldr	r2, [pc, #408]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 800290e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002912:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002914:	4b64      	ldr	r3, [pc, #400]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002918:	f023 020f 	bic.w	r2, r3, #15
 800291c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002920:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	495f      	ldr	r1, [pc, #380]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 800292a:	4313      	orrs	r3, r2
 800292c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800292e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002932:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d059      	beq.n	80029f2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293e:	f7fe feef 	bl	8001720 <HAL_GetTick>
 8002942:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	e00a      	b.n	800295e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002948:	f7fe feea 	bl	8001720 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b64      	cmp	r3, #100	@ 0x64
 8002956:	d902      	bls.n	800295e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	f000 bf43 	b.w	80037e4 <HAL_RCC_OscConfig+0x106c>
 800295e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002962:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800296a:	fa93 f3a3 	rbit	r3, r3
 800296e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002972:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	095b      	lsrs	r3, r3, #5
 800297e:	b2db      	uxtb	r3, r3
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b01      	cmp	r3, #1
 8002988:	d102      	bne.n	8002990 <HAL_RCC_OscConfig+0x218>
 800298a:	4b47      	ldr	r3, [pc, #284]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	e015      	b.n	80029bc <HAL_RCC_OscConfig+0x244>
 8002990:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002994:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80029a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029a8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80029ac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80029b0:	fa93 f3a3 	rbit	r3, r3
 80029b4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80029b8:	4b3b      	ldr	r3, [pc, #236]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80029ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029c0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80029c4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80029c8:	fa92 f2a2 	rbit	r2, r2
 80029cc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80029d0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80029d4:	fab2 f282 	clz	r2, r2
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	f042 0220 	orr.w	r2, r2, #32
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	f002 021f 	and.w	r2, r2, #31
 80029e4:	2101      	movs	r1, #1
 80029e6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0ab      	beq.n	8002948 <HAL_RCC_OscConfig+0x1d0>
 80029f0:	e05d      	b.n	8002aae <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f2:	f7fe fe95 	bl	8001720 <HAL_GetTick>
 80029f6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029fa:	e00a      	b.n	8002a12 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029fc:	f7fe fe90 	bl	8001720 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b64      	cmp	r3, #100	@ 0x64
 8002a0a:	d902      	bls.n	8002a12 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	f000 bee9 	b.w	80037e4 <HAL_RCC_OscConfig+0x106c>
 8002a12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a16:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002a26:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	095b      	lsrs	r3, r3, #5
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d102      	bne.n	8002a44 <HAL_RCC_OscConfig+0x2cc>
 8002a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	e015      	b.n	8002a70 <HAL_RCC_OscConfig+0x2f8>
 8002a44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a48:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002a50:	fa93 f3a3 	rbit	r3, r3
 8002a54:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002a58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a5c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002a60:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a70:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a74:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002a78:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002a7c:	fa92 f2a2 	rbit	r2, r2
 8002a80:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002a84:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002a88:	fab2 f282 	clz	r2, r2
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	f042 0220 	orr.w	r2, r2, #32
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	f002 021f 	and.w	r2, r2, #31
 8002a98:	2101      	movs	r1, #1
 8002a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1ab      	bne.n	80029fc <HAL_RCC_OscConfig+0x284>
 8002aa4:	e003      	b.n	8002aae <HAL_RCC_OscConfig+0x336>
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 817d 	beq.w	8002dbe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ac4:	4ba6      	ldr	r3, [pc, #664]	@ (8002d60 <HAL_RCC_OscConfig+0x5e8>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 030c 	and.w	r3, r3, #12
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00b      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ad0:	4ba3      	ldr	r3, [pc, #652]	@ (8002d60 <HAL_RCC_OscConfig+0x5e8>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d172      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x44a>
 8002adc:	4ba0      	ldr	r3, [pc, #640]	@ (8002d60 <HAL_RCC_OscConfig+0x5e8>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d16c      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x44a>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002afa:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afe:	fab3 f383 	clz	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	095b      	lsrs	r3, r3, #5
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d102      	bne.n	8002b18 <HAL_RCC_OscConfig+0x3a0>
 8002b12:	4b93      	ldr	r3, [pc, #588]	@ (8002d60 <HAL_RCC_OscConfig+0x5e8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	e013      	b.n	8002b40 <HAL_RCC_OscConfig+0x3c8>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002b30:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002b3c:	4b88      	ldr	r3, [pc, #544]	@ (8002d60 <HAL_RCC_OscConfig+0x5e8>)
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	2202      	movs	r2, #2
 8002b42:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002b46:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002b4a:	fa92 f2a2 	rbit	r2, r2
 8002b4e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002b52:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002b56:	fab2 f282 	clz	r2, r2
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	f042 0220 	orr.w	r2, r2, #32
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	f002 021f 	and.w	r2, r2, #31
 8002b66:	2101      	movs	r1, #1
 8002b68:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HAL_RCC_OscConfig+0x410>
 8002b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d002      	beq.n	8002b88 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	f000 be2e 	b.w	80037e4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b88:	4b75      	ldr	r3, [pc, #468]	@ (8002d60 <HAL_RCC_OscConfig+0x5e8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	21f8      	movs	r1, #248	@ 0xf8
 8002b9e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002ba6:	fa91 f1a1 	rbit	r1, r1
 8002baa:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002bae:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002bb2:	fab1 f181 	clz	r1, r1
 8002bb6:	b2c9      	uxtb	r1, r1
 8002bb8:	408b      	lsls	r3, r1
 8002bba:	4969      	ldr	r1, [pc, #420]	@ (8002d60 <HAL_RCC_OscConfig+0x5e8>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc0:	e0fd      	b.n	8002dbe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 8088 	beq.w	8002ce4 <HAL_RCC_OscConfig+0x56c>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002be6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002bf4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7fe fd8e 	bl	8001720 <HAL_GetTick>
 8002c04:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c08:	e00a      	b.n	8002c20 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c0a:	f7fe fd89 	bl	8001720 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d902      	bls.n	8002c20 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	f000 bde2 	b.w	80037e4 <HAL_RCC_OscConfig+0x106c>
 8002c20:	2302      	movs	r3, #2
 8002c22:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002c32:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	095b      	lsrs	r3, r3, #5
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d102      	bne.n	8002c50 <HAL_RCC_OscConfig+0x4d8>
 8002c4a:	4b45      	ldr	r3, [pc, #276]	@ (8002d60 <HAL_RCC_OscConfig+0x5e8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	e013      	b.n	8002c78 <HAL_RCC_OscConfig+0x500>
 8002c50:	2302      	movs	r3, #2
 8002c52:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c56:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002c5a:	fa93 f3a3 	rbit	r3, r3
 8002c5e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002c62:	2302      	movs	r3, #2
 8002c64:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002c68:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002c6c:	fa93 f3a3 	rbit	r3, r3
 8002c70:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002c74:	4b3a      	ldr	r3, [pc, #232]	@ (8002d60 <HAL_RCC_OscConfig+0x5e8>)
 8002c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c78:	2202      	movs	r2, #2
 8002c7a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002c7e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002c82:	fa92 f2a2 	rbit	r2, r2
 8002c86:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002c8a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002c8e:	fab2 f282 	clz	r2, r2
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	f042 0220 	orr.w	r2, r2, #32
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	f002 021f 	and.w	r2, r2, #31
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0af      	beq.n	8002c0a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002caa:	4b2d      	ldr	r3, [pc, #180]	@ (8002d60 <HAL_RCC_OscConfig+0x5e8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	21f8      	movs	r1, #248	@ 0xf8
 8002cc0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002cc8:	fa91 f1a1 	rbit	r1, r1
 8002ccc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002cd0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002cd4:	fab1 f181 	clz	r1, r1
 8002cd8:	b2c9      	uxtb	r1, r1
 8002cda:	408b      	lsls	r3, r1
 8002cdc:	4920      	ldr	r1, [pc, #128]	@ (8002d60 <HAL_RCC_OscConfig+0x5e8>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	600b      	str	r3, [r1, #0]
 8002ce2:	e06c      	b.n	8002dbe <HAL_RCC_OscConfig+0x646>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002cf6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cfa:	fab3 f383 	clz	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d04:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7fe fd06 	bl	8001720 <HAL_GetTick>
 8002d14:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d18:	e00a      	b.n	8002d30 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d1a:	f7fe fd01 	bl	8001720 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d902      	bls.n	8002d30 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	f000 bd5a 	b.w	80037e4 <HAL_RCC_OscConfig+0x106c>
 8002d30:	2302      	movs	r3, #2
 8002d32:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002d3a:	fa93 f3a3 	rbit	r3, r3
 8002d3e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002d42:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	095b      	lsrs	r3, r3, #5
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d104      	bne.n	8002d64 <HAL_RCC_OscConfig+0x5ec>
 8002d5a:	4b01      	ldr	r3, [pc, #4]	@ (8002d60 <HAL_RCC_OscConfig+0x5e8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	e015      	b.n	8002d8c <HAL_RCC_OscConfig+0x614>
 8002d60:	40021000 	.word	0x40021000
 8002d64:	2302      	movs	r3, #2
 8002d66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002d76:	2302      	movs	r3, #2
 8002d78:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002d7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002d80:	fa93 f3a3 	rbit	r3, r3
 8002d84:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002d88:	4bc8      	ldr	r3, [pc, #800]	@ (80030ac <HAL_RCC_OscConfig+0x934>)
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002d92:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002d96:	fa92 f2a2 	rbit	r2, r2
 8002d9a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002d9e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002da2:	fab2 f282 	clz	r2, r2
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	f042 0220 	orr.w	r2, r2, #32
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	f002 021f 	and.w	r2, r2, #31
 8002db2:	2101      	movs	r1, #1
 8002db4:	fa01 f202 	lsl.w	r2, r1, r2
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1ad      	bne.n	8002d1a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 8110 	beq.w	8002ff4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d079      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x760>
 8002de4:	2301      	movs	r3, #1
 8002de6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dfa:	fab3 f383 	clz	r3, r3
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	4bab      	ldr	r3, [pc, #684]	@ (80030b0 <HAL_RCC_OscConfig+0x938>)
 8002e04:	4413      	add	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	461a      	mov	r2, r3
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0e:	f7fe fc87 	bl	8001720 <HAL_GetTick>
 8002e12:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e16:	e00a      	b.n	8002e2e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e18:	f7fe fc82 	bl	8001720 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d902      	bls.n	8002e2e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	f000 bcdb 	b.w	80037e4 <HAL_RCC_OscConfig+0x106c>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e34:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002e38:	fa93 f3a3 	rbit	r3, r3
 8002e3c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002e40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e44:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002e48:	2202      	movs	r2, #2
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e50:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	fa93 f2a3 	rbit	r2, r3
 8002e5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	fa93 f2a3 	rbit	r2, r3
 8002e7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e82:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002e86:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e88:	4b88      	ldr	r3, [pc, #544]	@ (80030ac <HAL_RCC_OscConfig+0x934>)
 8002e8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e90:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002e94:	2102      	movs	r1, #2
 8002e96:	6019      	str	r1, [r3, #0]
 8002e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e9c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	fa93 f1a3 	rbit	r1, r3
 8002ea6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eaa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002eae:	6019      	str	r1, [r3, #0]
  return result;
 8002eb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f003 031f 	and.w	r3, r3, #31
 8002eca:	2101      	movs	r1, #1
 8002ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0a0      	beq.n	8002e18 <HAL_RCC_OscConfig+0x6a0>
 8002ed6:	e08d      	b.n	8002ff4 <HAL_RCC_OscConfig+0x87c>
 8002ed8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002edc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	fa93 f2a3 	rbit	r2, r3
 8002ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002efa:	601a      	str	r2, [r3, #0]
  return result;
 8002efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f00:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002f04:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f06:	fab3 f383 	clz	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4b68      	ldr	r3, [pc, #416]	@ (80030b0 <HAL_RCC_OscConfig+0x938>)
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	461a      	mov	r2, r3
 8002f16:	2300      	movs	r3, #0
 8002f18:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1a:	f7fe fc01 	bl	8001720 <HAL_GetTick>
 8002f1e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f22:	e00a      	b.n	8002f3a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f24:	f7fe fbfc 	bl	8001720 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d902      	bls.n	8002f3a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	f000 bc55 	b.w	80037e4 <HAL_RCC_OscConfig+0x106c>
 8002f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f3e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002f42:	2202      	movs	r2, #2
 8002f44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f4a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	fa93 f2a3 	rbit	r2, r3
 8002f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f58:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f62:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002f66:	2202      	movs	r2, #2
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f6e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	fa93 f2a3 	rbit	r2, r3
 8002f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f86:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f92:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	fa93 f2a3 	rbit	r2, r3
 8002f9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002fa4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa6:	4b41      	ldr	r3, [pc, #260]	@ (80030ac <HAL_RCC_OscConfig+0x934>)
 8002fa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002faa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002fb2:	2102      	movs	r1, #2
 8002fb4:	6019      	str	r1, [r3, #0]
 8002fb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fba:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	fa93 f1a3 	rbit	r1, r3
 8002fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002fcc:	6019      	str	r1, [r3, #0]
  return result;
 8002fce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	fab3 f383 	clz	r3, r3
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	f003 031f 	and.w	r3, r3, #31
 8002fe8:	2101      	movs	r1, #1
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d197      	bne.n	8002f24 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 81a1 	beq.w	800334c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800300a:	2300      	movs	r3, #0
 800300c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003010:	4b26      	ldr	r3, [pc, #152]	@ (80030ac <HAL_RCC_OscConfig+0x934>)
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d116      	bne.n	800304a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800301c:	4b23      	ldr	r3, [pc, #140]	@ (80030ac <HAL_RCC_OscConfig+0x934>)
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	4a22      	ldr	r2, [pc, #136]	@ (80030ac <HAL_RCC_OscConfig+0x934>)
 8003022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003026:	61d3      	str	r3, [r2, #28]
 8003028:	4b20      	ldr	r3, [pc, #128]	@ (80030ac <HAL_RCC_OscConfig+0x934>)
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003034:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800303e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003042:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003044:	2301      	movs	r3, #1
 8003046:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304a:	4b1a      	ldr	r3, [pc, #104]	@ (80030b4 <HAL_RCC_OscConfig+0x93c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003052:	2b00      	cmp	r3, #0
 8003054:	d11a      	bne.n	800308c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003056:	4b17      	ldr	r3, [pc, #92]	@ (80030b4 <HAL_RCC_OscConfig+0x93c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a16      	ldr	r2, [pc, #88]	@ (80030b4 <HAL_RCC_OscConfig+0x93c>)
 800305c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003060:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003062:	f7fe fb5d 	bl	8001720 <HAL_GetTick>
 8003066:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306a:	e009      	b.n	8003080 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800306c:	f7fe fb58 	bl	8001720 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b64      	cmp	r3, #100	@ 0x64
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e3b1      	b.n	80037e4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003080:	4b0c      	ldr	r3, [pc, #48]	@ (80030b4 <HAL_RCC_OscConfig+0x93c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0ef      	beq.n	800306c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800308c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003090:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d10d      	bne.n	80030b8 <HAL_RCC_OscConfig+0x940>
 800309c:	4b03      	ldr	r3, [pc, #12]	@ (80030ac <HAL_RCC_OscConfig+0x934>)
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	4a02      	ldr	r2, [pc, #8]	@ (80030ac <HAL_RCC_OscConfig+0x934>)
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	6213      	str	r3, [r2, #32]
 80030a8:	e03c      	b.n	8003124 <HAL_RCC_OscConfig+0x9ac>
 80030aa:	bf00      	nop
 80030ac:	40021000 	.word	0x40021000
 80030b0:	10908120 	.word	0x10908120
 80030b4:	40007000 	.word	0x40007000
 80030b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10c      	bne.n	80030e2 <HAL_RCC_OscConfig+0x96a>
 80030c8:	4bc1      	ldr	r3, [pc, #772]	@ (80033d0 <HAL_RCC_OscConfig+0xc58>)
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	4ac0      	ldr	r2, [pc, #768]	@ (80033d0 <HAL_RCC_OscConfig+0xc58>)
 80030ce:	f023 0301 	bic.w	r3, r3, #1
 80030d2:	6213      	str	r3, [r2, #32]
 80030d4:	4bbe      	ldr	r3, [pc, #760]	@ (80033d0 <HAL_RCC_OscConfig+0xc58>)
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	4abd      	ldr	r2, [pc, #756]	@ (80033d0 <HAL_RCC_OscConfig+0xc58>)
 80030da:	f023 0304 	bic.w	r3, r3, #4
 80030de:	6213      	str	r3, [r2, #32]
 80030e0:	e020      	b.n	8003124 <HAL_RCC_OscConfig+0x9ac>
 80030e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2b05      	cmp	r3, #5
 80030f0:	d10c      	bne.n	800310c <HAL_RCC_OscConfig+0x994>
 80030f2:	4bb7      	ldr	r3, [pc, #732]	@ (80033d0 <HAL_RCC_OscConfig+0xc58>)
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	4ab6      	ldr	r2, [pc, #728]	@ (80033d0 <HAL_RCC_OscConfig+0xc58>)
 80030f8:	f043 0304 	orr.w	r3, r3, #4
 80030fc:	6213      	str	r3, [r2, #32]
 80030fe:	4bb4      	ldr	r3, [pc, #720]	@ (80033d0 <HAL_RCC_OscConfig+0xc58>)
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	4ab3      	ldr	r2, [pc, #716]	@ (80033d0 <HAL_RCC_OscConfig+0xc58>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	6213      	str	r3, [r2, #32]
 800310a:	e00b      	b.n	8003124 <HAL_RCC_OscConfig+0x9ac>
 800310c:	4bb0      	ldr	r3, [pc, #704]	@ (80033d0 <HAL_RCC_OscConfig+0xc58>)
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	4aaf      	ldr	r2, [pc, #700]	@ (80033d0 <HAL_RCC_OscConfig+0xc58>)
 8003112:	f023 0301 	bic.w	r3, r3, #1
 8003116:	6213      	str	r3, [r2, #32]
 8003118:	4bad      	ldr	r3, [pc, #692]	@ (80033d0 <HAL_RCC_OscConfig+0xc58>)
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	4aac      	ldr	r2, [pc, #688]	@ (80033d0 <HAL_RCC_OscConfig+0xc58>)
 800311e:	f023 0304 	bic.w	r3, r3, #4
 8003122:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003124:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003128:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 8081 	beq.w	8003238 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003136:	f7fe faf3 	bl	8001720 <HAL_GetTick>
 800313a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313e:	e00b      	b.n	8003158 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003140:	f7fe faee 	bl	8001720 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003150:	4293      	cmp	r3, r2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e345      	b.n	80037e4 <HAL_RCC_OscConfig+0x106c>
 8003158:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800315c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003160:	2202      	movs	r2, #2
 8003162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003164:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003168:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	fa93 f2a3 	rbit	r2, r3
 8003172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003176:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003180:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003184:	2202      	movs	r2, #2
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800318c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	fa93 f2a3 	rbit	r2, r3
 8003196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800319a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800319e:	601a      	str	r2, [r3, #0]
  return result;
 80031a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80031a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	f043 0302 	orr.w	r3, r3, #2
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d102      	bne.n	80031c4 <HAL_RCC_OscConfig+0xa4c>
 80031be:	4b84      	ldr	r3, [pc, #528]	@ (80033d0 <HAL_RCC_OscConfig+0xc58>)
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	e013      	b.n	80031ec <HAL_RCC_OscConfig+0xa74>
 80031c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80031cc:	2202      	movs	r2, #2
 80031ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	fa93 f2a3 	rbit	r2, r3
 80031de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	4b79      	ldr	r3, [pc, #484]	@ (80033d0 <HAL_RCC_OscConfig+0xc58>)
 80031ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031f0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80031f4:	2102      	movs	r1, #2
 80031f6:	6011      	str	r1, [r2, #0]
 80031f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031fc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003200:	6812      	ldr	r2, [r2, #0]
 8003202:	fa92 f1a2 	rbit	r1, r2
 8003206:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800320a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800320e:	6011      	str	r1, [r2, #0]
  return result;
 8003210:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003214:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003218:	6812      	ldr	r2, [r2, #0]
 800321a:	fab2 f282 	clz	r2, r2
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	f002 021f 	and.w	r2, r2, #31
 800322a:	2101      	movs	r1, #1
 800322c:	fa01 f202 	lsl.w	r2, r1, r2
 8003230:	4013      	ands	r3, r2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d084      	beq.n	8003140 <HAL_RCC_OscConfig+0x9c8>
 8003236:	e07f      	b.n	8003338 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003238:	f7fe fa72 	bl	8001720 <HAL_GetTick>
 800323c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003240:	e00b      	b.n	800325a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003242:	f7fe fa6d 	bl	8001720 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003252:	4293      	cmp	r3, r2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e2c4      	b.n	80037e4 <HAL_RCC_OscConfig+0x106c>
 800325a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003262:	2202      	movs	r2, #2
 8003264:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	fa93 f2a3 	rbit	r2, r3
 8003274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003278:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003282:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003286:	2202      	movs	r2, #2
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800328e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	fa93 f2a3 	rbit	r2, r3
 8003298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800329c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80032a0:	601a      	str	r2, [r3, #0]
  return result;
 80032a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80032aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ac:	fab3 f383 	clz	r3, r3
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	f043 0302 	orr.w	r3, r3, #2
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d102      	bne.n	80032c6 <HAL_RCC_OscConfig+0xb4e>
 80032c0:	4b43      	ldr	r3, [pc, #268]	@ (80033d0 <HAL_RCC_OscConfig+0xc58>)
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	e013      	b.n	80032ee <HAL_RCC_OscConfig+0xb76>
 80032c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ca:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80032ce:	2202      	movs	r2, #2
 80032d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	fa93 f2a3 	rbit	r2, r3
 80032e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	4b39      	ldr	r3, [pc, #228]	@ (80033d0 <HAL_RCC_OscConfig+0xc58>)
 80032ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032f2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80032f6:	2102      	movs	r1, #2
 80032f8:	6011      	str	r1, [r2, #0]
 80032fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032fe:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	fa92 f1a2 	rbit	r1, r2
 8003308:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800330c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003310:	6011      	str	r1, [r2, #0]
  return result;
 8003312:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003316:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	fab2 f282 	clz	r2, r2
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	f002 021f 	and.w	r2, r2, #31
 800332c:	2101      	movs	r1, #1
 800332e:	fa01 f202 	lsl.w	r2, r1, r2
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d184      	bne.n	8003242 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003338:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800333c:	2b01      	cmp	r3, #1
 800333e:	d105      	bne.n	800334c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003340:	4b23      	ldr	r3, [pc, #140]	@ (80033d0 <HAL_RCC_OscConfig+0xc58>)
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	4a22      	ldr	r2, [pc, #136]	@ (80033d0 <HAL_RCC_OscConfig+0xc58>)
 8003346:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800334a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800334c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003350:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 8242 	beq.w	80037e2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800335e:	4b1c      	ldr	r3, [pc, #112]	@ (80033d0 <HAL_RCC_OscConfig+0xc58>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	2b08      	cmp	r3, #8
 8003368:	f000 8213 	beq.w	8003792 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800336c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003370:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	2b02      	cmp	r3, #2
 800337a:	f040 8162 	bne.w	8003642 <HAL_RCC_OscConfig+0xeca>
 800337e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003382:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003386:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800338a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003390:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	fa93 f2a3 	rbit	r2, r3
 800339a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800339e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80033a2:	601a      	str	r2, [r3, #0]
  return result;
 80033a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80033ac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ae:	fab3 f383 	clz	r3, r3
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80033b8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	461a      	mov	r2, r3
 80033c0:	2300      	movs	r3, #0
 80033c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7fe f9ac 	bl	8001720 <HAL_GetTick>
 80033c8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033cc:	e00c      	b.n	80033e8 <HAL_RCC_OscConfig+0xc70>
 80033ce:	bf00      	nop
 80033d0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d4:	f7fe f9a4 	bl	8001720 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e1fd      	b.n	80037e4 <HAL_RCC_OscConfig+0x106c>
 80033e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ec:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80033f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033fa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	fa93 f2a3 	rbit	r2, r3
 8003404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003408:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800340c:	601a      	str	r2, [r3, #0]
  return result;
 800340e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003412:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003416:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003418:	fab3 f383 	clz	r3, r3
 800341c:	b2db      	uxtb	r3, r3
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	b2db      	uxtb	r3, r3
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b01      	cmp	r3, #1
 800342a:	d102      	bne.n	8003432 <HAL_RCC_OscConfig+0xcba>
 800342c:	4bb0      	ldr	r3, [pc, #704]	@ (80036f0 <HAL_RCC_OscConfig+0xf78>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	e027      	b.n	8003482 <HAL_RCC_OscConfig+0xd0a>
 8003432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003436:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800343a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800343e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003444:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	fa93 f2a3 	rbit	r2, r3
 800344e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003452:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800345c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003460:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800346a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	fa93 f2a3 	rbit	r2, r3
 8003474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003478:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	4b9c      	ldr	r3, [pc, #624]	@ (80036f0 <HAL_RCC_OscConfig+0xf78>)
 8003480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003482:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003486:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800348a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800348e:	6011      	str	r1, [r2, #0]
 8003490:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003494:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003498:	6812      	ldr	r2, [r2, #0]
 800349a:	fa92 f1a2 	rbit	r1, r2
 800349e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034a2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80034a6:	6011      	str	r1, [r2, #0]
  return result;
 80034a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034ac:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	fab2 f282 	clz	r2, r2
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	f042 0220 	orr.w	r2, r2, #32
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	f002 021f 	and.w	r2, r2, #31
 80034c2:	2101      	movs	r1, #1
 80034c4:	fa01 f202 	lsl.w	r2, r1, r2
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d182      	bne.n	80033d4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034ce:	4b88      	ldr	r3, [pc, #544]	@ (80036f0 <HAL_RCC_OscConfig+0xf78>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80034d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80034e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	430b      	orrs	r3, r1
 80034f0:	497f      	ldr	r1, [pc, #508]	@ (80036f0 <HAL_RCC_OscConfig+0xf78>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	604b      	str	r3, [r1, #4]
 80034f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034fa:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80034fe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003502:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003508:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	fa93 f2a3 	rbit	r2, r3
 8003512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003516:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800351a:	601a      	str	r2, [r3, #0]
  return result;
 800351c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003520:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003524:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003526:	fab3 f383 	clz	r3, r3
 800352a:	b2db      	uxtb	r3, r3
 800352c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003530:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	461a      	mov	r2, r3
 8003538:	2301      	movs	r3, #1
 800353a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353c:	f7fe f8f0 	bl	8001720 <HAL_GetTick>
 8003540:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003544:	e009      	b.n	800355a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003546:	f7fe f8eb 	bl	8001720 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e144      	b.n	80037e4 <HAL_RCC_OscConfig+0x106c>
 800355a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800355e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003562:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003566:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003568:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800356c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	fa93 f2a3 	rbit	r2, r3
 8003576:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800357a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800357e:	601a      	str	r2, [r3, #0]
  return result;
 8003580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003584:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003588:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800358a:	fab3 f383 	clz	r3, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	095b      	lsrs	r3, r3, #5
 8003592:	b2db      	uxtb	r3, r3
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b01      	cmp	r3, #1
 800359c:	d102      	bne.n	80035a4 <HAL_RCC_OscConfig+0xe2c>
 800359e:	4b54      	ldr	r3, [pc, #336]	@ (80036f0 <HAL_RCC_OscConfig+0xf78>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	e027      	b.n	80035f4 <HAL_RCC_OscConfig+0xe7c>
 80035a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80035ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	fa93 f2a3 	rbit	r2, r3
 80035c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ce:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80035d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035dc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	fa93 f2a3 	rbit	r2, r3
 80035e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ea:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	4b3f      	ldr	r3, [pc, #252]	@ (80036f0 <HAL_RCC_OscConfig+0xf78>)
 80035f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035f8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80035fc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003600:	6011      	str	r1, [r2, #0]
 8003602:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003606:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	fa92 f1a2 	rbit	r1, r2
 8003610:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003614:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003618:	6011      	str	r1, [r2, #0]
  return result;
 800361a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800361e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	fab2 f282 	clz	r2, r2
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	f042 0220 	orr.w	r2, r2, #32
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	f002 021f 	and.w	r2, r2, #31
 8003634:	2101      	movs	r1, #1
 8003636:	fa01 f202 	lsl.w	r2, r1, r2
 800363a:	4013      	ands	r3, r2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d082      	beq.n	8003546 <HAL_RCC_OscConfig+0xdce>
 8003640:	e0cf      	b.n	80037e2 <HAL_RCC_OscConfig+0x106a>
 8003642:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003646:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800364a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800364e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003650:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003654:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	fa93 f2a3 	rbit	r2, r3
 800365e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003662:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003666:	601a      	str	r2, [r3, #0]
  return result;
 8003668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800366c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003670:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003672:	fab3 f383 	clz	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800367c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	461a      	mov	r2, r3
 8003684:	2300      	movs	r3, #0
 8003686:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7fe f84a 	bl	8001720 <HAL_GetTick>
 800368c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003690:	e009      	b.n	80036a6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003692:	f7fe f845 	bl	8001720 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e09e      	b.n	80037e4 <HAL_RCC_OscConfig+0x106c>
 80036a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036aa:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80036ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	fa93 f2a3 	rbit	r2, r3
 80036c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80036ca:	601a      	str	r2, [r3, #0]
  return result;
 80036cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80036d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036d6:	fab3 f383 	clz	r3, r3
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	095b      	lsrs	r3, r3, #5
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d104      	bne.n	80036f4 <HAL_RCC_OscConfig+0xf7c>
 80036ea:	4b01      	ldr	r3, [pc, #4]	@ (80036f0 <HAL_RCC_OscConfig+0xf78>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	e029      	b.n	8003744 <HAL_RCC_OscConfig+0xfcc>
 80036f0:	40021000 	.word	0x40021000
 80036f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80036fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003700:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003706:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	fa93 f2a3 	rbit	r2, r3
 8003710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003714:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800371e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003722:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800372c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	fa93 f2a3 	rbit	r2, r3
 8003736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800373a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	4b2b      	ldr	r3, [pc, #172]	@ (80037f0 <HAL_RCC_OscConfig+0x1078>)
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003748:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800374c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003750:	6011      	str	r1, [r2, #0]
 8003752:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003756:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	fa92 f1a2 	rbit	r1, r2
 8003760:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003764:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003768:	6011      	str	r1, [r2, #0]
  return result;
 800376a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800376e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	fab2 f282 	clz	r2, r2
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	f042 0220 	orr.w	r2, r2, #32
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	f002 021f 	and.w	r2, r2, #31
 8003784:	2101      	movs	r1, #1
 8003786:	fa01 f202 	lsl.w	r2, r1, r2
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d180      	bne.n	8003692 <HAL_RCC_OscConfig+0xf1a>
 8003790:	e027      	b.n	80037e2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003796:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e01e      	b.n	80037e4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037a6:	4b12      	ldr	r3, [pc, #72]	@ (80037f0 <HAL_RCC_OscConfig+0x1078>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80037b2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80037b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d10b      	bne.n	80037de <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80037c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80037ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80037ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037da:	429a      	cmp	r2, r3
 80037dc:	d001      	beq.n	80037e2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40021000 	.word	0x40021000

080037f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b09e      	sub	sp, #120	@ 0x78
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e162      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800380c:	4b90      	ldr	r3, [pc, #576]	@ (8003a50 <HAL_RCC_ClockConfig+0x25c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d910      	bls.n	800383c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b8d      	ldr	r3, [pc, #564]	@ (8003a50 <HAL_RCC_ClockConfig+0x25c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f023 0207 	bic.w	r2, r3, #7
 8003822:	498b      	ldr	r1, [pc, #556]	@ (8003a50 <HAL_RCC_ClockConfig+0x25c>)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	4313      	orrs	r3, r2
 8003828:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800382a:	4b89      	ldr	r3, [pc, #548]	@ (8003a50 <HAL_RCC_ClockConfig+0x25c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d001      	beq.n	800383c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e14a      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003848:	4b82      	ldr	r3, [pc, #520]	@ (8003a54 <HAL_RCC_ClockConfig+0x260>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	497f      	ldr	r1, [pc, #508]	@ (8003a54 <HAL_RCC_ClockConfig+0x260>)
 8003856:	4313      	orrs	r3, r2
 8003858:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 80dc 	beq.w	8003a20 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d13c      	bne.n	80038ea <HAL_RCC_ClockConfig+0xf6>
 8003870:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003874:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003876:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003878:	fa93 f3a3 	rbit	r3, r3
 800387c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800387e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003880:	fab3 f383 	clz	r3, r3
 8003884:	b2db      	uxtb	r3, r3
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	b2db      	uxtb	r3, r3
 800388a:	f043 0301 	orr.w	r3, r3, #1
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b01      	cmp	r3, #1
 8003892:	d102      	bne.n	800389a <HAL_RCC_ClockConfig+0xa6>
 8003894:	4b6f      	ldr	r3, [pc, #444]	@ (8003a54 <HAL_RCC_ClockConfig+0x260>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	e00f      	b.n	80038ba <HAL_RCC_ClockConfig+0xc6>
 800389a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800389e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038a2:	fa93 f3a3 	rbit	r3, r3
 80038a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80038a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80038ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80038ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038b0:	fa93 f3a3 	rbit	r3, r3
 80038b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038b6:	4b67      	ldr	r3, [pc, #412]	@ (8003a54 <HAL_RCC_ClockConfig+0x260>)
 80038b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80038be:	65ba      	str	r2, [r7, #88]	@ 0x58
 80038c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038c2:	fa92 f2a2 	rbit	r2, r2
 80038c6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80038c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80038ca:	fab2 f282 	clz	r2, r2
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	f042 0220 	orr.w	r2, r2, #32
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	f002 021f 	and.w	r2, r2, #31
 80038da:	2101      	movs	r1, #1
 80038dc:	fa01 f202 	lsl.w	r2, r1, r2
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d17b      	bne.n	80039de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e0f3      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d13c      	bne.n	800396c <HAL_RCC_ClockConfig+0x178>
 80038f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038f6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038fa:	fa93 f3a3 	rbit	r3, r3
 80038fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003902:	fab3 f383 	clz	r3, r3
 8003906:	b2db      	uxtb	r3, r3
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	b2db      	uxtb	r3, r3
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b01      	cmp	r3, #1
 8003914:	d102      	bne.n	800391c <HAL_RCC_ClockConfig+0x128>
 8003916:	4b4f      	ldr	r3, [pc, #316]	@ (8003a54 <HAL_RCC_ClockConfig+0x260>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	e00f      	b.n	800393c <HAL_RCC_ClockConfig+0x148>
 800391c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003920:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003924:	fa93 f3a3 	rbit	r3, r3
 8003928:	647b      	str	r3, [r7, #68]	@ 0x44
 800392a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800392e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003930:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003932:	fa93 f3a3 	rbit	r3, r3
 8003936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003938:	4b46      	ldr	r3, [pc, #280]	@ (8003a54 <HAL_RCC_ClockConfig+0x260>)
 800393a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003940:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003942:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003944:	fa92 f2a2 	rbit	r2, r2
 8003948:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800394a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800394c:	fab2 f282 	clz	r2, r2
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	f042 0220 	orr.w	r2, r2, #32
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	f002 021f 	and.w	r2, r2, #31
 800395c:	2101      	movs	r1, #1
 800395e:	fa01 f202 	lsl.w	r2, r1, r2
 8003962:	4013      	ands	r3, r2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d13a      	bne.n	80039de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0b2      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x2de>
 800396c:	2302      	movs	r3, #2
 800396e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003972:	fa93 f3a3 	rbit	r3, r3
 8003976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800397a:	fab3 f383 	clz	r3, r3
 800397e:	b2db      	uxtb	r3, r3
 8003980:	095b      	lsrs	r3, r3, #5
 8003982:	b2db      	uxtb	r3, r3
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b01      	cmp	r3, #1
 800398c:	d102      	bne.n	8003994 <HAL_RCC_ClockConfig+0x1a0>
 800398e:	4b31      	ldr	r3, [pc, #196]	@ (8003a54 <HAL_RCC_ClockConfig+0x260>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	e00d      	b.n	80039b0 <HAL_RCC_ClockConfig+0x1bc>
 8003994:	2302      	movs	r3, #2
 8003996:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399a:	fa93 f3a3 	rbit	r3, r3
 800399e:	627b      	str	r3, [r7, #36]	@ 0x24
 80039a0:	2302      	movs	r3, #2
 80039a2:	623b      	str	r3, [r7, #32]
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	fa93 f3a3 	rbit	r3, r3
 80039aa:	61fb      	str	r3, [r7, #28]
 80039ac:	4b29      	ldr	r3, [pc, #164]	@ (8003a54 <HAL_RCC_ClockConfig+0x260>)
 80039ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b0:	2202      	movs	r2, #2
 80039b2:	61ba      	str	r2, [r7, #24]
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	fa92 f2a2 	rbit	r2, r2
 80039ba:	617a      	str	r2, [r7, #20]
  return result;
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	fab2 f282 	clz	r2, r2
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	f042 0220 	orr.w	r2, r2, #32
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	f002 021f 	and.w	r2, r2, #31
 80039ce:	2101      	movs	r1, #1
 80039d0:	fa01 f202 	lsl.w	r2, r1, r2
 80039d4:	4013      	ands	r3, r2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e079      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039de:	4b1d      	ldr	r3, [pc, #116]	@ (8003a54 <HAL_RCC_ClockConfig+0x260>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f023 0203 	bic.w	r2, r3, #3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	491a      	ldr	r1, [pc, #104]	@ (8003a54 <HAL_RCC_ClockConfig+0x260>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039f0:	f7fd fe96 	bl	8001720 <HAL_GetTick>
 80039f4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f6:	e00a      	b.n	8003a0e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f8:	f7fd fe92 	bl	8001720 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e061      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0e:	4b11      	ldr	r3, [pc, #68]	@ (8003a54 <HAL_RCC_ClockConfig+0x260>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f003 020c 	and.w	r2, r3, #12
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d1eb      	bne.n	80039f8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a20:	4b0b      	ldr	r3, [pc, #44]	@ (8003a50 <HAL_RCC_ClockConfig+0x25c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d214      	bcs.n	8003a58 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2e:	4b08      	ldr	r3, [pc, #32]	@ (8003a50 <HAL_RCC_ClockConfig+0x25c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f023 0207 	bic.w	r2, r3, #7
 8003a36:	4906      	ldr	r1, [pc, #24]	@ (8003a50 <HAL_RCC_ClockConfig+0x25c>)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3e:	4b04      	ldr	r3, [pc, #16]	@ (8003a50 <HAL_RCC_ClockConfig+0x25c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e040      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x2de>
 8003a50:	40022000 	.word	0x40022000
 8003a54:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a64:	4b1d      	ldr	r3, [pc, #116]	@ (8003adc <HAL_RCC_ClockConfig+0x2e8>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	491a      	ldr	r1, [pc, #104]	@ (8003adc <HAL_RCC_ClockConfig+0x2e8>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d009      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a82:	4b16      	ldr	r3, [pc, #88]	@ (8003adc <HAL_RCC_ClockConfig+0x2e8>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	4912      	ldr	r1, [pc, #72]	@ (8003adc <HAL_RCC_ClockConfig+0x2e8>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a96:	f000 f829 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 8003a9a:	4601      	mov	r1, r0
 8003a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003adc <HAL_RCC_ClockConfig+0x2e8>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003aa4:	22f0      	movs	r2, #240	@ 0xf0
 8003aa6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	fa92 f2a2 	rbit	r2, r2
 8003aae:	60fa      	str	r2, [r7, #12]
  return result;
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	fab2 f282 	clz	r2, r2
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	40d3      	lsrs	r3, r2
 8003aba:	4a09      	ldr	r2, [pc, #36]	@ (8003ae0 <HAL_RCC_ClockConfig+0x2ec>)
 8003abc:	5cd3      	ldrb	r3, [r2, r3]
 8003abe:	fa21 f303 	lsr.w	r3, r1, r3
 8003ac2:	4a08      	ldr	r2, [pc, #32]	@ (8003ae4 <HAL_RCC_ClockConfig+0x2f0>)
 8003ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ac6:	4b08      	ldr	r3, [pc, #32]	@ (8003ae8 <HAL_RCC_ClockConfig+0x2f4>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fd fde4 	bl	8001698 <HAL_InitTick>
  
  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3778      	adds	r7, #120	@ 0x78
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	0800c9e4 	.word	0x0800c9e4
 8003ae4:	20000000 	.word	0x20000000
 8003ae8:	20000004 	.word	0x20000004

08003aec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b08b      	sub	sp, #44	@ 0x2c
 8003af0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
 8003af6:	2300      	movs	r3, #0
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	2300      	movs	r3, #0
 8003afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003b06:	4b29      	ldr	r3, [pc, #164]	@ (8003bac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f003 030c 	and.w	r3, r3, #12
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d002      	beq.n	8003b1c <HAL_RCC_GetSysClockFreq+0x30>
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d003      	beq.n	8003b22 <HAL_RCC_GetSysClockFreq+0x36>
 8003b1a:	e03c      	b.n	8003b96 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b1c:	4b24      	ldr	r3, [pc, #144]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b1e:	623b      	str	r3, [r7, #32]
      break;
 8003b20:	e03c      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003b28:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8003b2c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	fa92 f2a2 	rbit	r2, r2
 8003b34:	607a      	str	r2, [r7, #4]
  return result;
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	fab2 f282 	clz	r2, r2
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	40d3      	lsrs	r3, r2
 8003b40:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b42:	5cd3      	ldrb	r3, [r2, r3]
 8003b44:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b46:	4b19      	ldr	r3, [pc, #100]	@ (8003bac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	220f      	movs	r2, #15
 8003b50:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	fa92 f2a2 	rbit	r2, r2
 8003b58:	60fa      	str	r2, [r7, #12]
  return result;
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	fab2 f282 	clz	r2, r2
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	40d3      	lsrs	r3, r2
 8003b64:	4a14      	ldr	r2, [pc, #80]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b66:	5cd3      	ldrb	r3, [r2, r3]
 8003b68:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b74:	4a0e      	ldr	r2, [pc, #56]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	fb02 f303 	mul.w	r3, r2, r3
 8003b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b84:	e004      	b.n	8003b90 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	4a0c      	ldr	r2, [pc, #48]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b8a:	fb02 f303 	mul.w	r3, r2, r3
 8003b8e:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b92:	623b      	str	r3, [r7, #32]
      break;
 8003b94:	e002      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b96:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b98:	623b      	str	r3, [r7, #32]
      break;
 8003b9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	372c      	adds	r7, #44	@ 0x2c
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	01e84800 	.word	0x01e84800
 8003bb4:	0800c9fc 	.word	0x0800c9fc
 8003bb8:	0800ca0c 	.word	0x0800ca0c
 8003bbc:	003d0900 	.word	0x003d0900
 8003bc0:	007a1200 	.word	0x007a1200

08003bc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc8:	4b03      	ldr	r3, [pc, #12]	@ (8003bd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bca:	681b      	ldr	r3, [r3, #0]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	20000000 	.word	0x20000000

08003bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003be2:	f7ff ffef 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8003be6:	4601      	mov	r1, r0
 8003be8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c18 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003bf0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003bf4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	fa92 f2a2 	rbit	r2, r2
 8003bfc:	603a      	str	r2, [r7, #0]
  return result;
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	fab2 f282 	clz	r2, r2
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	40d3      	lsrs	r3, r2
 8003c08:	4a04      	ldr	r2, [pc, #16]	@ (8003c1c <HAL_RCC_GetPCLK1Freq+0x40>)
 8003c0a:	5cd3      	ldrb	r3, [r2, r3]
 8003c0c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003c10:	4618      	mov	r0, r3
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	0800c9f4 	.word	0x0800c9f4

08003c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003c26:	f7ff ffcd 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8003c2a:	4601      	mov	r1, r0
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c5c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003c34:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003c38:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	fa92 f2a2 	rbit	r2, r2
 8003c40:	603a      	str	r2, [r7, #0]
  return result;
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	fab2 f282 	clz	r2, r2
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	40d3      	lsrs	r3, r2
 8003c4c:	4a04      	ldr	r2, [pc, #16]	@ (8003c60 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003c4e:	5cd3      	ldrb	r3, [r2, r3]
 8003c50:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003c54:	4618      	mov	r0, r3
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	0800c9f4 	.word	0x0800c9f4

08003c64 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b092      	sub	sp, #72	@ 0x48
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003c74:	2300      	movs	r3, #0
 8003c76:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 80cd 	beq.w	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c88:	4b86      	ldr	r3, [pc, #536]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10e      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c94:	4b83      	ldr	r3, [pc, #524]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	4a82      	ldr	r2, [pc, #520]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c9e:	61d3      	str	r3, [r2, #28]
 8003ca0:	4b80      	ldr	r3, [pc, #512]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cac:	2301      	movs	r3, #1
 8003cae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb2:	4b7d      	ldr	r3, [pc, #500]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d118      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cbe:	4b7a      	ldr	r3, [pc, #488]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a79      	ldr	r2, [pc, #484]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003cc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cc8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cca:	f7fd fd29 	bl	8001720 <HAL_GetTick>
 8003cce:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd2:	f7fd fd25 	bl	8001720 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b64      	cmp	r3, #100	@ 0x64
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e0db      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce4:	4b70      	ldr	r3, [pc, #448]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cf0:	4b6c      	ldr	r3, [pc, #432]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d07d      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d076      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d0e:	4b65      	ldr	r3, [pc, #404]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d1c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d20:	fa93 f3a3 	rbit	r3, r3
 8003d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d28:	fab3 f383 	clz	r3, r3
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	461a      	mov	r2, r3
 8003d30:	4b5e      	ldr	r3, [pc, #376]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d32:	4413      	add	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	461a      	mov	r2, r3
 8003d38:	2301      	movs	r3, #1
 8003d3a:	6013      	str	r3, [r2, #0]
 8003d3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d44:	fa93 f3a3 	rbit	r3, r3
 8003d48:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d4c:	fab3 f383 	clz	r3, r3
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	461a      	mov	r2, r3
 8003d54:	4b55      	ldr	r3, [pc, #340]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d56:	4413      	add	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d60:	4a50      	ldr	r2, [pc, #320]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d64:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d045      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d70:	f7fd fcd6 	bl	8001720 <HAL_GetTick>
 8003d74:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d76:	e00a      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d78:	f7fd fcd2 	bl	8001720 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e086      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d94:	fa93 f3a3 	rbit	r3, r3
 8003d98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	623b      	str	r3, [r7, #32]
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	fa93 f3a3 	rbit	r3, r3
 8003da4:	61fb      	str	r3, [r7, #28]
  return result;
 8003da6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da8:	fab3 f383 	clz	r3, r3
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	f043 0302 	orr.w	r3, r3, #2
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d102      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003dbc:	4b39      	ldr	r3, [pc, #228]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	e007      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	fa93 f3a3 	rbit	r3, r3
 8003dcc:	617b      	str	r3, [r7, #20]
 8003dce:	4b35      	ldr	r3, [pc, #212]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	613a      	str	r2, [r7, #16]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	fa92 f2a2 	rbit	r2, r2
 8003ddc:	60fa      	str	r2, [r7, #12]
  return result;
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	fab2 f282 	clz	r2, r2
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	f002 021f 	and.w	r2, r2, #31
 8003df0:	2101      	movs	r1, #1
 8003df2:	fa01 f202 	lsl.w	r2, r1, r2
 8003df6:	4013      	ands	r3, r2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0bd      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003dfc:	4b29      	ldr	r3, [pc, #164]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	4926      	ldr	r1, [pc, #152]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e0e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d105      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e16:	4b23      	ldr	r3, [pc, #140]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	4a22      	ldr	r2, [pc, #136]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e20:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e32:	f023 0203 	bic.w	r2, r3, #3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	491a      	ldr	r1, [pc, #104]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0320 	and.w	r3, r3, #32
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d008      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e4c:	4b15      	ldr	r3, [pc, #84]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e50:	f023 0210 	bic.w	r2, r3, #16
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	4912      	ldr	r1, [pc, #72]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d008      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	490b      	ldr	r1, [pc, #44]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d008      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e88:	4b06      	ldr	r3, [pc, #24]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	4903      	ldr	r1, [pc, #12]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3748      	adds	r7, #72	@ 0x48
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	40007000 	.word	0x40007000
 8003eac:	10908100 	.word	0x10908100

08003eb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e040      	b.n	8003f44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fd fa70 	bl	80013b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2224      	movs	r2, #36	@ 0x24
 8003edc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0201 	bic.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f8b6 	bl	8004060 <UART_SetConfig>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e022      	b.n	8003f44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f9e0 	bl	80042cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0201 	orr.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 fa67 	bl	8004410 <UART_CheckIdleState>
 8003f42:	4603      	mov	r3, r0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08a      	sub	sp, #40	@ 0x28
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d177      	bne.n	8004054 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <HAL_UART_Transmit+0x24>
 8003f6a:	88fb      	ldrh	r3, [r7, #6]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e070      	b.n	8004056 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2221      	movs	r2, #33	@ 0x21
 8003f80:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f82:	f7fd fbcd 	bl	8001720 <HAL_GetTick>
 8003f86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	88fa      	ldrh	r2, [r7, #6]
 8003f8c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	88fa      	ldrh	r2, [r7, #6]
 8003f94:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fa0:	d108      	bne.n	8003fb4 <HAL_UART_Transmit+0x68>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d104      	bne.n	8003fb4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	61bb      	str	r3, [r7, #24]
 8003fb2:	e003      	b.n	8003fbc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fbc:	e02f      	b.n	800401e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2180      	movs	r1, #128	@ 0x80
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 fac9 	bl	8004560 <UART_WaitOnFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d004      	beq.n	8003fde <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e03b      	b.n	8004056 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10b      	bne.n	8003ffc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	881a      	ldrh	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ff0:	b292      	uxth	r2, r2
 8003ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	3302      	adds	r3, #2
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	e007      	b.n	800400c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	781a      	ldrb	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	3301      	adds	r3, #1
 800400a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004012:	b29b      	uxth	r3, r3
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1c9      	bne.n	8003fbe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2200      	movs	r2, #0
 8004032:	2140      	movs	r1, #64	@ 0x40
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 fa93 	bl	8004560 <UART_WaitOnFlagUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d004      	beq.n	800404a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2220      	movs	r2, #32
 8004044:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e005      	b.n	8004056 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2220      	movs	r2, #32
 800404e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	e000      	b.n	8004056 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004054:	2302      	movs	r3, #2
  }
}
 8004056:	4618      	mov	r0, r3
 8004058:	3720      	adds	r7, #32
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	431a      	orrs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4b8a      	ldr	r3, [pc, #552]	@ (80042b4 <UART_SetConfig+0x254>)
 800408c:	4013      	ands	r3, r2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6812      	ldr	r2, [r2, #0]
 8004092:	6979      	ldr	r1, [r7, #20]
 8004094:	430b      	orrs	r3, r1
 8004096:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a78      	ldr	r2, [pc, #480]	@ (80042b8 <UART_SetConfig+0x258>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d120      	bne.n	800411e <UART_SetConfig+0xbe>
 80040dc:	4b77      	ldr	r3, [pc, #476]	@ (80042bc <UART_SetConfig+0x25c>)
 80040de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d817      	bhi.n	8004118 <UART_SetConfig+0xb8>
 80040e8:	a201      	add	r2, pc, #4	@ (adr r2, 80040f0 <UART_SetConfig+0x90>)
 80040ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ee:	bf00      	nop
 80040f0:	08004101 	.word	0x08004101
 80040f4:	0800410d 	.word	0x0800410d
 80040f8:	08004113 	.word	0x08004113
 80040fc:	08004107 	.word	0x08004107
 8004100:	2300      	movs	r3, #0
 8004102:	77fb      	strb	r3, [r7, #31]
 8004104:	e01d      	b.n	8004142 <UART_SetConfig+0xe2>
 8004106:	2302      	movs	r3, #2
 8004108:	77fb      	strb	r3, [r7, #31]
 800410a:	e01a      	b.n	8004142 <UART_SetConfig+0xe2>
 800410c:	2304      	movs	r3, #4
 800410e:	77fb      	strb	r3, [r7, #31]
 8004110:	e017      	b.n	8004142 <UART_SetConfig+0xe2>
 8004112:	2308      	movs	r3, #8
 8004114:	77fb      	strb	r3, [r7, #31]
 8004116:	e014      	b.n	8004142 <UART_SetConfig+0xe2>
 8004118:	2310      	movs	r3, #16
 800411a:	77fb      	strb	r3, [r7, #31]
 800411c:	e011      	b.n	8004142 <UART_SetConfig+0xe2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a67      	ldr	r2, [pc, #412]	@ (80042c0 <UART_SetConfig+0x260>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d102      	bne.n	800412e <UART_SetConfig+0xce>
 8004128:	2300      	movs	r3, #0
 800412a:	77fb      	strb	r3, [r7, #31]
 800412c:	e009      	b.n	8004142 <UART_SetConfig+0xe2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a64      	ldr	r2, [pc, #400]	@ (80042c4 <UART_SetConfig+0x264>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d102      	bne.n	800413e <UART_SetConfig+0xde>
 8004138:	2300      	movs	r3, #0
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	e001      	b.n	8004142 <UART_SetConfig+0xe2>
 800413e:	2310      	movs	r3, #16
 8004140:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800414a:	d15a      	bne.n	8004202 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800414c:	7ffb      	ldrb	r3, [r7, #31]
 800414e:	2b08      	cmp	r3, #8
 8004150:	d827      	bhi.n	80041a2 <UART_SetConfig+0x142>
 8004152:	a201      	add	r2, pc, #4	@ (adr r2, 8004158 <UART_SetConfig+0xf8>)
 8004154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004158:	0800417d 	.word	0x0800417d
 800415c:	08004185 	.word	0x08004185
 8004160:	0800418d 	.word	0x0800418d
 8004164:	080041a3 	.word	0x080041a3
 8004168:	08004193 	.word	0x08004193
 800416c:	080041a3 	.word	0x080041a3
 8004170:	080041a3 	.word	0x080041a3
 8004174:	080041a3 	.word	0x080041a3
 8004178:	0800419b 	.word	0x0800419b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800417c:	f7ff fd2e 	bl	8003bdc <HAL_RCC_GetPCLK1Freq>
 8004180:	61b8      	str	r0, [r7, #24]
        break;
 8004182:	e013      	b.n	80041ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004184:	f7ff fd4c 	bl	8003c20 <HAL_RCC_GetPCLK2Freq>
 8004188:	61b8      	str	r0, [r7, #24]
        break;
 800418a:	e00f      	b.n	80041ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800418c:	4b4e      	ldr	r3, [pc, #312]	@ (80042c8 <UART_SetConfig+0x268>)
 800418e:	61bb      	str	r3, [r7, #24]
        break;
 8004190:	e00c      	b.n	80041ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004192:	f7ff fcab 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 8004196:	61b8      	str	r0, [r7, #24]
        break;
 8004198:	e008      	b.n	80041ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800419a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800419e:	61bb      	str	r3, [r7, #24]
        break;
 80041a0:	e004      	b.n	80041ac <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	77bb      	strb	r3, [r7, #30]
        break;
 80041aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d074      	beq.n	800429c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	005a      	lsls	r2, r3, #1
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	085b      	lsrs	r3, r3, #1
 80041bc:	441a      	add	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	2b0f      	cmp	r3, #15
 80041cc:	d916      	bls.n	80041fc <UART_SetConfig+0x19c>
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041d4:	d212      	bcs.n	80041fc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	b29b      	uxth	r3, r3
 80041da:	f023 030f 	bic.w	r3, r3, #15
 80041de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	085b      	lsrs	r3, r3, #1
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	89fb      	ldrh	r3, [r7, #14]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	89fa      	ldrh	r2, [r7, #14]
 80041f8:	60da      	str	r2, [r3, #12]
 80041fa:	e04f      	b.n	800429c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	77bb      	strb	r3, [r7, #30]
 8004200:	e04c      	b.n	800429c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004202:	7ffb      	ldrb	r3, [r7, #31]
 8004204:	2b08      	cmp	r3, #8
 8004206:	d828      	bhi.n	800425a <UART_SetConfig+0x1fa>
 8004208:	a201      	add	r2, pc, #4	@ (adr r2, 8004210 <UART_SetConfig+0x1b0>)
 800420a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420e:	bf00      	nop
 8004210:	08004235 	.word	0x08004235
 8004214:	0800423d 	.word	0x0800423d
 8004218:	08004245 	.word	0x08004245
 800421c:	0800425b 	.word	0x0800425b
 8004220:	0800424b 	.word	0x0800424b
 8004224:	0800425b 	.word	0x0800425b
 8004228:	0800425b 	.word	0x0800425b
 800422c:	0800425b 	.word	0x0800425b
 8004230:	08004253 	.word	0x08004253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004234:	f7ff fcd2 	bl	8003bdc <HAL_RCC_GetPCLK1Freq>
 8004238:	61b8      	str	r0, [r7, #24]
        break;
 800423a:	e013      	b.n	8004264 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800423c:	f7ff fcf0 	bl	8003c20 <HAL_RCC_GetPCLK2Freq>
 8004240:	61b8      	str	r0, [r7, #24]
        break;
 8004242:	e00f      	b.n	8004264 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004244:	4b20      	ldr	r3, [pc, #128]	@ (80042c8 <UART_SetConfig+0x268>)
 8004246:	61bb      	str	r3, [r7, #24]
        break;
 8004248:	e00c      	b.n	8004264 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800424a:	f7ff fc4f 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 800424e:	61b8      	str	r0, [r7, #24]
        break;
 8004250:	e008      	b.n	8004264 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004256:	61bb      	str	r3, [r7, #24]
        break;
 8004258:	e004      	b.n	8004264 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800425a:	2300      	movs	r3, #0
 800425c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	77bb      	strb	r3, [r7, #30]
        break;
 8004262:	bf00      	nop
    }

    if (pclk != 0U)
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d018      	beq.n	800429c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	085a      	lsrs	r2, r3, #1
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	441a      	add	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	fbb2 f3f3 	udiv	r3, r2, r3
 800427c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	2b0f      	cmp	r3, #15
 8004282:	d909      	bls.n	8004298 <UART_SetConfig+0x238>
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800428a:	d205      	bcs.n	8004298 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	b29a      	uxth	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60da      	str	r2, [r3, #12]
 8004296:	e001      	b.n	800429c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80042a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3720      	adds	r7, #32
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	efff69f3 	.word	0xefff69f3
 80042b8:	40013800 	.word	0x40013800
 80042bc:	40021000 	.word	0x40021000
 80042c0:	40004400 	.word	0x40004400
 80042c4:	40004800 	.word	0x40004800
 80042c8:	007a1200 	.word	0x007a1200

080042cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00a      	beq.n	80042f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00a      	beq.n	800433a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d01a      	beq.n	80043e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043ca:	d10a      	bne.n	80043e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	605a      	str	r2, [r3, #4]
  }
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b098      	sub	sp, #96	@ 0x60
 8004414:	af02      	add	r7, sp, #8
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004420:	f7fd f97e 	bl	8001720 <HAL_GetTick>
 8004424:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0308 	and.w	r3, r3, #8
 8004430:	2b08      	cmp	r3, #8
 8004432:	d12e      	bne.n	8004492 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004434:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800443c:	2200      	movs	r2, #0
 800443e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f88c 	bl	8004560 <UART_WaitOnFlagUntilTimeout>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d021      	beq.n	8004492 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004456:	e853 3f00 	ldrex	r3, [r3]
 800445a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800445c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800445e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004462:	653b      	str	r3, [r7, #80]	@ 0x50
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800446c:	647b      	str	r3, [r7, #68]	@ 0x44
 800446e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004470:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004472:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004474:	e841 2300 	strex	r3, r2, [r1]
 8004478:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800447a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1e6      	bne.n	800444e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2220      	movs	r2, #32
 8004484:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e062      	b.n	8004558 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b04      	cmp	r3, #4
 800449e:	d149      	bne.n	8004534 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044a8:	2200      	movs	r2, #0
 80044aa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f856 	bl	8004560 <UART_WaitOnFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d03c      	beq.n	8004534 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	623b      	str	r3, [r7, #32]
   return(result);
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80044da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e6      	bne.n	80044ba <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3308      	adds	r3, #8
 80044f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	e853 3f00 	ldrex	r3, [r3]
 80044fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3308      	adds	r3, #8
 800450a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800450c:	61fa      	str	r2, [r7, #28]
 800450e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004510:	69b9      	ldr	r1, [r7, #24]
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	e841 2300 	strex	r3, r2, [r1]
 8004518:	617b      	str	r3, [r7, #20]
   return(result);
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e5      	bne.n	80044ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2220      	movs	r2, #32
 8004524:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e011      	b.n	8004558 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2220      	movs	r2, #32
 8004538:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2220      	movs	r2, #32
 800453e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3758      	adds	r7, #88	@ 0x58
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	603b      	str	r3, [r7, #0]
 800456c:	4613      	mov	r3, r2
 800456e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004570:	e049      	b.n	8004606 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004578:	d045      	beq.n	8004606 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457a:	f7fd f8d1 	bl	8001720 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	429a      	cmp	r2, r3
 8004588:	d302      	bcc.n	8004590 <UART_WaitOnFlagUntilTimeout+0x30>
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e048      	b.n	8004626 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d031      	beq.n	8004606 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d110      	bne.n	80045d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2208      	movs	r2, #8
 80045b6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 f838 	bl	800462e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2208      	movs	r2, #8
 80045c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e029      	b.n	8004626 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045e0:	d111      	bne.n	8004606 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f81e 	bl	800462e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2220      	movs	r2, #32
 80045f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e00f      	b.n	8004626 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69da      	ldr	r2, [r3, #28]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	4013      	ands	r3, r2
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	429a      	cmp	r2, r3
 8004614:	bf0c      	ite	eq
 8004616:	2301      	moveq	r3, #1
 8004618:	2300      	movne	r3, #0
 800461a:	b2db      	uxtb	r3, r3
 800461c:	461a      	mov	r2, r3
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	429a      	cmp	r2, r3
 8004622:	d0a6      	beq.n	8004572 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800462e:	b480      	push	{r7}
 8004630:	b095      	sub	sp, #84	@ 0x54
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800463e:	e853 3f00 	ldrex	r3, [r3]
 8004642:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004646:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800464a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	461a      	mov	r2, r3
 8004652:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004654:	643b      	str	r3, [r7, #64]	@ 0x40
 8004656:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004658:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800465a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800465c:	e841 2300 	strex	r3, r2, [r1]
 8004660:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1e6      	bne.n	8004636 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3308      	adds	r3, #8
 800466e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	61fb      	str	r3, [r7, #28]
   return(result);
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f023 0301 	bic.w	r3, r3, #1
 800467e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3308      	adds	r3, #8
 8004686:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004688:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800468a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800468e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e5      	bne.n	8004668 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d118      	bne.n	80046d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f023 0310 	bic.w	r3, r3, #16
 80046b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046c2:	61bb      	str	r3, [r7, #24]
 80046c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c6:	6979      	ldr	r1, [r7, #20]
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	e841 2300 	strex	r3, r2, [r1]
 80046ce:	613b      	str	r3, [r7, #16]
   return(result);
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1e6      	bne.n	80046a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2220      	movs	r2, #32
 80046da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80046ea:	bf00      	nop
 80046ec:	3754      	adds	r7, #84	@ 0x54
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <CheckValidRectRoi>:
 *   0------------------------- >15
 *   check Rectangle definition conforms to the (0,15,15) coordinate system
 *   with a minimum of 4x4 size
 */
static VL53L1_Error CheckValidRectRoi(VL53L1_UserRoi_t ROI)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b085      	sub	sp, #20
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80046fe:	2300      	movs	r3, #0
 8004700:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Negative check are not necessary because value is unsigned */
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8004702:	793b      	ldrb	r3, [r7, #4]
 8004704:	2b0f      	cmp	r3, #15
 8004706:	d808      	bhi.n	800471a <CheckValidRectRoi+0x24>
 8004708:	797b      	ldrb	r3, [r7, #5]
 800470a:	2b0f      	cmp	r3, #15
 800470c:	d805      	bhi.n	800471a <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 800470e:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8004710:	2b0f      	cmp	r3, #15
 8004712:	d802      	bhi.n	800471a <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	2b0f      	cmp	r3, #15
 8004718:	d901      	bls.n	800471e <CheckValidRectRoi+0x28>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800471a:	23fc      	movs	r3, #252	@ 0xfc
 800471c:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 800471e:	793a      	ldrb	r2, [r7, #4]
 8004720:	79bb      	ldrb	r3, [r7, #6]
 8004722:	429a      	cmp	r2, r3
 8004724:	d803      	bhi.n	800472e <CheckValidRectRoi+0x38>
 8004726:	797a      	ldrb	r2, [r7, #5]
 8004728:	79fb      	ldrb	r3, [r7, #7]
 800472a:	429a      	cmp	r2, r3
 800472c:	d201      	bcs.n	8004732 <CheckValidRectRoi+0x3c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800472e:	23fc      	movs	r3, #252	@ 0xfc
 8004730:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004732:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800474a:	2300      	movs	r3, #0
 800474c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* 2V8 power mode selection codex 447463 */
#ifdef USE_I2C_2V8
	Status = VL53L1_RdByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG, &i);
 800474e:	f107 030e 	add.w	r3, r7, #14
 8004752:	461a      	mov	r2, r3
 8004754:	212e      	movs	r1, #46	@ 0x2e
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f005 fa54 	bl	8009c04 <VL53L1_RdByte>
 800475c:	4603      	mov	r3, r0
 800475e:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L1_ERROR_NONE) {
 8004760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10c      	bne.n	8004782 <VL53L1_DataInit+0x40>
		i = (i & 0xfe) | 0x01;
 8004768:	7bbb      	ldrb	r3, [r7, #14]
 800476a:	f043 0301 	orr.w	r3, r3, #1
 800476e:	b2db      	uxtb	r3, r3
 8004770:	73bb      	strb	r3, [r7, #14]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
 8004772:	7bbb      	ldrb	r3, [r7, #14]
 8004774:	461a      	mov	r2, r3
 8004776:	212e      	movs	r1, #46	@ 0x2e
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f005 fa19 	bl	8009bb0 <VL53L1_WrByte>
 800477e:	4603      	mov	r3, r0
 8004780:	73fb      	strb	r3, [r7, #15]
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8004782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d105      	bne.n	8004796 <VL53L1_DataInit+0x54>
		Status = VL53L1_data_init(Dev, 1);
 800478a:	2101      	movs	r1, #1
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f001 f8ad 	bl	80058ec <VL53L1_data_init>
 8004792:	4603      	mov	r3, r0
 8004794:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L1_ERROR_NONE)
 8004796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d103      	bne.n	80047a6 <VL53L1_DataInit+0x64>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80047a6:	2300      	movs	r3, #0
 80047a8:	73bb      	strb	r3, [r7, #14]
 80047aa:	e012      	b.n	80047d2 <VL53L1_DataInit+0x90>
		if (Status == VL53L1_ERROR_NONE)
 80047ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d112      	bne.n	80047da <VL53L1_DataInit+0x98>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 80047b4:	7bbb      	ldrb	r3, [r7, #14]
 80047b6:	2201      	movs	r2, #1
 80047b8:	4619      	mov	r1, r3
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fbcf 	bl	8004f5e <VL53L1_SetLimitCheckEnable>
 80047c0:	4603      	mov	r3, r0
 80047c2:	461a      	mov	r2, r3
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80047ca:	7bbb      	ldrb	r3, [r7, #14]
 80047cc:	3301      	adds	r3, #1
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	73bb      	strb	r3, [r7, #14]
 80047d2:	7bbb      	ldrb	r3, [r7, #14]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d9e9      	bls.n	80047ac <VL53L1_DataInit+0x6a>
 80047d8:	e000      	b.n	80047dc <VL53L1_DataInit+0x9a>
		else
			break;
 80047da:	bf00      	nop

	}


	LOG_FUNCTION_END(Status);
	return Status;
 80047dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80047f0:	2300      	movs	r3, #0
 80047f2:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2203      	movs	r2, #3
 80047f8:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80047fc:	2320      	movs	r3, #32
 80047fe:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	7bba      	ldrb	r2, [r7, #14]
 8004804:	709a      	strb	r2, [r3, #2]

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 8004806:	2108      	movs	r1, #8
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f8f6 	bl	80049fa <VL53L1_SetPresetMode>
 800480e:	4603      	mov	r3, r0
 8004810:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2208      	movs	r2, #8
 8004816:	f883 237c 	strb.w	r2, [r3, #892]	@ 0x37c
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */

	LOG_FUNCTION_END(Status);
	return Status;
 800481a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b084      	sub	sp, #16
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800482e:	2300      	movs	r3, #0
 8004830:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8004832:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f005 f8b3 	bl	80099a2 <VL53L1_poll_for_boot_completion>
 800483c:	4603      	mov	r3, r0
 800483e:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8004840:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 800484c:	b480      	push	{r7}
 800484e:	b087      	sub	sp, #28
 8004850:	af00      	add	r7, sp, #0
 8004852:	4603      	mov	r3, r0
 8004854:	603a      	str	r2, [r7, #0]
 8004856:	71fb      	strb	r3, [r7, #7]
 8004858:	460b      	mov	r3, r1
 800485a:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800485c:	2300      	movs	r3, #0
 800485e:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8004860:	4a2b      	ldr	r2, [pc, #172]	@ (8004910 <ComputeDevicePresetMode+0xc4>)
 8004862:	f107 0310 	add.w	r3, r7, #16
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	4611      	mov	r1, r2
 800486a:	8019      	strh	r1, [r3, #0]
 800486c:	3302      	adds	r3, #2
 800486e:	0c12      	lsrs	r2, r2, #16
 8004870:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 8004872:	4a28      	ldr	r2, [pc, #160]	@ (8004914 <ComputeDevicePresetMode+0xc8>)
 8004874:	f107 030c 	add.w	r3, r7, #12
 8004878:	6812      	ldr	r2, [r2, #0]
 800487a:	4611      	mov	r1, r2
 800487c:	8019      	strh	r1, [r3, #0]
 800487e:	3302      	adds	r3, #2
 8004880:	0c12      	lsrs	r2, r2, #16
 8004882:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8004884:	4a24      	ldr	r2, [pc, #144]	@ (8004918 <ComputeDevicePresetMode+0xcc>)
 8004886:	f107 0308 	add.w	r3, r7, #8
 800488a:	6812      	ldr	r2, [r2, #0]
 800488c:	4611      	mov	r1, r2
 800488e:	8019      	strh	r1, [r3, #0]
 8004890:	3302      	adds	r3, #2
 8004892:	0c12      	lsrs	r2, r2, #16
 8004894:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2201      	movs	r2, #1
 800489a:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 800489c:	79bb      	ldrb	r3, [r7, #6]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d002      	beq.n	80048a8 <ComputeDevicePresetMode+0x5c>
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d003      	beq.n	80048ae <ComputeDevicePresetMode+0x62>
 80048a6:	e005      	b.n	80048b4 <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 80048a8:	2300      	movs	r3, #0
 80048aa:	75bb      	strb	r3, [r7, #22]
		break;
 80048ac:	e004      	b.n	80048b8 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 80048ae:	2301      	movs	r3, #1
 80048b0:	75bb      	strb	r3, [r7, #22]
		break;
 80048b2:	e001      	b.n	80048b8 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 80048b4:	2302      	movs	r3, #2
 80048b6:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 80048b8:	79fb      	ldrb	r3, [r7, #7]
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d015      	beq.n	80048ea <ComputeDevicePresetMode+0x9e>
 80048be:	2b08      	cmp	r3, #8
 80048c0:	dc1b      	bgt.n	80048fa <ComputeDevicePresetMode+0xae>
 80048c2:	2b03      	cmp	r3, #3
 80048c4:	d009      	beq.n	80048da <ComputeDevicePresetMode+0x8e>
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d117      	bne.n	80048fa <ComputeDevicePresetMode+0xae>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 80048ca:	7dbb      	ldrb	r3, [r7, #22]
 80048cc:	3318      	adds	r3, #24
 80048ce:	443b      	add	r3, r7
 80048d0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	701a      	strb	r2, [r3, #0]
		break;
 80048d8:	e011      	b.n	80048fe <ComputeDevicePresetMode+0xb2>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 80048da:	7dbb      	ldrb	r3, [r7, #22]
 80048dc:	3318      	adds	r3, #24
 80048de:	443b      	add	r3, r7
 80048e0:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	701a      	strb	r2, [r3, #0]
		break;
 80048e8:	e009      	b.n	80048fe <ComputeDevicePresetMode+0xb2>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 80048ea:	7dbb      	ldrb	r3, [r7, #22]
 80048ec:	3318      	adds	r3, #24
 80048ee:	443b      	add	r3, r7
 80048f0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	701a      	strb	r2, [r3, #0]
		break;
 80048f8:	e001      	b.n	80048fe <ComputeDevicePresetMode+0xb2>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80048fa:	23f8      	movs	r3, #248	@ 0xf8
 80048fc:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 80048fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004902:	4618      	mov	r0, r3
 8004904:	371c      	adds	r7, #28
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	0800c9d4 	.word	0x0800c9d4
 8004914:	0800c9d8 	.word	0x0800c9d8
 8004918:	0800c9dc 	.word	0x0800c9dc

0800491c <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 800491c:	b5b0      	push	{r4, r5, r7, lr}
 800491e:	b08e      	sub	sp, #56	@ 0x38
 8004920:	af04      	add	r7, sp, #16
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	607b      	str	r3, [r7, #4]
 8004926:	460b      	mov	r3, r1
 8004928:	72fb      	strb	r3, [r7, #11]
 800492a:	4613      	mov	r3, r2
 800492c:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800492e:	2300      	movs	r3, #0
 8004930:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8004938:	2300      	movs	r3, #0
 800493a:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 800493c:	2300      	movs	r3, #0
 800493e:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8004944:	7afb      	ldrb	r3, [r7, #11]
 8004946:	2b03      	cmp	r3, #3
 8004948:	d002      	beq.n	8004950 <SetPresetMode+0x34>
 800494a:	7afb      	ldrb	r3, [r7, #11]
 800494c:	2b08      	cmp	r3, #8
 800494e:	d103      	bne.n	8004958 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8004950:	2340      	movs	r3, #64	@ 0x40
 8004952:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004956:	e002      	b.n	800495e <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8004958:	2320      	movs	r3, #32
 800495a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 800495e:	f107 0225 	add.w	r2, r7, #37	@ 0x25
 8004962:	7ab9      	ldrb	r1, [r7, #10]
 8004964:	7afb      	ldrb	r3, [r7, #11]
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff ff70 	bl	800484c <ComputeDevicePresetMode>
 800496c:	4603      	mov	r3, r0
 800496e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8004972:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004976:	2b00      	cmp	r3, #0
 8004978:	d112      	bne.n	80049a0 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 800497a:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 800497e:	f107 001c 	add.w	r0, r7, #28
 8004982:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 8004986:	f107 0314 	add.w	r3, r7, #20
 800498a:	9301      	str	r3, [sp, #4]
 800498c:	f107 0318 	add.w	r3, r7, #24
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	4603      	mov	r3, r0
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f001 fa67 	bl	8005e68 <VL53L1_get_preset_mode_timing_cfg>
 800499a:	4603      	mov	r3, r0
 800499c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 80049a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d112      	bne.n	80049ce <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 80049a8:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
 80049ac:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 80049ae:	69fd      	ldr	r5, [r7, #28]
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	9102      	str	r1, [sp, #8]
 80049b8:	9201      	str	r2, [sp, #4]
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	462b      	mov	r3, r5
 80049be:	4622      	mov	r2, r4
 80049c0:	4601      	mov	r1, r0
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f001 fafa 	bl	8005fbc <VL53L1_set_preset_mode>
 80049c8:	4603      	mov	r3, r0
 80049ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 80049ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d103      	bne.n	80049de <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80049dc:	709a      	strb	r2, [r3, #2]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 80049de:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d103      	bne.n	80049ee <SetPresetMode+0xd2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	7afa      	ldrb	r2, [r7, #11]
 80049ea:	f883 237c 	strb.w	r2, [r3, #892]	@ 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 80049ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3728      	adds	r7, #40	@ 0x28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bdb0      	pop	{r4, r5, r7, pc}

080049fa <VL53L1_SetPresetMode>:
	return Status;
}


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	460b      	mov	r3, r1
 8004a04:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004a06:	2300      	movs	r3, #0
 8004a08:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	/* fix for bug 495690 */
	Status = VL53L1_low_power_auto_data_init(Dev);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f003 fe02 	bl	8008618 <VL53L1_low_power_auto_data_init>
 8004a14:	4603      	mov	r3, r0
 8004a16:	73fb      	strb	r3, [r7, #15]

	Status = SetPresetMode(Dev,
 8004a18:	7bba      	ldrb	r2, [r7, #14]
 8004a1a:	78f9      	ldrb	r1, [r7, #3]
 8004a1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff ff7b 	bl	800491c <SetPresetMode>
 8004a26:	4603      	mov	r3, r0
 8004a28:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8004a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d117      	bne.n	8004a62 <VL53L1_SetPresetMode+0x68>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8004a32:	78fb      	ldrb	r3, [r7, #3]
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d005      	beq.n	8004a44 <VL53L1_SetPresetMode+0x4a>
 8004a38:	78fb      	ldrb	r3, [r7, #3]
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	d002      	beq.n	8004a44 <VL53L1_SetPresetMode+0x4a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8004a3e:	78fb      	ldrb	r3, [r7, #3]
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d107      	bne.n	8004a54 <VL53L1_SetPresetMode+0x5a>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8004a44:	f24a 0128 	movw	r1, #41000	@ 0xa028
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f891 	bl	8004b70 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	73fb      	strb	r3, [r7, #15]
 8004a52:	e006      	b.n	8004a62 <VL53L1_SetPresetMode+0x68>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8004a54:	f248 2135 	movw	r1, #33333	@ 0x8235
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f889 	bl	8004b70 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8004a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d106      	bne.n	8004a78 <VL53L1_SetPresetMode+0x7e>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8004a6a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fa08 	bl	8004e84 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8004a74:	4603      	mov	r3, r0
 8004a76:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004a90:	2300      	movs	r3, #0
 8004a92:	77fb      	strb	r3, [r7, #31]
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8004a94:	2300      	movs	r3, #0
 8004a96:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60fb      	str	r3, [r7, #12]
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 8004aa6:	77bb      	strb	r3, [r7, #30]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d008      	beq.n	8004ac0 <VL53L1_SetDistanceMode+0x3c>
 8004aae:	78fb      	ldrb	r3, [r7, #3]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d005      	beq.n	8004ac0 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8004ab4:	78fb      	ldrb	r3, [r7, #3]
 8004ab6:	2b03      	cmp	r3, #3
 8004ab8:	d002      	beq.n	8004ac0 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 8004aba:	f06f 0303 	mvn.w	r3, #3
 8004abe:	e052      	b.n	8004b66 <VL53L1_SetDistanceMode+0xe2>

	if (Status == VL53L1_ERROR_NONE)
 8004ac0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d107      	bne.n	8004ad8 <VL53L1_SetDistanceMode+0x54>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 8004ac8:	f107 0308 	add.w	r3, r7, #8
 8004acc:	4619      	mov	r1, r3
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f001 f973 	bl	8005dba <VL53L1_get_user_zone>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8004ade:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10a      	bne.n	8004afc <VL53L1_SetDistanceMode+0x78>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8004ae6:	f107 0314 	add.w	r3, r7, #20
 8004aea:	f107 0210 	add.w	r2, r7, #16
 8004aee:	f107 010c 	add.w	r1, r7, #12
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f001 f89e 	bl	8005c34 <VL53L1_get_timeouts_us>
 8004af8:	4603      	mov	r3, r0
 8004afa:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8004afc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d107      	bne.n	8004b14 <VL53L1_SetDistanceMode+0x90>
		Status = SetPresetMode(Dev,
 8004b04:	78fa      	ldrb	r2, [r7, #3]
 8004b06:	7fb9      	ldrb	r1, [r7, #30]
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff ff06 	bl	800491c <SetPresetMode>
 8004b10:	4603      	mov	r3, r0
 8004b12:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 8004b14:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d103      	bne.n	8004b24 <VL53L1_SetDistanceMode+0xa0>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	78fa      	ldrb	r2, [r7, #3]
 8004b20:	f883 237d 	strb.w	r2, [r3, #893]	@ 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8004b24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10e      	bne.n	8004b4a <VL53L1_SetDistanceMode+0xc6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8004b2c:	68f9      	ldr	r1, [r7, #12]
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f001 f846 	bl	8005bc4 <VL53L1_set_timeouts_us>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8004b3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d102      	bne.n	8004b4a <VL53L1_SetDistanceMode+0xc6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8004b4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d107      	bne.n	8004b62 <VL53L1_SetDistanceMode+0xde>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8004b52:	f107 0308 	add.w	r3, r7, #8
 8004b56:	4619      	mov	r1, r3
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f001 f90b 	bl	8005d74 <VL53L1_set_user_zone>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 8004b62:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3720      	adds	r7, #32
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
	...

08004b70 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08c      	sub	sp, #48	@ 0x30
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t Mm1Enabled = 0;
 8004b80:	2300      	movs	r3, #0
 8004b82:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 8004b84:	2300      	movs	r3, #0
 8004b86:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 8004b90:	2300      	movs	r3, #0
 8004b92:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8004b94:	4b64      	ldr	r3, [pc, #400]	@ (8004d28 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>)
 8004b96:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	4a64      	ldr	r2, [pc, #400]	@ (8004d2c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1bc>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d902      	bls.n	8004ba6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004ba0:	23fc      	movs	r3, #252	@ 0xfc
 8004ba2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 8004ba6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d109      	bne.n	8004bc2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8004bae:	f107 031a 	add.w	r3, r7, #26
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	2105      	movs	r1, #5
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fade 	bl	8005178 <VL53L1_GetSequenceStepEnable>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8004bc2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d109      	bne.n	8004bde <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8004bca:	f107 0319 	add.w	r3, r7, #25
 8004bce:	461a      	mov	r2, r3
 8004bd0:	2106      	movs	r1, #6
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fad0 	bl	8005178 <VL53L1_GetSequenceStepEnable>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 8004bde:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10b      	bne.n	8004bfe <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 8004be6:	f107 0314 	add.w	r3, r7, #20
 8004bea:	f107 0210 	add.w	r2, r7, #16
 8004bee:	f107 010c 	add.w	r1, r7, #12
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f001 f81e 	bl	8005c34 <VL53L1_get_timeouts_us>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 8004bfe:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f040 8081 	bne.w	8004d0a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
		PresetMode = VL53L1DevDataGet(Dev,
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 8004c0e:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 8004c10:	2300      	movs	r3, #0
 8004c12:	62bb      	str	r3, [r7, #40]	@ 0x28
		divisor = 1;
 8004c14:	2301      	movs	r3, #1
 8004c16:	627b      	str	r3, [r7, #36]	@ 0x24
		switch (PresetMode) {
 8004c18:	7efb      	ldrb	r3, [r7, #27]
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	d026      	beq.n	8004c6c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	dc43      	bgt.n	8004caa <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d00f      	beq.n	8004c46 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d13f      	bne.n	8004caa <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004c2a:	7ebb      	ldrb	r3, [r7, #26]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d002      	beq.n	8004c36 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 8004c30:	7e7b      	ldrb	r3, [r7, #25]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d103      	bne.n	8004c3e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
				TimingGuard = 5000;
 8004c36:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
			else
				TimingGuard = 1000;
		break;
 8004c3c:	e038      	b.n	8004cb0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
				TimingGuard = 1000;
 8004c3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c42:	62bb      	str	r3, [r7, #40]	@ 0x28
		break;
 8004c44:	e034      	b.n	8004cb0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004c4c:	7ebb      	ldrb	r3, [r7, #26]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d002      	beq.n	8004c58 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 8004c52:	7e7b      	ldrb	r3, [r7, #25]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d103      	bne.n	8004c60 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				TimingGuard = 26600;
 8004c58:	f246 73e8 	movw	r3, #26600	@ 0x67e8
 8004c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c5e:	e002      	b.n	8004c66 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
			else
				TimingGuard = 21600;
 8004c60:	f245 4360 	movw	r3, #21600	@ 0x5460
 8004c64:	62bb      	str	r3, [r7, #40]	@ 0x28
			divisor = 2;
 8004c66:	2302      	movs	r3, #2
 8004c68:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 8004c6a:	e021      	b.n	8004cb0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8004c72:	23f5      	movs	r3, #245	@ 0xf5
 8004c74:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 8004c76:	f107 0308 	add.w	r3, r7, #8
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f248 0136 	movw	r1, #32822	@ 0x8036
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f002 f84b 	bl	8006d1c <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	dd07      	ble.n	8004c9c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				vhv += vhv_loops *
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	22f5      	movs	r2, #245	@ 0xf5
 8004c90:	fb02 f303 	mul.w	r3, r2, r3
 8004c94:	461a      	mov	r2, r3
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	4413      	add	r3, r2
 8004c9a:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	f603 53dc 	addw	r3, r3, #3548	@ 0xddc
 8004ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 8004ca8:	e002      	b.n	8004cb0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8004caa:	23f8      	movs	r3, #248	@ 0xf8
 8004cac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d803      	bhi.n	8004cc0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x150>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8004cb8:	23fc      	movs	r3, #252	@ 0xfc
 8004cba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004cbe:	e003      	b.n	8004cc8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc4:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8004cc6:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8004cc8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d11c      	bne.n	8004d0a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	69fa      	ldr	r2, [r7, #28]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d203      	bcs.n	8004ce0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x170>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8004cd8:	23fc      	movs	r3, #252	@ 0xfc
 8004cda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004cde:	e00d      	b.n	8004cfc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18c>
			else {
				TimingBudget /= divisor;
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce8:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8004cea:	68f9      	ldr	r1, [r7, #12]
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 ff67 	bl	8005bc4 <VL53L1_set_timeouts_us>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8004cfc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d102      	bne.n	8004d0a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
				VL53L1DevDataSet(Dev,
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8004d0a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d103      	bne.n	8004d1a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1aa>
		VL53L1DevDataSet(Dev,
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004d1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3730      	adds	r7, #48	@ 0x30
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	00086470 	.word	0x00086470
 8004d2c:	00989680 	.word	0x00989680

08004d30 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b08c      	sub	sp, #48	@ 0x30
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t Mm1Enabled = 0;
 8004d40:	2300      	movs	r3, #0
 8004d42:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 8004d44:	2300      	movs	r3, #0
 8004d46:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8004d54:	2300      	movs	r3, #0
 8004d56:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 8004d5e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d109      	bne.n	8004d7a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8004d66:	f107 031b 	add.w	r3, r7, #27
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	2105      	movs	r1, #5
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 fa02 	bl	8005178 <VL53L1_GetSequenceStepEnable>
 8004d74:	4603      	mov	r3, r0
 8004d76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8004d7a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d109      	bne.n	8004d96 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8004d82:	f107 031a 	add.w	r3, r7, #26
 8004d86:	461a      	mov	r2, r3
 8004d88:	2106      	movs	r1, #6
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f9f4 	bl	8005178 <VL53L1_GetSequenceStepEnable>
 8004d90:	4603      	mov	r3, r0
 8004d92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8004d96:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10b      	bne.n	8004db6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 8004d9e:	f107 0310 	add.w	r3, r7, #16
 8004da2:	f107 0214 	add.w	r2, r7, #20
 8004da6:	f107 010c 	add.w	r1, r7, #12
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 ff42 	bl	8005c34 <VL53L1_get_timeouts_us>
 8004db0:	4603      	mov	r3, r0
 8004db2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 8004db6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d155      	bne.n	8004e6a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>
		PresetMode = VL53L1DevDataGet(Dev,
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 8004dc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 8004dc8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d02a      	beq.n	8004e26 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf6>
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	dc47      	bgt.n	8004e64 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
 8004dd4:	2b03      	cmp	r3, #3
 8004dd6:	d012      	beq.n	8004dfe <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	d143      	bne.n	8004e64 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004ddc:	7efb      	ldrb	r3, [r7, #27]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d002      	beq.n	8004de8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb8>
 8004de2:	7ebb      	ldrb	r3, [r7, #26]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d105      	bne.n	8004df4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8004dee:	3308      	adds	r3, #8
 8004df0:	62bb      	str	r3, [r7, #40]	@ 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 8004df2:	e03a      	b.n	8004e6a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
		break;
 8004dfc:	e035      	b.n	8004e6a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8004dfe:	7efb      	ldrb	r3, [r7, #27]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d002      	beq.n	8004e0a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
 8004e04:	7ebb      	ldrb	r3, [r7, #26]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d106      	bne.n	8004e18 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f503 534f 	add.w	r3, r3, #13248	@ 0x33c0
 8004e10:	3334      	adds	r3, #52	@ 0x34
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	62bb      	str	r3, [r7, #40]	@ 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 8004e16:	e028      	b.n	8004e6a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f503 5328 	add.w	r3, r3, #10752	@ 0x2a00
 8004e1e:	3330      	adds	r3, #48	@ 0x30
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	62bb      	str	r3, [r7, #40]	@ 0x28
		break;
 8004e24:	e021      	b.n	8004e6a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8004e26:	23f5      	movs	r3, #245	@ 0xf5
 8004e28:	627b      	str	r3, [r7, #36]	@ 0x24
			VL53L1_get_tuning_parm(Dev,
 8004e2a:	f107 0308 	add.w	r3, r7, #8
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f248 0136 	movw	r1, #32822	@ 0x8036
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f001 ff71 	bl	8006d1c <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	dd07      	ble.n	8004e50 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x120>
				vhv += vhv_loops *
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	22f5      	movs	r2, #245	@ 0xf5
 8004e44:	fb02 f303 	mul.w	r3, r2, r3
 8004e48:	461a      	mov	r2, r3
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4c:	4413      	add	r3, r2
 8004e4e:	627b      	str	r3, [r7, #36]	@ 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8004e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e52:	f603 53dc 	addw	r3, r3, #3548	@ 0xddc
 8004e56:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	4413      	add	r3, r2
 8004e60:	62bb      	str	r3, [r7, #40]	@ 0x28
		break;
 8004e62:	e002      	b.n	8004e6a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8004e64:	23f8      	movs	r3, #248	@ 0xf8
 8004e66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
	}
	if (Status == VL53L1_ERROR_NONE)
 8004e6a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d102      	bne.n	8004e78 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x148>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e76:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004e78:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3730      	adds	r7, #48	@ 0x30
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	019b      	lsls	r3, r3, #6
 8004e9a:	4a09      	ldr	r2, [pc, #36]	@ (8004ec0 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 8004e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea0:	099b      	lsrs	r3, r3, #6
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8004ea8:	68b9      	ldr	r1, [r7, #8]
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fe3b 	bl	8005b26 <VL53L1_set_inter_measurement_period_ms>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 8004eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	10624dd3 	.word	0x10624dd3

08004ec4 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8004ed2:	f107 0308 	add.w	r3, r7, #8
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 fe4d 	bl	8005b78 <VL53L1_get_inter_measurement_period_ms>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	019b      	lsls	r3, r3, #6
 8004ee8:	4907      	ldr	r1, [pc, #28]	@ (8004f08 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 8004eea:	fba1 1303 	umull	r1, r3, r1, r3
 8004eee:	099b      	lsrs	r3, r3, #6
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 8004efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	10624dd3 	.word	0x10624dd3

08004f0c <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	460b      	mov	r3, r1
 8004f16:	607a      	str	r2, [r7, #4]
 8004f18:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8004f1e:	897b      	ldrh	r3, [r7, #10]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <SetLimitValue+0x1e>
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d009      	beq.n	8004f3c <SetLimitValue+0x30>
 8004f28:	e011      	b.n	8004f4e <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	0b9b      	lsrs	r3, r3, #14
 8004f2e:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8004f30:	8abb      	ldrh	r3, [r7, #20]
 8004f32:	4619      	mov	r1, r3
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f001 f9cd 	bl	80062d4 <VL53L1_set_lite_sigma_threshold>
		break;
 8004f3a:	e00a      	b.n	8004f52 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	0a5b      	lsrs	r3, r3, #9
 8004f40:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8004f42:	8abb      	ldrh	r3, [r7, #20]
 8004f44:	4619      	mov	r1, r3
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f001 f9f0 	bl	800632c <VL53L1_set_lite_min_count_rate>
		break;
 8004f4c:	e001      	b.n	8004f52 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004f4e:	23fc      	movs	r3, #252	@ 0xfc
 8004f50:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004f52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3718      	adds	r7, #24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b084      	sub	sp, #16
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	460b      	mov	r3, r1
 8004f68:	807b      	strh	r3, [r7, #2]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 8004f72:	2300      	movs	r3, #0
 8004f74:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004f76:	887b      	ldrh	r3, [r7, #2]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d902      	bls.n	8004f82 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004f7c:	23fc      	movs	r3, #252	@ 0xfc
 8004f7e:	73fb      	strb	r3, [r7, #15]
 8004f80:	e014      	b.n	8004fac <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 8004f82:	787b      	ldrb	r3, [r7, #1]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d102      	bne.n	8004f8e <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60bb      	str	r3, [r7, #8]
 8004f8c:	e006      	b.n	8004f9c <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004f8e:	887b      	ldrh	r3, [r7, #2]
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	33e0      	adds	r3, #224	@ 0xe0
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8004f9c:	887b      	ldrh	r3, [r7, #2]
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7ff ffb2 	bl	8004f0c <SetLimitValue>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 8004fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10c      	bne.n	8004fce <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004fb4:	787b      	ldrb	r3, [r7, #1]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	bf14      	ite	ne
 8004fba:	2301      	movne	r3, #1
 8004fbc:	2300      	moveq	r3, #0
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	887b      	ldrh	r3, [r7, #2]
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	460a      	mov	r2, r1
 8004fca:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 8004fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b087      	sub	sp, #28
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	60f8      	str	r0, [r7, #12]
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	607a      	str	r2, [r7, #4]
 8004fe6:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004fec:	897b      	ldrh	r3, [r7, #10]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d905      	bls.n	8004ffe <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004ff2:	23fc      	movs	r3, #252	@ 0xfc
 8004ff4:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	701a      	strb	r2, [r3, #0]
 8004ffc:	e008      	b.n	8005010 <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004ffe:	897b      	ldrh	r3, [r7, #10]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4413      	add	r3, r2
 8005004:	f893 3384 	ldrb.w	r3, [r3, #900]	@ 0x384
 8005008:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	7dba      	ldrb	r2, [r7, #22]
 800500e:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8005010:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005014:	4618      	mov	r0, r3
 8005016:	371c      	adds	r7, #28
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	460b      	mov	r3, r1
 800502a:	607a      	str	r2, [r7, #4]
 800502c:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800502e:	2300      	movs	r3, #0
 8005030:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 8005032:	2300      	movs	r3, #0
 8005034:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8005036:	897b      	ldrh	r3, [r7, #10]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <VL53L1_GetLimitCheckValue+0x22>
 800503c:	2b01      	cmp	r3, #1
 800503e:	d00c      	beq.n	800505a <VL53L1_GetLimitCheckValue+0x3a>
 8005040:	e017      	b.n	8005072 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8005042:	f107 0314 	add.w	r3, r7, #20
 8005046:	4619      	mov	r1, r3
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f001 f92d 	bl	80062a8 <VL53L1_get_lite_sigma_threshold>
 800504e:	4603      	mov	r3, r0
 8005050:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 8005052:	8abb      	ldrh	r3, [r7, #20]
 8005054:	039b      	lsls	r3, r3, #14
 8005056:	61bb      	str	r3, [r7, #24]
		break;
 8005058:	e00d      	b.n	8005076 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 800505a:	f107 0316 	add.w	r3, r7, #22
 800505e:	4619      	mov	r1, r3
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f001 f94d 	bl	8006300 <VL53L1_get_lite_min_count_rate>
 8005066:	4603      	mov	r3, r0
 8005068:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 800506a:	8afb      	ldrh	r3, [r7, #22]
 800506c:	025b      	lsls	r3, r3, #9
 800506e:	61bb      	str	r3, [r7, #24]
		break;
 8005070:	e001      	b.n	8005076 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8005072:	23fc      	movs	r3, #252	@ 0xfc
 8005074:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 8005076:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d123      	bne.n	80050c6 <VL53L1_GetLimitCheckValue+0xa6>

		if (TempFix1616 == 0) {
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d110      	bne.n	80050a6 <VL53L1_GetLimitCheckValue+0x86>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8005084:	897b      	ldrh	r3, [r7, #10]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	33e0      	adds	r3, #224	@ 0xe0
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8005098:	897b      	ldrh	r3, [r7, #10]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	4413      	add	r3, r2
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
 80050a4:	e00f      	b.n	80050c6 <VL53L1_GetLimitCheckValue+0xa6>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80050ac:	897b      	ldrh	r3, [r7, #10]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	33e0      	adds	r3, #224	@ 0xe0
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80050ba:	897b      	ldrh	r3, [r7, #10]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4413      	add	r3, r2
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 80050c6:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3720      	adds	r7, #32
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <VL53L1_SetUserROI>:

/* Group ROI Functions */

VL53L1_Error VL53L1_SetUserROI(VL53L1_DEV Dev,
		VL53L1_UserRoi_t *pRoi)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b084      	sub	sp, #16
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80050dc:	2300      	movs	r3, #0
 80050de:	73fb      	strb	r3, [r7, #15]
	VL53L1_user_zone_t user_zone;

	Status = CheckValidRectRoi(*pRoi);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	4613      	mov	r3, r2
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7ff fb05 	bl	80046f6 <CheckValidRectRoi>
 80050ec:	4603      	mov	r3, r0
 80050ee:	73fb      	strb	r3, [r7, #15]
	if (Status != VL53L1_ERROR_NONE)
 80050f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d002      	beq.n	80050fe <VL53L1_SetUserROI+0x2c>
		return VL53L1_ERROR_INVALID_PARAMS;
 80050f8:	f06f 0303 	mvn.w	r3, #3
 80050fc:	e038      	b.n	8005170 <VL53L1_SetUserROI+0x9e>

	user_zone.x_centre = (pRoi->BotRightX + pRoi->TopLeftX  + 1) / 2;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	789b      	ldrb	r3, [r3, #2]
 8005102:	461a      	mov	r2, r3
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	4413      	add	r3, r2
 800510a:	3301      	adds	r3, #1
 800510c:	0fda      	lsrs	r2, r3, #31
 800510e:	4413      	add	r3, r2
 8005110:	105b      	asrs	r3, r3, #1
 8005112:	b2db      	uxtb	r3, r3
 8005114:	723b      	strb	r3, [r7, #8]
	user_zone.y_centre = (pRoi->TopLeftY  + pRoi->BotRightY + 1) / 2;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	785b      	ldrb	r3, [r3, #1]
 800511a:	461a      	mov	r2, r3
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	78db      	ldrb	r3, [r3, #3]
 8005120:	4413      	add	r3, r2
 8005122:	3301      	adds	r3, #1
 8005124:	0fda      	lsrs	r2, r3, #31
 8005126:	4413      	add	r3, r2
 8005128:	105b      	asrs	r3, r3, #1
 800512a:	b2db      	uxtb	r3, r3
 800512c:	727b      	strb	r3, [r7, #9]
	user_zone.width =    (pRoi->BotRightX - pRoi->TopLeftX);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	789a      	ldrb	r2, [r3, #2]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	b2db      	uxtb	r3, r3
 800513a:	72bb      	strb	r3, [r7, #10]
	user_zone.height =   (pRoi->TopLeftY  - pRoi->BotRightY);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	785a      	ldrb	r2, [r3, #1]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	78db      	ldrb	r3, [r3, #3]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	b2db      	uxtb	r3, r3
 8005148:	72fb      	strb	r3, [r7, #11]
	if ((user_zone.width < 3) || (user_zone.height < 3))
 800514a:	7abb      	ldrb	r3, [r7, #10]
 800514c:	2b02      	cmp	r3, #2
 800514e:	d902      	bls.n	8005156 <VL53L1_SetUserROI+0x84>
 8005150:	7afb      	ldrb	r3, [r7, #11]
 8005152:	2b02      	cmp	r3, #2
 8005154:	d802      	bhi.n	800515c <VL53L1_SetUserROI+0x8a>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8005156:	23fc      	movs	r3, #252	@ 0xfc
 8005158:	73fb      	strb	r3, [r7, #15]
 800515a:	e007      	b.n	800516c <VL53L1_SetUserROI+0x9a>
	else
		Status =  VL53L1_set_user_zone(Dev, &user_zone);
 800515c:	f107 0308 	add.w	r3, r7, #8
 8005160:	4619      	mov	r1, r3
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fe06 	bl	8005d74 <VL53L1_set_user_zone>
 8005168:	4603      	mov	r3, r0
 800516a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800516c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	460b      	mov	r3, r1
 8005182:	607a      	str	r2, [r7, #4]
 8005184:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005186:	2300      	movs	r3, #0
 8005188:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 800518a:	7afb      	ldrb	r3, [r7, #11]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	4619      	mov	r1, r3
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 fdb8 	bl	8005d06 <VL53L1_get_sequence_config_bit>
 8005196:	4603      	mov	r3, r0
 8005198:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 800519a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
	...

080051a8 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80051b0:	2300      	movs	r3, #0
 80051b2:	75fb      	strb	r3, [r7, #23]
	uint32_t MTBus, IMPms;


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	789b      	ldrb	r3, [r3, #2]
 80051b8:	75bb      	strb	r3, [r7, #22]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 80051ba:	7dbb      	ldrb	r3, [r7, #22]
 80051bc:	2b40      	cmp	r3, #64	@ 0x40
 80051be:	d002      	beq.n	80051c6 <VL53L1_StartMeasurement+0x1e>
		VL53L1_LoadPatch(Dev);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 fa6b 	bl	800569c <VL53L1_LoadPatch>
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 3378 	ldrb.w	r3, [r3, #888]	@ 0x378
 80051cc:	757b      	strb	r3, [r7, #21]
	switch (CurrPalState) {
 80051ce:	7d7b      	ldrb	r3, [r7, #21]
 80051d0:	2b63      	cmp	r3, #99	@ 0x63
 80051d2:	dc12      	bgt.n	80051fa <VL53L1_StartMeasurement+0x52>
 80051d4:	2b62      	cmp	r3, #98	@ 0x62
 80051d6:	da0d      	bge.n	80051f4 <VL53L1_StartMeasurement+0x4c>
 80051d8:	2b05      	cmp	r3, #5
 80051da:	dc0e      	bgt.n	80051fa <VL53L1_StartMeasurement+0x52>
 80051dc:	2b04      	cmp	r3, #4
 80051de:	da09      	bge.n	80051f4 <VL53L1_StartMeasurement+0x4c>
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	dc02      	bgt.n	80051ea <VL53L1_StartMeasurement+0x42>
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	da05      	bge.n	80051f4 <VL53L1_StartMeasurement+0x4c>
 80051e8:	e007      	b.n	80051fa <VL53L1_StartMeasurement+0x52>
 80051ea:	2b03      	cmp	r3, #3
 80051ec:	d105      	bne.n	80051fa <VL53L1_StartMeasurement+0x52>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 80051ee:	2300      	movs	r3, #0
 80051f0:	75fb      	strb	r3, [r7, #23]
		break;
 80051f2:	e004      	b.n	80051fe <VL53L1_StartMeasurement+0x56>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 80051f4:	23f2      	movs	r3, #242	@ 0xf2
 80051f6:	75fb      	strb	r3, [r7, #23]
		break;
 80051f8:	e001      	b.n	80051fe <VL53L1_StartMeasurement+0x56>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 80051fa:	23fd      	movs	r3, #253	@ 0xfd
 80051fc:	75fb      	strb	r3, [r7, #23]
	}

	/* Check timing configuration between timing budget and
	 * inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 80051fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d11f      	bne.n	8005246 <VL53L1_StartMeasurement+0x9e>
 8005206:	7dbb      	ldrb	r3, [r7, #22]
 8005208:	2b40      	cmp	r3, #64	@ 0x40
 800520a:	d11c      	bne.n	8005246 <VL53L1_StartMeasurement+0x9e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800520c:	f107 0310 	add.w	r3, r7, #16
 8005210:	4619      	mov	r1, r3
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7ff fd8c 	bl	8004d30 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 8005218:	4603      	mov	r3, r0
 800521a:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	4a17      	ldr	r2, [pc, #92]	@ (800527c <VL53L1_StartMeasurement+0xd4>)
 8005220:	fba2 2303 	umull	r2, r3, r2, r3
 8005224:	099b      	lsrs	r3, r3, #6
 8005226:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8005228:	f107 030c 	add.w	r3, r7, #12
 800522c:	4619      	mov	r1, r3
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f7ff fe48 	bl	8004ec4 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 8005234:	4603      	mov	r3, r0
 8005236:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	1d1a      	adds	r2, r3, #4
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	429a      	cmp	r2, r3
 8005240:	d901      	bls.n	8005246 <VL53L1_StartMeasurement+0x9e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8005242:	23fc      	movs	r3, #252	@ 0xfc
 8005244:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 8005246:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d107      	bne.n	800525e <VL53L1_StartMeasurement+0xb6>
		Status = VL53L1_init_and_start_range(
 800524e:	7dbb      	ldrb	r3, [r7, #22]
 8005250:	2206      	movs	r2, #6
 8005252:	4619      	mov	r1, r3
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f001 f89f 	bl	8006398 <VL53L1_init_and_start_range>
 800525a:	4603      	mov	r3, r0
 800525c:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 800525e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d103      	bne.n	800526e <VL53L1_StartMeasurement+0xc6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2204      	movs	r2, #4
 800526a:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 800526e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	10624dd3 	.word	0x10624dd3

08005280 <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005288:	2300      	movs	r3, #0
 800528a:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	789b      	ldrb	r3, [r3, #2]
 8005290:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 8005292:	7bbb      	ldrb	r3, [r7, #14]
 8005294:	4619      	mov	r1, r3
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f001 fc0c 	bl	8006ab4 <VL53L1_clear_interrupt_and_enable_next_range>
 800529c:	4603      	mov	r3, r0
 800529e:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 80052a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <VL53L1_WaitMeasurementDataReady>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_WaitMeasurementDataReady(VL53L1_DEV Dev)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80052b4:	2300      	movs	r3, #0
 80052b6:	73fb      	strb	r3, [r7, #15]

	/* Note that the timeout is given by:
	* VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h
	*/

	Status = VL53L1_poll_for_range_completion(Dev,
 80052b8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f004 fb9c 	bl	80099fa <VL53L1_poll_for_range_completion>
 80052c2:	4603      	mov	r3, r0
 80052c4:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 80052c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
	...

080052d4 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b08d      	sub	sp, #52	@ 0x34
 80052d8:	af00      	add	r7, sp, #0
 80052da:	4603      	mov	r3, r0
 80052dc:	603a      	str	r2, [r7, #0]
 80052de:	71fb      	strb	r3, [r7, #7]
 80052e0:	460b      	mov	r3, r1
 80052e2:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 80052e4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80052e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t SRAS = 30;
 80052ea:	231e      	movs	r3, #30
 80052ec:	847b      	strh	r3, [r7, #34]	@ 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 80052ee:	4b33      	ldr	r3, [pc, #204]	@ (80053bc <ComputeRQL+0xe8>)
 80052f0:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 80052f2:	4b33      	ldr	r3, [pc, #204]	@ (80053c0 <ComputeRQL+0xec>)
 80052f4:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 80052f6:	f641 139a 	movw	r3, #6554	@ 0x199a
 80052fa:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 80052fc:	79fb      	ldrb	r3, [r7, #7]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d103      	bne.n	800530a <ComputeRQL+0x36>
		returnvalue = 0;
 8005302:	2300      	movs	r3, #0
 8005304:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005308:	e04f      	b.n	80053aa <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 800530a:	79bb      	ldrb	r3, [r7, #6]
 800530c:	2b07      	cmp	r3, #7
 800530e:	d103      	bne.n	8005318 <ComputeRQL+0x44>
		returnvalue = 50;
 8005310:	2332      	movs	r3, #50	@ 0x32
 8005312:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005316:	e048      	b.n	80053aa <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800531e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8005322:	429a      	cmp	r2, r3
 8005324:	dd03      	ble.n	800532e <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 8005326:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005328:	041b      	lsls	r3, r3, #16
 800532a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800532c:	e007      	b.n	800533e <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8005334:	461a      	mov	r2, r3
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	fb02 f303 	mul.w	r3, r2, r3
 800533c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 800533e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005340:	2b00      	cmp	r3, #0
 8005342:	d020      	beq.n	8005386 <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005348:	461a      	mov	r2, r3
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	fb02 f303 	mul.w	r3, r2, r3
 8005350:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 8005352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005354:	085b      	lsrs	r3, r3, #1
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	4413      	add	r3, r2
 800535a:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005360:	fbb2 f3f3 	udiv	r3, r2, r3
 8005364:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	041b      	lsls	r3, r3, #16
 800536a:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	429a      	cmp	r2, r3
 8005372:	d804      	bhi.n	800537e <ComputeRQL+0xaa>
				SRQL = GI - partial;
 8005374:	69fa      	ldr	r2, [r7, #28]
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800537c:	e006      	b.n	800538c <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 800537e:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 8005382:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005384:	e002      	b.n	800538c <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 8005386:	f44f 03c8 	mov.w	r3, #6553600	@ 0x640000
 800538a:	62bb      	str	r3, [r7, #40]	@ 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 800538c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538e:	0c1b      	lsrs	r3, r3, #16
 8005390:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8005392:	7bfb      	ldrb	r3, [r7, #15]
 8005394:	2b32      	cmp	r3, #50	@ 0x32
 8005396:	d905      	bls.n	80053a4 <ComputeRQL+0xd0>
 8005398:	7bfb      	ldrb	r3, [r7, #15]
 800539a:	2b64      	cmp	r3, #100	@ 0x64
 800539c:	bf28      	it	cs
 800539e:	2364      	movcs	r3, #100	@ 0x64
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	e000      	b.n	80053a6 <ComputeRQL+0xd2>
 80053a4:	2332      	movs	r3, #50	@ 0x32
 80053a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return returnvalue;
 80053aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3734      	adds	r7, #52	@ 0x34
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	0075b333 	.word	0x0075b333
 80053c0:	0030cccd 	.word	0x0030cccd

080053c4 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	4603      	mov	r3, r0
 80053cc:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 80053ce:	79fb      	ldrb	r3, [r7, #7]
 80053d0:	3b04      	subs	r3, #4
 80053d2:	2b0f      	cmp	r3, #15
 80053d4:	d83d      	bhi.n	8005452 <ConvertStatusLite+0x8e>
 80053d6:	a201      	add	r2, pc, #4	@ (adr r2, 80053dc <ConvertStatusLite+0x18>)
 80053d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053dc:	0800542f 	.word	0x0800542f
 80053e0:	08005429 	.word	0x08005429
 80053e4:	08005435 	.word	0x08005435
 80053e8:	0800543b 	.word	0x0800543b
 80053ec:	08005447 	.word	0x08005447
 80053f0:	0800544d 	.word	0x0800544d
 80053f4:	08005453 	.word	0x08005453
 80053f8:	08005453 	.word	0x08005453
 80053fc:	08005441 	.word	0x08005441
 8005400:	08005453 	.word	0x08005453
 8005404:	08005453 	.word	0x08005453
 8005408:	08005453 	.word	0x08005453
 800540c:	08005453 	.word	0x08005453
 8005410:	08005453 	.word	0x08005453
 8005414:	0800541d 	.word	0x0800541d
 8005418:	08005423 	.word	0x08005423
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 800541c:	230a      	movs	r3, #10
 800541e:	73fb      	strb	r3, [r7, #15]
		break;
 8005420:	e019      	b.n	8005456 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8005422:	2306      	movs	r3, #6
 8005424:	73fb      	strb	r3, [r7, #15]
		break;
 8005426:	e016      	b.n	8005456 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8005428:	2304      	movs	r3, #4
 800542a:	73fb      	strb	r3, [r7, #15]
		break;
 800542c:	e013      	b.n	8005456 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 800542e:	2302      	movs	r3, #2
 8005430:	73fb      	strb	r3, [r7, #15]
		break;
 8005432:	e010      	b.n	8005456 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8005434:	2301      	movs	r3, #1
 8005436:	73fb      	strb	r3, [r7, #15]
		break;
 8005438:	e00d      	b.n	8005456 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 800543a:	2307      	movs	r3, #7
 800543c:	73fb      	strb	r3, [r7, #15]
		break;
 800543e:	e00a      	b.n	8005456 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8005440:	2309      	movs	r3, #9
 8005442:	73fb      	strb	r3, [r7, #15]
		break;
 8005444:	e007      	b.n	8005456 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8005446:	2303      	movs	r3, #3
 8005448:	73fb      	strb	r3, [r7, #15]
		break;
 800544a:	e004      	b.n	8005456 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800544c:	2300      	movs	r3, #0
 800544e:	73fb      	strb	r3, [r7, #15]
		break;
 8005450:	e001      	b.n	8005456 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8005452:	23ff      	movs	r3, #255	@ 0xff
 8005454:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8005456:	7bfb      	ldrb	r3, [r7, #15]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08c      	sub	sp, #48	@ 0x30
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	607b      	str	r3, [r7, #4]
 800546e:	460b      	mov	r3, r1
 8005470:	72fb      	strb	r3, [r7, #11]
 8005472:	4613      	mov	r3, r2
 8005474:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005476:	2300      	movs	r3, #0
 8005478:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005482:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800548a:	f003 031f 	and.w	r3, r3, #31
 800548e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8005492:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8005496:	7afb      	ldrb	r3, [r7, #11]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff ff1a 	bl	80052d4 <ComputeRQL>
 80054a0:	4603      	mov	r3, r0
 80054a2:	461a      	mov	r2, r3
 80054a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a6:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054ac:	025b      	lsls	r3, r3, #9
 80054ae:	62bb      	str	r3, [r7, #40]	@ 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 80054b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054b4:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80054ba:	025b      	lsls	r3, r3, #9
 80054bc:	627b      	str	r3, [r7, #36]	@ 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 80054be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054c2:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 80054c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ca:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80054d0:	025b      	lsls	r3, r3, #9
 80054d2:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 80054d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d6:	6a3a      	ldr	r2, [r7, #32]
 80054d8:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	@ 0x3c
 80054e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e2:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 80054e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e6:	2200      	movs	r2, #0
 80054e8:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 80054ea:	7abb      	ldrb	r3, [r7, #10]
 80054ec:	2b11      	cmp	r3, #17
 80054ee:	d009      	beq.n	8005504 <SetSimpleData+0xa0>
 80054f0:	2b11      	cmp	r3, #17
 80054f2:	dc0f      	bgt.n	8005514 <SetSimpleData+0xb0>
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	dc02      	bgt.n	80054fe <SetSimpleData+0x9a>
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	dc03      	bgt.n	8005504 <SetSimpleData+0xa0>
 80054fc:	e00a      	b.n	8005514 <SetSimpleData+0xb0>
 80054fe:	2b0d      	cmp	r3, #13
 8005500:	d004      	beq.n	800550c <SetSimpleData+0xa8>
 8005502:	e007      	b.n	8005514 <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8005504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005506:	2205      	movs	r2, #5
 8005508:	76da      	strb	r2, [r3, #27]
		break;
 800550a:	e006      	b.n	800551a <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 800550c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800550e:	220d      	movs	r2, #13
 8005510:	76da      	strb	r2, [r3, #27]
		break;
 8005512:	e002      	b.n	800551a <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8005514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005516:	2200      	movs	r2, #0
 8005518:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 800551a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800551c:	7edb      	ldrb	r3, [r3, #27]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d108      	bne.n	8005534 <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8005522:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff ff4c 	bl	80053c4 <ConvertStatusLite>
 800552c:	4603      	mov	r3, r0
 800552e:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8005530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005532:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005538:	025b      	lsls	r3, r3, #9
 800553a:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a3a      	ldr	r2, [r7, #32]
 8005540:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005548:	025b      	lsls	r3, r3, #9
 800554a:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a3a      	ldr	r2, [r7, #32]
 8005550:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 8005554:	f107 0314 	add.w	r3, r7, #20
 8005558:	461a      	mov	r2, r3
 800555a:	2100      	movs	r1, #0
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f7ff fd5f 	bl	8005020 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8005562:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005566:	2b06      	cmp	r3, #6
 8005568:	bf0c      	ite	eq
 800556a:	2301      	moveq	r3, #1
 800556c:	2300      	movne	r3, #0
 800556e:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8005570:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 8005572:	f107 0319 	add.w	r3, r7, #25
 8005576:	461a      	mov	r2, r3
 8005578:	2100      	movs	r1, #0
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f7ff fd2d 	bl	8004fda <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8005580:	7e7b      	ldrb	r3, [r7, #25]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d104      	bne.n	8005590 <SetSimpleData+0x12c>
 8005586:	7ffb      	ldrb	r3, [r7, #31]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d101      	bne.n	8005590 <SetSimpleData+0x12c>
 800558c:	2301      	movs	r3, #1
 800558e:	e000      	b.n	8005592 <SetSimpleData+0x12e>
 8005590:	2300      	movs	r3, #0
 8005592:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	7fba      	ldrb	r2, [r7, #30]
 8005598:	f883 2386 	strb.w	r2, [r3, #902]	@ 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 800559c:	f107 0314 	add.w	r3, r7, #20
 80055a0:	461a      	mov	r2, r3
 80055a2:	2101      	movs	r1, #1
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f7ff fd3b 	bl	8005020 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 80055aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	bf0c      	ite	eq
 80055b2:	2301      	moveq	r3, #1
 80055b4:	2300      	movne	r3, #0
 80055b6:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 80055b8:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 80055ba:	f107 0319 	add.w	r3, r7, #25
 80055be:	461a      	mov	r2, r3
 80055c0:	2101      	movs	r1, #1
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f7ff fd09 	bl	8004fda <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 80055c8:	7e7b      	ldrb	r3, [r7, #25]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d104      	bne.n	80055d8 <SetSimpleData+0x174>
 80055ce:	7f7b      	ldrb	r3, [r7, #29]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d101      	bne.n	80055d8 <SetSimpleData+0x174>
 80055d4:	2301      	movs	r3, #1
 80055d6:	e000      	b.n	80055da <SetSimpleData+0x176>
 80055d8:	2300      	movs	r3, #0
 80055da:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	7fba      	ldrb	r2, [r7, #30]
 80055e0:	f883 2387 	strb.w	r2, [r3, #903]	@ 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 80055e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e6:	8b1b      	ldrh	r3, [r3, #24]
 80055e8:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 80055ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ec:	7edb      	ldrb	r3, [r3, #27]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d110      	bne.n	8005614 <SetSimpleData+0x1b0>
 80055f2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	da0c      	bge.n	8005614 <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 80055fa:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80055fe:	4b08      	ldr	r3, [pc, #32]	@ (8005620 <SetSimpleData+0x1bc>)
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	429a      	cmp	r2, r3
 8005604:	da03      	bge.n	800560e <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 8005606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005608:	220e      	movs	r2, #14
 800560a:	76da      	strb	r2, [r3, #27]
 800560c:	e002      	b.n	8005614 <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800560e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005610:	2200      	movs	r2, #0
 8005612:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 8005614:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8005618:	4618      	mov	r0, r3
 800561a:	3730      	adds	r7, #48	@ 0x30
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	2000000c 	.word	0x2000000c

08005624 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b0a8      	sub	sp, #160	@ 0xa0
 8005628:	af02      	add	r7, sp, #8
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800562e:	2300      	movs	r3, #0
 8005630:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	VL53L1_range_results_t results;
	VL53L1_range_results_t *presults = &results;
 8005634:	f107 0308 	add.w	r3, r7, #8
 8005638:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 800563c:	221c      	movs	r2, #28
 800563e:	21ff      	movs	r1, #255	@ 0xff
 8005640:	6838      	ldr	r0, [r7, #0]
 8005642:	f005 fa5c 	bl	800aafe <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 8005646:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800564a:	2102      	movs	r1, #2
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f001 f9c1 	bl	80069d4 <VL53L1_get_device_results>
 8005652:	4603      	mov	r3, r0
 8005654:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 8005658:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 800565c:	2b00      	cmp	r3, #0
 800565e:	d117      	bne.n	8005690 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8005660:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005664:	789a      	ldrb	r2, [r3, #2]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 800566a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800566e:	3304      	adds	r3, #4
 8005670:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		Status = SetSimpleData(Dev, 1,
 8005674:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005678:	78da      	ldrb	r2, [r3, #3]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005682:	2101      	movs	r1, #1
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7ff feed 	bl	8005464 <SetSimpleData>
 800568a:	4603      	mov	r3, r0
 800568c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005690:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 8005694:	4618      	mov	r0, r3
 8005696:	3798      	adds	r7, #152	@ 0x98
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <VL53L1_LoadPatch>:

/* End Group PAL IRQ Triggered events Functions */


static VL53L1_Error VL53L1_LoadPatch(VL53L1_DEV Dev)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b0c6      	sub	sp, #280	@ 0x118
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80056a6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80056aa:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 80056ac:	2300      	movs	r3, #0
 80056ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	uint32_t patch_tuning = 0;
 80056b2:	2300      	movs	r3, #0
 80056b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;
	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80056b8:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10b      	bne.n	80056d8 <VL53L1_LoadPatch+0x3c>
		status = VL53L1_WrByte(
 80056c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80056c4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80056c8:	2200      	movs	r2, #0
 80056ca:	2185      	movs	r1, #133	@ 0x85
 80056cc:	6818      	ldr	r0, [r3, #0]
 80056ce:	f004 fa6f 	bl	8009bb0 <VL53L1_WrByte>
 80056d2:	4603      	mov	r3, r0
 80056d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				0x00);
	/* Force GO1 on */
	if (status == VL53L1_ERROR_NONE)
 80056d8:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d106      	bne.n	80056ee <VL53L1_LoadPatch+0x52>
		VL53L1_enable_powerforce(Dev);
 80056e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80056e4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80056e8:	6818      	ldr	r0, [r3, #0]
 80056ea:	f002 fd5c 	bl	80081a6 <VL53L1_enable_powerforce>

	patch_tuning = BDTable[VL53L1_TUNING_PHASECAL_PATCH_POWER];
 80056ee:	4b7e      	ldr	r3, [pc, #504]	@ (80058e8 <VL53L1_LoadPatch+0x24c>)
 80056f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	switch(patch_tuning) {
 80056f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056fa:	2b03      	cmp	r3, #3
 80056fc:	d81a      	bhi.n	8005734 <VL53L1_LoadPatch+0x98>
 80056fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005704 <VL53L1_LoadPatch+0x68>)
 8005700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005704:	08005715 	.word	0x08005715
 8005708:	0800571d 	.word	0x0800571d
 800570c:	08005725 	.word	0x08005725
 8005710:	0800572d 	.word	0x0800572d
	case 0:
		patch_power = 0x00;
 8005714:	2300      	movs	r3, #0
 8005716:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 800571a:	e00e      	b.n	800573a <VL53L1_LoadPatch+0x9e>
	case 1:
		patch_power = 0x10;
 800571c:	2310      	movs	r3, #16
 800571e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8005722:	e00a      	b.n	800573a <VL53L1_LoadPatch+0x9e>
	case 2:
		patch_power = 0x20;
 8005724:	2320      	movs	r3, #32
 8005726:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 800572a:	e006      	b.n	800573a <VL53L1_LoadPatch+0x9e>
	case 3:
		patch_power = 0x40;
 800572c:	2340      	movs	r3, #64	@ 0x40
 800572e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8005732:	e002      	b.n	800573a <VL53L1_LoadPatch+0x9e>
	default:
		patch_power = 0x00;
 8005734:	2300      	movs	r3, #0
 8005736:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	}
	/* Set patch RAM offsets */
	if (status == VL53L1_ERROR_NONE) {
 800573a:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 800573e:	2b00      	cmp	r3, #0
 8005740:	d134      	bne.n	80057ac <VL53L1_LoadPatch+0x110>
		/* Package up MultiByte transaction */
		comms_buffer[0] = 0x29;
 8005742:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005746:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800574a:	2229      	movs	r2, #41	@ 0x29
 800574c:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 800574e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005752:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005756:	22c9      	movs	r2, #201	@ 0xc9
 8005758:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 800575a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800575e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005762:	220e      	movs	r2, #14
 8005764:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8005766:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800576a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800576e:	2240      	movs	r2, #64	@ 0x40
 8005770:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 8005772:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005776:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800577a:	2228      	movs	r2, #40	@ 0x28
 800577c:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 800577e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005782:	b2da      	uxtb	r2, r3
 8005784:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005788:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800578c:	715a      	strb	r2, [r3, #5]
		/* 0x10 for 60ms, 0x20 for 240ms and 0x40 for 3580ms */
		status = VL53L1_WriteMulti(
 800578e:	f107 020c 	add.w	r2, r7, #12
 8005792:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005796:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 800579a:	2306      	movs	r3, #6
 800579c:	f240 4176 	movw	r1, #1142	@ 0x476
 80057a0:	6800      	ldr	r0, [r0, #0]
 80057a2:	f004 f999 	bl	8009ad8 <VL53L1_WriteMulti>
 80057a6:	4603      	mov	r3, r0
 80057a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				VL53L1_PATCH__OFFSET_0,
				comms_buffer,
				6);
	}
	/* Set patch breakpoints */
	if (status == VL53L1_ERROR_NONE) {
 80057ac:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d132      	bne.n	800581a <VL53L1_LoadPatch+0x17e>
		comms_buffer[0] = 0x03;
 80057b4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80057b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80057bc:	2203      	movs	r2, #3
 80057be:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 80057c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80057c4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80057c8:	226d      	movs	r2, #109	@ 0x6d
 80057ca:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 80057cc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80057d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80057d4:	2203      	movs	r2, #3
 80057d6:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 80057d8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80057dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80057e0:	226f      	movs	r2, #111	@ 0x6f
 80057e2:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 80057e4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80057e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80057ec:	2207      	movs	r2, #7
 80057ee:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 80057f0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80057f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80057f8:	2229      	movs	r2, #41	@ 0x29
 80057fa:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(
 80057fc:	f107 020c 	add.w	r2, r7, #12
 8005800:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005804:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8005808:	2306      	movs	r3, #6
 800580a:	f240 4196 	movw	r1, #1174	@ 0x496
 800580e:	6800      	ldr	r0, [r0, #0]
 8005810:	f004 f962 	bl	8009ad8 <VL53L1_WriteMulti>
 8005814:	4603      	mov	r3, r0
 8005816:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				VL53L1_PATCH__ADDRESS_0,
				comms_buffer,
				6);
	}
	/* Enable patch JMP patches */
	if (status == VL53L1_ERROR_NONE) {
 800581a:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 800581e:	2b00      	cmp	r3, #0
 8005820:	d11a      	bne.n	8005858 <VL53L1_LoadPatch+0x1bc>
		comms_buffer[0] = 0x00;
 8005822:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005826:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800582a:	2200      	movs	r2, #0
 800582c:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800582e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005832:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005836:	2207      	movs	r2, #7
 8005838:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 800583a:	f107 020c 	add.w	r2, r7, #12
 800583e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005842:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8005846:	2302      	movs	r3, #2
 8005848:	f240 4172 	movw	r1, #1138	@ 0x472
 800584c:	6800      	ldr	r0, [r0, #0]
 800584e:	f004 f943 	bl	8009ad8 <VL53L1_WriteMulti>
 8005852:	4603      	mov	r3, r0
 8005854:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				VL53L1_PATCH__JMP_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable patch DATA patches */
	if (status == VL53L1_ERROR_NONE) {
 8005858:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 800585c:	2b00      	cmp	r3, #0
 800585e:	d11a      	bne.n	8005896 <VL53L1_LoadPatch+0x1fa>
		comms_buffer[0] = 0x00;
 8005860:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005864:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005868:	2200      	movs	r2, #0
 800586a:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800586c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005870:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005874:	2207      	movs	r2, #7
 8005876:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 8005878:	f107 020c 	add.w	r2, r7, #12
 800587c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005880:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8005884:	2302      	movs	r3, #2
 8005886:	f240 4174 	movw	r1, #1140	@ 0x474
 800588a:	6800      	ldr	r0, [r0, #0]
 800588c:	f004 f924 	bl	8009ad8 <VL53L1_WriteMulti>
 8005890:	4603      	mov	r3, r0
 8005892:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				VL53L1_PATCH__DATA_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable firmware patching */
	if (status == VL53L1_ERROR_NONE)
 8005896:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10c      	bne.n	80058b8 <VL53L1_LoadPatch+0x21c>
		status = VL53L1_WrByte(
 800589e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80058a2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80058a6:	2201      	movs	r2, #1
 80058a8:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 80058ac:	6818      	ldr	r0, [r3, #0]
 80058ae:	f004 f97f 	bl	8009bb0 <VL53L1_WrByte>
 80058b2:	4603      	mov	r3, r0
 80058b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				Dev,
				VL53L1_PATCH__CTRL,
				0x01);
	/* Enable Firmware */
	if (status == VL53L1_ERROR_NONE)
 80058b8:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10b      	bne.n	80058d8 <VL53L1_LoadPatch+0x23c>
		status = VL53L1_WrByte(
 80058c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80058c4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80058c8:	2201      	movs	r2, #1
 80058ca:	2185      	movs	r1, #133	@ 0x85
 80058cc:	6818      	ldr	r0, [r3, #0]
 80058ce:	f004 f96f 	bl	8009bb0 <VL53L1_WrByte>
 80058d2:	4603      	mov	r3, r0
 80058d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				VL53L1_FIRMWARE__ENABLE,
				0x01);

	LOG_FUNCTION_END(status);

	return status;
 80058d8:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
}
 80058dc:	4618      	mov	r0, r3
 80058de:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	2000000c 	.word	0x2000000c

080058ec <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 80058ec:	b5b0      	push	{r4, r5, r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af04      	add	r7, sp, #16
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	460b      	mov	r3, r1
 80058f6:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80058f8:	2300      	movs	r3, #0
 80058fa:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 8005900:	2162      	movs	r1, #98	@ 0x62
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f002 f909 	bl	8007b1a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2200      	movs	r2, #0
 800590c:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2201      	movs	r2, #1
 8005912:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2200      	movs	r2, #0
 8005918:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2201      	movs	r2, #1
 800591e:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2201      	movs	r2, #1
 8005924:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800592c:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005934:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 800593c:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2264      	movs	r2, #100	@ 0x64
 8005942:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 800594a:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f240 72db 	movw	r2, #2011	@ 0x7db
 800595a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f002 f8bf 	bl	8007ae2 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8005964:	78fb      	ldrb	r3, [r7, #3]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d008      	beq.n	800597c <VL53L1_data_init+0x90>
 800596a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d104      	bne.n	800597c <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f857 	bl	8005a26 <VL53L1_read_p2p_data>
 8005978:	4603      	mov	r3, r0
 800597a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8005982:	4618      	mov	r0, r3
 8005984:	f001 fbee 	bl	8007164 <VL53L1_init_refspadchar_config_struct>
 8005988:	4603      	mov	r3, r0
 800598a:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8005992:	4618      	mov	r0, r3
 8005994:	f001 fc0a 	bl	80071ac <VL53L1_init_ssc_config_struct>
 8005998:	4603      	mov	r3, r0
 800599a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f103 0242 	add.w	r2, r3, #66	@ 0x42
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80059a8:	4619      	mov	r1, r3
 80059aa:	4610      	mov	r0, r2
 80059ac:	f001 fc1f 	bl	80071ee <VL53L1_init_xtalk_config_struct>
 80059b0:	4603      	mov	r3, r0
 80059b2:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80059ba:	4618      	mov	r0, r3
 80059bc:	f001 fc79 	bl	80072b2 <VL53L1_init_offset_cal_config_struct>
 80059c0:	4603      	mov	r3, r0
 80059c2:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	33a4      	adds	r3, #164	@ 0xa4
 80059c8:	4618      	mov	r0, r3
 80059ca:	f001 fc99 	bl	8007300 <VL53L1_init_tuning_parm_storage_struct>
 80059ce:	4603      	mov	r3, r0
 80059d0:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 80059d2:	2120      	movs	r1, #32
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fcbf 	bl	8006358 <VL53L1_set_vhv_loopbound>
 80059da:	4603      	mov	r3, r0
 80059dc:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 80059de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d116      	bne.n	8005a14 <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	7858      	ldrb	r0, [r3, #1]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	8b1c      	ldrh	r4, [r3, #24]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	689d      	ldr	r5, [r3, #8]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	6912      	ldr	r2, [r2, #16]
 80059fa:	68b9      	ldr	r1, [r7, #8]
 80059fc:	6949      	ldr	r1, [r1, #20]
 80059fe:	9102      	str	r1, [sp, #8]
 8005a00:	9201      	str	r2, [sp, #4]
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	462b      	mov	r3, r5
 8005a06:	4622      	mov	r2, r4
 8005a08:	4601      	mov	r1, r0
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fad6 	bl	8005fbc <VL53L1_set_preset_mode>
 8005a10:	4603      	mov	r3, r0
 8005a12:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f002 fdff 	bl	8008618 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8005a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bdb0      	pop	{r4, r5, r7, pc}

08005a26 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b084      	sub	sp, #16
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8005a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d108      	bne.n	8005a50 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8005a44:	4619      	mov	r1, r3
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f002 ff83 	bl	8008952 <VL53L1_get_static_nvm_managed>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8005a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d107      	bne.n	8005a68 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	3342      	adds	r3, #66	@ 0x42
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f003 f8b5 	bl	8008bce <VL53L1_get_customer_nvm_managed>
 8005a64:	4603      	mov	r3, r0
 8005a66:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 8005a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d115      	bne.n	8005a9c <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f503 73fd 	add.w	r3, r3, #506	@ 0x1fa
 8005a76:	4619      	mov	r1, r3
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f003 ff67 	bl	800994c <VL53L1_get_nvm_copy_data>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 8005a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d108      	bne.n	8005a9c <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f503 72fd 	add.w	r2, r3, #506	@ 0x1fa
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	33f0      	adds	r3, #240	@ 0xf0
 8005a94:	4619      	mov	r1, r3
 8005a96:	4610      	mov	r0, r2
 8005a98:	f002 f9a1 	bl	8007dde <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 8005a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d109      	bne.n	8005ab8 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8005aaa:	461a      	mov	r2, r3
 8005aac:	21de      	movs	r1, #222	@ 0xde
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f004 f8dc 	bl	8009c6c <VL53L1_RdWord>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 8005abe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ac2:	d204      	bcs.n	8005ace <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f64b 42cc 	movw	r2, #48332	@ 0xbccc
 8005aca:	f8a3 215e 	strh.w	r2, [r3, #350]	@ 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 8005ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d107      	bne.n	8005ae6 <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	339e      	adds	r3, #158	@ 0x9e
 8005ada:	4619      	mov	r1, r3
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f98e 	bl	8005dfe <VL53L1_get_mode_mitigation_roi>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d114      	bne.n	8005b1a <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10f      	bne.n	8005b1a <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	f893 309f 	ldrb.w	r3, [r3, #159]	@ 0x9f
 8005b10:	011b      	lsls	r3, r3, #4
 8005b12:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 8005b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b085      	sub	sp, #20
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005b30:	2300      	movs	r3, #0
 8005b32:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005b42:	23f1      	movs	r3, #241	@ 0xf1
 8005b44:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8005b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10c      	bne.n	8005b68 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 8005b5a:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 8005b68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005b82:	2300      	movs	r3, #0
 8005b84:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005b94:	23f1      	movs	r3, #241	@ 0xf1
 8005b96:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8005b98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d109      	bne.n	8005bb4 <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	@ 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 8005bac:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8005bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b088      	sub	sp, #32
 8005bc8:	af02      	add	r7, sp, #8
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
 8005bd0:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005be4:	23f1      	movs	r3, #241	@ 0xf1
 8005be6:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8005be8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d11b      	bne.n	8005c28 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f8b3 115e 	ldrh.w	r1, [r3, #350]	@ 0x15e
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	f502 72ce 	add.w	r2, r2, #412	@ 0x19c
 8005c14:	9201      	str	r2, [sp, #4]
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	6879      	ldr	r1, [r7, #4]
 8005c1e:	68b8      	ldr	r0, [r7, #8]
 8005c20:	f002 fc2c 	bl	800847c <VL53L1_calc_timeout_register_values>
 8005c24:	4603      	mov	r3, r0
 8005c26:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8005c28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b088      	sub	sp, #32
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005c42:	2300      	movs	r3, #0
 8005c44:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8005c5c:	23f1      	movs	r3, #241	@ 0xf1
 8005c5e:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8005c60:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d148      	bne.n	8005cfa <VL53L1_get_timeouts_us+0xc6>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	f8b3 215e 	ldrh.w	r2, [r3, #350]	@ 0x15e
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	f893 31a2 	ldrb.w	r3, [r3, #418]	@ 0x1a2
 8005c74:	4619      	mov	r1, r3
 8005c76:	4610      	mov	r0, r2
 8005c78:	f002 faa7 	bl	80081ca <VL53L1_calc_macro_period_us>
 8005c7c:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	f893 318b 	ldrb.w	r3, [r3, #395]	@ 0x18b
			VL53L1_calc_timeout_us(
 8005c84:	6979      	ldr	r1, [r7, #20]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f002 fb5f 	bl	800834a <VL53L1_calc_timeout_us>
 8005c8c:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
		timeout_encoded =
 8005c98:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8005c9a:	8a7b      	ldrh	r3, [r7, #18]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	f892 219d 	ldrb.w	r2, [r2, #413]	@ 0x19d
		timeout_encoded = (timeout_encoded << 8) +
 8005ca6:	4413      	add	r3, r2
 8005ca8:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8005caa:	8a7b      	ldrh	r3, [r7, #18]
 8005cac:	6979      	ldr	r1, [r7, #20]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f002 fb8b 	bl	80083ca <VL53L1_calc_decoded_timeout_us>
 8005cb4:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
		timeout_encoded =
 8005cc0:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8005cc2:	8a7b      	ldrh	r3, [r7, #18]
 8005cc4:	021b      	lsls	r3, r3, #8
 8005cc6:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	f892 21a1 	ldrb.w	r2, [r2, #417]	@ 0x1a1
		timeout_encoded = (timeout_encoded << 8) +
 8005cce:	4413      	add	r3, r2
 8005cd0:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8005cd2:	8a7b      	ldrh	r3, [r7, #18]
 8005cd4:	6979      	ldr	r1, [r7, #20]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f002 fb77 	bl	80083ca <VL53L1_calc_decoded_timeout_us>
 8005cdc:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8005cfa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3720      	adds	r7, #32
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b087      	sub	sp, #28
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	60f8      	str	r0, [r7, #12]
 8005d0e:	460b      	mov	r3, r1
 8005d10:	607a      	str	r2, [r7, #4]
 8005d12:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005d14:	2300      	movs	r3, #0
 8005d16:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8005d20:	7afb      	ldrb	r3, [r7, #11]
 8005d22:	2b07      	cmp	r3, #7
 8005d24:	d81c      	bhi.n	8005d60 <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 8005d26:	7afb      	ldrb	r3, [r7, #11]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d004      	beq.n	8005d36 <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 8005d2c:	7afb      	ldrb	r3, [r7, #11]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	fa02 f303 	lsl.w	r3, r2, r3
 8005d34:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f893 21c5 	ldrb.w	r2, [r3, #453]	@ 0x1c5
		*pvalue =
 8005d3c:	7dbb      	ldrb	r3, [r7, #22]
 8005d3e:	4013      	ands	r3, r2
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 8005d46:	7afb      	ldrb	r3, [r7, #11]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00b      	beq.n	8005d64 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	461a      	mov	r2, r3
 8005d52:	7afb      	ldrb	r3, [r7, #11]
 8005d54:	fa42 f303 	asr.w	r3, r2, r3
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	e001      	b.n	8005d64 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005d60:	23fc      	movs	r3, #252	@ 0xfc
 8005d62:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8005d64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	371c      	adds	r7, #28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	7858      	ldrb	r0, [r3, #1]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	7819      	ldrb	r1, [r3, #0]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	f203 13c3 	addw	r3, r3, #451	@ 0x1c3
 8005d94:	461a      	mov	r2, r3
 8005d96:	f002 fbea 	bl	800856e <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	7898      	ldrb	r0, [r3, #2]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	78d9      	ldrb	r1, [r3, #3]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8005da8:	461a      	mov	r2, r3
 8005daa:	f002 fc1f 	bl	80085ec <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 8005dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b084      	sub	sp, #16
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
 8005dc2:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f893 01c3 	ldrb.w	r0, [r3, #451]	@ 0x1c3
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	4619      	mov	r1, r3
 8005dda:	f002 fcd6 	bl	800878a <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f893 01c4 	ldrb.w	r0, [r3, #452]	@ 0x1c4
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	1c99      	adds	r1, r3, #2
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	3303      	adds	r3, #3
 8005dec:	461a      	mov	r2, r3
 8005dee:	f002 fbe5 	bl	80085bc <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 8005df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b086      	sub	sp, #24
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8005e10:	2300      	movs	r3, #0
 8005e12:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	f893 322a 	ldrb.w	r3, [r3, #554]	@ 0x22a
 8005e22:	f107 020e 	add.w	r2, r7, #14
 8005e26:	f107 010d 	add.w	r1, r7, #13
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f002 fcad 	bl	800878a <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8005e30:	7bba      	ldrb	r2, [r7, #14]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8005e36:	7b7a      	ldrb	r2, [r7, #13]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f893 322b 	ldrb.w	r3, [r3, #555]	@ 0x22b
 8005e42:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	091b      	lsrs	r3, r3, #4
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
 8005e50:	f003 030f 	and.w	r3, r3, #15
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8005e5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3718      	adds	r7, #24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	607a      	str	r2, [r7, #4]
 8005e72:	603b      	str	r3, [r7, #0]
 8005e74:	460b      	mov	r3, r1
 8005e76:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8005e80:	7afb      	ldrb	r3, [r7, #11]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	2b25      	cmp	r3, #37	@ 0x25
 8005e86:	f200 808e 	bhi.w	8005fa6 <VL53L1_get_preset_mode_timing_cfg+0x13e>
 8005e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e90 <VL53L1_get_preset_mode_timing_cfg+0x28>)
 8005e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e90:	08005f29 	.word	0x08005f29
 8005e94:	08005f29 	.word	0x08005f29
 8005e98:	08005f29 	.word	0x08005f29
 8005e9c:	08005f29 	.word	0x08005f29
 8005ea0:	08005f29 	.word	0x08005f29
 8005ea4:	08005f53 	.word	0x08005f53
 8005ea8:	08005f53 	.word	0x08005f53
 8005eac:	08005f53 	.word	0x08005f53
 8005eb0:	08005fa7 	.word	0x08005fa7
 8005eb4:	08005fa7 	.word	0x08005fa7
 8005eb8:	08005fa7 	.word	0x08005fa7
 8005ebc:	08005fa7 	.word	0x08005fa7
 8005ec0:	08005fa7 	.word	0x08005fa7
 8005ec4:	08005fa7 	.word	0x08005fa7
 8005ec8:	08005fa7 	.word	0x08005fa7
 8005ecc:	08005fa7 	.word	0x08005fa7
 8005ed0:	08005f29 	.word	0x08005f29
 8005ed4:	08005f53 	.word	0x08005f53
 8005ed8:	08005fa7 	.word	0x08005fa7
 8005edc:	08005fa7 	.word	0x08005fa7
 8005ee0:	08005fa7 	.word	0x08005fa7
 8005ee4:	08005fa7 	.word	0x08005fa7
 8005ee8:	08005fa7 	.word	0x08005fa7
 8005eec:	08005fa7 	.word	0x08005fa7
 8005ef0:	08005fa7 	.word	0x08005fa7
 8005ef4:	08005fa7 	.word	0x08005fa7
 8005ef8:	08005fa7 	.word	0x08005fa7
 8005efc:	08005fa7 	.word	0x08005fa7
 8005f00:	08005fa7 	.word	0x08005fa7
 8005f04:	08005fa7 	.word	0x08005fa7
 8005f08:	08005fa7 	.word	0x08005fa7
 8005f0c:	08005fa7 	.word	0x08005fa7
 8005f10:	08005fa7 	.word	0x08005fa7
 8005f14:	08005fa7 	.word	0x08005fa7
 8005f18:	08005fa7 	.word	0x08005fa7
 8005f1c:	08005f7d 	.word	0x08005f7d
 8005f20:	08005f7d 	.word	0x08005f7d
 8005f24:	08005f7d 	.word	0x08005f7d
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	@ 0xca
		*pdss_config__target_total_rate_mcps =
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
		*pphasecal_config_timeout_us =
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
		*pmm_config_timeout_us =
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
		*prange_config_timeout_us =
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4e:	601a      	str	r2, [r3, #0]
	break;
 8005f50:	e02c      	b.n	8005fac <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
		*pdss_config__target_total_rate_mcps =
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
		*pphasecal_config_timeout_us =
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
		*pmm_config_timeout_us =
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
		*prange_config_timeout_us =
 8005f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f78:	601a      	str	r2, [r3, #0]
	break;
 8005f7a:	e017      	b.n	8005fac <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
		*pdss_config__target_total_rate_mcps =
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
		*pphasecal_config_timeout_us =
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
		*pmm_config_timeout_us =
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
		*prange_config_timeout_us =
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa2:	601a      	str	r2, [r3, #0]
	break;
 8005fa4:	e002      	b.n	8005fac <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005fa6:	23fc      	movs	r3, #252	@ 0xfc
 8005fa8:	75fb      	strb	r3, [r7, #23]
		break;
 8005faa:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8005fac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	371c      	adds	r7, #28
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b092      	sub	sp, #72	@ 0x48
 8005fc0:	af04      	add	r7, sp, #16
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	607b      	str	r3, [r7, #4]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	72fb      	strb	r3, [r7, #11]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53L1_LLDriverData_t *pdev =
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	633b      	str	r3, [r7, #48]	@ 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fda:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe2:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8005fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fea:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8005fee:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff2:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8005ff6:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffa:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8005ffe:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8006000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006002:	33a4      	adds	r3, #164	@ 0xa4
 8006004:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8006006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006008:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 800600c:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 800600e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006010:	7afa      	ldrb	r2, [r7, #11]
 8006012:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8006014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006016:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006018:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800601a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800601e:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8006020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006022:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006024:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 8006026:	2103      	movs	r1, #3
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f001 fd76 	bl	8007b1a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 800602e:	7afb      	ldrb	r3, [r7, #11]
 8006030:	3b01      	subs	r3, #1
 8006032:	2b25      	cmp	r3, #37	@ 0x25
 8006034:	f200 810c 	bhi.w	8006250 <VL53L1_set_preset_mode+0x294>
 8006038:	a201      	add	r2, pc, #4	@ (adr r2, 8006040 <VL53L1_set_preset_mode+0x84>)
 800603a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603e:	bf00      	nop
 8006040:	080060d9 	.word	0x080060d9
 8006044:	080060f5 	.word	0x080060f5
 8006048:	08006111 	.word	0x08006111
 800604c:	0800612d 	.word	0x0800612d
 8006050:	08006149 	.word	0x08006149
 8006054:	08006165 	.word	0x08006165
 8006058:	08006181 	.word	0x08006181
 800605c:	0800619d 	.word	0x0800619d
 8006060:	08006251 	.word	0x08006251
 8006064:	08006251 	.word	0x08006251
 8006068:	08006251 	.word	0x08006251
 800606c:	08006251 	.word	0x08006251
 8006070:	08006251 	.word	0x08006251
 8006074:	08006251 	.word	0x08006251
 8006078:	08006251 	.word	0x08006251
 800607c:	08006251 	.word	0x08006251
 8006080:	080061b9 	.word	0x080061b9
 8006084:	080061d5 	.word	0x080061d5
 8006088:	08006251 	.word	0x08006251
 800608c:	08006251 	.word	0x08006251
 8006090:	08006251 	.word	0x08006251
 8006094:	08006251 	.word	0x08006251
 8006098:	08006251 	.word	0x08006251
 800609c:	08006251 	.word	0x08006251
 80060a0:	08006251 	.word	0x08006251
 80060a4:	08006251 	.word	0x08006251
 80060a8:	08006251 	.word	0x08006251
 80060ac:	08006251 	.word	0x08006251
 80060b0:	08006251 	.word	0x08006251
 80060b4:	08006251 	.word	0x08006251
 80060b8:	08006251 	.word	0x08006251
 80060bc:	08006251 	.word	0x08006251
 80060c0:	08006251 	.word	0x08006251
 80060c4:	08006251 	.word	0x08006251
 80060c8:	08006251 	.word	0x08006251
 80060cc:	080061f1 	.word	0x080061f1
 80060d0:	08006211 	.word	0x08006211
 80060d4:	08006231 	.word	0x08006231

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	9301      	str	r3, [sp, #4]
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80060e8:	f001 f999 	bl	800741e <VL53L1_preset_mode_standard_ranging>
 80060ec:	4603      	mov	r3, r0
 80060ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80060f2:	e0b1      	b.n	8006258 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	9301      	str	r3, [sp, #4]
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006100:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006102:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006104:	f001 faa9 	bl	800765a <VL53L1_preset_mode_standard_ranging_short_range>
 8006108:	4603      	mov	r3, r0
 800610a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800610e:	e0a3      	b.n	8006258 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	9301      	str	r3, [sp, #4]
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800611c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800611e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006120:	f001 fadc 	bl	80076dc <VL53L1_preset_mode_standard_ranging_long_range>
 8006124:	4603      	mov	r3, r0
 8006126:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800612a:	e095      	b.n	8006258 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	9301      	str	r3, [sp, #4]
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006138:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800613a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800613c:	f001 fb0f 	bl	800775e <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8006140:	4603      	mov	r3, r0
 8006142:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8006146:	e087      	b.n	8006258 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	9301      	str	r3, [sp, #4]
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006154:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006156:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006158:	f001 fb26 	bl	80077a8 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 800615c:	4603      	mov	r3, r0
 800615e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8006162:	e079      	b.n	8006258 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	9301      	str	r3, [sp, #4]
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006170:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006172:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006174:	f001 fb3d 	bl	80077f2 <VL53L1_preset_mode_timed_ranging>
 8006178:	4603      	mov	r3, r0
 800617a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800617e:	e06b      	b.n	8006258 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	9301      	str	r3, [sp, #4]
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800618c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800618e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006190:	f001 fb69 	bl	8007866 <VL53L1_preset_mode_timed_ranging_short_range>
 8006194:	4603      	mov	r3, r0
 8006196:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800619a:	e05d      	b.n	8006258 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	9301      	str	r3, [sp, #4]
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80061ac:	f001 fb95 	bl	80078da <VL53L1_preset_mode_timed_ranging_long_range>
 80061b0:	4603      	mov	r3, r0
 80061b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80061b6:	e04f      	b.n	8006258 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	9301      	str	r3, [sp, #4]
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80061c8:	f001 fc69 	bl	8007a9e <VL53L1_preset_mode_olt>
 80061cc:	4603      	mov	r3, r0
 80061ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80061d2:	e041      	b.n	8006258 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	9301      	str	r3, [sp, #4]
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	6a3b      	ldr	r3, [r7, #32]
 80061de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80061e4:	f001 fc25 	bl	8007a32 <VL53L1_preset_mode_singleshot_ranging>
 80061e8:	4603      	mov	r3, r0
 80061ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80061ee:	e033      	b.n	8006258 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	9302      	str	r3, [sp, #8]
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	9301      	str	r3, [sp, #4]
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006200:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006202:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006204:	f001 fbc9 	bl	800799a <VL53L1_preset_mode_low_power_auto_short_ranging>
 8006208:	4603      	mov	r3, r0
 800620a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800620e:	e023      	b.n	8006258 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	9302      	str	r3, [sp, #8]
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	9301      	str	r3, [sp, #4]
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	6a3b      	ldr	r3, [r7, #32]
 800621e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006220:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006222:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006224:	f001 fb93 	bl	800794e <VL53L1_preset_mode_low_power_auto_ranging>
 8006228:	4603      	mov	r3, r0
 800622a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800622e:	e013      	b.n	8006258 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	9302      	str	r3, [sp, #8]
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	9301      	str	r3, [sp, #4]
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	6a3b      	ldr	r3, [r7, #32]
 800623e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006240:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006242:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006244:	f001 fbcf 	bl	80079e6 <VL53L1_preset_mode_low_power_auto_long_ranging>
 8006248:	4603      	mov	r3, r0
 800624a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800624e:	e003      	b.n	8006258 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8006250:	23fc      	movs	r3, #252	@ 0xfc
 8006252:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		break;
 8006256:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 8006258:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800625c:	2b00      	cmp	r3, #0
 800625e:	d105      	bne.n	800626c <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 8006260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006262:	893a      	ldrh	r2, [r7, #8]
 8006264:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8006266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006268:	893a      	ldrh	r2, [r7, #8]
 800626a:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 800626c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8006270:	2b00      	cmp	r3, #0
 8006272:	d108      	bne.n	8006286 <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 8006274:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006276:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006278:	6879      	ldr	r1, [r7, #4]
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f7ff fca2 	bl	8005bc4 <VL53L1_set_timeouts_us>
 8006280:	4603      	mov	r3, r0
 8006282:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8006286:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800628a:	2b00      	cmp	r3, #0
 800628c:	d106      	bne.n	800629c <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 800628e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f7ff fc48 	bl	8005b26 <VL53L1_set_inter_measurement_period_ms>
 8006296:	4603      	mov	r3, r0
 8006298:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 800629c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3738      	adds	r7, #56	@ 0x38
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80062b2:	2300      	movs	r3, #0
 80062b4:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	@ 0x1a6
	*plite_sigma =
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80062c4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	460b      	mov	r3, r1
 80062de:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80062e0:	2300      	movs	r3, #0
 80062e2:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	887a      	ldrh	r2, [r7, #2]
 80062ec:	f8a3 21a6 	strh.w	r2, [r3, #422]	@ 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 80062f0:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800630a:	2300      	movs	r3, #0
 800630c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	@ 0x1a8
	*plite_mincountrate =
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800631c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	460b      	mov	r3, r1
 8006336:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006338:	2300      	movs	r3, #0
 800633a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	887a      	ldrh	r2, [r7, #2]
 8006344:	f8a3 21a8 	strh.w	r2, [r3, #424]	@ 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 8006348:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800634c:	4618      	mov	r0, r3
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	460b      	mov	r3, r1
 8006362:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006364:	2300      	movs	r3, #0
 8006366:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	b2da      	uxtb	r2, r3
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	b2db      	uxtb	r3, r3
 800637e:	4413      	add	r3, r2
 8006380:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 8006388:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800638c:	4618      	mov	r0, r3
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b0d0      	sub	sp, #320	@ 0x140
 800639c:	af00      	add	r7, sp, #0
 800639e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80063a2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80063a6:	6018      	str	r0, [r3, #0]
 80063a8:	4608      	mov	r0, r1
 80063aa:	4611      	mov	r1, r2
 80063ac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80063b0:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 80063b4:	4602      	mov	r2, r0
 80063b6:	701a      	strb	r2, [r3, #0]
 80063b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80063bc:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80063c0:	460a      	mov	r2, r1
 80063c2:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80063c4:	2300      	movs	r3, #0
 80063c6:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80063ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80063ce:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 80063d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80063dc:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80063e0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 80063e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80063e8:	3342      	adds	r3, #66	@ 0x42
 80063ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80063ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80063f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80063f6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80063fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80063fe:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8006402:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8006406:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800640a:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800640e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8006412:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006416:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 800641a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800641e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006422:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8006426:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 800642a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800642e:	332c      	adds	r3, #44	@ 0x2c
 8006430:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8006434:	f107 030c 	add.w	r3, r7, #12
 8006438:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	uint16_t i                          = 0;
 800643c:	2300      	movs	r3, #0
 800643e:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
	uint16_t i2c_index                  = 0;
 8006442:	2300      	movs	r3, #0
 8006444:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 8006448:	2300      	movs	r3, #0
 800644a:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 800644e:	2300      	movs	r3, #0
 8006450:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 8006454:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006458:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800645c:	f2a2 123d 	subw	r2, r2, #317	@ 0x13d
 8006460:	7812      	ldrb	r2, [r2, #0]
 8006462:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 8006464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006468:	791b      	ldrb	r3, [r3, #4]
 800646a:	b25b      	sxtb	r3, r3
 800646c:	f003 030f 	and.w	r3, r3, #15
 8006470:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8006472:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006476:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800647a:	f993 3000 	ldrsb.w	r3, [r3]
 800647e:	4313      	orrs	r3, r2
 8006480:	b25b      	sxtb	r3, r3
 8006482:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8006484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006488:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800648a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800648e:	f8b3 2142 	ldrh.w	r2, [r3, #322]	@ 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8006492:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006496:	f8a3 217c 	strh.w	r2, [r3, #380]	@ 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800649a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800649e:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 80064a2:	2bff      	cmp	r3, #255	@ 0xff
 80064a4:	d104      	bne.n	80064b0 <VL53L1_init_and_start_range+0x118>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 80064a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80064b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80064b4:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d139      	bne.n	8006530 <VL53L1_init_and_start_range+0x198>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 80064bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80064c0:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d133      	bne.n	8006530 <VL53L1_init_and_start_range+0x198>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 80064c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80064cc:	f893 2186 	ldrb.w	r2, [r3, #390]	@ 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 80064d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80064d4:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 80064d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80064dc:	2220      	movs	r2, #32
 80064de:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 80064e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80064e6:	f893 31c5 	ldrb.w	r3, [r3, #453]	@ 0x1c5
 80064ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10c      	bne.n	800650c <VL53L1_init_and_start_range+0x174>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 80064f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80064f6:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	@ 0x58
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	b29b      	uxth	r3, r3
 8006500:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 8006502:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006506:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 800650a:	e004      	b.n	8006516 <VL53L1_init_and_start_range+0x17e>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800650c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006510:	2200      	movs	r2, #0
 8006512:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 8006516:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800651a:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b04      	cmp	r3, #4
 8006522:	d805      	bhi.n	8006530 <VL53L1_init_and_start_range+0x198>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8006524:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006528:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800652c:	2205      	movs	r2, #5
 800652e:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8006530:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006534:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8006538:	2b01      	cmp	r3, #1
 800653a:	d113      	bne.n	8006564 <VL53L1_init_and_start_range+0x1cc>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800653c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006540:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8006544:	2b01      	cmp	r3, #1
 8006546:	d10d      	bne.n	8006564 <VL53L1_init_and_start_range+0x1cc>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8006548:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800654c:	f893 22e7 	ldrb.w	r2, [r3, #743]	@ 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 8006550:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006554:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8006558:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800655c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8006560:	2206      	movs	r2, #6
 8006562:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 8006564:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006568:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	3b01      	subs	r3, #1
 8006570:	2b05      	cmp	r3, #5
 8006572:	d827      	bhi.n	80065c4 <VL53L1_init_and_start_range+0x22c>
 8006574:	a201      	add	r2, pc, #4	@ (adr r2, 800657c <VL53L1_init_and_start_range+0x1e4>)
 8006576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657a:	bf00      	nop
 800657c:	080065bd 	.word	0x080065bd
 8006580:	080065b5 	.word	0x080065b5
 8006584:	080065ad 	.word	0x080065ad
 8006588:	080065a5 	.word	0x080065a5
 800658c:	0800659d 	.word	0x0800659d
 8006590:	08006595 	.word	0x08006595
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8006594:	2301      	movs	r3, #1
 8006596:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 800659a:	e017      	b.n	80065cc <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 800659c:	230d      	movs	r3, #13
 800659e:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80065a2:	e013      	b.n	80065cc <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 80065a4:	2324      	movs	r3, #36	@ 0x24
 80065a6:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80065aa:	e00f      	b.n	80065cc <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 80065ac:	2344      	movs	r3, #68	@ 0x44
 80065ae:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80065b2:	e00b      	b.n	80065cc <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 80065b4:	235a      	movs	r3, #90	@ 0x5a
 80065b6:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80065ba:	e007      	b.n	80065cc <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 80065bc:	2371      	movs	r3, #113	@ 0x71
 80065be:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80065c2:	e003      	b.n	80065cc <VL53L1_init_and_start_range+0x234>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 80065c4:	2383      	movs	r3, #131	@ 0x83
 80065c6:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80065ca:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 80065cc:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80065d0:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
 80065d4:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 80065d8:	f107 030c 	add.w	r3, r7, #12
 80065dc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 80065e0:	2300      	movs	r3, #0
 80065e2:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 80065e6:	e00b      	b.n	8006600 <VL53L1_init_and_start_range+0x268>
		*pbuffer++ = 0;
 80065e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	f8c7 2138 	str.w	r2, [r7, #312]	@ 0x138
 80065f2:	2200      	movs	r2, #0
 80065f4:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 80065f6:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80065fa:	3301      	adds	r3, #1
 80065fc:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8006600:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 8006604:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8006608:	429a      	cmp	r2, r3
 800660a:	d3ed      	bcc.n	80065e8 <VL53L1_init_and_start_range+0x250>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 800660c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006610:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	2b05      	cmp	r3, #5
 8006618:	d917      	bls.n	800664a <VL53L1_init_and_start_range+0x2b2>
 800661a:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 800661e:	2b00      	cmp	r3, #0
 8006620:	d113      	bne.n	800664a <VL53L1_init_and_start_range+0x2b2>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8006622:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8006626:	f1c3 0301 	rsb	r3, r3, #1
 800662a:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800662e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 8006632:	f107 020c 	add.w	r2, r7, #12
 8006636:	4413      	add	r3, r2
 8006638:	461a      	mov	r2, r3
 800663a:	210b      	movs	r1, #11
 800663c:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8006640:	f002 f8d2 	bl	80087e8 <VL53L1_i2c_encode_static_nvm_managed>
 8006644:	4603      	mov	r3, r0
 8006646:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800664a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800664e:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b04      	cmp	r3, #4
 8006656:	d917      	bls.n	8006688 <VL53L1_init_and_start_range+0x2f0>
 8006658:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 800665c:	2b00      	cmp	r3, #0
 800665e:	d113      	bne.n	8006688 <VL53L1_init_and_start_range+0x2f0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8006660:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8006664:	f1c3 030d 	rsb	r3, r3, #13
 8006668:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800666c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 8006670:	f107 020c 	add.w	r2, r7, #12
 8006674:	4413      	add	r3, r2
 8006676:	461a      	mov	r2, r3
 8006678:	2117      	movs	r1, #23
 800667a:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 800667e:	f002 f98f 	bl	80089a0 <VL53L1_i2c_encode_customer_nvm_managed>
 8006682:	4603      	mov	r3, r0
 8006684:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8006688:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800668c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	2b03      	cmp	r3, #3
 8006694:	d917      	bls.n	80066c6 <VL53L1_init_and_start_range+0x32e>
 8006696:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 800669a:	2b00      	cmp	r3, #0
 800669c:	d113      	bne.n	80066c6 <VL53L1_init_and_start_range+0x32e>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800669e:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80066a2:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 80066a6:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80066aa:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_config(
 80066ae:	f107 020c 	add.w	r2, r7, #12
 80066b2:	4413      	add	r3, r2
 80066b4:	461a      	mov	r2, r3
 80066b6:	2120      	movs	r1, #32
 80066b8:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 80066bc:	f002 faae 	bl	8008c1c <VL53L1_i2c_encode_static_config>
 80066c0:	4603      	mov	r3, r0
 80066c2:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 80066c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80066ca:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d917      	bls.n	8006704 <VL53L1_init_and_start_range+0x36c>
 80066d4:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d113      	bne.n	8006704 <VL53L1_init_and_start_range+0x36c>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80066dc:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80066e0:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 80066e4:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80066e8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_general_config(
 80066ec:	f107 020c 	add.w	r2, r7, #12
 80066f0:	4413      	add	r3, r2
 80066f2:	461a      	mov	r2, r3
 80066f4:	2116      	movs	r1, #22
 80066f6:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80066fa:	f002 fb72 	bl	8008de2 <VL53L1_i2c_encode_general_config>
 80066fe:	4603      	mov	r3, r0
 8006700:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8006704:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006708:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d917      	bls.n	8006742 <VL53L1_init_and_start_range+0x3aa>
 8006712:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8006716:	2b00      	cmp	r3, #0
 8006718:	d113      	bne.n	8006742 <VL53L1_init_and_start_range+0x3aa>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800671a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 800671e:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8006722:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006726:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_timing_config(
 800672a:	f107 020c 	add.w	r2, r7, #12
 800672e:	4413      	add	r3, r2
 8006730:	461a      	mov	r2, r3
 8006732:	2117      	movs	r1, #23
 8006734:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8006738:	f002 fbd7 	bl	8008eea <VL53L1_i2c_encode_timing_config>
 800673c:	4603      	mov	r3, r0
 800673e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8006742:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006746:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d036      	beq.n	80067be <VL53L1_init_and_start_range+0x426>
 8006750:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8006754:	2b00      	cmp	r3, #0
 8006756:	d132      	bne.n	80067be <VL53L1_init_and_start_range+0x426>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8006758:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 800675c:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 8006760:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 8006764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006768:	791b      	ldrb	r3, [r3, #4]
 800676a:	f003 0320 	and.w	r3, r3, #32
 800676e:	2b00      	cmp	r3, #0
 8006770:	d017      	beq.n	80067a2 <VL53L1_init_and_start_range+0x40a>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 8006772:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006776:	789b      	ldrb	r3, [r3, #2]
 8006778:	f043 0301 	orr.w	r3, r3, #1
 800677c:	b2da      	uxtb	r2, r3
 800677e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006782:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 8006784:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006788:	789b      	ldrb	r3, [r3, #2]
 800678a:	f043 0301 	orr.w	r3, r3, #1
 800678e:	b2da      	uxtb	r2, r3
 8006790:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006794:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 8006796:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800679a:	789a      	ldrb	r2, [r3, #2]
 800679c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80067a0:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80067a2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_dynamic_config(
 80067a6:	f107 020c 	add.w	r2, r7, #12
 80067aa:	4413      	add	r3, r2
 80067ac:	461a      	mov	r2, r3
 80067ae:	2112      	movs	r1, #18
 80067b0:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80067b4:	f002 fc1b 	bl	8008fee <VL53L1_i2c_encode_dynamic_config>
 80067b8:	4603      	mov	r3, r0
 80067ba:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 80067be:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d113      	bne.n	80067ee <VL53L1_init_and_start_range+0x456>

		i2c_buffer_offset_bytes = \
 80067c6:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80067ca:	f1c3 0383 	rsb	r3, r3, #131	@ 0x83
 80067ce:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80067d2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_system_control(
 80067d6:	f107 020c 	add.w	r2, r7, #12
 80067da:	4413      	add	r3, r2
 80067dc:	461a      	mov	r2, r3
 80067de:	2105      	movs	r1, #5
 80067e0:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80067e4:	f002 fc88 	bl	80090f8 <VL53L1_i2c_encode_system_control>
 80067e8:	4603      	mov	r3, r0
 80067ea:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 80067ee:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10f      	bne.n	8006816 <VL53L1_init_and_start_range+0x47e>
		status =
			VL53L1_WriteMulti(
 80067f6:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 80067fa:	f107 020c 	add.w	r2, r7, #12
 80067fe:	f8b7 1134 	ldrh.w	r1, [r7, #308]	@ 0x134
 8006802:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8006806:	f5a0 709e 	sub.w	r0, r0, #316	@ 0x13c
 800680a:	6800      	ldr	r0, [r0, #0]
 800680c:	f003 f964 	bl	8009ad8 <VL53L1_WriteMulti>
 8006810:	4603      	mov	r3, r0
 8006812:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 8006816:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 800681a:	2b00      	cmp	r3, #0
 800681c:	d109      	bne.n	8006832 <VL53L1_init_and_start_range+0x49a>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800681e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006822:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006826:	6818      	ldr	r0, [r3, #0]
 8006828:	f001 f9a0 	bl	8007b6c <VL53L1_update_ll_driver_rd_state>
 800682c:	4603      	mov	r3, r0
 800682e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	if (status == VL53L1_ERROR_NONE)
 8006832:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8006836:	2b00      	cmp	r3, #0
 8006838:	d109      	bne.n	800684e <VL53L1_init_and_start_range+0x4b6>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800683a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800683e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006842:	6818      	ldr	r0, [r3, #0]
 8006844:	f001 fa65 	bl	8007d12 <VL53L1_update_ll_driver_cfg_state>
 8006848:	4603      	mov	r3, r0
 800684a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	LOG_FUNCTION_END(status);

	return status;
 800684e:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
}
 8006852:	4618      	mov	r0, r3
 8006854:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b0c8      	sub	sp, #288	@ 0x120
 8006860:	af00      	add	r7, sp, #0
 8006862:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006866:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800686a:	6018      	str	r0, [r3, #0]
 800686c:	460a      	mov	r2, r1
 800686e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006872:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8006876:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006878:	2300      	movs	r3, #0
 800687a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800687e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006882:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 800688c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006890:	f503 73e7 	add.w	r3, r3, #462	@ 0x1ce
 8006894:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 8006898:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800689c:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80068a0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 80068a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80068a8:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80068ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 80068b0:	2388      	movs	r3, #136	@ 0x88
 80068b2:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 80068b6:	2300      	movs	r3, #0
 80068b8:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 80068bc:	2300      	movs	r3, #0
 80068be:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 80068c2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80068c6:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d008      	beq.n	80068e2 <VL53L1_get_measurement_results+0x86>
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d10d      	bne.n	80068f0 <VL53L1_get_measurement_results+0x94>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 80068d4:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80068d8:	f5c3 7387 	rsb	r3, r3, #270	@ 0x10e
 80068dc:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80068e0:	e00a      	b.n	80068f8 <VL53L1_get_measurement_results+0x9c>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 80068e2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80068e6:	f1c3 03d5 	rsb	r3, r3, #213	@ 0xd5
 80068ea:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80068ee:	e003      	b.n	80068f8 <VL53L1_get_measurement_results+0x9c>
	default:
		i2c_buffer_size_bytes =
 80068f0:	232c      	movs	r3, #44	@ 0x2c
 80068f2:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 80068f6:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80068f8:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10f      	bne.n	8006920 <VL53L1_get_measurement_results+0xc4>
		status =
			VL53L1_ReadMulti(
 8006900:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8006904:	f107 0208 	add.w	r2, r7, #8
 8006908:	f8b7 110a 	ldrh.w	r1, [r7, #266]	@ 0x10a
 800690c:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8006910:	f5a0 708e 	sub.w	r0, r0, #284	@ 0x11c
 8006914:	6800      	ldr	r0, [r0, #0]
 8006916:	f003 f915 	bl	8009b44 <VL53L1_ReadMulti>
 800691a:	4603      	mov	r3, r0
 800691c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8006920:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006924:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d917      	bls.n	800695e <VL53L1_get_measurement_results+0x102>
 800692e:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8006932:	2b00      	cmp	r3, #0
 8006934:	d113      	bne.n	800695e <VL53L1_get_measurement_results+0x102>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006936:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 800693a:	f1c3 03d6 	rsb	r3, r3, #214	@ 0xd6
 800693e:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8006942:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_debug_results(
 8006946:	f107 0208 	add.w	r2, r7, #8
 800694a:	4413      	add	r3, r2
 800694c:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8006950:	4619      	mov	r1, r3
 8006952:	2038      	movs	r0, #56	@ 0x38
 8006954:	f002 fd62 	bl	800941c <VL53L1_i2c_decode_debug_results>
 8006958:	4603      	mov	r3, r0
 800695a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800695e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006962:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d017      	beq.n	800699c <VL53L1_get_measurement_results+0x140>
 800696c:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8006970:	2b00      	cmp	r3, #0
 8006972:	d113      	bne.n	800699c <VL53L1_get_measurement_results+0x140>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006974:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8006978:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 800697c:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8006980:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_core_results(
 8006984:	f107 0208 	add.w	r2, r7, #8
 8006988:	4413      	add	r3, r2
 800698a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800698e:	4619      	mov	r1, r3
 8006990:	2021      	movs	r0, #33	@ 0x21
 8006992:	f002 fce2 	bl	800935a <VL53L1_i2c_decode_core_results>
 8006996:	4603      	mov	r3, r0
 8006998:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800699c:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d110      	bne.n	80069c6 <VL53L1_get_measurement_results+0x16a>

		i2c_buffer_offset_bytes = 0;
 80069a4:	2300      	movs	r3, #0
 80069a6:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80069aa:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_system_results(
 80069ae:	f107 0208 	add.w	r2, r7, #8
 80069b2:	4413      	add	r3, r2
 80069b4:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80069b8:	4619      	mov	r1, r3
 80069ba:	202c      	movs	r0, #44	@ 0x2c
 80069bc:	f002 fbd7 	bl	800916e <VL53L1_i2c_decode_system_results>
 80069c0:	4603      	mov	r3, r0
 80069c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 80069c6:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b088      	sub	sp, #32
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	460b      	mov	r3, r1
 80069de:	607a      	str	r2, [r7, #4]
 80069e0:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80069e2:	2300      	movs	r3, #0
 80069e4:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 80069f0:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80069f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d106      	bne.n	8006a0c <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 80069fe:	7afb      	ldrb	r3, [r7, #11]
 8006a00:	4619      	mov	r1, r3
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f7ff ff2a 	bl	800685c <VL53L1_get_measurement_results>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 8006a0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10c      	bne.n	8006a2e <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	f503 71e7 	add.w	r1, r3, #462	@ 0x1ce
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	f503 7222 	add.w	r2, r3, #648	@ 0x288
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f000 f85d 	bl	8006ae8 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d11f      	bne.n	8006a78 <VL53L1_get_device_results+0xa4>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 8006a38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10e      	bne.n	8006a5e <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d109      	bne.n	8006a5e <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f001 fe31 	bl	80086b2 <VL53L1_low_power_auto_setup_manual_calibration>
 8006a50:	4603      	mov	r3, r0
 8006a52:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
 8006a5c:	e00c      	b.n	8006a78 <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 8006a5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d108      	bne.n	8006a78 <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d103      	bne.n	8006a78 <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	2202      	movs	r2, #2
 8006a74:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 8006a8c:	2284      	movs	r2, #132	@ 0x84
 8006a8e:	6939      	ldr	r1, [r7, #16]
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f004 f8c6 	bl	800ac22 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 8006a96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d104      	bne.n	8006aa8 <VL53L1_get_device_results+0xd4>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f001 f8ec 	bl	8007c7c <VL53L1_check_ll_driver_rd_state>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8006aa8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3720      	adds	r7, #32
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8006ac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d107      	bne.n	8006adc <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 8006acc:	78fb      	ldrb	r3, [r7, #3]
 8006ace:	2203      	movs	r2, #3
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff fc60 	bl	8006398 <VL53L1_init_and_start_range>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8006adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b089      	sub	sp, #36	@ 0x24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
 8006af4:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8006af6:	2300      	movs	r3, #0
 8006af8:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 8006afe:	2300      	movs	r3, #0
 8006b00:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	78da      	ldrb	r2, [r3, #3]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 8006b10:	2300      	movs	r3, #0
 8006b12:	77fb      	strb	r3, [r7, #31]
 8006b14:	e0d0      	b.n	8006cb8 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	7ffa      	ldrb	r2, [r7, #31]
 8006b1a:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	78db      	ldrb	r3, [r3, #3]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10a      	bne.n	8006b40 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	785b      	ldrb	r3, [r3, #1]
 8006b2e:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8006b32:	2b09      	cmp	r3, #9
 8006b34:	d104      	bne.n	8006b40 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	2213      	movs	r2, #19
 8006b3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b3e:	e007      	b.n	8006b50 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	785b      	ldrb	r3, [r3, #1]
 8006b44:	f003 031f 	and.w	r3, r3, #31
 8006b48:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		}

		switch (i) {
 8006b50:	7ffb      	ldrb	r3, [r7, #31]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d002      	beq.n	8006b5c <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d05d      	beq.n	8006c16 <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 8006b5a:	e0a7      	b.n	8006cac <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	789b      	ldrb	r3, [r3, #2]
 8006b60:	2b07      	cmp	r3, #7
 8006b62:	d104      	bne.n	8006b6e <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	821a      	strh	r2, [r3, #16]
 8006b6c:	e00c      	b.n	8006b88 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	789b      	ldrb	r3, [r3, #2]
 8006b72:	2b08      	cmp	r3, #8
 8006b74:	d104      	bne.n	8006b80 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	821a      	strh	r2, [r3, #16]
 8006b7e:	e003      	b.n	8006b88 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	859a      	strh	r2, [r3, #44]	@ 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	85da      	strh	r2, [r3, #46]	@ 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	861a      	strh	r2, [r3, #48]	@ 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	895b      	ldrh	r3, [r3, #10]
 8006ba4:	015b      	lsls	r3, r3, #5
 8006ba6:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bae:	d302      	bcc.n	8006bb6 <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 8006bb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006bb4:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	871a      	strh	r2, [r3, #56]	@ 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	875a      	strh	r2, [r3, #58]	@ 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 8006bca:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	fb02 f303 	mul.w	r3, r2, r3
 8006bd4:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006bdc:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	da01      	bge.n	8006be8 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 8006be4:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8006be8:	12db      	asrs	r3, r3, #11
 8006bea:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	b21a      	sxth	r2, r3
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	879a      	strh	r2, [r3, #60]	@ 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	621a      	str	r2, [r3, #32]

			break;
 8006c14:	e04a      	b.n	8006cac <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	859a      	strh	r2, [r3, #44]	@ 0x2c
			pdata->avg_signal_count_rate_mcps =
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006c2c:	85da      	strh	r2, [r3, #46]	@ 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	861a      	strh	r2, [r3, #48]	@ 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	8bdb      	ldrh	r3, [r3, #30]
 8006c3a:	015b      	lsls	r3, r3, #5
 8006c3c:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c44:	d302      	bcc.n	8006c4c <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 8006c46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006c4a:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	871a      	strh	r2, [r3, #56]	@ 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	875a      	strh	r2, [r3, #58]	@ 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
			range_mm =
 8006c60:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	fb02 f303 	mul.w	r3, r2, r3
 8006c6a:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c72:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	da01      	bge.n	8006c7e <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 8006c7a:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8006c7e:	12db      	asrs	r3, r3, #11
 8006c80:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	b21a      	sxth	r2, r3
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	879a      	strh	r2, [r3, #60]	@ 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	621a      	str	r2, [r3, #32]

			break;
 8006caa:	bf00      	nop
		}

		pdata++;
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	3340      	adds	r3, #64	@ 0x40
 8006cb0:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 8006cb2:	7ffb      	ldrb	r3, [r7, #31]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	77fb      	strb	r3, [r7, #31]
 8006cb8:	7ffb      	ldrb	r3, [r7, #31]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	f67f af2b 	bls.w	8006b16 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	785b      	ldrb	r3, [r3, #1]
 8006cca:	f003 031f 	and.w	r3, r3, #31
 8006cce:	2b11      	cmp	r3, #17
 8006cd0:	bf8c      	ite	hi
 8006cd2:	2201      	movhi	r2, #1
 8006cd4:	2200      	movls	r2, #0
 8006cd6:	b2d2      	uxtb	r2, r2
 8006cd8:	2a00      	cmp	r2, #0
 8006cda:	d117      	bne.n	8006d0c <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
 8006cdc:	4a0e      	ldr	r2, [pc, #56]	@ (8006d18 <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 8006cde:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	bf14      	ite	ne
 8006cea:	2301      	movne	r3, #1
 8006cec:	2300      	moveq	r3, #0
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00b      	beq.n	8006d0c <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	785b      	ldrb	r3, [r3, #1]
 8006cf8:	f003 031f 	and.w	r3, r3, #31
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	break;
 8006d0a:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8006d0c:	bf00      	nop
 8006d0e:	3724      	adds	r7, #36	@ 0x24
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	0002200e 	.word	0x0002200e

08006d1c <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	460b      	mov	r3, r1
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8006d32:	897b      	ldrh	r3, [r7, #10]
 8006d34:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8006d38:	2b38      	cmp	r3, #56	@ 0x38
 8006d3a:	f200 8204 	bhi.w	8007146 <VL53L1_get_tuning_parm+0x42a>
 8006d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d44 <VL53L1_get_tuning_parm+0x28>)
 8006d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d44:	08006e29 	.word	0x08006e29
 8006d48:	08006e37 	.word	0x08006e37
 8006d4c:	08006e45 	.word	0x08006e45
 8006d50:	08006e53 	.word	0x08006e53
 8006d54:	08006e61 	.word	0x08006e61
 8006d58:	08006e6f 	.word	0x08006e6f
 8006d5c:	08006e7d 	.word	0x08006e7d
 8006d60:	08006e8b 	.word	0x08006e8b
 8006d64:	08006e99 	.word	0x08006e99
 8006d68:	08006ea7 	.word	0x08006ea7
 8006d6c:	08006eb5 	.word	0x08006eb5
 8006d70:	08006ec3 	.word	0x08006ec3
 8006d74:	08006ed1 	.word	0x08006ed1
 8006d78:	08006edf 	.word	0x08006edf
 8006d7c:	08006eed 	.word	0x08006eed
 8006d80:	08006efb 	.word	0x08006efb
 8006d84:	08006f09 	.word	0x08006f09
 8006d88:	08006f17 	.word	0x08006f17
 8006d8c:	08006f25 	.word	0x08006f25
 8006d90:	08006f33 	.word	0x08006f33
 8006d94:	08006f41 	.word	0x08006f41
 8006d98:	08006f4f 	.word	0x08006f4f
 8006d9c:	08006f5d 	.word	0x08006f5d
 8006da0:	08006f6b 	.word	0x08006f6b
 8006da4:	08006f79 	.word	0x08006f79
 8006da8:	08006f87 	.word	0x08006f87
 8006dac:	08006f95 	.word	0x08006f95
 8006db0:	08006fa3 	.word	0x08006fa3
 8006db4:	08006fb1 	.word	0x08006fb1
 8006db8:	08006fbf 	.word	0x08006fbf
 8006dbc:	08006fcd 	.word	0x08006fcd
 8006dc0:	08006fdb 	.word	0x08006fdb
 8006dc4:	08006fe9 	.word	0x08006fe9
 8006dc8:	08006ff7 	.word	0x08006ff7
 8006dcc:	08007005 	.word	0x08007005
 8006dd0:	08007013 	.word	0x08007013
 8006dd4:	08007021 	.word	0x08007021
 8006dd8:	0800702f 	.word	0x0800702f
 8006ddc:	0800703d 	.word	0x0800703d
 8006de0:	0800704b 	.word	0x0800704b
 8006de4:	08007059 	.word	0x08007059
 8006de8:	08007067 	.word	0x08007067
 8006dec:	08007075 	.word	0x08007075
 8006df0:	08007083 	.word	0x08007083
 8006df4:	08007091 	.word	0x08007091
 8006df8:	0800709f 	.word	0x0800709f
 8006dfc:	080070ad 	.word	0x080070ad
 8006e00:	080070bb 	.word	0x080070bb
 8006e04:	080070c9 	.word	0x080070c9
 8006e08:	080070d7 	.word	0x080070d7
 8006e0c:	080070e5 	.word	0x080070e5
 8006e10:	080070f3 	.word	0x080070f3
 8006e14:	08007101 	.word	0x08007101
 8006e18:	0800710f 	.word	0x0800710f
 8006e1c:	0800711d 	.word	0x0800711d
 8006e20:	0800712b 	.word	0x0800712b
 8006e24:	08007139 	.word	0x08007139

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8006e2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	601a      	str	r2, [r3, #0]
	break;
 8006e34:	e18e      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8006e3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	601a      	str	r2, [r3, #0]
	break;
 8006e42:	e187      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 8006e4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	601a      	str	r2, [r3, #0]
	break;
 8006e50:	e180      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8006e58:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	601a      	str	r2, [r3, #0]
	break;
 8006e5e:	e179      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8006e66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	601a      	str	r2, [r3, #0]
	break;
 8006e6c:	e172      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 8006e74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	601a      	str	r2, [r3, #0]
	break;
 8006e7a:	e16b      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8006e82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	601a      	str	r2, [r3, #0]
	break;
 8006e88:	e164      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8006e90:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	601a      	str	r2, [r3, #0]
	break;
 8006e96:	e15d      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	@ 0xb6
 8006e9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	601a      	str	r2, [r3, #0]
	break;
 8006ea4:	e156      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8006eac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	601a      	str	r2, [r3, #0]
	break;
 8006eb2:	e14f      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8006eba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	601a      	str	r2, [r3, #0]
	break;
 8006ec0:	e148      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8006ec8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	601a      	str	r2, [r3, #0]
	break;
 8006ece:	e141      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 8006ed6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	601a      	str	r2, [r3, #0]
	break;
 8006edc:	e13a      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 8006ee4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	601a      	str	r2, [r3, #0]
	break;
 8006eea:	e133      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8006ef2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	601a      	str	r2, [r3, #0]
	break;
 8006ef8:	e12c      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 8006f00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	601a      	str	r2, [r3, #0]
	break;
 8006f06:	e125      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f893 30c4 	ldrb.w	r3, [r3, #196]	@ 0xc4
 8006f0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	601a      	str	r2, [r3, #0]
	break;
 8006f14:	e11e      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	f893 3140 	ldrb.w	r3, [r3, #320]	@ 0x140
 8006f1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	601a      	str	r2, [r3, #0]
	break;
 8006f22:	e117      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 8006f2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	601a      	str	r2, [r3, #0]
	break;
 8006f30:	e110      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 8006f38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	601a      	str	r2, [r3, #0]
	break;
 8006f3e:	e109      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8006f46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	601a      	str	r2, [r3, #0]
	break;
 8006f4c:	e102      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	@ 0x13e
 8006f54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	601a      	str	r2, [r3, #0]
	break;
 8006f5a:	e0fb      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 8006f62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	601a      	str	r2, [r3, #0]
	break;
 8006f68:	e0f4      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	f893 30ab 	ldrb.w	r3, [r3, #171]	@ 0xab
 8006f70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	601a      	str	r2, [r3, #0]
	break;
 8006f76:	e0ed      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8006f7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	601a      	str	r2, [r3, #0]
	break;
 8006f84:	e0e6      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8006f8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	601a      	str	r2, [r3, #0]
	break;
 8006f92:	e0df      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 8006f9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	601a      	str	r2, [r3, #0]
	break;
 8006fa0:	e0d8      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 8006fa8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	601a      	str	r2, [r3, #0]
	break;
 8006fae:	e0d1      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	f893 30c6 	ldrb.w	r3, [r3, #198]	@ 0xc6
 8006fb6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	601a      	str	r2, [r3, #0]
	break;
 8006fbc:	e0ca      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8006fc4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	601a      	str	r2, [r3, #0]
	break;
 8006fca:	e0c3      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8006fd2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	601a      	str	r2, [r3, #0]
	break;
 8006fd8:	e0bc      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8006fe0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	601a      	str	r2, [r3, #0]
	break;
 8006fe6:	e0b5      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006fee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	601a      	str	r2, [r3, #0]
	break;
 8006ff4:	e0ae      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	f8b3 3118 	ldrh.w	r3, [r3, #280]	@ 0x118
 8006ffc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	601a      	str	r2, [r3, #0]
	break;
 8007002:	e0a7      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 800700a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	601a      	str	r2, [r3, #0]
	break;
 8007010:	e0a0      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 8007018:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	601a      	str	r2, [r3, #0]
	break;
 800701e:	e099      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8007026:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	601a      	str	r2, [r3, #0]
	break;
 800702c:	e092      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8007034:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	601a      	str	r2, [r3, #0]
	break;
 800703a:	e08b      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8007042:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	601a      	str	r2, [r3, #0]
	break;
 8007048:	e084      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8007050:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	601a      	str	r2, [r3, #0]
	break;
 8007056:	e07d      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 800705e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	601a      	str	r2, [r3, #0]
	break;
 8007064:	e076      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 800706c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	601a      	str	r2, [r3, #0]
	break;
 8007072:	e06f      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	f893 3156 	ldrb.w	r3, [r3, #342]	@ 0x156
 800707a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	601a      	str	r2, [r3, #0]
	break;
 8007080:	e068      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f893 3121 	ldrb.w	r3, [r3, #289]	@ 0x121
 8007088:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	601a      	str	r2, [r3, #0]
	break;
 800708e:	e061      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 8007096:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	601a      	str	r2, [r3, #0]
	break;
 800709c:	e05a      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f8b3 3128 	ldrh.w	r3, [r3, #296]	@ 0x128
 80070a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	601a      	str	r2, [r3, #0]
	break;
 80070aa:	e053      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	@ 0xca
 80070b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	601a      	str	r2, [r3, #0]
	break;
 80070b8:	e04c      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 80070c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	601a      	str	r2, [r3, #0]
	break;
 80070c6:	e045      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80070ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	601a      	str	r2, [r3, #0]
	break;
 80070d4:	e03e      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80070dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	601a      	str	r2, [r3, #0]
	break;
 80070e2:	e037      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80070ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	601a      	str	r2, [r3, #0]
	break;
 80070f0:	e030      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80070f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	601a      	str	r2, [r3, #0]
	break;
 80070fe:	e029      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007106:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	601a      	str	r2, [r3, #0]
	break;
 800710c:	e022      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007114:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	601a      	str	r2, [r3, #0]
	break;
 800711a:	e01b      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8007122:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	601a      	str	r2, [r3, #0]
	break;
 8007128:	e014      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007130:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	601a      	str	r2, [r3, #0]
	break;
 8007136:	e00d      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800713e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	601a      	str	r2, [r3, #0]
	break;
 8007144:	e006      	b.n	8007154 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800714c:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800714e:	23fc      	movs	r3, #252	@ 0xfc
 8007150:	75fb      	strb	r3, [r7, #23]
	break;
 8007152:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8007154:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007158:	4618      	mov	r0, r3
 800715a:	371c      	adds	r7, #28
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800716c:	2300      	movs	r3, #0
 800716e:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2208      	movs	r2, #8
 8007174:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	220b      	movs	r2, #11
 800717a:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007182:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 800718a:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8007192:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 800719a:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800719c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80071b4:	2300      	movs	r3, #0
 80071b6:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2212      	movs	r2, #18
 80071c2:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	220f      	movs	r2, #15
 80071c8:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2202      	movs	r2, #2
 80071ce:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 80071d6:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	220c      	movs	r2, #12
 80071dc:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80071de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b084      	sub	sp, #16
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80071f8:	2300      	movs	r3, #0
 80071fa:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	895b      	ldrh	r3, [r3, #10]
 8007200:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	895b      	ldrh	r3, [r3, #10]
 800721e:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	2200      	movs	r2, #0
 800723c:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2240      	movs	r2, #64	@ 0x40
 8007242:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10d      	bne.n	8007268 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d108      	bne.n	8007268 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d103      	bne.n	8007268 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	2200      	movs	r2, #0
 8007264:	741a      	strb	r2, [r3, #16]
 8007266:	e002      	b.n	800726e <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	2201      	movs	r2, #1
 800726c:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800726e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d114      	bne.n	80072a0 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800727a:	2b01      	cmp	r3, #1
 800727c:	d110      	bne.n	80072a0 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	6818      	ldr	r0, [r3, #0]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	7d1b      	ldrb	r3, [r3, #20]
 8007292:	f000 ffc9 	bl	8008228 <VL53L1_calc_range_ignore_threshold>
 8007296:	4603      	mov	r3, r0
 8007298:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	82da      	strh	r2, [r3, #22]
 800729e:	e002      	b.n	80072a6 <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	2200      	movs	r2, #0
 80072a4:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 80072a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80072ba:	2300      	movs	r3, #0
 80072bc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80072c4:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80072cc:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 80072d4:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 80072dc:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2208      	movs	r2, #8
 80072e2:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2228      	movs	r2, #40	@ 0x28
 80072e8:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2209      	movs	r2, #9
 80072ee:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80072f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007308:	2300      	movs	r3, #0
 800730a:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f248 0203 	movw	r2, #32771	@ 0x8003
 8007312:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f248 0201 	movw	r2, #32769	@ 0x8001
 800731a:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f248 0241 	movw	r2, #32833	@ 0x8041
 8007322:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	220e      	movs	r2, #14
 8007328:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	220a      	movs	r2, #10
 800732e:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2206      	movs	r2, #6
 8007334:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	220e      	movs	r2, #14
 800733a:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	220a      	movs	r2, #10
 8007340:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2206      	movs	r2, #6
 8007346:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2202      	movs	r2, #2
 800734c:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2221      	movs	r2, #33	@ 0x21
 8007352:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8007366:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800736e:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8007376:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	22c0      	movs	r2, #192	@ 0xc0
 800737c:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	22c0      	movs	r2, #192	@ 0xc0
 8007382:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	22c0      	movs	r2, #192	@ 0xc0
 8007388:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2208      	movs	r2, #8
 800738e:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2210      	movs	r2, #16
 8007394:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2201      	movs	r2, #1
 800739a:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2202      	movs	r2, #2
 80073a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2202      	movs	r2, #2
 80073b2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80073c4:	84da      	strh	r2, [r3, #38]	@ 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80073cc:	851a      	strh	r2, [r3, #40]	@ 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f248 0230 	movw	r2, #32816	@ 0x8030
 80073d4:	62da      	str	r2, [r3, #44]	@ 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80073dc:	631a      	str	r2, [r3, #48]	@ 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80073e4:	635a      	str	r2, [r3, #52]	@ 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80073ec:	639a      	str	r2, [r3, #56]	@ 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f24f 6218 	movw	r2, #63000	@ 0xf618
 80073f4:	641a      	str	r2, [r3, #64]	@ 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 80073fc:	645a      	str	r2, [r3, #68]	@ 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8007404:	63da      	str	r2, [r3, #60]	@ 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800740c:	649a      	str	r2, [r3, #72]	@ 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800740e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3714      	adds	r7, #20
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800741e:	b480      	push	{r7}
 8007420:	b087      	sub	sp, #28
 8007422:	af00      	add	r7, sp, #0
 8007424:	60f8      	str	r0, [r7, #12]
 8007426:	60b9      	str	r1, [r7, #8]
 8007428:	607a      	str	r2, [r7, #4]
 800742a:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800742c:	2300      	movs	r3, #0
 800742e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8007436:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2211      	movs	r2, #17
 8007478:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2202      	movs	r2, #2
 800747e:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2202      	movs	r2, #2
 800748a:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2208      	movs	r2, #8
 8007490:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8007498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749a:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 80074a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a2:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 80074a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074aa:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2201      	movs	r2, #1
 80074b6:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	22ff      	movs	r2, #255	@ 0xff
 80074ce:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 80074d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d2:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 80074d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074da:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2200      	movs	r2, #0
 80074fc:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2220      	movs	r2, #32
 8007502:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	220b      	movs	r2, #11
 8007508:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800750a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750c:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2202      	movs	r2, #2
 8007516:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	220d      	movs	r2, #13
 800751c:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800751e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007520:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	2200      	movs	r2, #0
 800752a:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2201      	movs	r2, #1
 8007530:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	2200      	movs	r2, #0
 8007536:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	2200      	movs	r2, #0
 800753c:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	f44f 420c 	mov.w	r2, #35840	@ 0x8c00
 8007544:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2200      	movs	r2, #0
 800754a:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2238      	movs	r2, #56	@ 0x38
 8007550:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	22ff      	movs	r2, #255	@ 0xff
 8007556:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2201      	movs	r2, #1
 800755c:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	221a      	movs	r2, #26
 8007568:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2220      	movs	r2, #32
 8007574:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	22cc      	movs	r2, #204	@ 0xcc
 8007580:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	220b      	movs	r2, #11
 8007586:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	22f5      	movs	r2, #245	@ 0xf5
 8007592:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2209      	movs	r2, #9
 8007598:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800759a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759c:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 80075a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a4:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2208      	movs	r2, #8
 80075ae:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2278      	movs	r2, #120	@ 0x78
 80075b4:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2201      	movs	r2, #1
 80075c6:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2200      	movs	r2, #0
 80075cc:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2200      	movs	r2, #0
 80075d2:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	2200      	movs	r2, #0
 80075d8:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 80075da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075dc:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
	pdynamic->system__seed_config =
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	220b      	movs	r2, #11
 80075e8:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	2209      	movs	r2, #9
 80075ee:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 80075f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f2:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 80075f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fa:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	2201      	movs	r2, #1
 8007604:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8007606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007608:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
	pdynamic->sd_config__first_order_select =
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8007610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007612:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
	pdynamic->sd_config__quantifier         =
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	22c7      	movs	r2, #199	@ 0xc7
 800761e:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	22ff      	movs	r2, #255	@ 0xff
 8007624:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	22db      	movs	r2, #219	@ 0xdb
 800762a:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2202      	movs	r2, #2
 8007630:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	2200      	movs	r2, #0
 8007636:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	2201      	movs	r2, #1
 800763c:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	2201      	movs	r2, #1
 8007642:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 8007644:	6a3b      	ldr	r3, [r7, #32]
 8007646:	2221      	movs	r2, #33	@ 0x21
 8007648:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800764a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800764e:	4618      	mov	r0, r3
 8007650:	371c      	adds	r7, #28
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b088      	sub	sp, #32
 800765e:	af02      	add	r7, sp, #8
 8007660:	60f8      	str	r0, [r7, #12]
 8007662:	60b9      	str	r1, [r7, #8]
 8007664:	607a      	str	r2, [r7, #4]
 8007666:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007668:	2300      	movs	r3, #0
 800766a:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800766c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766e:	9301      	str	r3, [sp, #4]
 8007670:	6a3b      	ldr	r3, [r7, #32]
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	68b9      	ldr	r1, [r7, #8]
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f7ff fecf 	bl	800741e <VL53L1_preset_mode_standard_ranging>
 8007680:	4603      	mov	r3, r0
 8007682:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8007684:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d121      	bne.n	80076d0 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2207      	movs	r2, #7
 8007690:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2205      	movs	r2, #5
 8007696:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8007698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769a:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 80076a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a2:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2208      	movs	r2, #8
 80076ac:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2238      	movs	r2, #56	@ 0x38
 80076b2:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	2207      	movs	r2, #7
 80076b8:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	2205      	movs	r2, #5
 80076be:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 80076c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c2:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 80076c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ca:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 80076d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b088      	sub	sp, #32
 80076e0:	af02      	add	r7, sp, #8
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
 80076e8:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80076ea:	2300      	movs	r3, #0
 80076ec:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80076ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f0:	9301      	str	r3, [sp, #4]
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	68b9      	ldr	r1, [r7, #8]
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f7ff fe8e 	bl	800741e <VL53L1_preset_mode_standard_ranging>
 8007702:	4603      	mov	r3, r0
 8007704:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8007706:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d121      	bne.n	8007752 <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	220f      	movs	r2, #15
 8007712:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	220d      	movs	r2, #13
 8007718:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800771a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771c:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8007722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007724:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2208      	movs	r2, #8
 800772e:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	22b8      	movs	r2, #184	@ 0xb8
 8007734:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	220f      	movs	r2, #15
 800773a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	220d      	movs	r2, #13
 8007740:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 8007742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007744:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800774a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774c:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8007752:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3718      	adds	r7, #24
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b088      	sub	sp, #32
 8007762:	af02      	add	r7, sp, #8
 8007764:	60f8      	str	r0, [r7, #12]
 8007766:	60b9      	str	r1, [r7, #8]
 8007768:	607a      	str	r2, [r7, #4]
 800776a:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800776c:	2300      	movs	r3, #0
 800776e:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8007770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007772:	9301      	str	r3, [sp, #4]
 8007774:	6a3b      	ldr	r3, [r7, #32]
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	68b9      	ldr	r1, [r7, #8]
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f7ff fe4d 	bl	800741e <VL53L1_preset_mode_standard_ranging>
 8007784:	4603      	mov	r3, r0
 8007786:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8007788:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d105      	bne.n	800779c <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	2202      	movs	r2, #2
 8007794:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	223b      	movs	r2, #59	@ 0x3b
 800779a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800779c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3718      	adds	r7, #24
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b088      	sub	sp, #32
 80077ac:	af02      	add	r7, sp, #8
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
 80077b4:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80077b6:	2300      	movs	r3, #0
 80077b8:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80077ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077bc:	9301      	str	r3, [sp, #4]
 80077be:	6a3b      	ldr	r3, [r7, #32]
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	68b9      	ldr	r1, [r7, #8]
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f7ff fe28 	bl	800741e <VL53L1_preset_mode_standard_ranging>
 80077ce:	4603      	mov	r3, r0
 80077d0:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80077d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d105      	bne.n	80077e6 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2202      	movs	r2, #2
 80077de:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	225b      	movs	r2, #91	@ 0x5b
 80077e4:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80077e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3718      	adds	r7, #24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b088      	sub	sp, #32
 80077f6:	af02      	add	r7, sp, #8
 80077f8:	60f8      	str	r0, [r7, #12]
 80077fa:	60b9      	str	r1, [r7, #8]
 80077fc:	607a      	str	r2, [r7, #4]
 80077fe:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007800:	2300      	movs	r3, #0
 8007802:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8007804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007806:	9301      	str	r3, [sp, #4]
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	68b9      	ldr	r1, [r7, #8]
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f7ff fe03 	bl	800741e <VL53L1_preset_mode_standard_ranging>
 8007818:	4603      	mov	r3, r0
 800781a:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800781c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d11a      	bne.n	800785a <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2200      	movs	r2, #0
 8007828:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	22b1      	movs	r2, #177	@ 0xb1
 8007834:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	22d4      	movs	r2, #212	@ 0xd4
 8007840:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007848:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800784a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784c:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	2240      	movs	r2, #64	@ 0x40
 8007858:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800785a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3718      	adds	r7, #24
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b088      	sub	sp, #32
 800786a:	af02      	add	r7, sp, #8
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	60b9      	str	r1, [r7, #8]
 8007870:	607a      	str	r2, [r7, #4]
 8007872:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007874:	2300      	movs	r3, #0
 8007876:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 8007878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787a:	9301      	str	r3, [sp, #4]
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	68b9      	ldr	r1, [r7, #8]
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f7ff fee7 	bl	800765a <VL53L1_preset_mode_standard_ranging_short_range>
 800788c:	4603      	mov	r3, r0
 800788e:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8007890:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d11a      	bne.n	80078ce <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	2200      	movs	r2, #0
 800789c:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2284      	movs	r2, #132	@ 0x84
 80078a8:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2201      	movs	r2, #1
 80078ae:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	22b1      	movs	r2, #177	@ 0xb1
 80078b4:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80078bc:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80078be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c0:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	2240      	movs	r2, #64	@ 0x40
 80078cc:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80078ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3718      	adds	r7, #24
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b088      	sub	sp, #32
 80078de:	af02      	add	r7, sp, #8
 80078e0:	60f8      	str	r0, [r7, #12]
 80078e2:	60b9      	str	r1, [r7, #8]
 80078e4:	607a      	str	r2, [r7, #4]
 80078e6:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80078e8:	2300      	movs	r3, #0
 80078ea:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 80078ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ee:	9301      	str	r3, [sp, #4]
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	9300      	str	r3, [sp, #0]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	68b9      	ldr	r1, [r7, #8]
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f7ff feee 	bl	80076dc <VL53L1_preset_mode_standard_ranging_long_range>
 8007900:	4603      	mov	r3, r0
 8007902:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8007904:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d11a      	bne.n	8007942 <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	2200      	movs	r2, #0
 8007910:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2297      	movs	r2, #151	@ 0x97
 800791c:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	22b1      	movs	r2, #177	@ 0xb1
 8007928:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007930:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8007932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007934:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800793c:	6a3b      	ldr	r3, [r7, #32]
 800793e:	2240      	movs	r2, #64	@ 0x40
 8007940:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007942:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3718      	adds	r7, #24
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b088      	sub	sp, #32
 8007952:	af02      	add	r7, sp, #8
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	607a      	str	r2, [r7, #4]
 800795a:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800795c:	2300      	movs	r3, #0
 800795e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 8007960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007962:	9301      	str	r3, [sp, #4]
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	68b9      	ldr	r1, [r7, #8]
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f7ff ff3f 	bl	80077f2 <VL53L1_preset_mode_timed_ranging>
 8007974:	4603      	mov	r3, r0
 8007976:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8007978:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d106      	bne.n	800798e <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8007980:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	68b8      	ldr	r0, [r7, #8]
 8007986:	f000 fe7b 	bl	8008680 <VL53L1_config_low_power_auto_mode>
 800798a:	4603      	mov	r3, r0
 800798c:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800798e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3718      	adds	r7, #24
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b088      	sub	sp, #32
 800799e:	af02      	add	r7, sp, #8
 80079a0:	60f8      	str	r0, [r7, #12]
 80079a2:	60b9      	str	r1, [r7, #8]
 80079a4:	607a      	str	r2, [r7, #4]
 80079a6:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80079a8:	2300      	movs	r3, #0
 80079aa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 80079ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ae:	9301      	str	r3, [sp, #4]
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	68b9      	ldr	r1, [r7, #8]
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f7ff ff53 	bl	8007866 <VL53L1_preset_mode_timed_ranging_short_range>
 80079c0:	4603      	mov	r3, r0
 80079c2:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 80079c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d106      	bne.n	80079da <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 80079cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	68b8      	ldr	r0, [r7, #8]
 80079d2:	f000 fe55 	bl	8008680 <VL53L1_config_low_power_auto_mode>
 80079d6:	4603      	mov	r3, r0
 80079d8:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 80079da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3718      	adds	r7, #24
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b088      	sub	sp, #32
 80079ea:	af02      	add	r7, sp, #8
 80079ec:	60f8      	str	r0, [r7, #12]
 80079ee:	60b9      	str	r1, [r7, #8]
 80079f0:	607a      	str	r2, [r7, #4]
 80079f2:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80079f4:	2300      	movs	r3, #0
 80079f6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 80079f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fa:	9301      	str	r3, [sp, #4]
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	68b9      	ldr	r1, [r7, #8]
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f7ff ff67 	bl	80078da <VL53L1_preset_mode_timed_ranging_long_range>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8007a10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d106      	bne.n	8007a26 <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8007a18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	68b8      	ldr	r0, [r7, #8]
 8007a1e:	f000 fe2f 	bl	8008680 <VL53L1_config_low_power_auto_mode>
 8007a22:	4603      	mov	r3, r0
 8007a24:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8007a26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3718      	adds	r7, #24
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b088      	sub	sp, #32
 8007a36:	af02      	add	r7, sp, #8
 8007a38:	60f8      	str	r0, [r7, #12]
 8007a3a:	60b9      	str	r1, [r7, #8]
 8007a3c:	607a      	str	r2, [r7, #4]
 8007a3e:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007a40:	2300      	movs	r3, #0
 8007a42:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8007a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a46:	9301      	str	r3, [sp, #4]
 8007a48:	6a3b      	ldr	r3, [r7, #32]
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	68b9      	ldr	r1, [r7, #8]
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f7ff fce3 	bl	800741e <VL53L1_preset_mode_standard_ranging>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8007a5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d116      	bne.n	8007a92 <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	2200      	movs	r2, #0
 8007a68:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	22b1      	movs	r2, #177	@ 0xb1
 8007a74:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	22d4      	movs	r2, #212	@ 0xd4
 8007a80:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8007a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a84:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 8007a8c:	6a3b      	ldr	r3, [r7, #32]
 8007a8e:	2210      	movs	r2, #16
 8007a90:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007a92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3718      	adds	r7, #24
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b088      	sub	sp, #32
 8007aa2:	af02      	add	r7, sp, #8
 8007aa4:	60f8      	str	r0, [r7, #12]
 8007aa6:	60b9      	str	r1, [r7, #8]
 8007aa8:	607a      	str	r2, [r7, #4]
 8007aaa:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007aac:	2300      	movs	r3, #0
 8007aae:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab2:	9301      	str	r3, [sp, #4]
 8007ab4:	6a3b      	ldr	r3, [r7, #32]
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	68b9      	ldr	r1, [r7, #8]
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f7ff fcad 	bl	800741e <VL53L1_preset_mode_standard_ranging>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8007ac8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d102      	bne.n	8007ad6 <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 8007ad6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3718      	adds	r7, #24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 8007ae2:	b480      	push	{r7}
 8007ae4:	b085      	sub	sp, #20
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2202      	movs	r2, #2
 8007afa:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	220d      	movs	r2, #13
 8007b02:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f640 028e 	movw	r2, #2190	@ 0x88e
 8007b0c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8007b0e:	bf00      	nop
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b085      	sub	sp, #20
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
 8007b22:	460b      	mov	r3, r1
 8007b24:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	332c      	adds	r3, #44	@ 0x2c
 8007b2e:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	78fa      	ldrb	r2, [r7, #3]
 8007b34:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2202      	movs	r2, #2
 8007b40:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	2200      	movs	r2, #0
 8007b46:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	78fa      	ldrb	r2, [r7, #3]
 8007b4c:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	2200      	movs	r2, #0
 8007b52:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	2202      	movs	r2, #2
 8007b58:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	71da      	strb	r2, [r3, #7]

}
 8007b60:	bf00      	nop
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 8007b74:	2300      	movs	r3, #0
 8007b76:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	332c      	adds	r3, #44	@ 0x2c
 8007b80:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8007b88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10c      	bne.n	8007baa <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2203      	movs	r2, #3
 8007b94:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	71da      	strb	r2, [r3, #7]
 8007ba8:	e060      	b.n	8007c6c <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	795b      	ldrb	r3, [r3, #5]
 8007bae:	2bff      	cmp	r3, #255	@ 0xff
 8007bb0:	d103      	bne.n	8007bba <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2280      	movs	r2, #128	@ 0x80
 8007bb6:	715a      	strb	r2, [r3, #5]
 8007bb8:	e005      	b.n	8007bc6 <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	795b      	ldrb	r3, [r3, #5]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	799b      	ldrb	r3, [r3, #6]
 8007bca:	f083 0302 	eor.w	r3, r3, #2
 8007bce:	b2da      	uxtb	r2, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	791b      	ldrb	r3, [r3, #4]
 8007bd8:	3b03      	subs	r3, #3
 8007bda:	2b05      	cmp	r3, #5
 8007bdc:	d839      	bhi.n	8007c52 <VL53L1_update_ll_driver_rd_state+0xe6>
 8007bde:	a201      	add	r2, pc, #4	@ (adr r2, 8007be4 <VL53L1_update_ll_driver_rd_state+0x78>)
 8007be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be4:	08007bfd 	.word	0x08007bfd
 8007be8:	08007c53 	.word	0x08007c53
 8007bec:	08007c53 	.word	0x08007c53
 8007bf0:	08007c27 	.word	0x08007c27
 8007bf4:	08007c35 	.word	0x08007c35
 8007bf8:	08007c3d 	.word	0x08007c3d

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	f893 31c6 	ldrb.w	r3, [r3, #454]	@ 0x1c6
 8007c02:	f003 0302 	and.w	r3, r3, #2
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	dd03      	ble.n	8007c12 <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2206      	movs	r2, #6
 8007c0e:	711a      	strb	r2, [r3, #4]
 8007c10:	e002      	b.n	8007c18 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2208      	movs	r2, #8
 8007c16:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	71da      	strb	r2, [r3, #7]

		break;
 8007c24:	e022      	b.n	8007c6c <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2208      	movs	r2, #8
 8007c30:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8007c32:	e01b      	b.n	8007c6c <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2208      	movs	r2, #8
 8007c38:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8007c3a:	e017      	b.n	8007c6c <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	79db      	ldrb	r3, [r3, #7]
 8007c40:	f083 0301 	eor.w	r3, r3, #1
 8007c44:	b2da      	uxtb	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2208      	movs	r2, #8
 8007c4e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8007c50:	e00c      	b.n	8007c6c <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2203      	movs	r2, #3
 8007c56:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2202      	movs	r2, #2
 8007c62:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	71da      	strb	r2, [r3, #7]

		break;
 8007c6a:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8007c6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	371c      	adds	r7, #28
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b089      	sub	sp, #36	@ 0x24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8007c84:	2300      	movs	r3, #0
 8007c86:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	332c      	adds	r3, #44	@ 0x2c
 8007c90:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	f503 73e7 	add.w	r3, r3, #462	@ 0x1ce
 8007c98:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 8007caa:	f003 031f 	and.w	r3, r3, #31
 8007cae:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	78db      	ldrb	r3, [r3, #3]
 8007cb4:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8007cba:	111b      	asrs	r3, r3, #4
 8007cbc:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 8007cbe:	f003 0302 	and.w	r3, r3, #2
 8007cc2:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8007cca:	f003 0320 	and.w	r3, r3, #32
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d017      	beq.n	8007d02 <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	791b      	ldrb	r3, [r3, #4]
 8007cd6:	2b06      	cmp	r3, #6
 8007cd8:	d105      	bne.n	8007ce6 <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
 8007cdc:	2b12      	cmp	r3, #18
 8007cde:	d010      	beq.n	8007d02 <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 8007ce0:	23ef      	movs	r3, #239	@ 0xef
 8007ce2:	77fb      	strb	r3, [r7, #31]
 8007ce4:	e00d      	b.n	8007d02 <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	795b      	ldrb	r3, [r3, #5]
 8007cea:	7bba      	ldrb	r2, [r7, #14]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d001      	beq.n	8007cf4 <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 8007cf0:	23ee      	movs	r3, #238	@ 0xee
 8007cf2:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	799b      	ldrb	r3, [r3, #6]
 8007cf8:	7b7a      	ldrb	r2, [r7, #13]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d001      	beq.n	8007d02 <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 8007cfe:	23ed      	movs	r3, #237	@ 0xed
 8007d00:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 8007d02:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3724      	adds	r7, #36	@ 0x24
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b087      	sub	sp, #28
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	332c      	adds	r3, #44	@ 0x2c
 8007d26:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8007d2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10c      	bne.n	8007d50 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2203      	movs	r2, #3
 8007d3a:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2202      	movs	r2, #2
 8007d46:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	70da      	strb	r2, [r3, #3]
 8007d4e:	e03e      	b.n	8007dce <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	785b      	ldrb	r3, [r3, #1]
 8007d54:	2bff      	cmp	r3, #255	@ 0xff
 8007d56:	d103      	bne.n	8007d60 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2280      	movs	r2, #128	@ 0x80
 8007d5c:	705a      	strb	r2, [r3, #1]
 8007d5e:	e005      	b.n	8007d6c <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	785b      	ldrb	r3, [r3, #1]
 8007d64:	3301      	adds	r3, #1
 8007d66:	b2da      	uxtb	r2, r3
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	789b      	ldrb	r3, [r3, #2]
 8007d70:	f083 0302 	eor.w	r3, r3, #2
 8007d74:	b2da      	uxtb	r2, r3
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d002      	beq.n	8007d88 <VL53L1_update_ll_driver_cfg_state+0x76>
 8007d82:	2b04      	cmp	r3, #4
 8007d84:	d00e      	beq.n	8007da4 <VL53L1_update_ll_driver_cfg_state+0x92>
 8007d86:	e015      	b.n	8007db4 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	78db      	ldrb	r3, [r3, #3]
 8007d8c:	f083 0301 	eor.w	r3, r3, #1
 8007d90:	b2da      	uxtb	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2204      	movs	r2, #4
 8007da0:	701a      	strb	r2, [r3, #0]
		break;
 8007da2:	e014      	b.n	8007dce <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	78db      	ldrb	r3, [r3, #3]
 8007da8:	f083 0301 	eor.w	r3, r3, #1
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	70da      	strb	r2, [r3, #3]

		break;
 8007db2:	e00c      	b.n	8007dce <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2203      	movs	r2, #3
 8007db8:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	70da      	strb	r2, [r3, #3]

		break;
 8007dcc:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8007dce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	371c      	adds	r7, #28
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8007dde:	b480      	push	{r7}
 8007de0:	b083      	sub	sp, #12
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	7c1a      	ldrb	r2, [r3, #16]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	3301      	adds	r3, #1
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	7c52      	ldrb	r2, [r2, #17]
 8007df8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	3302      	adds	r3, #2
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	7c92      	ldrb	r2, [r2, #18]
 8007e02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	3303      	adds	r3, #3
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	7cd2      	ldrb	r2, [r2, #19]
 8007e0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	3304      	adds	r3, #4
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	7d12      	ldrb	r2, [r2, #20]
 8007e16:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	3305      	adds	r3, #5
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	7d52      	ldrb	r2, [r2, #21]
 8007e20:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	3306      	adds	r3, #6
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	7d92      	ldrb	r2, [r2, #22]
 8007e2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	3307      	adds	r3, #7
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	7dd2      	ldrb	r2, [r2, #23]
 8007e34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	3308      	adds	r3, #8
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	7e12      	ldrb	r2, [r2, #24]
 8007e3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	3309      	adds	r3, #9
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	7e52      	ldrb	r2, [r2, #25]
 8007e48:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	330a      	adds	r3, #10
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	7e92      	ldrb	r2, [r2, #26]
 8007e52:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	330b      	adds	r3, #11
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	7ed2      	ldrb	r2, [r2, #27]
 8007e5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	330c      	adds	r3, #12
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	7f12      	ldrb	r2, [r2, #28]
 8007e66:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	330d      	adds	r3, #13
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	7f52      	ldrb	r2, [r2, #29]
 8007e70:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	330e      	adds	r3, #14
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	7f92      	ldrb	r2, [r2, #30]
 8007e7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	330f      	adds	r3, #15
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	7fd2      	ldrb	r2, [r2, #31]
 8007e84:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	3310      	adds	r3, #16
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007e90:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	3311      	adds	r3, #17
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 8007e9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	3312      	adds	r3, #18
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8007ea8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	3313      	adds	r3, #19
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8007eb4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	3314      	adds	r3, #20
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8007ec0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	3315      	adds	r3, #21
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 8007ecc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	3316      	adds	r3, #22
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8007ed8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	3317      	adds	r3, #23
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8007ee4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	3318      	adds	r3, #24
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8007ef0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	3319      	adds	r3, #25
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 8007efc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	331a      	adds	r3, #26
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8007f08:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	331b      	adds	r3, #27
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 8007f14:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	331c      	adds	r3, #28
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8007f20:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	331d      	adds	r3, #29
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	f892 202d 	ldrb.w	r2, [r2, #45]	@ 0x2d
 8007f2c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	331e      	adds	r3, #30
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8007f38:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	331f      	adds	r3, #31
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 8007f44:	701a      	strb	r2, [r3, #0]
}
 8007f46:	bf00      	nop
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b085      	sub	sp, #20
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	4603      	mov	r3, r0
 8007f5a:	603a      	str	r2, [r7, #0]
 8007f5c:	80fb      	strh	r3, [r7, #6]
 8007f5e:	460b      	mov	r3, r1
 8007f60:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8007f62:	2300      	movs	r3, #0
 8007f64:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 8007f66:	2300      	movs	r3, #0
 8007f68:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8007f6a:	88fb      	ldrh	r3, [r7, #6]
 8007f6c:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 8007f6e:	2300      	movs	r3, #0
 8007f70:	81fb      	strh	r3, [r7, #14]
 8007f72:	e00e      	b.n	8007f92 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8007f74:	88ba      	ldrh	r2, [r7, #4]
 8007f76:	89fb      	ldrh	r3, [r7, #14]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	683a      	ldr	r2, [r7, #0]
 8007f7e:	4413      	add	r3, r2
 8007f80:	89ba      	ldrh	r2, [r7, #12]
 8007f82:	b2d2      	uxtb	r2, r2
 8007f84:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8007f86:	89bb      	ldrh	r3, [r7, #12]
 8007f88:	0a1b      	lsrs	r3, r3, #8
 8007f8a:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 8007f8c:	89fb      	ldrh	r3, [r7, #14]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	81fb      	strh	r3, [r7, #14]
 8007f92:	89fa      	ldrh	r2, [r7, #14]
 8007f94:	88bb      	ldrh	r3, [r7, #4]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d3ec      	bcc.n	8007f74 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 8007f9a:	bf00      	nop
 8007f9c:	bf00      	nop
 8007f9e:	3714      	adds	r7, #20
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	4603      	mov	r3, r0
 8007fb0:	6039      	str	r1, [r7, #0]
 8007fb2:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 8007fb8:	e00a      	b.n	8007fd0 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 8007fba:	89fb      	ldrh	r3, [r7, #14]
 8007fbc:	021b      	lsls	r3, r3, #8
 8007fbe:	b21a      	sxth	r2, r3
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	1c59      	adds	r1, r3, #1
 8007fc4:	6039      	str	r1, [r7, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	b21b      	sxth	r3, r3
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	b21b      	sxth	r3, r3
 8007fce:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 8007fd0:	88fb      	ldrh	r3, [r7, #6]
 8007fd2:	1e5a      	subs	r2, r3, #1
 8007fd4:	80fa      	strh	r2, [r7, #6]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1ef      	bne.n	8007fba <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 8007fda:	89fb      	ldrh	r3, [r7, #14]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	4603      	mov	r3, r0
 8007ff0:	603a      	str	r2, [r7, #0]
 8007ff2:	80fb      	strh	r3, [r7, #6]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8008000:	88fb      	ldrh	r3, [r7, #6]
 8008002:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 8008004:	2300      	movs	r3, #0
 8008006:	81fb      	strh	r3, [r7, #14]
 8008008:	e00f      	b.n	800802a <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800800a:	88ba      	ldrh	r2, [r7, #4]
 800800c:	89fb      	ldrh	r3, [r7, #14]
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	3b01      	subs	r3, #1
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	4413      	add	r3, r2
 8008016:	89ba      	ldrh	r2, [r7, #12]
 8008018:	b2d2      	uxtb	r2, r2
 800801a:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800801c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008020:	121b      	asrs	r3, r3, #8
 8008022:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 8008024:	89fb      	ldrh	r3, [r7, #14]
 8008026:	3301      	adds	r3, #1
 8008028:	81fb      	strh	r3, [r7, #14]
 800802a:	89fa      	ldrh	r2, [r7, #14]
 800802c:	88bb      	ldrh	r3, [r7, #4]
 800802e:	429a      	cmp	r2, r3
 8008030:	d3eb      	bcc.n	800800a <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 8008032:	bf00      	nop
 8008034:	bf00      	nop
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	4603      	mov	r3, r0
 8008048:	6039      	str	r1, [r7, #0]
 800804a:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 800804c:	2300      	movs	r3, #0
 800804e:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	b25b      	sxtb	r3, r3
 8008056:	2b00      	cmp	r3, #0
 8008058:	da0e      	bge.n	8008078 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800805a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800805e:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 8008060:	e00a      	b.n	8008078 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 8008062:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008066:	021b      	lsls	r3, r3, #8
 8008068:	b21a      	sxth	r2, r3
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	1c59      	adds	r1, r3, #1
 800806e:	6039      	str	r1, [r7, #0]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	b21b      	sxth	r3, r3
 8008074:	4313      	orrs	r3, r2
 8008076:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 8008078:	88fb      	ldrh	r3, [r7, #6]
 800807a:	1e5a      	subs	r2, r3, #1
 800807c:	80fa      	strh	r2, [r7, #6]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1ef      	bne.n	8008062 <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 8008082:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008092:	b480      	push	{r7}
 8008094:	b087      	sub	sp, #28
 8008096:	af00      	add	r7, sp, #0
 8008098:	60f8      	str	r0, [r7, #12]
 800809a:	460b      	mov	r3, r1
 800809c:	607a      	str	r2, [r7, #4]
 800809e:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 80080a0:	2300      	movs	r3, #0
 80080a2:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 80080a4:	2300      	movs	r3, #0
 80080a6:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 80080ac:	2300      	movs	r3, #0
 80080ae:	82fb      	strh	r3, [r7, #22]
 80080b0:	e00e      	b.n	80080d0 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 80080b2:	897a      	ldrh	r2, [r7, #10]
 80080b4:	8afb      	ldrh	r3, [r7, #22]
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	3b01      	subs	r3, #1
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	4413      	add	r3, r2
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	b2d2      	uxtb	r2, r2
 80080c2:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	0a1b      	lsrs	r3, r3, #8
 80080c8:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 80080ca:	8afb      	ldrh	r3, [r7, #22]
 80080cc:	3301      	adds	r3, #1
 80080ce:	82fb      	strh	r3, [r7, #22]
 80080d0:	8afa      	ldrh	r2, [r7, #22]
 80080d2:	897b      	ldrh	r3, [r7, #10]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d3ec      	bcc.n	80080b2 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 80080d8:	bf00      	nop
 80080da:	bf00      	nop
 80080dc:	371c      	adds	r7, #28
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr

080080e6 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b085      	sub	sp, #20
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	4603      	mov	r3, r0
 80080ee:	6039      	str	r1, [r7, #0]
 80080f0:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 80080f2:	2300      	movs	r3, #0
 80080f4:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 80080f6:	e007      	b.n	8008108 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	021a      	lsls	r2, r3, #8
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	1c59      	adds	r1, r3, #1
 8008100:	6039      	str	r1, [r7, #0]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	4313      	orrs	r3, r2
 8008106:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 8008108:	88fb      	ldrh	r3, [r7, #6]
 800810a:	1e5a      	subs	r2, r3, #1
 800810c:	80fa      	strh	r2, [r7, #6]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1f2      	bne.n	80080f8 <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 8008112:	68fb      	ldr	r3, [r7, #12]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	4603      	mov	r3, r0
 8008128:	6039      	str	r1, [r7, #0]
 800812a:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 800812c:	2300      	movs	r3, #0
 800812e:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	b25b      	sxtb	r3, r3
 8008136:	2b00      	cmp	r3, #0
 8008138:	da0b      	bge.n	8008152 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800813a:	f04f 33ff 	mov.w	r3, #4294967295
 800813e:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 8008140:	e007      	b.n	8008152 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	021a      	lsls	r2, r3, #8
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	1c59      	adds	r1, r3, #1
 800814a:	6039      	str	r1, [r7, #0]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	4313      	orrs	r3, r2
 8008150:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 8008152:	88fb      	ldrh	r3, [r7, #6]
 8008154:	1e5a      	subs	r2, r3, #1
 8008156:	80fa      	strh	r2, [r7, #6]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1f2      	bne.n	8008142 <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 800815c:	68fb      	ldr	r3, [r7, #12]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3714      	adds	r7, #20
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr

0800816a <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b084      	sub	sp, #16
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	460b      	mov	r3, r1
 8008174:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set power force register
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8008176:	2300      	movs	r3, #0
 8008178:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	78fa      	ldrb	r2, [r7, #3]
 8008182:	f883 21c8 	strb.w	r2, [r3, #456]	@ 0x1c8

	status = VL53L1_WrByte(
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	f893 31c8 	ldrb.w	r3, [r3, #456]	@ 0x1c8
 800818c:	461a      	mov	r2, r3
 800818e:	2183      	movs	r1, #131	@ 0x83
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f001 fd0d 	bl	8009bb0 <VL53L1_WrByte>
 8008196:	4603      	mov	r3, r0
 8008198:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800819a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b084      	sub	sp, #16
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
	/*
	 * Enable power force
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80081ae:	2300      	movs	r3, #0
 80081b0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 80081b2:	2101      	movs	r1, #1
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f7ff ffd8 	bl	800816a <VL53L1_set_powerforce_register>
 80081ba:	4603      	mov	r3, r0
 80081bc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80081be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b086      	sub	sp, #24
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	4603      	mov	r3, r0
 80081d2:	460a      	mov	r2, r1
 80081d4:	80fb      	strh	r3, [r7, #6]
 80081d6:	4613      	mov	r3, r2
 80081d8:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 80081da:	2300      	movs	r3, #0
 80081dc:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 80081de:	2300      	movs	r3, #0
 80081e0:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 80081e2:	2300      	movs	r3, #0
 80081e4:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 80081e6:	88fb      	ldrh	r3, [r7, #6]
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 faa7 	bl	800873c <VL53L1_calc_pll_period_us>
 80081ee:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 80081f0:	797b      	ldrb	r3, [r7, #5]
 80081f2:	4618      	mov	r0, r3
 80081f4:	f000 fab6 	bl	8008764 <VL53L1_decode_vcsel_period>
 80081f8:	4603      	mov	r3, r0
 80081fa:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	4613      	mov	r3, r2
 8008200:	00db      	lsls	r3, r3, #3
 8008202:	4413      	add	r3, r2
 8008204:	021b      	lsls	r3, r3, #8
 8008206:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	099b      	lsrs	r3, r3, #6
 800820c:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800820e:	7cfa      	ldrb	r2, [r7, #19]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	fb02 f303 	mul.w	r3, r2, r3
 8008216:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	099b      	lsrs	r3, r3, #6
 800821c:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 800821e:	68fb      	ldr	r3, [r7, #12]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8008228:	b480      	push	{r7}
 800822a:	b089      	sub	sp, #36	@ 0x24
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	4608      	mov	r0, r1
 8008232:	4611      	mov	r1, r2
 8008234:	461a      	mov	r2, r3
 8008236:	4603      	mov	r3, r0
 8008238:	817b      	strh	r3, [r7, #10]
 800823a:	460b      	mov	r3, r1
 800823c:	813b      	strh	r3, [r7, #8]
 800823e:	4613      	mov	r3, r2
 8008240:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 8008242:	2300      	movs	r3, #0
 8008244:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 8008246:	2300      	movs	r3, #0
 8008248:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800824a:	2300      	movs	r3, #0
 800824c:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800824e:	2300      	movs	r3, #0
 8008250:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8008252:	2300      	movs	r3, #0
 8008254:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	011b      	lsls	r3, r3, #4
 800825a:	4a23      	ldr	r2, [pc, #140]	@ (80082e8 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800825c:	fb82 1203 	smull	r1, r2, r2, r3
 8008260:	1192      	asrs	r2, r2, #6
 8008262:	17db      	asrs	r3, r3, #31
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 8008268:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800826c:	2b00      	cmp	r3, #0
 800826e:	da03      	bge.n	8008278 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8008270:	897b      	ldrh	r3, [r7, #10]
 8008272:	425b      	negs	r3, r3
 8008274:	b29b      	uxth	r3, r3
 8008276:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 8008278:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800827c:	2b00      	cmp	r3, #0
 800827e:	da03      	bge.n	8008288 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8008280:	893b      	ldrh	r3, [r7, #8]
 8008282:	425b      	negs	r3, r3
 8008284:	b29b      	uxth	r3, r3
 8008286:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 8008288:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800828c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008290:	4413      	add	r3, r2
 8008292:	015b      	lsls	r3, r3, #5
 8008294:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	4a13      	ldr	r2, [pc, #76]	@ (80082e8 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800829a:	fb82 1203 	smull	r1, r2, r2, r3
 800829e:	1192      	asrs	r2, r2, #6
 80082a0:	17db      	asrs	r3, r3, #31
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	4413      	add	r3, r2
 80082ac:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 80082ae:	79fa      	ldrb	r2, [r7, #7]
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	fb02 f303 	mul.w	r3, r2, r3
 80082b6:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	3310      	adds	r3, #16
 80082bc:	2b00      	cmp	r3, #0
 80082be:	da00      	bge.n	80082c2 <VL53L1_calc_range_ignore_threshold+0x9a>
 80082c0:	331f      	adds	r3, #31
 80082c2:	115b      	asrs	r3, r3, #5
 80082c4:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082cc:	db03      	blt.n	80082d6 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 80082ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80082d2:	83fb      	strh	r3, [r7, #30]
 80082d4:	e001      	b.n	80082da <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 80082da:	8bfb      	ldrh	r3, [r7, #30]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3724      	adds	r7, #36	@ 0x24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr
 80082e8:	10624dd3 	.word	0x10624dd3

080082ec <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 80082f6:	2300      	movs	r3, #0
 80082f8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	031a      	lsls	r2, r3, #12
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	085b      	lsrs	r3, r3, #1
 8008302:	441a      	add	r2, r3
	timeout_mclks   =
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	fbb2 f3f3 	udiv	r3, r2, r3
 800830a:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800830c:	68fb      	ldr	r3, [r7, #12]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3714      	adds	r7, #20
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 8008324:	2300      	movs	r3, #0
 8008326:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8008328:	2300      	movs	r3, #0
 800832a:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f7ff ffdc 	bl	80082ec <VL53L1_calc_timeout_mclks>
 8008334:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f000 f860 	bl	80083fc <VL53L1_encode_timeout>
 800833c:	4603      	mov	r3, r0
 800833e:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 8008340:	897b      	ldrh	r3, [r7, #10]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800834a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800834e:	b087      	sub	sp, #28
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 8008356:	2100      	movs	r1, #0
 8008358:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800835a:	f04f 0000 	mov.w	r0, #0
 800835e:	f04f 0100 	mov.w	r1, #0
 8008362:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8008366:	6879      	ldr	r1, [r7, #4]
 8008368:	2000      	movs	r0, #0
 800836a:	4688      	mov	r8, r1
 800836c:	4681      	mov	r9, r0
 800836e:	6839      	ldr	r1, [r7, #0]
 8008370:	2000      	movs	r0, #0
 8008372:	460c      	mov	r4, r1
 8008374:	4605      	mov	r5, r0
 8008376:	fb04 f009 	mul.w	r0, r4, r9
 800837a:	fb08 f105 	mul.w	r1, r8, r5
 800837e:	4401      	add	r1, r0
 8008380:	fba8 2304 	umull	r2, r3, r8, r4
 8008384:	4419      	add	r1, r3
 8008386:	460b      	mov	r3, r1
 8008388:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800838c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 8008390:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008394:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 8008398:	f143 0b00 	adc.w	fp, r3, #0
 800839c:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 80083a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083a4:	f04f 0200 	mov.w	r2, #0
 80083a8:	f04f 0300 	mov.w	r3, #0
 80083ac:	0b02      	lsrs	r2, r0, #12
 80083ae:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80083b2:	0b0b      	lsrs	r3, r1, #12
 80083b4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 80083bc:	697b      	ldr	r3, [r7, #20]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	371c      	adds	r7, #28
 80083c2:	46bd      	mov	sp, r7
 80083c4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80083c8:	4770      	bx	lr

080083ca <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b084      	sub	sp, #16
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	4603      	mov	r3, r0
 80083d2:	6039      	str	r1, [r7, #0]
 80083d4:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 80083d6:	2300      	movs	r3, #0
 80083d8:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 80083de:	88fb      	ldrh	r3, [r7, #6]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f000 f835 	bl	8008450 <VL53L1_decode_timeout>
 80083e6:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 80083e8:	6839      	ldr	r1, [r7, #0]
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f7ff ffad 	bl	800834a <VL53L1_calc_timeout_us>
 80083f0:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 80083f2:	68bb      	ldr	r3, [r7, #8]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b087      	sub	sp, #28
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8008404:	2300      	movs	r3, #0
 8008406:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8008408:	2300      	movs	r3, #0
 800840a:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800840c:	2300      	movs	r3, #0
 800840e:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d015      	beq.n	8008442 <VL53L1_encode_timeout+0x46>
		ls_byte = timeout_mclks - 1;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	3b01      	subs	r3, #1
 800841a:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800841c:	e005      	b.n	800842a <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	085b      	lsrs	r3, r3, #1
 8008422:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8008424:	89fb      	ldrh	r3, [r7, #14]
 8008426:	3301      	adds	r3, #1
 8008428:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	2bff      	cmp	r3, #255	@ 0xff
 800842e:	d8f6      	bhi.n	800841e <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8008430:	89fb      	ldrh	r3, [r7, #14]
 8008432:	021b      	lsls	r3, r3, #8
 8008434:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	b29b      	uxth	r3, r3
 800843a:	b2db      	uxtb	r3, r3
 800843c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800843e:	4413      	add	r3, r2
 8008440:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8008442:	8afb      	ldrh	r3, [r7, #22]
}
 8008444:	4618      	mov	r0, r3
 8008446:	371c      	adds	r7, #28
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	4603      	mov	r3, r0
 8008458:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800845a:	2300      	movs	r3, #0
 800845c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800845e:	88fb      	ldrh	r3, [r7, #6]
 8008460:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8008462:	88fa      	ldrh	r2, [r7, #6]
 8008464:	0a12      	lsrs	r2, r2, #8
 8008466:	b292      	uxth	r2, r2
 8008468:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800846a:	3301      	adds	r3, #1
 800846c:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800846e:	68fb      	ldr	r3, [r7, #12]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b088      	sub	sp, #32
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
 8008488:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800848a:	2300      	movs	r3, #0
 800848c:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800848e:	2300      	movs	r3, #0
 8008490:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 8008492:	2300      	movs	r3, #0
 8008494:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 8008496:	2300      	movs	r3, #0
 8008498:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800849a:	887b      	ldrh	r3, [r7, #2]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d102      	bne.n	80084a6 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80084a0:	23f1      	movs	r3, #241	@ 0xf1
 80084a2:	77fb      	strb	r3, [r7, #31]
 80084a4:	e05d      	b.n	8008562 <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 80084a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a8:	799a      	ldrb	r2, [r3, #6]
 80084aa:	887b      	ldrh	r3, [r7, #2]
 80084ac:	4611      	mov	r1, r2
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7ff fe8b 	bl	80081ca <VL53L1_calc_macro_period_us>
 80084b4:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 80084b6:	6979      	ldr	r1, [r7, #20]
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f7ff ff17 	bl	80082ec <VL53L1_calc_timeout_mclks>
 80084be:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	2bff      	cmp	r3, #255	@ 0xff
 80084c4:	d901      	bls.n	80084ca <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 80084c6:	23ff      	movs	r3, #255	@ 0xff
 80084c8:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 80084ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d0:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 80084d2:	6979      	ldr	r1, [r7, #20]
 80084d4:	68b8      	ldr	r0, [r7, #8]
 80084d6:	f7ff ff20 	bl	800831a <VL53L1_calc_encoded_timeout>
 80084da:	4603      	mov	r3, r0
 80084dc:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80084de:	8a7b      	ldrh	r3, [r7, #18]
 80084e0:	0a1b      	lsrs	r3, r3, #8
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 80084e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e8:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80084ea:	8a7b      	ldrh	r3, [r7, #18]
 80084ec:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 80084ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f0:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 80084f2:	6979      	ldr	r1, [r7, #20]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f7ff ff10 	bl	800831a <VL53L1_calc_encoded_timeout>
 80084fa:	4603      	mov	r3, r0
 80084fc:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80084fe:	8a7b      	ldrh	r3, [r7, #18]
 8008500:	0a1b      	lsrs	r3, r3, #8
 8008502:	b29b      	uxth	r3, r3
 8008504:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8008506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008508:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800850a:	8a7b      	ldrh	r3, [r7, #18]
 800850c:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800850e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008510:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 8008512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008514:	7a5a      	ldrb	r2, [r3, #9]
 8008516:	887b      	ldrh	r3, [r7, #2]
 8008518:	4611      	mov	r1, r2
 800851a:	4618      	mov	r0, r3
 800851c:	f7ff fe55 	bl	80081ca <VL53L1_calc_macro_period_us>
 8008520:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 8008522:	6979      	ldr	r1, [r7, #20]
 8008524:	68b8      	ldr	r0, [r7, #8]
 8008526:	f7ff fef8 	bl	800831a <VL53L1_calc_encoded_timeout>
 800852a:	4603      	mov	r3, r0
 800852c:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800852e:	8a7b      	ldrh	r3, [r7, #18]
 8008530:	0a1b      	lsrs	r3, r3, #8
 8008532:	b29b      	uxth	r3, r3
 8008534:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8008536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008538:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800853a:	8a7b      	ldrh	r3, [r7, #18]
 800853c:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800853e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008540:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 8008542:	6979      	ldr	r1, [r7, #20]
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f7ff fee8 	bl	800831a <VL53L1_calc_encoded_timeout>
 800854a:	4603      	mov	r3, r0
 800854c:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800854e:	8a7b      	ldrh	r3, [r7, #18]
 8008550:	0a1b      	lsrs	r3, r3, #8
 8008552:	b29b      	uxth	r3, r3
 8008554:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 8008556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008558:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800855a:	8a7b      	ldrh	r3, [r7, #18]
 800855c:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800855e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008560:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 8008562:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8008566:	4618      	mov	r0, r3
 8008568:	3720      	adds	r7, #32
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800856e:	b480      	push	{r7}
 8008570:	b083      	sub	sp, #12
 8008572:	af00      	add	r7, sp, #0
 8008574:	4603      	mov	r3, r0
 8008576:	603a      	str	r2, [r7, #0]
 8008578:	71fb      	strb	r3, [r7, #7]
 800857a:	460b      	mov	r3, r1
 800857c:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 800857e:	79fb      	ldrb	r3, [r7, #7]
 8008580:	2b07      	cmp	r3, #7
 8008582:	d90a      	bls.n	800859a <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 8008584:	79bb      	ldrb	r3, [r7, #6]
 8008586:	00db      	lsls	r3, r3, #3
 8008588:	b2da      	uxtb	r2, r3
 800858a:	79fb      	ldrb	r3, [r7, #7]
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	b2db      	uxtb	r3, r3
 8008590:	3b71      	subs	r3, #113	@ 0x71
 8008592:	b2da      	uxtb	r2, r3
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 8008598:	e00a      	b.n	80085b0 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800859a:	79bb      	ldrb	r3, [r7, #6]
 800859c:	f1c3 030f 	rsb	r3, r3, #15
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	00db      	lsls	r3, r3, #3
 80085a4:	b2da      	uxtb	r2, r3
 80085a6:	79fb      	ldrb	r3, [r7, #7]
 80085a8:	4413      	add	r3, r2
 80085aa:	b2da      	uxtb	r2, r3
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	701a      	strb	r2, [r3, #0]
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	4603      	mov	r3, r0
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
 80085c8:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 80085ca:	7bfb      	ldrb	r3, [r7, #15]
 80085cc:	091b      	lsrs	r3, r3, #4
 80085ce:	b2da      	uxtb	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 80085d4:	7bfb      	ldrb	r3, [r7, #15]
 80085d6:	f003 030f 	and.w	r3, r3, #15
 80085da:	b2da      	uxtb	r2, r3
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	701a      	strb	r2, [r3, #0]

}
 80085e0:	bf00      	nop
 80085e2:	3714      	adds	r7, #20
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	4603      	mov	r3, r0
 80085f4:	603a      	str	r2, [r7, #0]
 80085f6:	71fb      	strb	r3, [r7, #7]
 80085f8:	460b      	mov	r3, r1
 80085fa:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 80085fc:	79bb      	ldrb	r3, [r7, #6]
 80085fe:	011b      	lsls	r3, r3, #4
 8008600:	b2da      	uxtb	r2, r3
 8008602:	79fb      	ldrb	r3, [r7, #7]
 8008604:	4413      	add	r3, r2
 8008606:	b2da      	uxtb	r2, r3
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	701a      	strb	r2, [r3, #0]

}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008620:	2300      	movs	r3, #0
 8008622:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	2203      	movs	r2, #3
 800862c:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	2200      	movs	r2, #0
 800863c:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2200      	movs	r2, #0
 8008664:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	2200      	movs	r2, #0
 800866c:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 8008670:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800868c:	2300      	movs	r3, #0
 800868e:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	229b      	movs	r2, #155	@ 0x9b
 80086a0:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 80086a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	371c      	adds	r7, #28
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b085      	sub	sp, #20
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80086be:	2300      	movs	r3, #0
 80086c0:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f893 2163 	ldrb.w	r2, [r3, #355]	@ 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f893 2160 	ldrb.w	r2, [r3, #352]	@ 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f893 3163 	ldrb.w	r3, [r3, #355]	@ 0x163
 80086e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 80086f2:	f003 0303 	and.w	r3, r3, #3
 80086f6:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8008702:	4413      	add	r3, r2
 8008704:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 218d 	strb.w	r2, [r3, #397]	@ 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f893 22ae 	ldrb.w	r2, [r3, #686]	@ 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f893 22ea 	ldrb.w	r2, [r3, #746]	@ 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f883 2187 	strb.w	r2, [r3, #391]	@ 0x187

	LOG_FUNCTION_END(status);

	return status;
 800872c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3714      	adds	r7, #20
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	4603      	mov	r3, r0
 8008744:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 8008746:	2300      	movs	r3, #0
 8008748:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800874a:	88fb      	ldrh	r3, [r7, #6]
 800874c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008750:	fb92 f3f3 	sdiv	r3, r2, r3
 8008754:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 8008756:	68fb      	ldr	r3, [r7, #12]
}
 8008758:	4618      	mov	r0, r3
 800875a:	3714      	adds	r7, #20
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	4603      	mov	r3, r0
 800876c:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800876e:	2300      	movs	r3, #0
 8008770:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8008772:	79fb      	ldrb	r3, [r7, #7]
 8008774:	3301      	adds	r3, #1
 8008776:	b2db      	uxtb	r3, r3
 8008778:	005b      	lsls	r3, r3, #1
 800877a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800877c:	7bfb      	ldrb	r3, [r7, #15]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr

0800878a <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800878a:	b480      	push	{r7}
 800878c:	b085      	sub	sp, #20
 800878e:	af00      	add	r7, sp, #0
 8008790:	4603      	mov	r3, r0
 8008792:	60b9      	str	r1, [r7, #8]
 8008794:	607a      	str	r2, [r7, #4]
 8008796:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 8008798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800879c:	2b00      	cmp	r3, #0
 800879e:	da10      	bge.n	80087c2 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
 80087a2:	43db      	mvns	r3, r3
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	f003 0307 	and.w	r3, r3, #7
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	3308      	adds	r3, #8
 80087ae:	b2da      	uxtb	r2, r3
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
 80087b6:	3b80      	subs	r3, #128	@ 0x80
 80087b8:	10db      	asrs	r3, r3, #3
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 80087c0:	e00c      	b.n	80087dc <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
 80087c4:	f003 0307 	and.w	r3, r3, #7
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 80087ce:	7bfb      	ldrb	r3, [r7, #15]
 80087d0:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80087d4:	10db      	asrs	r3, r3, #3
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	701a      	strb	r2, [r3, #0]
}
 80087dc:	bf00      	nop
 80087de:	3714      	adds	r7, #20
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b086      	sub	sp, #24
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	460b      	mov	r3, r1
 80087f2:	607a      	str	r2, [r7, #4]
 80087f4:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80087f6:	2300      	movs	r3, #0
 80087f8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80087fa:	897b      	ldrh	r3, [r7, #10]
 80087fc:	2b0a      	cmp	r3, #10
 80087fe:	d802      	bhi.n	8008806 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8008800:	f06f 0309 	mvn.w	r3, #9
 8008804:	e047      	b.n	8008896 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800880e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800881c:	f002 020f 	and.w	r2, r2, #15
 8008820:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8008822:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800882c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008830:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8008832:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800883c:	f002 0203 	and.w	r2, r2, #3
 8008840:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8008842:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800884c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008850:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8008852:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	88d8      	ldrh	r0, [r3, #6]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	3305      	adds	r3, #5
 800885c:	461a      	mov	r2, r3
 800885e:	2102      	movs	r1, #2
 8008860:	f7ff fb77 	bl	8007f52 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800886c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8008876:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 8008880:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008884:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8008886:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 8008890:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8008892:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3718      	adds	r7, #24
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b086      	sub	sp, #24
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	4603      	mov	r3, r0
 80088a6:	60b9      	str	r1, [r7, #8]
 80088a8:	607a      	str	r2, [r7, #4]
 80088aa:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80088ac:	2300      	movs	r3, #0
 80088ae:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80088b0:	89fb      	ldrh	r3, [r7, #14]
 80088b2:	2b0a      	cmp	r3, #10
 80088b4:	d802      	bhi.n	80088bc <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80088b6:	f06f 0309 	mvn.w	r3, #9
 80088ba:	e046      	b.n	800894a <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088c4:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	3301      	adds	r3, #1
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	f003 030f 	and.w	r3, r3, #15
 80088d4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	3302      	adds	r3, #2
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088e4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	3303      	adds	r3, #3
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	f003 0303 	and.w	r3, r3, #3
 80088f4:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	3304      	adds	r3, #4
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008904:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	3305      	adds	r3, #5
 800890e:	4619      	mov	r1, r3
 8008910:	2002      	movs	r0, #2
 8008912:	f7ff fb49 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 8008916:	4603      	mov	r3, r0
 8008918:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	79da      	ldrb	r2, [r3, #7]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	7a1a      	ldrb	r2, [r3, #8]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	3309      	adds	r3, #9
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008938:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	7a9a      	ldrb	r2, [r3, #10]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8008946:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800894a:	4618      	mov	r0, r3
 800894c:	3718      	adds	r7, #24
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b086      	sub	sp, #24
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800895c:	2300      	movs	r3, #0
 800895e:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8008960:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d108      	bne.n	800897a <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8008968:	f107 020c 	add.w	r2, r7, #12
 800896c:	230b      	movs	r3, #11
 800896e:	2101      	movs	r1, #1
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f001 f8e7 	bl	8009b44 <VL53L1_ReadMulti>
 8008976:	4603      	mov	r3, r0
 8008978:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800897a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d108      	bne.n	8008994 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 8008982:	f107 030c 	add.w	r3, r7, #12
 8008986:	683a      	ldr	r2, [r7, #0]
 8008988:	4619      	mov	r1, r3
 800898a:	200b      	movs	r0, #11
 800898c:	f7ff ff87 	bl	800889e <VL53L1_i2c_decode_static_nvm_managed>
 8008990:	4603      	mov	r3, r0
 8008992:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8008994:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3718      	adds	r7, #24
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b086      	sub	sp, #24
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	460b      	mov	r3, r1
 80089aa:	607a      	str	r2, [r7, #4]
 80089ac:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80089ae:	2300      	movs	r3, #0
 80089b0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80089b2:	897b      	ldrh	r3, [r7, #10]
 80089b4:	2b16      	cmp	r3, #22
 80089b6:	d802      	bhi.n	80089be <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80089b8:	f06f 0309 	mvn.w	r3, #9
 80089bc:	e076      	b.n	8008aac <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80089ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 80089d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 80089e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 80089ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80089f6:	f002 020f 	and.w	r2, r2, #15
 80089fa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80089fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 8008a02:	68fa      	ldr	r2, [r7, #12]
 8008a04:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8008a06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8008a10:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008a14:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8008a16:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8008a20:	f002 0203 	and.w	r2, r2, #3
 8008a24:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8008a26:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	8958      	ldrh	r0, [r3, #10]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	3309      	adds	r3, #9
 8008a30:	461a      	mov	r2, r3
 8008a32:	2102      	movs	r1, #2
 8008a34:	f7ff fa8d 	bl	8007f52 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	330b      	adds	r3, #11
 8008a42:	461a      	mov	r2, r3
 8008a44:	2102      	movs	r1, #2
 8008a46:	f7ff facf 	bl	8007fe8 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	330d      	adds	r3, #13
 8008a54:	461a      	mov	r2, r3
 8008a56:	2102      	movs	r1, #2
 8008a58:	f7ff fac6 	bl	8007fe8 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	8a18      	ldrh	r0, [r3, #16]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	330f      	adds	r3, #15
 8008a64:	461a      	mov	r2, r3
 8008a66:	2102      	movs	r1, #2
 8008a68:	f7ff fa73 	bl	8007f52 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 8008a72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a76:	b218      	sxth	r0, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	3311      	adds	r3, #17
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	2102      	movs	r1, #2
 8008a80:	f7ff fab2 	bl	8007fe8 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	3313      	adds	r3, #19
 8008a8e:	461a      	mov	r2, r3
 8008a90:	2102      	movs	r1, #2
 8008a92:	f7ff faa9 	bl	8007fe8 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	3315      	adds	r3, #21
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	2102      	movs	r1, #2
 8008aa4:	f7ff faa0 	bl	8007fe8 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8008aa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3718      	adds	r7, #24
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	4603      	mov	r3, r0
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
 8008ac0:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8008ac6:	89fb      	ldrh	r3, [r7, #14]
 8008ac8:	2b16      	cmp	r3, #22
 8008aca:	d802      	bhi.n	8008ad2 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8008acc:	f06f 0309 	mvn.w	r3, #9
 8008ad0:	e079      	b.n	8008bc6 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	785a      	ldrb	r2, [r3, #1]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	789a      	ldrb	r2, [r3, #2]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	78da      	ldrb	r2, [r3, #3]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	791a      	ldrb	r2, [r3, #4]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	3305      	adds	r3, #5
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	f003 030f 	and.w	r3, r3, #15
 8008b04:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	799a      	ldrb	r2, [r3, #6]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	3307      	adds	r3, #7
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b1c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	3308      	adds	r3, #8
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	f003 0303 	and.w	r3, r3, #3
 8008b2c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	3309      	adds	r3, #9
 8008b36:	4619      	mov	r1, r3
 8008b38:	2002      	movs	r0, #2
 8008b3a:	f7ff fa35 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	330b      	adds	r3, #11
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	2002      	movs	r0, #2
 8008b4e:	f7ff fa77 	bl	8008040 <VL53L1_i2c_decode_int16_t>
 8008b52:	4603      	mov	r3, r0
 8008b54:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	330d      	adds	r3, #13
 8008b5e:	4619      	mov	r1, r3
 8008b60:	2002      	movs	r0, #2
 8008b62:	f7ff fa6d 	bl	8008040 <VL53L1_i2c_decode_int16_t>
 8008b66:	4603      	mov	r3, r0
 8008b68:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	330f      	adds	r3, #15
 8008b72:	4619      	mov	r1, r3
 8008b74:	2002      	movs	r0, #2
 8008b76:	f7ff fa17 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	3311      	adds	r3, #17
 8008b86:	4619      	mov	r1, r3
 8008b88:	2002      	movs	r0, #2
 8008b8a:	f7ff fa59 	bl	8008040 <VL53L1_i2c_decode_int16_t>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b94:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	3313      	adds	r3, #19
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	2002      	movs	r0, #2
 8008ba2:	f7ff fa4d 	bl	8008040 <VL53L1_i2c_decode_int16_t>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	3315      	adds	r3, #21
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	2002      	movs	r0, #2
 8008bb6:	f7ff fa43 	bl	8008040 <VL53L1_i2c_decode_int16_t>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 8008bc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3718      	adds	r7, #24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b088      	sub	sp, #32
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
 8008bd6:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8008bdc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d108      	bne.n	8008bf6 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8008be4:	f107 0208 	add.w	r2, r7, #8
 8008be8:	2317      	movs	r3, #23
 8008bea:	210d      	movs	r1, #13
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 ffa9 	bl	8009b44 <VL53L1_ReadMulti>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8008bf6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d108      	bne.n	8008c10 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8008bfe:	f107 0308 	add.w	r3, r7, #8
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	4619      	mov	r1, r3
 8008c06:	2017      	movs	r0, #23
 8008c08:	f7ff ff54 	bl	8008ab4 <VL53L1_i2c_decode_customer_nvm_managed>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8008c10:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3720      	adds	r7, #32
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	460b      	mov	r3, r1
 8008c26:	607a      	str	r2, [r7, #4]
 8008c28:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8008c2e:	897b      	ldrh	r3, [r7, #10]
 8008c30:	2b1f      	cmp	r3, #31
 8008c32:	d802      	bhi.n	8008c3a <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8008c34:	f06f 0309 	mvn.w	r3, #9
 8008c38:	e0cf      	b.n	8008dda <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	881b      	ldrh	r3, [r3, #0]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	2102      	movs	r1, #2
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7ff f985 	bl	8007f52 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 8008c50:	f002 0201 	and.w	r2, r2, #1
 8008c54:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8008c56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8008c60:	f002 020f 	and.w	r2, r2, #15
 8008c64:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8008c66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 8008c70:	f002 020f 	and.w	r2, r2, #15
 8008c74:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8008c76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 8008c80:	f002 021f 	and.w	r2, r2, #31
 8008c84:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8008c86:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8008c90:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008c94:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8008c96:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 8008ca0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008ca4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8008ca6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 8008cb0:	f002 0201 	and.w	r2, r2, #1
 8008cb4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8008cb6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 8008cc0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8008cca:	f002 0201 	and.w	r2, r2, #1
 8008cce:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8008cd0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 8008cda:	f002 0203 	and.w	r2, r2, #3
 8008cde:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8008ce0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8008cea:	f002 021f 	and.w	r2, r2, #31
 8008cee:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8008cf0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8008cfa:	f002 0203 	and.w	r2, r2, #3
 8008cfe:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8008d00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8008d0a:	f002 0203 	and.w	r2, r2, #3
 8008d0e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 8008d10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8008d1a:	f002 0207 	and.w	r2, r2, #7
 8008d1e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8008d20:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8008d2a:	f002 021f 	and.w	r2, r2, #31
 8008d2e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8008d30:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8008d3a:	f002 0201 	and.w	r2, r2, #1
 8008d3e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8008d40:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8008d4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8008d54:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8008d5e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8008d68:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8008d72:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 8008d7c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	8b18      	ldrh	r0, [r3, #24]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	3318      	adds	r3, #24
 8008d86:	461a      	mov	r2, r3
 8008d88:	2102      	movs	r1, #2
 8008d8a:	f7ff f8e2 	bl	8007f52 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8008d96:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 8008da0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 8008daa:	f002 020f 	and.w	r2, r2, #15
 8008dae:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 8008db0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 8008dba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 8008dc4:	f002 020f 	and.w	r2, r2, #15
 8008dc8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 8008dca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 8008dd4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8008dd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3718      	adds	r7, #24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b086      	sub	sp, #24
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	60f8      	str	r0, [r7, #12]
 8008dea:	460b      	mov	r3, r1
 8008dec:	607a      	str	r2, [r7, #4]
 8008dee:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008df0:	2300      	movs	r3, #0
 8008df2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 8008df4:	897b      	ldrh	r3, [r7, #10]
 8008df6:	2b15      	cmp	r3, #21
 8008df8:	d802      	bhi.n	8008e00 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8008dfa:	f06f 0309 	mvn.w	r3, #9
 8008dfe:	e070      	b.n	8008ee2 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8008e10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8008e1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8008e24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008e28:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8008e2a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8008e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e34:	b298      	uxth	r0, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	3304      	adds	r3, #4
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	2102      	movs	r1, #2
 8008e3e:	f7ff f888 	bl	8007f52 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8008e4a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008e4e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8008e50:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8008e5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8008e64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8008e6e:	f002 0201 	and.w	r2, r2, #1
 8008e72:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8008e74:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8008e7e:	f002 0207 	and.w	r2, r2, #7
 8008e82:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8008e84:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	8998      	ldrh	r0, [r3, #12]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	330c      	adds	r3, #12
 8008e8e:	461a      	mov	r2, r3
 8008e90:	2102      	movs	r1, #2
 8008e92:	f7ff f85e 	bl	8007f52 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	89d8      	ldrh	r0, [r3, #14]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	330e      	adds	r3, #14
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	2102      	movs	r1, #2
 8008ea2:	f7ff f856 	bl	8007f52 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	8a18      	ldrh	r0, [r3, #16]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	3310      	adds	r3, #16
 8008eae:	461a      	mov	r2, r3
 8008eb0:	2102      	movs	r1, #2
 8008eb2:	f7ff f84e 	bl	8007f52 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8008ebe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8008ec8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8008ed2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8008edc:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8008ede:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3718      	adds	r7, #24
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b086      	sub	sp, #24
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	60f8      	str	r0, [r7, #12]
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	607a      	str	r2, [r7, #4]
 8008ef6:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 8008efc:	897b      	ldrh	r3, [r7, #10]
 8008efe:	2b16      	cmp	r3, #22
 8008f00:	d802      	bhi.n	8008f08 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8008f02:	f06f 0309 	mvn.w	r3, #9
 8008f06:	e06e      	b.n	8008fe6 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	f003 030f 	and.w	r3, r3, #15
 8008f10:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8008f1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8008f28:	f002 020f 	and.w	r2, r2, #15
 8008f2c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8008f2e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8008f38:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8008f42:	f002 020f 	and.w	r2, r2, #15
 8008f46:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8008f48:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8008f52:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8008f5c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008f60:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8008f62:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8008f6c:	f002 020f 	and.w	r2, r2, #15
 8008f70:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8008f72:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8008f7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8008f86:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008f8a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8008f8c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	8958      	ldrh	r0, [r3, #10]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	330a      	adds	r3, #10
 8008f96:	461a      	mov	r2, r3
 8008f98:	2102      	movs	r1, #2
 8008f9a:	f7fe ffda 	bl	8007f52 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	8998      	ldrh	r0, [r3, #12]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	330c      	adds	r3, #12
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	2102      	movs	r1, #2
 8008faa:	f7fe ffd2 	bl	8007f52 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8008fb6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8008fc0:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6918      	ldr	r0, [r3, #16]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	3312      	adds	r3, #18
 8008fca:	461a      	mov	r2, r3
 8008fcc:	2104      	movs	r1, #4
 8008fce:	f7ff f860 	bl	8008092 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8008fda:	f002 0201 	and.w	r2, r2, #1
 8008fde:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8008fe0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8008fe2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3718      	adds	r7, #24
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b086      	sub	sp, #24
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	60f8      	str	r0, [r7, #12]
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	607a      	str	r2, [r7, #4]
 8008ffa:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8009000:	897b      	ldrh	r3, [r7, #10]
 8009002:	2b11      	cmp	r3, #17
 8009004:	d802      	bhi.n	800900c <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8009006:	f06f 0309 	mvn.w	r3, #9
 800900a:	e071      	b.n	80090f0 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	f003 0303 	and.w	r3, r3, #3
 8009014:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	8858      	ldrh	r0, [r3, #2]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	3301      	adds	r3, #1
 8009022:	461a      	mov	r2, r3
 8009024:	2102      	movs	r1, #2
 8009026:	f7fe ff94 	bl	8007f52 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	8898      	ldrh	r0, [r3, #4]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	3303      	adds	r3, #3
 8009032:	461a      	mov	r2, r3
 8009034:	2102      	movs	r1, #2
 8009036:	f7fe ff8c 	bl	8007f52 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8009042:	f002 0201 	and.w	r2, r2, #1
 8009046:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8009048:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8009052:	f002 0207 	and.w	r2, r2, #7
 8009056:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8009058:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8009062:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800906c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8009076:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800907a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800907c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8009086:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800908a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800908c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8009096:	f002 0203 	and.w	r2, r2, #3
 800909a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800909c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 80090a6:	f002 0203 	and.w	r2, r2, #3
 80090aa:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 80090ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 80090b6:	f002 020f 	and.w	r2, r2, #15
 80090ba:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 80090bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 80090c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 80090d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 80090da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 80090e4:	f002 0203 	and.w	r2, r2, #3
 80090e8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 80090ea:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80090ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3718      	adds	r7, #24
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b087      	sub	sp, #28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	460b      	mov	r3, r1
 8009102:	607a      	str	r2, [r7, #4]
 8009104:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009106:	2300      	movs	r3, #0
 8009108:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 800910a:	897b      	ldrh	r3, [r7, #10]
 800910c:	2b04      	cmp	r3, #4
 800910e:	d802      	bhi.n	8009116 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8009110:	f06f 0309 	mvn.w	r3, #9
 8009114:	e025      	b.n	8009162 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	f003 0301 	and.w	r3, r3, #1
 800911e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800912c:	f002 0201 	and.w	r2, r2, #1
 8009130:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8009132:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800913c:	f002 0201 	and.w	r2, r2, #1
 8009140:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8009142:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800914c:	f002 0203 	and.w	r2, r2, #3
 8009150:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8009152:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800915c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800915e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009162:	4618      	mov	r0, r3
 8009164:	371c      	adds	r7, #28
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b086      	sub	sp, #24
 8009172:	af00      	add	r7, sp, #0
 8009174:	4603      	mov	r3, r0
 8009176:	60b9      	str	r1, [r7, #8]
 8009178:	607a      	str	r2, [r7, #4]
 800917a:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800917c:	2300      	movs	r3, #0
 800917e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 8009180:	89fb      	ldrh	r3, [r7, #14]
 8009182:	2b2b      	cmp	r3, #43	@ 0x2b
 8009184:	d802      	bhi.n	800918c <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8009186:	f06f 0309 	mvn.w	r3, #9
 800918a:	e0e2      	b.n	8009352 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009194:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	785a      	ldrb	r2, [r3, #1]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	3302      	adds	r3, #2
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	f003 030f 	and.w	r3, r3, #15
 80091ac:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	78da      	ldrb	r2, [r3, #3]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	3304      	adds	r3, #4
 80091be:	4619      	mov	r1, r3
 80091c0:	2002      	movs	r0, #2
 80091c2:	f7fe fef1 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 80091c6:	4603      	mov	r3, r0
 80091c8:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	3306      	adds	r3, #6
 80091d2:	4619      	mov	r1, r3
 80091d4:	2002      	movs	r0, #2
 80091d6:	f7fe fee7 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 80091da:	4603      	mov	r3, r0
 80091dc:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	3308      	adds	r3, #8
 80091e6:	4619      	mov	r1, r3
 80091e8:	2002      	movs	r0, #2
 80091ea:	f7fe fedd 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 80091ee:	4603      	mov	r3, r0
 80091f0:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	330a      	adds	r3, #10
 80091fa:	4619      	mov	r1, r3
 80091fc:	2002      	movs	r0, #2
 80091fe:	f7fe fed3 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 8009202:	4603      	mov	r3, r0
 8009204:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	330c      	adds	r3, #12
 800920e:	4619      	mov	r1, r3
 8009210:	2002      	movs	r0, #2
 8009212:	f7fe fec9 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 8009216:	4603      	mov	r3, r0
 8009218:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	330e      	adds	r3, #14
 8009222:	4619      	mov	r1, r3
 8009224:	2002      	movs	r0, #2
 8009226:	f7fe febf 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 800922a:	4603      	mov	r3, r0
 800922c:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	3310      	adds	r3, #16
 8009236:	4619      	mov	r1, r3
 8009238:	2002      	movs	r0, #2
 800923a:	f7fe feb5 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 800923e:	4603      	mov	r3, r0
 8009240:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	3312      	adds	r3, #18
 800924a:	4619      	mov	r1, r3
 800924c:	2002      	movs	r0, #2
 800924e:	f7fe feab 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 8009252:	4603      	mov	r3, r0
 8009254:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	3314      	adds	r3, #20
 800925e:	4619      	mov	r1, r3
 8009260:	2002      	movs	r0, #2
 8009262:	f7fe fea1 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 8009266:	4603      	mov	r3, r0
 8009268:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	3316      	adds	r3, #22
 8009272:	4619      	mov	r1, r3
 8009274:	2002      	movs	r0, #2
 8009276:	f7fe fe97 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 800927a:	4603      	mov	r3, r0
 800927c:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	3318      	adds	r3, #24
 8009286:	4619      	mov	r1, r3
 8009288:	2002      	movs	r0, #2
 800928a:	f7fe fe8d 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 800928e:	4603      	mov	r3, r0
 8009290:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	331a      	adds	r3, #26
 800929a:	4619      	mov	r1, r3
 800929c:	2002      	movs	r0, #2
 800929e:	f7fe fe83 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 80092a2:	4603      	mov	r3, r0
 80092a4:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	331c      	adds	r3, #28
 80092ae:	4619      	mov	r1, r3
 80092b0:	2002      	movs	r0, #2
 80092b2:	f7fe fe79 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 80092b6:	4603      	mov	r3, r0
 80092b8:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	331e      	adds	r3, #30
 80092c2:	4619      	mov	r1, r3
 80092c4:	2002      	movs	r0, #2
 80092c6:	f7fe fe6f 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 80092ca:	4603      	mov	r3, r0
 80092cc:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	3320      	adds	r3, #32
 80092d6:	4619      	mov	r1, r3
 80092d8:	2002      	movs	r0, #2
 80092da:	f7fe fe65 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 80092de:	4603      	mov	r3, r0
 80092e0:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	3322      	adds	r3, #34	@ 0x22
 80092ea:	4619      	mov	r1, r3
 80092ec:	2002      	movs	r0, #2
 80092ee:	f7fe fe5b 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 80092f2:	4603      	mov	r3, r0
 80092f4:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	3324      	adds	r3, #36	@ 0x24
 80092fe:	4619      	mov	r1, r3
 8009300:	2002      	movs	r0, #2
 8009302:	f7fe fe51 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 8009306:	4603      	mov	r3, r0
 8009308:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	3326      	adds	r3, #38	@ 0x26
 8009312:	4619      	mov	r1, r3
 8009314:	2002      	movs	r0, #2
 8009316:	f7fe fe47 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 800931a:	4603      	mov	r3, r0
 800931c:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	3328      	adds	r3, #40	@ 0x28
 8009326:	4619      	mov	r1, r3
 8009328:	2002      	movs	r0, #2
 800932a:	f7fe fe3d 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 800932e:	4603      	mov	r3, r0
 8009330:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1 =
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800934e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3718      	adds	r7, #24
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b086      	sub	sp, #24
 800935e:	af00      	add	r7, sp, #0
 8009360:	4603      	mov	r3, r0
 8009362:	60b9      	str	r1, [r7, #8]
 8009364:	607a      	str	r2, [r7, #4]
 8009366:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009368:	2300      	movs	r3, #0
 800936a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 800936c:	89fb      	ldrh	r3, [r7, #14]
 800936e:	2b20      	cmp	r3, #32
 8009370:	d802      	bhi.n	8009378 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8009372:	f06f 0309 	mvn.w	r3, #9
 8009376:	e04d      	b.n	8009414 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 8009378:	68b9      	ldr	r1, [r7, #8]
 800937a:	2004      	movs	r0, #4
 800937c:	f7fe feb3 	bl	80080e6 <VL53L1_i2c_decode_uint32_t>
 8009380:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	3304      	adds	r3, #4
 800938a:	4619      	mov	r1, r3
 800938c:	2004      	movs	r0, #4
 800938e:	f7fe feaa 	bl	80080e6 <VL53L1_i2c_decode_uint32_t>
 8009392:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	3308      	adds	r3, #8
 800939c:	4619      	mov	r1, r3
 800939e:	2004      	movs	r0, #4
 80093a0:	f7fe febe 	bl	8008120 <VL53L1_i2c_decode_int32_t>
 80093a4:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	330c      	adds	r3, #12
 80093ae:	4619      	mov	r1, r3
 80093b0:	2004      	movs	r0, #4
 80093b2:	f7fe fe98 	bl	80080e6 <VL53L1_i2c_decode_uint32_t>
 80093b6:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	3310      	adds	r3, #16
 80093c0:	4619      	mov	r1, r3
 80093c2:	2004      	movs	r0, #4
 80093c4:	f7fe fe8f 	bl	80080e6 <VL53L1_i2c_decode_uint32_t>
 80093c8:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	3314      	adds	r3, #20
 80093d2:	4619      	mov	r1, r3
 80093d4:	2004      	movs	r0, #4
 80093d6:	f7fe fe86 	bl	80080e6 <VL53L1_i2c_decode_uint32_t>
 80093da:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	3318      	adds	r3, #24
 80093e4:	4619      	mov	r1, r3
 80093e6:	2004      	movs	r0, #4
 80093e8:	f7fe fe9a 	bl	8008120 <VL53L1_i2c_decode_int32_t>
 80093ec:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	331c      	adds	r3, #28
 80093f6:	4619      	mov	r1, r3
 80093f8:	2004      	movs	r0, #4
 80093fa:	f7fe fe74 	bl	80080e6 <VL53L1_i2c_decode_uint32_t>
 80093fe:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	f893 2020 	ldrb.w	r2, [r3, #32]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8009410:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009414:	4618      	mov	r0, r3
 8009416:	3718      	adds	r7, #24
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b086      	sub	sp, #24
 8009420:	af00      	add	r7, sp, #0
 8009422:	4603      	mov	r3, r0
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	607a      	str	r2, [r7, #4]
 8009428:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800942a:	2300      	movs	r3, #0
 800942c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800942e:	89fb      	ldrh	r3, [r7, #14]
 8009430:	2b37      	cmp	r3, #55	@ 0x37
 8009432:	d802      	bhi.n	800943a <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8009434:	f06f 0309 	mvn.w	r3, #9
 8009438:	e15e      	b.n	80096f8 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800943a:	68b9      	ldr	r1, [r7, #8]
 800943c:	2002      	movs	r0, #2
 800943e:	f7fe fdb3 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 8009442:	4603      	mov	r3, r0
 8009444:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	3302      	adds	r3, #2
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009454:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	3303      	adds	r3, #3
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009464:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	3304      	adds	r3, #4
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	f003 0303 	and.w	r3, r3, #3
 8009474:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	3305      	adds	r3, #5
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	f003 0301 	and.w	r3, r3, #1
 8009484:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	3306      	adds	r3, #6
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009494:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	3307      	adds	r3, #7
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80094a4:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	3308      	adds	r3, #8
 80094ae:	4619      	mov	r1, r3
 80094b0:	2002      	movs	r0, #2
 80094b2:	f7fe fd79 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 80094b6:	4603      	mov	r3, r0
 80094b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094bc:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	330a      	adds	r3, #10
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	f003 0303 	and.w	r3, r3, #3
 80094cc:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	330b      	adds	r3, #11
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	f003 0303 	and.w	r3, r3, #3
 80094dc:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	330c      	adds	r3, #12
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	f003 030f 	and.w	r3, r3, #15
 80094ec:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	330d      	adds	r3, #13
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	f003 0307 	and.w	r3, r3, #7
 80094fc:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	330e      	adds	r3, #14
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	f003 0301 	and.w	r3, r3, #1
 800950c:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	330f      	adds	r3, #15
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	f003 0303 	and.w	r3, r3, #3
 800951c:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	7c1a      	ldrb	r2, [r3, #16]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	7c5a      	ldrb	r2, [r3, #17]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	3312      	adds	r3, #18
 8009536:	4619      	mov	r1, r3
 8009538:	2002      	movs	r0, #2
 800953a:	f7fe fd35 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 800953e:	4603      	mov	r3, r0
 8009540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009544:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	3316      	adds	r3, #22
 800954e:	4619      	mov	r1, r3
 8009550:	2002      	movs	r0, #2
 8009552:	f7fe fd29 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 8009556:	4603      	mov	r3, r0
 8009558:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	3318      	adds	r3, #24
 8009562:	4619      	mov	r1, r3
 8009564:	2002      	movs	r0, #2
 8009566:	f7fe fd1f 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 800956a:	4603      	mov	r3, r0
 800956c:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	331a      	adds	r3, #26
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	331b      	adds	r3, #27
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	f003 0307 	and.w	r3, r3, #7
 800958c:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	7f1a      	ldrb	r2, [r3, #28]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	7f5a      	ldrb	r2, [r3, #29]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	331e      	adds	r3, #30
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095ac:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	331f      	adds	r3, #31
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095bc:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	3320      	adds	r3, #32
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	f003 0303 	and.w	r3, r3, #3
 80095cc:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	3321      	adds	r3, #33	@ 0x21
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	f003 030f 	and.w	r3, r3, #15
 80095dc:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	3325      	adds	r3, #37	@ 0x25
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	f003 0301 	and.w	r3, r3, #1
 8009610:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	3326      	adds	r3, #38	@ 0x26
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	f003 0303 	and.w	r3, r3, #3
 8009622:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	3327      	adds	r3, #39	@ 0x27
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	f003 031f 	and.w	r3, r3, #31
 8009634:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	3328      	adds	r3, #40	@ 0x28
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	f003 031f 	and.w	r3, r3, #31
 8009646:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	3329      	adds	r3, #41	@ 0x29
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	f003 031f 	and.w	r3, r3, #31
 8009658:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	332a      	adds	r3, #42	@ 0x2a
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	f003 0301 	and.w	r3, r3, #1
 800966a:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	332b      	adds	r3, #43	@ 0x2b
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	f003 0301 	and.w	r3, r3, #1
 800967c:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	332c      	adds	r3, #44	@ 0x2c
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	f003 0303 	and.w	r3, r3, #3
 800968e:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	332d      	adds	r3, #45	@ 0x2d
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80096a0:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	332e      	adds	r3, #46	@ 0x2e
 80096ac:	4619      	mov	r1, r3
 80096ae:	2004      	movs	r0, #4
 80096b0:	f7fe fd19 	bl	80080e6 <VL53L1_i2c_decode_uint32_t>
 80096b4:	4603      	mov	r3, r0
 80096b6:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	3332      	adds	r3, #50	@ 0x32
 80096c2:	4619      	mov	r1, r3
 80096c4:	2004      	movs	r0, #4
 80096c6:	f7fe fd0e 	bl	80080e6 <VL53L1_i2c_decode_uint32_t>
 80096ca:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	631a      	str	r2, [r3, #48]	@ 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	3336      	adds	r3, #54	@ 0x36
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	f003 0301 	and.w	r3, r3, #1
 80096da:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	3337      	adds	r3, #55	@ 0x37
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	f003 0301 	and.w	r3, r3, #1
 80096ec:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	LOG_FUNCTION_END(status);

	return status;
 80096f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3718      	adds	r7, #24
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
 8009706:	4603      	mov	r3, r0
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
 800970c:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800970e:	2300      	movs	r3, #0
 8009710:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 8009712:	89fb      	ldrh	r3, [r7, #14]
 8009714:	2b30      	cmp	r3, #48	@ 0x30
 8009716:	d802      	bhi.n	800971e <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8009718:	f06f 0309 	mvn.w	r3, #9
 800971c:	e112      	b.n	8009944 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	785a      	ldrb	r2, [r3, #1]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	789a      	ldrb	r2, [r3, #2]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	3303      	adds	r3, #3
 800973a:	4619      	mov	r1, r3
 800973c:	2002      	movs	r0, #2
 800973e:	f7fe fc33 	bl	8007fa8 <VL53L1_i2c_decode_uint16_t>
 8009742:	4603      	mov	r3, r0
 8009744:	461a      	mov	r2, r3
	pdata->identification__module_id =
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	3305      	adds	r3, #5
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009754:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	3306      	adds	r3, #6
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	f003 0307 	and.w	r3, r3, #7
 8009764:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	3307      	adds	r3, #7
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	f003 0307 	and.w	r3, r3, #7
 8009774:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	3308      	adds	r3, #8
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009784:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	3309      	adds	r3, #9
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009794:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	330a      	adds	r3, #10
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	f003 0301 	and.w	r3, r3, #1
 80097a4:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	330b      	adds	r3, #11
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097b4:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	330c      	adds	r3, #12
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	f003 0301 	and.w	r3, r3, #1
 80097c4:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	330d      	adds	r3, #13
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80097d4:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	330e      	adds	r3, #14
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80097e4:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	7bda      	ldrb	r2, [r3, #15]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	7c1a      	ldrb	r2, [r3, #16]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	7c5a      	ldrb	r2, [r3, #17]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	7c9a      	ldrb	r2, [r3, #18]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	7cda      	ldrb	r2, [r3, #19]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	7d1a      	ldrb	r2, [r3, #20]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	7d5a      	ldrb	r2, [r3, #21]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	7d9a      	ldrb	r2, [r3, #22]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	7dda      	ldrb	r2, [r3, #23]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	7e1a      	ldrb	r2, [r3, #24]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	7e5a      	ldrb	r2, [r3, #25]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	7e9a      	ldrb	r2, [r3, #26]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	7eda      	ldrb	r2, [r3, #27]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	7f1a      	ldrb	r2, [r3, #28]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	7f5a      	ldrb	r2, [r3, #29]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	7f9a      	ldrb	r2, [r3, #30]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	7fda      	ldrb	r2, [r3, #31]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	f893 2020 	ldrb.w	r2, [r3, #32]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8009940:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009944:	4618      	mov	r0, r3
 8009946:	3718      	adds	r7, #24
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b090      	sub	sp, #64	@ 0x40
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009956:	2300      	movs	r3, #0
 8009958:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800995c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009960:	2b00      	cmp	r3, #0
 8009962:	d10a      	bne.n	800997a <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 8009964:	f107 020c 	add.w	r2, r7, #12
 8009968:	2331      	movs	r3, #49	@ 0x31
 800996a:	f240 110f 	movw	r1, #271	@ 0x10f
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f8e8 	bl	8009b44 <VL53L1_ReadMulti>
 8009974:	4603      	mov	r3, r0
 8009976:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800997a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800997e:	2b00      	cmp	r3, #0
 8009980:	d109      	bne.n	8009996 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 8009982:	f107 030c 	add.w	r3, r7, #12
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	4619      	mov	r1, r3
 800998a:	2031      	movs	r0, #49	@ 0x31
 800998c:	f7ff feb8 	bl	8009700 <VL53L1_i2c_decode_nvm_copy_data>
 8009990:	4603      	mov	r3, r0
 8009992:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8009996:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800999a:	4618      	mov	r0, r3
 800999c:	3740      	adds	r7, #64	@ 0x40
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b086      	sub	sp, #24
 80099a6:	af02      	add	r7, sp, #8
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80099ac:	2300      	movs	r3, #0
 80099ae:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 80099b0:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f9b7 	bl	8009d28 <VL53L1_WaitUs>
 80099ba:	4603      	mov	r3, r0
 80099bc:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 80099be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10b      	bne.n	80099de <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 80099c6:	2301      	movs	r3, #1
 80099c8:	9301      	str	r3, [sp, #4]
 80099ca:	2301      	movs	r3, #1
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	2301      	movs	r3, #1
 80099d0:	22e5      	movs	r2, #229	@ 0xe5
 80099d2:	6839      	ldr	r1, [r7, #0]
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 f9bd 	bl	8009d54 <VL53L1_WaitValueMaskEx>
 80099da:	4603      	mov	r3, r0
 80099dc:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 80099de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d103      	bne.n	80099ee <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 80099e6:	2103      	movs	r1, #3
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f7fe f896 	bl	8007b1a <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 80099ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b088      	sub	sp, #32
 80099fe:	af02      	add	r7, sp, #8
 8009a00:	6078      	str	r0, [r7, #4]
 8009a02:	6039      	str	r1, [r7, #0]
	 *
	 * Interrupt may be either active high or active low. Use active_high to
	 * select the required level check
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009a04:	2300      	movs	r3, #0
 8009a06:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8009a10:	2300      	movs	r3, #0
 8009a12:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	f893 3170 	ldrb.w	r3, [r3, #368]	@ 0x170
	gpio__mux_active_high_hv =
 8009a1a:	f003 0310 	and.w	r3, r3, #16
 8009a1e:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d102      	bne.n	8009a2c <VL53L1_poll_for_range_completion+0x32>
		interrupt_ready = 0x01;
 8009a26:	2301      	movs	r3, #1
 8009a28:	75fb      	strb	r3, [r7, #23]
 8009a2a:	e001      	b.n	8009a30 <VL53L1_poll_for_range_completion+0x36>
	else
		interrupt_ready = 0x00;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 8009a30:	7dfb      	ldrb	r3, [r7, #23]
 8009a32:	2201      	movs	r2, #1
 8009a34:	9201      	str	r2, [sp, #4]
 8009a36:	2201      	movs	r2, #1
 8009a38:	9200      	str	r2, [sp, #0]
 8009a3a:	2231      	movs	r2, #49	@ 0x31
 8009a3c:	6839      	ldr	r1, [r7, #0]
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 f988 	bl	8009d54 <VL53L1_WaitValueMaskEx>
 8009a44:	4603      	mov	r3, r0
 8009a46:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8009a48:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3718      	adds	r7, #24
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b088      	sub	sp, #32
 8009a58:	af02      	add	r7, sp, #8
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	330a      	adds	r3, #10
 8009a64:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f8d3 03a0 	ldr.w	r0, [r3, #928]	@ 0x3a0
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f893 3398 	ldrb.w	r3, [r3, #920]	@ 0x398
 8009a72:	4619      	mov	r1, r3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	9300      	str	r3, [sp, #0]
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	68ba      	ldr	r2, [r7, #8]
 8009a80:	f7f8 f966 	bl	8001d50 <HAL_I2C_Master_Transmit>
 8009a84:	4603      	mov	r3, r0
 8009a86:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8009a88:	693b      	ldr	r3, [r7, #16]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3718      	adds	r7, #24
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b088      	sub	sp, #32
 8009a96:	af02      	add	r7, sp, #8
 8009a98:	60f8      	str	r0, [r7, #12]
 8009a9a:	60b9      	str	r1, [r7, #8]
 8009a9c:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	330a      	adds	r3, #10
 8009aa2:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f8d3 03a0 	ldr.w	r0, [r3, #928]	@ 0x3a0
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f893 3398 	ldrb.w	r3, [r3, #920]	@ 0x398
 8009ab0:	f043 0301 	orr.w	r3, r3, #1
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	b29a      	uxth	r2, r3
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	9300      	str	r3, [sp, #0]
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	68ba      	ldr	r2, [r7, #8]
 8009ac4:	f7f8 fa38 	bl	8001f38 <HAL_I2C_Master_Receive>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8009acc:	693b      	ldr	r3, [r7, #16]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3718      	adds	r7, #24
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
	...

08009ad8 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b086      	sub	sp, #24
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	607a      	str	r2, [r7, #4]
 8009ae2:	603b      	str	r3, [r7, #0]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	2bff      	cmp	r3, #255	@ 0xff
 8009af0:	d902      	bls.n	8009af8 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 8009af2:	f06f 0303 	mvn.w	r3, #3
 8009af6:	e01d      	b.n	8009b34 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8009af8:	897b      	ldrh	r3, [r7, #10]
 8009afa:	0a1b      	lsrs	r3, r3, #8
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	b2da      	uxtb	r2, r3
 8009b00:	4b0e      	ldr	r3, [pc, #56]	@ (8009b3c <VL53L1_WriteMulti+0x64>)
 8009b02:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8009b04:	897b      	ldrh	r3, [r7, #10]
 8009b06:	b2da      	uxtb	r2, r3
 8009b08:	4b0c      	ldr	r3, [pc, #48]	@ (8009b3c <VL53L1_WriteMulti+0x64>)
 8009b0a:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8009b0c:	683a      	ldr	r2, [r7, #0]
 8009b0e:	6879      	ldr	r1, [r7, #4]
 8009b10:	480b      	ldr	r0, [pc, #44]	@ (8009b40 <VL53L1_WriteMulti+0x68>)
 8009b12:	f001 f886 	bl	800ac22 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	3302      	adds	r3, #2
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	4907      	ldr	r1, [pc, #28]	@ (8009b3c <VL53L1_WriteMulti+0x64>)
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f7ff ff98 	bl	8009a54 <_I2CWrite>
 8009b24:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d001      	beq.n	8009b30 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8009b2c:	23f3      	movs	r3, #243	@ 0xf3
 8009b2e:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 8009b30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3718      	adds	r7, #24
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	20000304 	.word	0x20000304
 8009b40:	20000306 	.word	0x20000306

08009b44 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b086      	sub	sp, #24
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	607a      	str	r2, [r7, #4]
 8009b4e:	603b      	str	r3, [r7, #0]
 8009b50:	460b      	mov	r3, r1
 8009b52:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009b54:	2300      	movs	r3, #0
 8009b56:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8009b58:	897b      	ldrh	r3, [r7, #10]
 8009b5a:	0a1b      	lsrs	r3, r3, #8
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	b2da      	uxtb	r2, r3
 8009b60:	4b12      	ldr	r3, [pc, #72]	@ (8009bac <VL53L1_ReadMulti+0x68>)
 8009b62:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8009b64:	897b      	ldrh	r3, [r7, #10]
 8009b66:	b2da      	uxtb	r2, r3
 8009b68:	4b10      	ldr	r3, [pc, #64]	@ (8009bac <VL53L1_ReadMulti+0x68>)
 8009b6a:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8009b6c:	2202      	movs	r2, #2
 8009b6e:	490f      	ldr	r1, [pc, #60]	@ (8009bac <VL53L1_ReadMulti+0x68>)
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f7ff ff6f 	bl	8009a54 <_I2CWrite>
 8009b76:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d002      	beq.n	8009b84 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8009b7e:	23f3      	movs	r3, #243	@ 0xf3
 8009b80:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009b82:	e00c      	b.n	8009b9e <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8009b84:	683a      	ldr	r2, [r7, #0]
 8009b86:	6879      	ldr	r1, [r7, #4]
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f7ff ff82 	bl	8009a92 <_I2CRead>
 8009b8e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d002      	beq.n	8009b9c <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8009b96:	23f3      	movs	r3, #243	@ 0xf3
 8009b98:	75fb      	strb	r3, [r7, #23]
 8009b9a:	e000      	b.n	8009b9e <VL53L1_ReadMulti+0x5a>
    }
done:
 8009b9c:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8009b9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3718      	adds	r7, #24
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	20000304 	.word	0x20000304

08009bb0 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	460b      	mov	r3, r1
 8009bba:	807b      	strh	r3, [r7, #2]
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8009bc4:	887b      	ldrh	r3, [r7, #2]
 8009bc6:	0a1b      	lsrs	r3, r3, #8
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	b2da      	uxtb	r2, r3
 8009bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8009c00 <VL53L1_WrByte+0x50>)
 8009bce:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8009bd0:	887b      	ldrh	r3, [r7, #2]
 8009bd2:	b2da      	uxtb	r2, r3
 8009bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8009c00 <VL53L1_WrByte+0x50>)
 8009bd6:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8009bd8:	4a09      	ldr	r2, [pc, #36]	@ (8009c00 <VL53L1_WrByte+0x50>)
 8009bda:	787b      	ldrb	r3, [r7, #1]
 8009bdc:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8009bde:	2203      	movs	r2, #3
 8009be0:	4907      	ldr	r1, [pc, #28]	@ (8009c00 <VL53L1_WrByte+0x50>)
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f7ff ff36 	bl	8009a54 <_I2CWrite>
 8009be8:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d001      	beq.n	8009bf4 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8009bf0:	23f3      	movs	r3, #243	@ 0xf3
 8009bf2:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8009bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3710      	adds	r7, #16
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	20000304 	.word	0x20000304

08009c04 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b086      	sub	sp, #24
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	607a      	str	r2, [r7, #4]
 8009c10:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009c12:	2300      	movs	r3, #0
 8009c14:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8009c16:	897b      	ldrh	r3, [r7, #10]
 8009c18:	0a1b      	lsrs	r3, r3, #8
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	b2da      	uxtb	r2, r3
 8009c1e:	4b12      	ldr	r3, [pc, #72]	@ (8009c68 <VL53L1_RdByte+0x64>)
 8009c20:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8009c22:	897b      	ldrh	r3, [r7, #10]
 8009c24:	b2da      	uxtb	r2, r3
 8009c26:	4b10      	ldr	r3, [pc, #64]	@ (8009c68 <VL53L1_RdByte+0x64>)
 8009c28:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8009c2a:	2202      	movs	r2, #2
 8009c2c:	490e      	ldr	r1, [pc, #56]	@ (8009c68 <VL53L1_RdByte+0x64>)
 8009c2e:	68f8      	ldr	r0, [r7, #12]
 8009c30:	f7ff ff10 	bl	8009a54 <_I2CWrite>
 8009c34:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d002      	beq.n	8009c42 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8009c3c:	23f3      	movs	r3, #243	@ 0xf3
 8009c3e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009c40:	e00c      	b.n	8009c5c <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8009c42:	2201      	movs	r2, #1
 8009c44:	6879      	ldr	r1, [r7, #4]
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f7ff ff23 	bl	8009a92 <_I2CRead>
 8009c4c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d002      	beq.n	8009c5a <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8009c54:	23f3      	movs	r3, #243	@ 0xf3
 8009c56:	75fb      	strb	r3, [r7, #23]
 8009c58:	e000      	b.n	8009c5c <VL53L1_RdByte+0x58>
    }
done:
 8009c5a:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8009c5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3718      	adds	r7, #24
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	20000304 	.word	0x20000304

08009c6c <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b086      	sub	sp, #24
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	460b      	mov	r3, r1
 8009c76:	607a      	str	r2, [r7, #4]
 8009c78:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8009c7e:	897b      	ldrh	r3, [r7, #10]
 8009c80:	0a1b      	lsrs	r3, r3, #8
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	b2da      	uxtb	r2, r3
 8009c86:	4b17      	ldr	r3, [pc, #92]	@ (8009ce4 <VL53L1_RdWord+0x78>)
 8009c88:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8009c8a:	897b      	ldrh	r3, [r7, #10]
 8009c8c:	b2da      	uxtb	r2, r3
 8009c8e:	4b15      	ldr	r3, [pc, #84]	@ (8009ce4 <VL53L1_RdWord+0x78>)
 8009c90:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8009c92:	2202      	movs	r2, #2
 8009c94:	4913      	ldr	r1, [pc, #76]	@ (8009ce4 <VL53L1_RdWord+0x78>)
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	f7ff fedc 	bl	8009a54 <_I2CWrite>
 8009c9c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d002      	beq.n	8009caa <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8009ca4:	23f3      	movs	r3, #243	@ 0xf3
 8009ca6:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009ca8:	e015      	b.n	8009cd6 <VL53L1_RdWord+0x6a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8009caa:	2202      	movs	r2, #2
 8009cac:	490d      	ldr	r1, [pc, #52]	@ (8009ce4 <VL53L1_RdWord+0x78>)
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f7ff feef 	bl	8009a92 <_I2CRead>
 8009cb4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d002      	beq.n	8009cc2 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8009cbc:	23f3      	movs	r3, #243	@ 0xf3
 8009cbe:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009cc0:	e009      	b.n	8009cd6 <VL53L1_RdWord+0x6a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8009cc2:	4b08      	ldr	r3, [pc, #32]	@ (8009ce4 <VL53L1_RdWord+0x78>)
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	021b      	lsls	r3, r3, #8
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	4a06      	ldr	r2, [pc, #24]	@ (8009ce4 <VL53L1_RdWord+0x78>)
 8009ccc:	7852      	ldrb	r2, [r2, #1]
 8009cce:	4413      	add	r3, r2
 8009cd0:	b29a      	uxth	r2, r3
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8009cd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3718      	adds	r7, #24
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	20000304 	.word	0x20000304

08009ce8 <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8009cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3714      	adds	r7, #20
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b082      	sub	sp, #8
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
 8009d12:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7f7 fd0e 	bl	8001738 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 8009d1c:	2300      	movs	r3, #0
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3708      	adds	r7, #8
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
	...

08009d28 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	4a06      	ldr	r2, [pc, #24]	@ (8009d50 <VL53L1_WaitUs+0x28>)
 8009d36:	fb82 1203 	smull	r1, r2, r2, r3
 8009d3a:	1192      	asrs	r2, r2, #6
 8009d3c:	17db      	asrs	r3, r3, #31
 8009d3e:	1ad3      	subs	r3, r2, r3
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7f7 fcf9 	bl	8001738 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3708      	adds	r7, #8
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	10624dd3 	.word	0x10624dd3

08009d54 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8009d54:	b590      	push	{r4, r7, lr}
 8009d56:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	f507 740a 	add.w	r4, r7, #552	@ 0x228
 8009d60:	f5a4 7407 	sub.w	r4, r4, #540	@ 0x21c
 8009d64:	6020      	str	r0, [r4, #0]
 8009d66:	f507 700a 	add.w	r0, r7, #552	@ 0x228
 8009d6a:	f5a0 7008 	sub.w	r0, r0, #544	@ 0x220
 8009d6e:	6001      	str	r1, [r0, #0]
 8009d70:	4619      	mov	r1, r3
 8009d72:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8009d76:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 8009d7a:	801a      	strh	r2, [r3, #0]
 8009d7c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8009d80:	f2a3 2323 	subw	r3, r3, #547	@ 0x223
 8009d84:	460a      	mov	r2, r1
 8009d86:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
	uint32_t     start_time_ms = 0;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
	uint32_t     current_time_ms = 0;
 8009d94:	2300      	movs	r3, #0
 8009d96:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	uint32_t     polling_time_ms = 0;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
	uint8_t      byte_value      = 0;
 8009da0:	2300      	movs	r3, #0
 8009da2:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
	uint8_t      found           = 0;
 8009da6:	2300      	movs	r3, #0
 8009da8:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8009dac:	f107 0310 	add.w	r3, r7, #16
 8009db0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009db4:	493b      	ldr	r1, [pc, #236]	@ (8009ea4 <VL53L1_WaitValueMaskEx+0x150>)
 8009db6:	4618      	mov	r0, r3
 8009db8:	f000 fea9 	bl	800ab0e <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 8009dbc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7ff ff91 	bl	8009ce8 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 8009dc6:	e049      	b.n	8009e5c <VL53L1_WaitValueMaskEx+0x108>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 8009dc8:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d110      	bne.n	8009df2 <VL53L1_WaitValueMaskEx+0x9e>
			status = VL53L1_RdByte(
 8009dd0:	f207 2213 	addw	r2, r7, #531	@ 0x213
 8009dd4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8009dd8:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 8009ddc:	8819      	ldrh	r1, [r3, #0]
 8009dde:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8009de2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8009de6:	6818      	ldr	r0, [r3, #0]
 8009de8:	f7ff ff0c 	bl	8009c04 <VL53L1_RdByte>
 8009dec:	4603      	mov	r3, r0
 8009dee:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8009df2:	f897 2213 	ldrb.w	r2, [r7, #531]	@ 0x213
 8009df6:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 8009dfa:	4013      	ands	r3, r2
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8009e02:	f2a2 2223 	subw	r2, r2, #547	@ 0x223
 8009e06:	7812      	ldrb	r2, [r2, #0]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d102      	bne.n	8009e12 <VL53L1_WaitValueMaskEx+0xbe>
			found = 1;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 8009e12:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d114      	bne.n	8009e44 <VL53L1_WaitValueMaskEx+0xf0>
 8009e1a:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d110      	bne.n	8009e44 <VL53L1_WaitValueMaskEx+0xf0>
			found == 0 &&
 8009e22:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00c      	beq.n	8009e44 <VL53L1_WaitValueMaskEx+0xf0>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 8009e2a:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8009e2e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8009e32:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8009e36:	4611      	mov	r1, r2
 8009e38:	6818      	ldr	r0, [r3, #0]
 8009e3a:	f7ff ff66 	bl	8009d0a <VL53L1_WaitMs>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 8009e44:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7ff ff4d 	bl	8009ce8 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8009e4e:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8009e52:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
		   (polling_time_ms < timeout_ms) &&
 8009e5c:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d10c      	bne.n	8009e7e <VL53L1_WaitValueMaskEx+0x12a>
	while ((status == VL53L1_ERROR_NONE) &&
 8009e64:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8009e68:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8009e6c:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d203      	bcs.n	8009e7e <VL53L1_WaitValueMaskEx+0x12a>
		   (polling_time_ms < timeout_ms) &&
 8009e76:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d0a4      	beq.n	8009dc8 <VL53L1_WaitValueMaskEx+0x74>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 8009e7e:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d106      	bne.n	8009e94 <VL53L1_WaitValueMaskEx+0x140>
 8009e86:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d102      	bne.n	8009e94 <VL53L1_WaitValueMaskEx+0x140>
		status = VL53L1_ERROR_TIME_OUT;
 8009e8e:	23f9      	movs	r3, #249	@ 0xf9
 8009e90:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227

	return status;
 8009e94:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f507 770b 	add.w	r7, r7, #556	@ 0x22c
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd90      	pop	{r4, r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	0800c9e0 	.word	0x0800c9e0

08009ea8 <__cvt>:
 8009ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009eac:	ec57 6b10 	vmov	r6, r7, d0
 8009eb0:	2f00      	cmp	r7, #0
 8009eb2:	460c      	mov	r4, r1
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	463b      	mov	r3, r7
 8009eb8:	bfbb      	ittet	lt
 8009eba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009ebe:	461f      	movlt	r7, r3
 8009ec0:	2300      	movge	r3, #0
 8009ec2:	232d      	movlt	r3, #45	@ 0x2d
 8009ec4:	700b      	strb	r3, [r1, #0]
 8009ec6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ec8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009ecc:	4691      	mov	r9, r2
 8009ece:	f023 0820 	bic.w	r8, r3, #32
 8009ed2:	bfbc      	itt	lt
 8009ed4:	4632      	movlt	r2, r6
 8009ed6:	4616      	movlt	r6, r2
 8009ed8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009edc:	d005      	beq.n	8009eea <__cvt+0x42>
 8009ede:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009ee2:	d100      	bne.n	8009ee6 <__cvt+0x3e>
 8009ee4:	3401      	adds	r4, #1
 8009ee6:	2102      	movs	r1, #2
 8009ee8:	e000      	b.n	8009eec <__cvt+0x44>
 8009eea:	2103      	movs	r1, #3
 8009eec:	ab03      	add	r3, sp, #12
 8009eee:	9301      	str	r3, [sp, #4]
 8009ef0:	ab02      	add	r3, sp, #8
 8009ef2:	9300      	str	r3, [sp, #0]
 8009ef4:	ec47 6b10 	vmov	d0, r6, r7
 8009ef8:	4653      	mov	r3, sl
 8009efa:	4622      	mov	r2, r4
 8009efc:	f000 ff28 	bl	800ad50 <_dtoa_r>
 8009f00:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009f04:	4605      	mov	r5, r0
 8009f06:	d119      	bne.n	8009f3c <__cvt+0x94>
 8009f08:	f019 0f01 	tst.w	r9, #1
 8009f0c:	d00e      	beq.n	8009f2c <__cvt+0x84>
 8009f0e:	eb00 0904 	add.w	r9, r0, r4
 8009f12:	2200      	movs	r2, #0
 8009f14:	2300      	movs	r3, #0
 8009f16:	4630      	mov	r0, r6
 8009f18:	4639      	mov	r1, r7
 8009f1a:	f7f6 fdd5 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f1e:	b108      	cbz	r0, 8009f24 <__cvt+0x7c>
 8009f20:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f24:	2230      	movs	r2, #48	@ 0x30
 8009f26:	9b03      	ldr	r3, [sp, #12]
 8009f28:	454b      	cmp	r3, r9
 8009f2a:	d31e      	bcc.n	8009f6a <__cvt+0xc2>
 8009f2c:	9b03      	ldr	r3, [sp, #12]
 8009f2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f30:	1b5b      	subs	r3, r3, r5
 8009f32:	4628      	mov	r0, r5
 8009f34:	6013      	str	r3, [r2, #0]
 8009f36:	b004      	add	sp, #16
 8009f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f40:	eb00 0904 	add.w	r9, r0, r4
 8009f44:	d1e5      	bne.n	8009f12 <__cvt+0x6a>
 8009f46:	7803      	ldrb	r3, [r0, #0]
 8009f48:	2b30      	cmp	r3, #48	@ 0x30
 8009f4a:	d10a      	bne.n	8009f62 <__cvt+0xba>
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	2300      	movs	r3, #0
 8009f50:	4630      	mov	r0, r6
 8009f52:	4639      	mov	r1, r7
 8009f54:	f7f6 fdb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f58:	b918      	cbnz	r0, 8009f62 <__cvt+0xba>
 8009f5a:	f1c4 0401 	rsb	r4, r4, #1
 8009f5e:	f8ca 4000 	str.w	r4, [sl]
 8009f62:	f8da 3000 	ldr.w	r3, [sl]
 8009f66:	4499      	add	r9, r3
 8009f68:	e7d3      	b.n	8009f12 <__cvt+0x6a>
 8009f6a:	1c59      	adds	r1, r3, #1
 8009f6c:	9103      	str	r1, [sp, #12]
 8009f6e:	701a      	strb	r2, [r3, #0]
 8009f70:	e7d9      	b.n	8009f26 <__cvt+0x7e>

08009f72 <__exponent>:
 8009f72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f74:	2900      	cmp	r1, #0
 8009f76:	bfba      	itte	lt
 8009f78:	4249      	neglt	r1, r1
 8009f7a:	232d      	movlt	r3, #45	@ 0x2d
 8009f7c:	232b      	movge	r3, #43	@ 0x2b
 8009f7e:	2909      	cmp	r1, #9
 8009f80:	7002      	strb	r2, [r0, #0]
 8009f82:	7043      	strb	r3, [r0, #1]
 8009f84:	dd29      	ble.n	8009fda <__exponent+0x68>
 8009f86:	f10d 0307 	add.w	r3, sp, #7
 8009f8a:	461d      	mov	r5, r3
 8009f8c:	270a      	movs	r7, #10
 8009f8e:	461a      	mov	r2, r3
 8009f90:	fbb1 f6f7 	udiv	r6, r1, r7
 8009f94:	fb07 1416 	mls	r4, r7, r6, r1
 8009f98:	3430      	adds	r4, #48	@ 0x30
 8009f9a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009f9e:	460c      	mov	r4, r1
 8009fa0:	2c63      	cmp	r4, #99	@ 0x63
 8009fa2:	f103 33ff 	add.w	r3, r3, #4294967295
 8009fa6:	4631      	mov	r1, r6
 8009fa8:	dcf1      	bgt.n	8009f8e <__exponent+0x1c>
 8009faa:	3130      	adds	r1, #48	@ 0x30
 8009fac:	1e94      	subs	r4, r2, #2
 8009fae:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009fb2:	1c41      	adds	r1, r0, #1
 8009fb4:	4623      	mov	r3, r4
 8009fb6:	42ab      	cmp	r3, r5
 8009fb8:	d30a      	bcc.n	8009fd0 <__exponent+0x5e>
 8009fba:	f10d 0309 	add.w	r3, sp, #9
 8009fbe:	1a9b      	subs	r3, r3, r2
 8009fc0:	42ac      	cmp	r4, r5
 8009fc2:	bf88      	it	hi
 8009fc4:	2300      	movhi	r3, #0
 8009fc6:	3302      	adds	r3, #2
 8009fc8:	4403      	add	r3, r0
 8009fca:	1a18      	subs	r0, r3, r0
 8009fcc:	b003      	add	sp, #12
 8009fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fd0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009fd4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009fd8:	e7ed      	b.n	8009fb6 <__exponent+0x44>
 8009fda:	2330      	movs	r3, #48	@ 0x30
 8009fdc:	3130      	adds	r1, #48	@ 0x30
 8009fde:	7083      	strb	r3, [r0, #2]
 8009fe0:	70c1      	strb	r1, [r0, #3]
 8009fe2:	1d03      	adds	r3, r0, #4
 8009fe4:	e7f1      	b.n	8009fca <__exponent+0x58>
	...

08009fe8 <_printf_float>:
 8009fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fec:	b08d      	sub	sp, #52	@ 0x34
 8009fee:	460c      	mov	r4, r1
 8009ff0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009ff4:	4616      	mov	r6, r2
 8009ff6:	461f      	mov	r7, r3
 8009ff8:	4605      	mov	r5, r0
 8009ffa:	f000 fd9b 	bl	800ab34 <_localeconv_r>
 8009ffe:	6803      	ldr	r3, [r0, #0]
 800a000:	9304      	str	r3, [sp, #16]
 800a002:	4618      	mov	r0, r3
 800a004:	f7f6 f934 	bl	8000270 <strlen>
 800a008:	2300      	movs	r3, #0
 800a00a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a00c:	f8d8 3000 	ldr.w	r3, [r8]
 800a010:	9005      	str	r0, [sp, #20]
 800a012:	3307      	adds	r3, #7
 800a014:	f023 0307 	bic.w	r3, r3, #7
 800a018:	f103 0208 	add.w	r2, r3, #8
 800a01c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a020:	f8d4 b000 	ldr.w	fp, [r4]
 800a024:	f8c8 2000 	str.w	r2, [r8]
 800a028:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a02c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a030:	9307      	str	r3, [sp, #28]
 800a032:	f8cd 8018 	str.w	r8, [sp, #24]
 800a036:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a03a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a03e:	4b9c      	ldr	r3, [pc, #624]	@ (800a2b0 <_printf_float+0x2c8>)
 800a040:	f04f 32ff 	mov.w	r2, #4294967295
 800a044:	f7f6 fd72 	bl	8000b2c <__aeabi_dcmpun>
 800a048:	bb70      	cbnz	r0, 800a0a8 <_printf_float+0xc0>
 800a04a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a04e:	4b98      	ldr	r3, [pc, #608]	@ (800a2b0 <_printf_float+0x2c8>)
 800a050:	f04f 32ff 	mov.w	r2, #4294967295
 800a054:	f7f6 fd4c 	bl	8000af0 <__aeabi_dcmple>
 800a058:	bb30      	cbnz	r0, 800a0a8 <_printf_float+0xc0>
 800a05a:	2200      	movs	r2, #0
 800a05c:	2300      	movs	r3, #0
 800a05e:	4640      	mov	r0, r8
 800a060:	4649      	mov	r1, r9
 800a062:	f7f6 fd3b 	bl	8000adc <__aeabi_dcmplt>
 800a066:	b110      	cbz	r0, 800a06e <_printf_float+0x86>
 800a068:	232d      	movs	r3, #45	@ 0x2d
 800a06a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a06e:	4a91      	ldr	r2, [pc, #580]	@ (800a2b4 <_printf_float+0x2cc>)
 800a070:	4b91      	ldr	r3, [pc, #580]	@ (800a2b8 <_printf_float+0x2d0>)
 800a072:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a076:	bf94      	ite	ls
 800a078:	4690      	movls	r8, r2
 800a07a:	4698      	movhi	r8, r3
 800a07c:	2303      	movs	r3, #3
 800a07e:	6123      	str	r3, [r4, #16]
 800a080:	f02b 0304 	bic.w	r3, fp, #4
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	f04f 0900 	mov.w	r9, #0
 800a08a:	9700      	str	r7, [sp, #0]
 800a08c:	4633      	mov	r3, r6
 800a08e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a090:	4621      	mov	r1, r4
 800a092:	4628      	mov	r0, r5
 800a094:	f000 f9d2 	bl	800a43c <_printf_common>
 800a098:	3001      	adds	r0, #1
 800a09a:	f040 808d 	bne.w	800a1b8 <_printf_float+0x1d0>
 800a09e:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a2:	b00d      	add	sp, #52	@ 0x34
 800a0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a8:	4642      	mov	r2, r8
 800a0aa:	464b      	mov	r3, r9
 800a0ac:	4640      	mov	r0, r8
 800a0ae:	4649      	mov	r1, r9
 800a0b0:	f7f6 fd3c 	bl	8000b2c <__aeabi_dcmpun>
 800a0b4:	b140      	cbz	r0, 800a0c8 <_printf_float+0xe0>
 800a0b6:	464b      	mov	r3, r9
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	bfbc      	itt	lt
 800a0bc:	232d      	movlt	r3, #45	@ 0x2d
 800a0be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a0c2:	4a7e      	ldr	r2, [pc, #504]	@ (800a2bc <_printf_float+0x2d4>)
 800a0c4:	4b7e      	ldr	r3, [pc, #504]	@ (800a2c0 <_printf_float+0x2d8>)
 800a0c6:	e7d4      	b.n	800a072 <_printf_float+0x8a>
 800a0c8:	6863      	ldr	r3, [r4, #4]
 800a0ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a0ce:	9206      	str	r2, [sp, #24]
 800a0d0:	1c5a      	adds	r2, r3, #1
 800a0d2:	d13b      	bne.n	800a14c <_printf_float+0x164>
 800a0d4:	2306      	movs	r3, #6
 800a0d6:	6063      	str	r3, [r4, #4]
 800a0d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a0dc:	2300      	movs	r3, #0
 800a0de:	6022      	str	r2, [r4, #0]
 800a0e0:	9303      	str	r3, [sp, #12]
 800a0e2:	ab0a      	add	r3, sp, #40	@ 0x28
 800a0e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a0e8:	ab09      	add	r3, sp, #36	@ 0x24
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	6861      	ldr	r1, [r4, #4]
 800a0ee:	ec49 8b10 	vmov	d0, r8, r9
 800a0f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	f7ff fed6 	bl	8009ea8 <__cvt>
 800a0fc:	9b06      	ldr	r3, [sp, #24]
 800a0fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a100:	2b47      	cmp	r3, #71	@ 0x47
 800a102:	4680      	mov	r8, r0
 800a104:	d129      	bne.n	800a15a <_printf_float+0x172>
 800a106:	1cc8      	adds	r0, r1, #3
 800a108:	db02      	blt.n	800a110 <_printf_float+0x128>
 800a10a:	6863      	ldr	r3, [r4, #4]
 800a10c:	4299      	cmp	r1, r3
 800a10e:	dd41      	ble.n	800a194 <_printf_float+0x1ac>
 800a110:	f1aa 0a02 	sub.w	sl, sl, #2
 800a114:	fa5f fa8a 	uxtb.w	sl, sl
 800a118:	3901      	subs	r1, #1
 800a11a:	4652      	mov	r2, sl
 800a11c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a120:	9109      	str	r1, [sp, #36]	@ 0x24
 800a122:	f7ff ff26 	bl	8009f72 <__exponent>
 800a126:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a128:	1813      	adds	r3, r2, r0
 800a12a:	2a01      	cmp	r2, #1
 800a12c:	4681      	mov	r9, r0
 800a12e:	6123      	str	r3, [r4, #16]
 800a130:	dc02      	bgt.n	800a138 <_printf_float+0x150>
 800a132:	6822      	ldr	r2, [r4, #0]
 800a134:	07d2      	lsls	r2, r2, #31
 800a136:	d501      	bpl.n	800a13c <_printf_float+0x154>
 800a138:	3301      	adds	r3, #1
 800a13a:	6123      	str	r3, [r4, #16]
 800a13c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a140:	2b00      	cmp	r3, #0
 800a142:	d0a2      	beq.n	800a08a <_printf_float+0xa2>
 800a144:	232d      	movs	r3, #45	@ 0x2d
 800a146:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a14a:	e79e      	b.n	800a08a <_printf_float+0xa2>
 800a14c:	9a06      	ldr	r2, [sp, #24]
 800a14e:	2a47      	cmp	r2, #71	@ 0x47
 800a150:	d1c2      	bne.n	800a0d8 <_printf_float+0xf0>
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1c0      	bne.n	800a0d8 <_printf_float+0xf0>
 800a156:	2301      	movs	r3, #1
 800a158:	e7bd      	b.n	800a0d6 <_printf_float+0xee>
 800a15a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a15e:	d9db      	bls.n	800a118 <_printf_float+0x130>
 800a160:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a164:	d118      	bne.n	800a198 <_printf_float+0x1b0>
 800a166:	2900      	cmp	r1, #0
 800a168:	6863      	ldr	r3, [r4, #4]
 800a16a:	dd0b      	ble.n	800a184 <_printf_float+0x19c>
 800a16c:	6121      	str	r1, [r4, #16]
 800a16e:	b913      	cbnz	r3, 800a176 <_printf_float+0x18e>
 800a170:	6822      	ldr	r2, [r4, #0]
 800a172:	07d0      	lsls	r0, r2, #31
 800a174:	d502      	bpl.n	800a17c <_printf_float+0x194>
 800a176:	3301      	adds	r3, #1
 800a178:	440b      	add	r3, r1
 800a17a:	6123      	str	r3, [r4, #16]
 800a17c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a17e:	f04f 0900 	mov.w	r9, #0
 800a182:	e7db      	b.n	800a13c <_printf_float+0x154>
 800a184:	b913      	cbnz	r3, 800a18c <_printf_float+0x1a4>
 800a186:	6822      	ldr	r2, [r4, #0]
 800a188:	07d2      	lsls	r2, r2, #31
 800a18a:	d501      	bpl.n	800a190 <_printf_float+0x1a8>
 800a18c:	3302      	adds	r3, #2
 800a18e:	e7f4      	b.n	800a17a <_printf_float+0x192>
 800a190:	2301      	movs	r3, #1
 800a192:	e7f2      	b.n	800a17a <_printf_float+0x192>
 800a194:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a198:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a19a:	4299      	cmp	r1, r3
 800a19c:	db05      	blt.n	800a1aa <_printf_float+0x1c2>
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	6121      	str	r1, [r4, #16]
 800a1a2:	07d8      	lsls	r0, r3, #31
 800a1a4:	d5ea      	bpl.n	800a17c <_printf_float+0x194>
 800a1a6:	1c4b      	adds	r3, r1, #1
 800a1a8:	e7e7      	b.n	800a17a <_printf_float+0x192>
 800a1aa:	2900      	cmp	r1, #0
 800a1ac:	bfd4      	ite	le
 800a1ae:	f1c1 0202 	rsble	r2, r1, #2
 800a1b2:	2201      	movgt	r2, #1
 800a1b4:	4413      	add	r3, r2
 800a1b6:	e7e0      	b.n	800a17a <_printf_float+0x192>
 800a1b8:	6823      	ldr	r3, [r4, #0]
 800a1ba:	055a      	lsls	r2, r3, #21
 800a1bc:	d407      	bmi.n	800a1ce <_printf_float+0x1e6>
 800a1be:	6923      	ldr	r3, [r4, #16]
 800a1c0:	4642      	mov	r2, r8
 800a1c2:	4631      	mov	r1, r6
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	47b8      	blx	r7
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	d12b      	bne.n	800a224 <_printf_float+0x23c>
 800a1cc:	e767      	b.n	800a09e <_printf_float+0xb6>
 800a1ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a1d2:	f240 80dd 	bls.w	800a390 <_printf_float+0x3a8>
 800a1d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a1da:	2200      	movs	r2, #0
 800a1dc:	2300      	movs	r3, #0
 800a1de:	f7f6 fc73 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	d033      	beq.n	800a24e <_printf_float+0x266>
 800a1e6:	4a37      	ldr	r2, [pc, #220]	@ (800a2c4 <_printf_float+0x2dc>)
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	4631      	mov	r1, r6
 800a1ec:	4628      	mov	r0, r5
 800a1ee:	47b8      	blx	r7
 800a1f0:	3001      	adds	r0, #1
 800a1f2:	f43f af54 	beq.w	800a09e <_printf_float+0xb6>
 800a1f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a1fa:	4543      	cmp	r3, r8
 800a1fc:	db02      	blt.n	800a204 <_printf_float+0x21c>
 800a1fe:	6823      	ldr	r3, [r4, #0]
 800a200:	07d8      	lsls	r0, r3, #31
 800a202:	d50f      	bpl.n	800a224 <_printf_float+0x23c>
 800a204:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a208:	4631      	mov	r1, r6
 800a20a:	4628      	mov	r0, r5
 800a20c:	47b8      	blx	r7
 800a20e:	3001      	adds	r0, #1
 800a210:	f43f af45 	beq.w	800a09e <_printf_float+0xb6>
 800a214:	f04f 0900 	mov.w	r9, #0
 800a218:	f108 38ff 	add.w	r8, r8, #4294967295
 800a21c:	f104 0a1a 	add.w	sl, r4, #26
 800a220:	45c8      	cmp	r8, r9
 800a222:	dc09      	bgt.n	800a238 <_printf_float+0x250>
 800a224:	6823      	ldr	r3, [r4, #0]
 800a226:	079b      	lsls	r3, r3, #30
 800a228:	f100 8103 	bmi.w	800a432 <_printf_float+0x44a>
 800a22c:	68e0      	ldr	r0, [r4, #12]
 800a22e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a230:	4298      	cmp	r0, r3
 800a232:	bfb8      	it	lt
 800a234:	4618      	movlt	r0, r3
 800a236:	e734      	b.n	800a0a2 <_printf_float+0xba>
 800a238:	2301      	movs	r3, #1
 800a23a:	4652      	mov	r2, sl
 800a23c:	4631      	mov	r1, r6
 800a23e:	4628      	mov	r0, r5
 800a240:	47b8      	blx	r7
 800a242:	3001      	adds	r0, #1
 800a244:	f43f af2b 	beq.w	800a09e <_printf_float+0xb6>
 800a248:	f109 0901 	add.w	r9, r9, #1
 800a24c:	e7e8      	b.n	800a220 <_printf_float+0x238>
 800a24e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a250:	2b00      	cmp	r3, #0
 800a252:	dc39      	bgt.n	800a2c8 <_printf_float+0x2e0>
 800a254:	4a1b      	ldr	r2, [pc, #108]	@ (800a2c4 <_printf_float+0x2dc>)
 800a256:	2301      	movs	r3, #1
 800a258:	4631      	mov	r1, r6
 800a25a:	4628      	mov	r0, r5
 800a25c:	47b8      	blx	r7
 800a25e:	3001      	adds	r0, #1
 800a260:	f43f af1d 	beq.w	800a09e <_printf_float+0xb6>
 800a264:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a268:	ea59 0303 	orrs.w	r3, r9, r3
 800a26c:	d102      	bne.n	800a274 <_printf_float+0x28c>
 800a26e:	6823      	ldr	r3, [r4, #0]
 800a270:	07d9      	lsls	r1, r3, #31
 800a272:	d5d7      	bpl.n	800a224 <_printf_float+0x23c>
 800a274:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a278:	4631      	mov	r1, r6
 800a27a:	4628      	mov	r0, r5
 800a27c:	47b8      	blx	r7
 800a27e:	3001      	adds	r0, #1
 800a280:	f43f af0d 	beq.w	800a09e <_printf_float+0xb6>
 800a284:	f04f 0a00 	mov.w	sl, #0
 800a288:	f104 0b1a 	add.w	fp, r4, #26
 800a28c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a28e:	425b      	negs	r3, r3
 800a290:	4553      	cmp	r3, sl
 800a292:	dc01      	bgt.n	800a298 <_printf_float+0x2b0>
 800a294:	464b      	mov	r3, r9
 800a296:	e793      	b.n	800a1c0 <_printf_float+0x1d8>
 800a298:	2301      	movs	r3, #1
 800a29a:	465a      	mov	r2, fp
 800a29c:	4631      	mov	r1, r6
 800a29e:	4628      	mov	r0, r5
 800a2a0:	47b8      	blx	r7
 800a2a2:	3001      	adds	r0, #1
 800a2a4:	f43f aefb 	beq.w	800a09e <_printf_float+0xb6>
 800a2a8:	f10a 0a01 	add.w	sl, sl, #1
 800a2ac:	e7ee      	b.n	800a28c <_printf_float+0x2a4>
 800a2ae:	bf00      	nop
 800a2b0:	7fefffff 	.word	0x7fefffff
 800a2b4:	0800ca1c 	.word	0x0800ca1c
 800a2b8:	0800ca20 	.word	0x0800ca20
 800a2bc:	0800ca24 	.word	0x0800ca24
 800a2c0:	0800ca28 	.word	0x0800ca28
 800a2c4:	0800ca2c 	.word	0x0800ca2c
 800a2c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a2ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a2ce:	4553      	cmp	r3, sl
 800a2d0:	bfa8      	it	ge
 800a2d2:	4653      	movge	r3, sl
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	4699      	mov	r9, r3
 800a2d8:	dc36      	bgt.n	800a348 <_printf_float+0x360>
 800a2da:	f04f 0b00 	mov.w	fp, #0
 800a2de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2e2:	f104 021a 	add.w	r2, r4, #26
 800a2e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a2e8:	9306      	str	r3, [sp, #24]
 800a2ea:	eba3 0309 	sub.w	r3, r3, r9
 800a2ee:	455b      	cmp	r3, fp
 800a2f0:	dc31      	bgt.n	800a356 <_printf_float+0x36e>
 800a2f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2f4:	459a      	cmp	sl, r3
 800a2f6:	dc3a      	bgt.n	800a36e <_printf_float+0x386>
 800a2f8:	6823      	ldr	r3, [r4, #0]
 800a2fa:	07da      	lsls	r2, r3, #31
 800a2fc:	d437      	bmi.n	800a36e <_printf_float+0x386>
 800a2fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a300:	ebaa 0903 	sub.w	r9, sl, r3
 800a304:	9b06      	ldr	r3, [sp, #24]
 800a306:	ebaa 0303 	sub.w	r3, sl, r3
 800a30a:	4599      	cmp	r9, r3
 800a30c:	bfa8      	it	ge
 800a30e:	4699      	movge	r9, r3
 800a310:	f1b9 0f00 	cmp.w	r9, #0
 800a314:	dc33      	bgt.n	800a37e <_printf_float+0x396>
 800a316:	f04f 0800 	mov.w	r8, #0
 800a31a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a31e:	f104 0b1a 	add.w	fp, r4, #26
 800a322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a324:	ebaa 0303 	sub.w	r3, sl, r3
 800a328:	eba3 0309 	sub.w	r3, r3, r9
 800a32c:	4543      	cmp	r3, r8
 800a32e:	f77f af79 	ble.w	800a224 <_printf_float+0x23c>
 800a332:	2301      	movs	r3, #1
 800a334:	465a      	mov	r2, fp
 800a336:	4631      	mov	r1, r6
 800a338:	4628      	mov	r0, r5
 800a33a:	47b8      	blx	r7
 800a33c:	3001      	adds	r0, #1
 800a33e:	f43f aeae 	beq.w	800a09e <_printf_float+0xb6>
 800a342:	f108 0801 	add.w	r8, r8, #1
 800a346:	e7ec      	b.n	800a322 <_printf_float+0x33a>
 800a348:	4642      	mov	r2, r8
 800a34a:	4631      	mov	r1, r6
 800a34c:	4628      	mov	r0, r5
 800a34e:	47b8      	blx	r7
 800a350:	3001      	adds	r0, #1
 800a352:	d1c2      	bne.n	800a2da <_printf_float+0x2f2>
 800a354:	e6a3      	b.n	800a09e <_printf_float+0xb6>
 800a356:	2301      	movs	r3, #1
 800a358:	4631      	mov	r1, r6
 800a35a:	4628      	mov	r0, r5
 800a35c:	9206      	str	r2, [sp, #24]
 800a35e:	47b8      	blx	r7
 800a360:	3001      	adds	r0, #1
 800a362:	f43f ae9c 	beq.w	800a09e <_printf_float+0xb6>
 800a366:	9a06      	ldr	r2, [sp, #24]
 800a368:	f10b 0b01 	add.w	fp, fp, #1
 800a36c:	e7bb      	b.n	800a2e6 <_printf_float+0x2fe>
 800a36e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a372:	4631      	mov	r1, r6
 800a374:	4628      	mov	r0, r5
 800a376:	47b8      	blx	r7
 800a378:	3001      	adds	r0, #1
 800a37a:	d1c0      	bne.n	800a2fe <_printf_float+0x316>
 800a37c:	e68f      	b.n	800a09e <_printf_float+0xb6>
 800a37e:	9a06      	ldr	r2, [sp, #24]
 800a380:	464b      	mov	r3, r9
 800a382:	4442      	add	r2, r8
 800a384:	4631      	mov	r1, r6
 800a386:	4628      	mov	r0, r5
 800a388:	47b8      	blx	r7
 800a38a:	3001      	adds	r0, #1
 800a38c:	d1c3      	bne.n	800a316 <_printf_float+0x32e>
 800a38e:	e686      	b.n	800a09e <_printf_float+0xb6>
 800a390:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a394:	f1ba 0f01 	cmp.w	sl, #1
 800a398:	dc01      	bgt.n	800a39e <_printf_float+0x3b6>
 800a39a:	07db      	lsls	r3, r3, #31
 800a39c:	d536      	bpl.n	800a40c <_printf_float+0x424>
 800a39e:	2301      	movs	r3, #1
 800a3a0:	4642      	mov	r2, r8
 800a3a2:	4631      	mov	r1, r6
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	47b8      	blx	r7
 800a3a8:	3001      	adds	r0, #1
 800a3aa:	f43f ae78 	beq.w	800a09e <_printf_float+0xb6>
 800a3ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3b2:	4631      	mov	r1, r6
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	47b8      	blx	r7
 800a3b8:	3001      	adds	r0, #1
 800a3ba:	f43f ae70 	beq.w	800a09e <_printf_float+0xb6>
 800a3be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3ca:	f7f6 fb7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3ce:	b9c0      	cbnz	r0, 800a402 <_printf_float+0x41a>
 800a3d0:	4653      	mov	r3, sl
 800a3d2:	f108 0201 	add.w	r2, r8, #1
 800a3d6:	4631      	mov	r1, r6
 800a3d8:	4628      	mov	r0, r5
 800a3da:	47b8      	blx	r7
 800a3dc:	3001      	adds	r0, #1
 800a3de:	d10c      	bne.n	800a3fa <_printf_float+0x412>
 800a3e0:	e65d      	b.n	800a09e <_printf_float+0xb6>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	465a      	mov	r2, fp
 800a3e6:	4631      	mov	r1, r6
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	47b8      	blx	r7
 800a3ec:	3001      	adds	r0, #1
 800a3ee:	f43f ae56 	beq.w	800a09e <_printf_float+0xb6>
 800a3f2:	f108 0801 	add.w	r8, r8, #1
 800a3f6:	45d0      	cmp	r8, sl
 800a3f8:	dbf3      	blt.n	800a3e2 <_printf_float+0x3fa>
 800a3fa:	464b      	mov	r3, r9
 800a3fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a400:	e6df      	b.n	800a1c2 <_printf_float+0x1da>
 800a402:	f04f 0800 	mov.w	r8, #0
 800a406:	f104 0b1a 	add.w	fp, r4, #26
 800a40a:	e7f4      	b.n	800a3f6 <_printf_float+0x40e>
 800a40c:	2301      	movs	r3, #1
 800a40e:	4642      	mov	r2, r8
 800a410:	e7e1      	b.n	800a3d6 <_printf_float+0x3ee>
 800a412:	2301      	movs	r3, #1
 800a414:	464a      	mov	r2, r9
 800a416:	4631      	mov	r1, r6
 800a418:	4628      	mov	r0, r5
 800a41a:	47b8      	blx	r7
 800a41c:	3001      	adds	r0, #1
 800a41e:	f43f ae3e 	beq.w	800a09e <_printf_float+0xb6>
 800a422:	f108 0801 	add.w	r8, r8, #1
 800a426:	68e3      	ldr	r3, [r4, #12]
 800a428:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a42a:	1a5b      	subs	r3, r3, r1
 800a42c:	4543      	cmp	r3, r8
 800a42e:	dcf0      	bgt.n	800a412 <_printf_float+0x42a>
 800a430:	e6fc      	b.n	800a22c <_printf_float+0x244>
 800a432:	f04f 0800 	mov.w	r8, #0
 800a436:	f104 0919 	add.w	r9, r4, #25
 800a43a:	e7f4      	b.n	800a426 <_printf_float+0x43e>

0800a43c <_printf_common>:
 800a43c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a440:	4616      	mov	r6, r2
 800a442:	4698      	mov	r8, r3
 800a444:	688a      	ldr	r2, [r1, #8]
 800a446:	690b      	ldr	r3, [r1, #16]
 800a448:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a44c:	4293      	cmp	r3, r2
 800a44e:	bfb8      	it	lt
 800a450:	4613      	movlt	r3, r2
 800a452:	6033      	str	r3, [r6, #0]
 800a454:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a458:	4607      	mov	r7, r0
 800a45a:	460c      	mov	r4, r1
 800a45c:	b10a      	cbz	r2, 800a462 <_printf_common+0x26>
 800a45e:	3301      	adds	r3, #1
 800a460:	6033      	str	r3, [r6, #0]
 800a462:	6823      	ldr	r3, [r4, #0]
 800a464:	0699      	lsls	r1, r3, #26
 800a466:	bf42      	ittt	mi
 800a468:	6833      	ldrmi	r3, [r6, #0]
 800a46a:	3302      	addmi	r3, #2
 800a46c:	6033      	strmi	r3, [r6, #0]
 800a46e:	6825      	ldr	r5, [r4, #0]
 800a470:	f015 0506 	ands.w	r5, r5, #6
 800a474:	d106      	bne.n	800a484 <_printf_common+0x48>
 800a476:	f104 0a19 	add.w	sl, r4, #25
 800a47a:	68e3      	ldr	r3, [r4, #12]
 800a47c:	6832      	ldr	r2, [r6, #0]
 800a47e:	1a9b      	subs	r3, r3, r2
 800a480:	42ab      	cmp	r3, r5
 800a482:	dc26      	bgt.n	800a4d2 <_printf_common+0x96>
 800a484:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a488:	6822      	ldr	r2, [r4, #0]
 800a48a:	3b00      	subs	r3, #0
 800a48c:	bf18      	it	ne
 800a48e:	2301      	movne	r3, #1
 800a490:	0692      	lsls	r2, r2, #26
 800a492:	d42b      	bmi.n	800a4ec <_printf_common+0xb0>
 800a494:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a498:	4641      	mov	r1, r8
 800a49a:	4638      	mov	r0, r7
 800a49c:	47c8      	blx	r9
 800a49e:	3001      	adds	r0, #1
 800a4a0:	d01e      	beq.n	800a4e0 <_printf_common+0xa4>
 800a4a2:	6823      	ldr	r3, [r4, #0]
 800a4a4:	6922      	ldr	r2, [r4, #16]
 800a4a6:	f003 0306 	and.w	r3, r3, #6
 800a4aa:	2b04      	cmp	r3, #4
 800a4ac:	bf02      	ittt	eq
 800a4ae:	68e5      	ldreq	r5, [r4, #12]
 800a4b0:	6833      	ldreq	r3, [r6, #0]
 800a4b2:	1aed      	subeq	r5, r5, r3
 800a4b4:	68a3      	ldr	r3, [r4, #8]
 800a4b6:	bf0c      	ite	eq
 800a4b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4bc:	2500      	movne	r5, #0
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	bfc4      	itt	gt
 800a4c2:	1a9b      	subgt	r3, r3, r2
 800a4c4:	18ed      	addgt	r5, r5, r3
 800a4c6:	2600      	movs	r6, #0
 800a4c8:	341a      	adds	r4, #26
 800a4ca:	42b5      	cmp	r5, r6
 800a4cc:	d11a      	bne.n	800a504 <_printf_common+0xc8>
 800a4ce:	2000      	movs	r0, #0
 800a4d0:	e008      	b.n	800a4e4 <_printf_common+0xa8>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	4652      	mov	r2, sl
 800a4d6:	4641      	mov	r1, r8
 800a4d8:	4638      	mov	r0, r7
 800a4da:	47c8      	blx	r9
 800a4dc:	3001      	adds	r0, #1
 800a4de:	d103      	bne.n	800a4e8 <_printf_common+0xac>
 800a4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4e8:	3501      	adds	r5, #1
 800a4ea:	e7c6      	b.n	800a47a <_printf_common+0x3e>
 800a4ec:	18e1      	adds	r1, r4, r3
 800a4ee:	1c5a      	adds	r2, r3, #1
 800a4f0:	2030      	movs	r0, #48	@ 0x30
 800a4f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a4f6:	4422      	add	r2, r4
 800a4f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a4fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a500:	3302      	adds	r3, #2
 800a502:	e7c7      	b.n	800a494 <_printf_common+0x58>
 800a504:	2301      	movs	r3, #1
 800a506:	4622      	mov	r2, r4
 800a508:	4641      	mov	r1, r8
 800a50a:	4638      	mov	r0, r7
 800a50c:	47c8      	blx	r9
 800a50e:	3001      	adds	r0, #1
 800a510:	d0e6      	beq.n	800a4e0 <_printf_common+0xa4>
 800a512:	3601      	adds	r6, #1
 800a514:	e7d9      	b.n	800a4ca <_printf_common+0x8e>
	...

0800a518 <_printf_i>:
 800a518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a51c:	7e0f      	ldrb	r7, [r1, #24]
 800a51e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a520:	2f78      	cmp	r7, #120	@ 0x78
 800a522:	4691      	mov	r9, r2
 800a524:	4680      	mov	r8, r0
 800a526:	460c      	mov	r4, r1
 800a528:	469a      	mov	sl, r3
 800a52a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a52e:	d807      	bhi.n	800a540 <_printf_i+0x28>
 800a530:	2f62      	cmp	r7, #98	@ 0x62
 800a532:	d80a      	bhi.n	800a54a <_printf_i+0x32>
 800a534:	2f00      	cmp	r7, #0
 800a536:	f000 80d2 	beq.w	800a6de <_printf_i+0x1c6>
 800a53a:	2f58      	cmp	r7, #88	@ 0x58
 800a53c:	f000 80b9 	beq.w	800a6b2 <_printf_i+0x19a>
 800a540:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a544:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a548:	e03a      	b.n	800a5c0 <_printf_i+0xa8>
 800a54a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a54e:	2b15      	cmp	r3, #21
 800a550:	d8f6      	bhi.n	800a540 <_printf_i+0x28>
 800a552:	a101      	add	r1, pc, #4	@ (adr r1, 800a558 <_printf_i+0x40>)
 800a554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a558:	0800a5b1 	.word	0x0800a5b1
 800a55c:	0800a5c5 	.word	0x0800a5c5
 800a560:	0800a541 	.word	0x0800a541
 800a564:	0800a541 	.word	0x0800a541
 800a568:	0800a541 	.word	0x0800a541
 800a56c:	0800a541 	.word	0x0800a541
 800a570:	0800a5c5 	.word	0x0800a5c5
 800a574:	0800a541 	.word	0x0800a541
 800a578:	0800a541 	.word	0x0800a541
 800a57c:	0800a541 	.word	0x0800a541
 800a580:	0800a541 	.word	0x0800a541
 800a584:	0800a6c5 	.word	0x0800a6c5
 800a588:	0800a5ef 	.word	0x0800a5ef
 800a58c:	0800a67f 	.word	0x0800a67f
 800a590:	0800a541 	.word	0x0800a541
 800a594:	0800a541 	.word	0x0800a541
 800a598:	0800a6e7 	.word	0x0800a6e7
 800a59c:	0800a541 	.word	0x0800a541
 800a5a0:	0800a5ef 	.word	0x0800a5ef
 800a5a4:	0800a541 	.word	0x0800a541
 800a5a8:	0800a541 	.word	0x0800a541
 800a5ac:	0800a687 	.word	0x0800a687
 800a5b0:	6833      	ldr	r3, [r6, #0]
 800a5b2:	1d1a      	adds	r2, r3, #4
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	6032      	str	r2, [r6, #0]
 800a5b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e09d      	b.n	800a700 <_printf_i+0x1e8>
 800a5c4:	6833      	ldr	r3, [r6, #0]
 800a5c6:	6820      	ldr	r0, [r4, #0]
 800a5c8:	1d19      	adds	r1, r3, #4
 800a5ca:	6031      	str	r1, [r6, #0]
 800a5cc:	0606      	lsls	r6, r0, #24
 800a5ce:	d501      	bpl.n	800a5d4 <_printf_i+0xbc>
 800a5d0:	681d      	ldr	r5, [r3, #0]
 800a5d2:	e003      	b.n	800a5dc <_printf_i+0xc4>
 800a5d4:	0645      	lsls	r5, r0, #25
 800a5d6:	d5fb      	bpl.n	800a5d0 <_printf_i+0xb8>
 800a5d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a5dc:	2d00      	cmp	r5, #0
 800a5de:	da03      	bge.n	800a5e8 <_printf_i+0xd0>
 800a5e0:	232d      	movs	r3, #45	@ 0x2d
 800a5e2:	426d      	negs	r5, r5
 800a5e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5e8:	4859      	ldr	r0, [pc, #356]	@ (800a750 <_printf_i+0x238>)
 800a5ea:	230a      	movs	r3, #10
 800a5ec:	e011      	b.n	800a612 <_printf_i+0xfa>
 800a5ee:	6821      	ldr	r1, [r4, #0]
 800a5f0:	6833      	ldr	r3, [r6, #0]
 800a5f2:	0608      	lsls	r0, r1, #24
 800a5f4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a5f8:	d402      	bmi.n	800a600 <_printf_i+0xe8>
 800a5fa:	0649      	lsls	r1, r1, #25
 800a5fc:	bf48      	it	mi
 800a5fe:	b2ad      	uxthmi	r5, r5
 800a600:	2f6f      	cmp	r7, #111	@ 0x6f
 800a602:	4853      	ldr	r0, [pc, #332]	@ (800a750 <_printf_i+0x238>)
 800a604:	6033      	str	r3, [r6, #0]
 800a606:	bf14      	ite	ne
 800a608:	230a      	movne	r3, #10
 800a60a:	2308      	moveq	r3, #8
 800a60c:	2100      	movs	r1, #0
 800a60e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a612:	6866      	ldr	r6, [r4, #4]
 800a614:	60a6      	str	r6, [r4, #8]
 800a616:	2e00      	cmp	r6, #0
 800a618:	bfa2      	ittt	ge
 800a61a:	6821      	ldrge	r1, [r4, #0]
 800a61c:	f021 0104 	bicge.w	r1, r1, #4
 800a620:	6021      	strge	r1, [r4, #0]
 800a622:	b90d      	cbnz	r5, 800a628 <_printf_i+0x110>
 800a624:	2e00      	cmp	r6, #0
 800a626:	d04b      	beq.n	800a6c0 <_printf_i+0x1a8>
 800a628:	4616      	mov	r6, r2
 800a62a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a62e:	fb03 5711 	mls	r7, r3, r1, r5
 800a632:	5dc7      	ldrb	r7, [r0, r7]
 800a634:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a638:	462f      	mov	r7, r5
 800a63a:	42bb      	cmp	r3, r7
 800a63c:	460d      	mov	r5, r1
 800a63e:	d9f4      	bls.n	800a62a <_printf_i+0x112>
 800a640:	2b08      	cmp	r3, #8
 800a642:	d10b      	bne.n	800a65c <_printf_i+0x144>
 800a644:	6823      	ldr	r3, [r4, #0]
 800a646:	07df      	lsls	r7, r3, #31
 800a648:	d508      	bpl.n	800a65c <_printf_i+0x144>
 800a64a:	6923      	ldr	r3, [r4, #16]
 800a64c:	6861      	ldr	r1, [r4, #4]
 800a64e:	4299      	cmp	r1, r3
 800a650:	bfde      	ittt	le
 800a652:	2330      	movle	r3, #48	@ 0x30
 800a654:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a658:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a65c:	1b92      	subs	r2, r2, r6
 800a65e:	6122      	str	r2, [r4, #16]
 800a660:	f8cd a000 	str.w	sl, [sp]
 800a664:	464b      	mov	r3, r9
 800a666:	aa03      	add	r2, sp, #12
 800a668:	4621      	mov	r1, r4
 800a66a:	4640      	mov	r0, r8
 800a66c:	f7ff fee6 	bl	800a43c <_printf_common>
 800a670:	3001      	adds	r0, #1
 800a672:	d14a      	bne.n	800a70a <_printf_i+0x1f2>
 800a674:	f04f 30ff 	mov.w	r0, #4294967295
 800a678:	b004      	add	sp, #16
 800a67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a67e:	6823      	ldr	r3, [r4, #0]
 800a680:	f043 0320 	orr.w	r3, r3, #32
 800a684:	6023      	str	r3, [r4, #0]
 800a686:	4833      	ldr	r0, [pc, #204]	@ (800a754 <_printf_i+0x23c>)
 800a688:	2778      	movs	r7, #120	@ 0x78
 800a68a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a68e:	6823      	ldr	r3, [r4, #0]
 800a690:	6831      	ldr	r1, [r6, #0]
 800a692:	061f      	lsls	r7, r3, #24
 800a694:	f851 5b04 	ldr.w	r5, [r1], #4
 800a698:	d402      	bmi.n	800a6a0 <_printf_i+0x188>
 800a69a:	065f      	lsls	r7, r3, #25
 800a69c:	bf48      	it	mi
 800a69e:	b2ad      	uxthmi	r5, r5
 800a6a0:	6031      	str	r1, [r6, #0]
 800a6a2:	07d9      	lsls	r1, r3, #31
 800a6a4:	bf44      	itt	mi
 800a6a6:	f043 0320 	orrmi.w	r3, r3, #32
 800a6aa:	6023      	strmi	r3, [r4, #0]
 800a6ac:	b11d      	cbz	r5, 800a6b6 <_printf_i+0x19e>
 800a6ae:	2310      	movs	r3, #16
 800a6b0:	e7ac      	b.n	800a60c <_printf_i+0xf4>
 800a6b2:	4827      	ldr	r0, [pc, #156]	@ (800a750 <_printf_i+0x238>)
 800a6b4:	e7e9      	b.n	800a68a <_printf_i+0x172>
 800a6b6:	6823      	ldr	r3, [r4, #0]
 800a6b8:	f023 0320 	bic.w	r3, r3, #32
 800a6bc:	6023      	str	r3, [r4, #0]
 800a6be:	e7f6      	b.n	800a6ae <_printf_i+0x196>
 800a6c0:	4616      	mov	r6, r2
 800a6c2:	e7bd      	b.n	800a640 <_printf_i+0x128>
 800a6c4:	6833      	ldr	r3, [r6, #0]
 800a6c6:	6825      	ldr	r5, [r4, #0]
 800a6c8:	6961      	ldr	r1, [r4, #20]
 800a6ca:	1d18      	adds	r0, r3, #4
 800a6cc:	6030      	str	r0, [r6, #0]
 800a6ce:	062e      	lsls	r6, r5, #24
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	d501      	bpl.n	800a6d8 <_printf_i+0x1c0>
 800a6d4:	6019      	str	r1, [r3, #0]
 800a6d6:	e002      	b.n	800a6de <_printf_i+0x1c6>
 800a6d8:	0668      	lsls	r0, r5, #25
 800a6da:	d5fb      	bpl.n	800a6d4 <_printf_i+0x1bc>
 800a6dc:	8019      	strh	r1, [r3, #0]
 800a6de:	2300      	movs	r3, #0
 800a6e0:	6123      	str	r3, [r4, #16]
 800a6e2:	4616      	mov	r6, r2
 800a6e4:	e7bc      	b.n	800a660 <_printf_i+0x148>
 800a6e6:	6833      	ldr	r3, [r6, #0]
 800a6e8:	1d1a      	adds	r2, r3, #4
 800a6ea:	6032      	str	r2, [r6, #0]
 800a6ec:	681e      	ldr	r6, [r3, #0]
 800a6ee:	6862      	ldr	r2, [r4, #4]
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	4630      	mov	r0, r6
 800a6f4:	f7f5 fd6c 	bl	80001d0 <memchr>
 800a6f8:	b108      	cbz	r0, 800a6fe <_printf_i+0x1e6>
 800a6fa:	1b80      	subs	r0, r0, r6
 800a6fc:	6060      	str	r0, [r4, #4]
 800a6fe:	6863      	ldr	r3, [r4, #4]
 800a700:	6123      	str	r3, [r4, #16]
 800a702:	2300      	movs	r3, #0
 800a704:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a708:	e7aa      	b.n	800a660 <_printf_i+0x148>
 800a70a:	6923      	ldr	r3, [r4, #16]
 800a70c:	4632      	mov	r2, r6
 800a70e:	4649      	mov	r1, r9
 800a710:	4640      	mov	r0, r8
 800a712:	47d0      	blx	sl
 800a714:	3001      	adds	r0, #1
 800a716:	d0ad      	beq.n	800a674 <_printf_i+0x15c>
 800a718:	6823      	ldr	r3, [r4, #0]
 800a71a:	079b      	lsls	r3, r3, #30
 800a71c:	d413      	bmi.n	800a746 <_printf_i+0x22e>
 800a71e:	68e0      	ldr	r0, [r4, #12]
 800a720:	9b03      	ldr	r3, [sp, #12]
 800a722:	4298      	cmp	r0, r3
 800a724:	bfb8      	it	lt
 800a726:	4618      	movlt	r0, r3
 800a728:	e7a6      	b.n	800a678 <_printf_i+0x160>
 800a72a:	2301      	movs	r3, #1
 800a72c:	4632      	mov	r2, r6
 800a72e:	4649      	mov	r1, r9
 800a730:	4640      	mov	r0, r8
 800a732:	47d0      	blx	sl
 800a734:	3001      	adds	r0, #1
 800a736:	d09d      	beq.n	800a674 <_printf_i+0x15c>
 800a738:	3501      	adds	r5, #1
 800a73a:	68e3      	ldr	r3, [r4, #12]
 800a73c:	9903      	ldr	r1, [sp, #12]
 800a73e:	1a5b      	subs	r3, r3, r1
 800a740:	42ab      	cmp	r3, r5
 800a742:	dcf2      	bgt.n	800a72a <_printf_i+0x212>
 800a744:	e7eb      	b.n	800a71e <_printf_i+0x206>
 800a746:	2500      	movs	r5, #0
 800a748:	f104 0619 	add.w	r6, r4, #25
 800a74c:	e7f5      	b.n	800a73a <_printf_i+0x222>
 800a74e:	bf00      	nop
 800a750:	0800ca2e 	.word	0x0800ca2e
 800a754:	0800ca3f 	.word	0x0800ca3f

0800a758 <std>:
 800a758:	2300      	movs	r3, #0
 800a75a:	b510      	push	{r4, lr}
 800a75c:	4604      	mov	r4, r0
 800a75e:	e9c0 3300 	strd	r3, r3, [r0]
 800a762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a766:	6083      	str	r3, [r0, #8]
 800a768:	8181      	strh	r1, [r0, #12]
 800a76a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a76c:	81c2      	strh	r2, [r0, #14]
 800a76e:	6183      	str	r3, [r0, #24]
 800a770:	4619      	mov	r1, r3
 800a772:	2208      	movs	r2, #8
 800a774:	305c      	adds	r0, #92	@ 0x5c
 800a776:	f000 f9c2 	bl	800aafe <memset>
 800a77a:	4b0d      	ldr	r3, [pc, #52]	@ (800a7b0 <std+0x58>)
 800a77c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a77e:	4b0d      	ldr	r3, [pc, #52]	@ (800a7b4 <std+0x5c>)
 800a780:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a782:	4b0d      	ldr	r3, [pc, #52]	@ (800a7b8 <std+0x60>)
 800a784:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a786:	4b0d      	ldr	r3, [pc, #52]	@ (800a7bc <std+0x64>)
 800a788:	6323      	str	r3, [r4, #48]	@ 0x30
 800a78a:	4b0d      	ldr	r3, [pc, #52]	@ (800a7c0 <std+0x68>)
 800a78c:	6224      	str	r4, [r4, #32]
 800a78e:	429c      	cmp	r4, r3
 800a790:	d006      	beq.n	800a7a0 <std+0x48>
 800a792:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a796:	4294      	cmp	r4, r2
 800a798:	d002      	beq.n	800a7a0 <std+0x48>
 800a79a:	33d0      	adds	r3, #208	@ 0xd0
 800a79c:	429c      	cmp	r4, r3
 800a79e:	d105      	bne.n	800a7ac <std+0x54>
 800a7a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a7a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7a8:	f000 ba38 	b.w	800ac1c <__retarget_lock_init_recursive>
 800a7ac:	bd10      	pop	{r4, pc}
 800a7ae:	bf00      	nop
 800a7b0:	0800aa79 	.word	0x0800aa79
 800a7b4:	0800aa9b 	.word	0x0800aa9b
 800a7b8:	0800aad3 	.word	0x0800aad3
 800a7bc:	0800aaf7 	.word	0x0800aaf7
 800a7c0:	20000404 	.word	0x20000404

0800a7c4 <stdio_exit_handler>:
 800a7c4:	4a02      	ldr	r2, [pc, #8]	@ (800a7d0 <stdio_exit_handler+0xc>)
 800a7c6:	4903      	ldr	r1, [pc, #12]	@ (800a7d4 <stdio_exit_handler+0x10>)
 800a7c8:	4803      	ldr	r0, [pc, #12]	@ (800a7d8 <stdio_exit_handler+0x14>)
 800a7ca:	f000 b869 	b.w	800a8a0 <_fwalk_sglue>
 800a7ce:	bf00      	nop
 800a7d0:	2000003c 	.word	0x2000003c
 800a7d4:	0800c569 	.word	0x0800c569
 800a7d8:	2000004c 	.word	0x2000004c

0800a7dc <cleanup_stdio>:
 800a7dc:	6841      	ldr	r1, [r0, #4]
 800a7de:	4b0c      	ldr	r3, [pc, #48]	@ (800a810 <cleanup_stdio+0x34>)
 800a7e0:	4299      	cmp	r1, r3
 800a7e2:	b510      	push	{r4, lr}
 800a7e4:	4604      	mov	r4, r0
 800a7e6:	d001      	beq.n	800a7ec <cleanup_stdio+0x10>
 800a7e8:	f001 febe 	bl	800c568 <_fflush_r>
 800a7ec:	68a1      	ldr	r1, [r4, #8]
 800a7ee:	4b09      	ldr	r3, [pc, #36]	@ (800a814 <cleanup_stdio+0x38>)
 800a7f0:	4299      	cmp	r1, r3
 800a7f2:	d002      	beq.n	800a7fa <cleanup_stdio+0x1e>
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	f001 feb7 	bl	800c568 <_fflush_r>
 800a7fa:	68e1      	ldr	r1, [r4, #12]
 800a7fc:	4b06      	ldr	r3, [pc, #24]	@ (800a818 <cleanup_stdio+0x3c>)
 800a7fe:	4299      	cmp	r1, r3
 800a800:	d004      	beq.n	800a80c <cleanup_stdio+0x30>
 800a802:	4620      	mov	r0, r4
 800a804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a808:	f001 beae 	b.w	800c568 <_fflush_r>
 800a80c:	bd10      	pop	{r4, pc}
 800a80e:	bf00      	nop
 800a810:	20000404 	.word	0x20000404
 800a814:	2000046c 	.word	0x2000046c
 800a818:	200004d4 	.word	0x200004d4

0800a81c <global_stdio_init.part.0>:
 800a81c:	b510      	push	{r4, lr}
 800a81e:	4b0b      	ldr	r3, [pc, #44]	@ (800a84c <global_stdio_init.part.0+0x30>)
 800a820:	4c0b      	ldr	r4, [pc, #44]	@ (800a850 <global_stdio_init.part.0+0x34>)
 800a822:	4a0c      	ldr	r2, [pc, #48]	@ (800a854 <global_stdio_init.part.0+0x38>)
 800a824:	601a      	str	r2, [r3, #0]
 800a826:	4620      	mov	r0, r4
 800a828:	2200      	movs	r2, #0
 800a82a:	2104      	movs	r1, #4
 800a82c:	f7ff ff94 	bl	800a758 <std>
 800a830:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a834:	2201      	movs	r2, #1
 800a836:	2109      	movs	r1, #9
 800a838:	f7ff ff8e 	bl	800a758 <std>
 800a83c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a840:	2202      	movs	r2, #2
 800a842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a846:	2112      	movs	r1, #18
 800a848:	f7ff bf86 	b.w	800a758 <std>
 800a84c:	2000053c 	.word	0x2000053c
 800a850:	20000404 	.word	0x20000404
 800a854:	0800a7c5 	.word	0x0800a7c5

0800a858 <__sfp_lock_acquire>:
 800a858:	4801      	ldr	r0, [pc, #4]	@ (800a860 <__sfp_lock_acquire+0x8>)
 800a85a:	f000 b9e0 	b.w	800ac1e <__retarget_lock_acquire_recursive>
 800a85e:	bf00      	nop
 800a860:	20000545 	.word	0x20000545

0800a864 <__sfp_lock_release>:
 800a864:	4801      	ldr	r0, [pc, #4]	@ (800a86c <__sfp_lock_release+0x8>)
 800a866:	f000 b9db 	b.w	800ac20 <__retarget_lock_release_recursive>
 800a86a:	bf00      	nop
 800a86c:	20000545 	.word	0x20000545

0800a870 <__sinit>:
 800a870:	b510      	push	{r4, lr}
 800a872:	4604      	mov	r4, r0
 800a874:	f7ff fff0 	bl	800a858 <__sfp_lock_acquire>
 800a878:	6a23      	ldr	r3, [r4, #32]
 800a87a:	b11b      	cbz	r3, 800a884 <__sinit+0x14>
 800a87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a880:	f7ff bff0 	b.w	800a864 <__sfp_lock_release>
 800a884:	4b04      	ldr	r3, [pc, #16]	@ (800a898 <__sinit+0x28>)
 800a886:	6223      	str	r3, [r4, #32]
 800a888:	4b04      	ldr	r3, [pc, #16]	@ (800a89c <__sinit+0x2c>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d1f5      	bne.n	800a87c <__sinit+0xc>
 800a890:	f7ff ffc4 	bl	800a81c <global_stdio_init.part.0>
 800a894:	e7f2      	b.n	800a87c <__sinit+0xc>
 800a896:	bf00      	nop
 800a898:	0800a7dd 	.word	0x0800a7dd
 800a89c:	2000053c 	.word	0x2000053c

0800a8a0 <_fwalk_sglue>:
 800a8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8a4:	4607      	mov	r7, r0
 800a8a6:	4688      	mov	r8, r1
 800a8a8:	4614      	mov	r4, r2
 800a8aa:	2600      	movs	r6, #0
 800a8ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8b0:	f1b9 0901 	subs.w	r9, r9, #1
 800a8b4:	d505      	bpl.n	800a8c2 <_fwalk_sglue+0x22>
 800a8b6:	6824      	ldr	r4, [r4, #0]
 800a8b8:	2c00      	cmp	r4, #0
 800a8ba:	d1f7      	bne.n	800a8ac <_fwalk_sglue+0xc>
 800a8bc:	4630      	mov	r0, r6
 800a8be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8c2:	89ab      	ldrh	r3, [r5, #12]
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d907      	bls.n	800a8d8 <_fwalk_sglue+0x38>
 800a8c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	d003      	beq.n	800a8d8 <_fwalk_sglue+0x38>
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	4638      	mov	r0, r7
 800a8d4:	47c0      	blx	r8
 800a8d6:	4306      	orrs	r6, r0
 800a8d8:	3568      	adds	r5, #104	@ 0x68
 800a8da:	e7e9      	b.n	800a8b0 <_fwalk_sglue+0x10>

0800a8dc <iprintf>:
 800a8dc:	b40f      	push	{r0, r1, r2, r3}
 800a8de:	b507      	push	{r0, r1, r2, lr}
 800a8e0:	4906      	ldr	r1, [pc, #24]	@ (800a8fc <iprintf+0x20>)
 800a8e2:	ab04      	add	r3, sp, #16
 800a8e4:	6808      	ldr	r0, [r1, #0]
 800a8e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8ea:	6881      	ldr	r1, [r0, #8]
 800a8ec:	9301      	str	r3, [sp, #4]
 800a8ee:	f001 fc9f 	bl	800c230 <_vfiprintf_r>
 800a8f2:	b003      	add	sp, #12
 800a8f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8f8:	b004      	add	sp, #16
 800a8fa:	4770      	bx	lr
 800a8fc:	20000048 	.word	0x20000048

0800a900 <setbuf>:
 800a900:	fab1 f281 	clz	r2, r1
 800a904:	0952      	lsrs	r2, r2, #5
 800a906:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a90a:	0052      	lsls	r2, r2, #1
 800a90c:	f000 b800 	b.w	800a910 <setvbuf>

0800a910 <setvbuf>:
 800a910:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a914:	461d      	mov	r5, r3
 800a916:	4b57      	ldr	r3, [pc, #348]	@ (800aa74 <setvbuf+0x164>)
 800a918:	681f      	ldr	r7, [r3, #0]
 800a91a:	4604      	mov	r4, r0
 800a91c:	460e      	mov	r6, r1
 800a91e:	4690      	mov	r8, r2
 800a920:	b127      	cbz	r7, 800a92c <setvbuf+0x1c>
 800a922:	6a3b      	ldr	r3, [r7, #32]
 800a924:	b913      	cbnz	r3, 800a92c <setvbuf+0x1c>
 800a926:	4638      	mov	r0, r7
 800a928:	f7ff ffa2 	bl	800a870 <__sinit>
 800a92c:	f1b8 0f02 	cmp.w	r8, #2
 800a930:	d006      	beq.n	800a940 <setvbuf+0x30>
 800a932:	f1b8 0f01 	cmp.w	r8, #1
 800a936:	f200 809a 	bhi.w	800aa6e <setvbuf+0x15e>
 800a93a:	2d00      	cmp	r5, #0
 800a93c:	f2c0 8097 	blt.w	800aa6e <setvbuf+0x15e>
 800a940:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a942:	07d9      	lsls	r1, r3, #31
 800a944:	d405      	bmi.n	800a952 <setvbuf+0x42>
 800a946:	89a3      	ldrh	r3, [r4, #12]
 800a948:	059a      	lsls	r2, r3, #22
 800a94a:	d402      	bmi.n	800a952 <setvbuf+0x42>
 800a94c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a94e:	f000 f966 	bl	800ac1e <__retarget_lock_acquire_recursive>
 800a952:	4621      	mov	r1, r4
 800a954:	4638      	mov	r0, r7
 800a956:	f001 fe07 	bl	800c568 <_fflush_r>
 800a95a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a95c:	b141      	cbz	r1, 800a970 <setvbuf+0x60>
 800a95e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a962:	4299      	cmp	r1, r3
 800a964:	d002      	beq.n	800a96c <setvbuf+0x5c>
 800a966:	4638      	mov	r0, r7
 800a968:	f000 ffb6 	bl	800b8d8 <_free_r>
 800a96c:	2300      	movs	r3, #0
 800a96e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a970:	2300      	movs	r3, #0
 800a972:	61a3      	str	r3, [r4, #24]
 800a974:	6063      	str	r3, [r4, #4]
 800a976:	89a3      	ldrh	r3, [r4, #12]
 800a978:	061b      	lsls	r3, r3, #24
 800a97a:	d503      	bpl.n	800a984 <setvbuf+0x74>
 800a97c:	6921      	ldr	r1, [r4, #16]
 800a97e:	4638      	mov	r0, r7
 800a980:	f000 ffaa 	bl	800b8d8 <_free_r>
 800a984:	89a3      	ldrh	r3, [r4, #12]
 800a986:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800a98a:	f023 0303 	bic.w	r3, r3, #3
 800a98e:	f1b8 0f02 	cmp.w	r8, #2
 800a992:	81a3      	strh	r3, [r4, #12]
 800a994:	d061      	beq.n	800aa5a <setvbuf+0x14a>
 800a996:	ab01      	add	r3, sp, #4
 800a998:	466a      	mov	r2, sp
 800a99a:	4621      	mov	r1, r4
 800a99c:	4638      	mov	r0, r7
 800a99e:	f001 fe0b 	bl	800c5b8 <__swhatbuf_r>
 800a9a2:	89a3      	ldrh	r3, [r4, #12]
 800a9a4:	4318      	orrs	r0, r3
 800a9a6:	81a0      	strh	r0, [r4, #12]
 800a9a8:	bb2d      	cbnz	r5, 800a9f6 <setvbuf+0xe6>
 800a9aa:	9d00      	ldr	r5, [sp, #0]
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	f000 ffdd 	bl	800b96c <malloc>
 800a9b2:	4606      	mov	r6, r0
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	d152      	bne.n	800aa5e <setvbuf+0x14e>
 800a9b8:	f8dd 9000 	ldr.w	r9, [sp]
 800a9bc:	45a9      	cmp	r9, r5
 800a9be:	d140      	bne.n	800aa42 <setvbuf+0x132>
 800a9c0:	f04f 35ff 	mov.w	r5, #4294967295
 800a9c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9c8:	f043 0202 	orr.w	r2, r3, #2
 800a9cc:	81a2      	strh	r2, [r4, #12]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	60a2      	str	r2, [r4, #8]
 800a9d2:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800a9d6:	6022      	str	r2, [r4, #0]
 800a9d8:	6122      	str	r2, [r4, #16]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	6162      	str	r2, [r4, #20]
 800a9de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a9e0:	07d6      	lsls	r6, r2, #31
 800a9e2:	d404      	bmi.n	800a9ee <setvbuf+0xde>
 800a9e4:	0598      	lsls	r0, r3, #22
 800a9e6:	d402      	bmi.n	800a9ee <setvbuf+0xde>
 800a9e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9ea:	f000 f919 	bl	800ac20 <__retarget_lock_release_recursive>
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	b003      	add	sp, #12
 800a9f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9f6:	2e00      	cmp	r6, #0
 800a9f8:	d0d8      	beq.n	800a9ac <setvbuf+0x9c>
 800a9fa:	6a3b      	ldr	r3, [r7, #32]
 800a9fc:	b913      	cbnz	r3, 800aa04 <setvbuf+0xf4>
 800a9fe:	4638      	mov	r0, r7
 800aa00:	f7ff ff36 	bl	800a870 <__sinit>
 800aa04:	f1b8 0f01 	cmp.w	r8, #1
 800aa08:	bf08      	it	eq
 800aa0a:	89a3      	ldrheq	r3, [r4, #12]
 800aa0c:	6026      	str	r6, [r4, #0]
 800aa0e:	bf04      	itt	eq
 800aa10:	f043 0301 	orreq.w	r3, r3, #1
 800aa14:	81a3      	strheq	r3, [r4, #12]
 800aa16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa1a:	f013 0208 	ands.w	r2, r3, #8
 800aa1e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800aa22:	d01e      	beq.n	800aa62 <setvbuf+0x152>
 800aa24:	07d9      	lsls	r1, r3, #31
 800aa26:	bf41      	itttt	mi
 800aa28:	2200      	movmi	r2, #0
 800aa2a:	426d      	negmi	r5, r5
 800aa2c:	60a2      	strmi	r2, [r4, #8]
 800aa2e:	61a5      	strmi	r5, [r4, #24]
 800aa30:	bf58      	it	pl
 800aa32:	60a5      	strpl	r5, [r4, #8]
 800aa34:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aa36:	07d2      	lsls	r2, r2, #31
 800aa38:	d401      	bmi.n	800aa3e <setvbuf+0x12e>
 800aa3a:	059b      	lsls	r3, r3, #22
 800aa3c:	d513      	bpl.n	800aa66 <setvbuf+0x156>
 800aa3e:	2500      	movs	r5, #0
 800aa40:	e7d5      	b.n	800a9ee <setvbuf+0xde>
 800aa42:	4648      	mov	r0, r9
 800aa44:	f000 ff92 	bl	800b96c <malloc>
 800aa48:	4606      	mov	r6, r0
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	d0b8      	beq.n	800a9c0 <setvbuf+0xb0>
 800aa4e:	89a3      	ldrh	r3, [r4, #12]
 800aa50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa54:	81a3      	strh	r3, [r4, #12]
 800aa56:	464d      	mov	r5, r9
 800aa58:	e7cf      	b.n	800a9fa <setvbuf+0xea>
 800aa5a:	2500      	movs	r5, #0
 800aa5c:	e7b2      	b.n	800a9c4 <setvbuf+0xb4>
 800aa5e:	46a9      	mov	r9, r5
 800aa60:	e7f5      	b.n	800aa4e <setvbuf+0x13e>
 800aa62:	60a2      	str	r2, [r4, #8]
 800aa64:	e7e6      	b.n	800aa34 <setvbuf+0x124>
 800aa66:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa68:	f000 f8da 	bl	800ac20 <__retarget_lock_release_recursive>
 800aa6c:	e7e7      	b.n	800aa3e <setvbuf+0x12e>
 800aa6e:	f04f 35ff 	mov.w	r5, #4294967295
 800aa72:	e7bc      	b.n	800a9ee <setvbuf+0xde>
 800aa74:	20000048 	.word	0x20000048

0800aa78 <__sread>:
 800aa78:	b510      	push	{r4, lr}
 800aa7a:	460c      	mov	r4, r1
 800aa7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa80:	f000 f87e 	bl	800ab80 <_read_r>
 800aa84:	2800      	cmp	r0, #0
 800aa86:	bfab      	itete	ge
 800aa88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aa8a:	89a3      	ldrhlt	r3, [r4, #12]
 800aa8c:	181b      	addge	r3, r3, r0
 800aa8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aa92:	bfac      	ite	ge
 800aa94:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aa96:	81a3      	strhlt	r3, [r4, #12]
 800aa98:	bd10      	pop	{r4, pc}

0800aa9a <__swrite>:
 800aa9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa9e:	461f      	mov	r7, r3
 800aaa0:	898b      	ldrh	r3, [r1, #12]
 800aaa2:	05db      	lsls	r3, r3, #23
 800aaa4:	4605      	mov	r5, r0
 800aaa6:	460c      	mov	r4, r1
 800aaa8:	4616      	mov	r6, r2
 800aaaa:	d505      	bpl.n	800aab8 <__swrite+0x1e>
 800aaac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aab0:	2302      	movs	r3, #2
 800aab2:	2200      	movs	r2, #0
 800aab4:	f000 f852 	bl	800ab5c <_lseek_r>
 800aab8:	89a3      	ldrh	r3, [r4, #12]
 800aaba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aabe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aac2:	81a3      	strh	r3, [r4, #12]
 800aac4:	4632      	mov	r2, r6
 800aac6:	463b      	mov	r3, r7
 800aac8:	4628      	mov	r0, r5
 800aaca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aace:	f000 b869 	b.w	800aba4 <_write_r>

0800aad2 <__sseek>:
 800aad2:	b510      	push	{r4, lr}
 800aad4:	460c      	mov	r4, r1
 800aad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aada:	f000 f83f 	bl	800ab5c <_lseek_r>
 800aade:	1c43      	adds	r3, r0, #1
 800aae0:	89a3      	ldrh	r3, [r4, #12]
 800aae2:	bf15      	itete	ne
 800aae4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aae6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aaea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aaee:	81a3      	strheq	r3, [r4, #12]
 800aaf0:	bf18      	it	ne
 800aaf2:	81a3      	strhne	r3, [r4, #12]
 800aaf4:	bd10      	pop	{r4, pc}

0800aaf6 <__sclose>:
 800aaf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aafa:	f000 b81f 	b.w	800ab3c <_close_r>

0800aafe <memset>:
 800aafe:	4402      	add	r2, r0
 800ab00:	4603      	mov	r3, r0
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d100      	bne.n	800ab08 <memset+0xa>
 800ab06:	4770      	bx	lr
 800ab08:	f803 1b01 	strb.w	r1, [r3], #1
 800ab0c:	e7f9      	b.n	800ab02 <memset+0x4>

0800ab0e <strncpy>:
 800ab0e:	b510      	push	{r4, lr}
 800ab10:	3901      	subs	r1, #1
 800ab12:	4603      	mov	r3, r0
 800ab14:	b132      	cbz	r2, 800ab24 <strncpy+0x16>
 800ab16:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ab1a:	f803 4b01 	strb.w	r4, [r3], #1
 800ab1e:	3a01      	subs	r2, #1
 800ab20:	2c00      	cmp	r4, #0
 800ab22:	d1f7      	bne.n	800ab14 <strncpy+0x6>
 800ab24:	441a      	add	r2, r3
 800ab26:	2100      	movs	r1, #0
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d100      	bne.n	800ab2e <strncpy+0x20>
 800ab2c:	bd10      	pop	{r4, pc}
 800ab2e:	f803 1b01 	strb.w	r1, [r3], #1
 800ab32:	e7f9      	b.n	800ab28 <strncpy+0x1a>

0800ab34 <_localeconv_r>:
 800ab34:	4800      	ldr	r0, [pc, #0]	@ (800ab38 <_localeconv_r+0x4>)
 800ab36:	4770      	bx	lr
 800ab38:	20000188 	.word	0x20000188

0800ab3c <_close_r>:
 800ab3c:	b538      	push	{r3, r4, r5, lr}
 800ab3e:	4d06      	ldr	r5, [pc, #24]	@ (800ab58 <_close_r+0x1c>)
 800ab40:	2300      	movs	r3, #0
 800ab42:	4604      	mov	r4, r0
 800ab44:	4608      	mov	r0, r1
 800ab46:	602b      	str	r3, [r5, #0]
 800ab48:	f7f6 fce9 	bl	800151e <_close>
 800ab4c:	1c43      	adds	r3, r0, #1
 800ab4e:	d102      	bne.n	800ab56 <_close_r+0x1a>
 800ab50:	682b      	ldr	r3, [r5, #0]
 800ab52:	b103      	cbz	r3, 800ab56 <_close_r+0x1a>
 800ab54:	6023      	str	r3, [r4, #0]
 800ab56:	bd38      	pop	{r3, r4, r5, pc}
 800ab58:	20000540 	.word	0x20000540

0800ab5c <_lseek_r>:
 800ab5c:	b538      	push	{r3, r4, r5, lr}
 800ab5e:	4d07      	ldr	r5, [pc, #28]	@ (800ab7c <_lseek_r+0x20>)
 800ab60:	4604      	mov	r4, r0
 800ab62:	4608      	mov	r0, r1
 800ab64:	4611      	mov	r1, r2
 800ab66:	2200      	movs	r2, #0
 800ab68:	602a      	str	r2, [r5, #0]
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	f7f6 fcfe 	bl	800156c <_lseek>
 800ab70:	1c43      	adds	r3, r0, #1
 800ab72:	d102      	bne.n	800ab7a <_lseek_r+0x1e>
 800ab74:	682b      	ldr	r3, [r5, #0]
 800ab76:	b103      	cbz	r3, 800ab7a <_lseek_r+0x1e>
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	bd38      	pop	{r3, r4, r5, pc}
 800ab7c:	20000540 	.word	0x20000540

0800ab80 <_read_r>:
 800ab80:	b538      	push	{r3, r4, r5, lr}
 800ab82:	4d07      	ldr	r5, [pc, #28]	@ (800aba0 <_read_r+0x20>)
 800ab84:	4604      	mov	r4, r0
 800ab86:	4608      	mov	r0, r1
 800ab88:	4611      	mov	r1, r2
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	602a      	str	r2, [r5, #0]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	f7f6 fca8 	bl	80014e4 <_read>
 800ab94:	1c43      	adds	r3, r0, #1
 800ab96:	d102      	bne.n	800ab9e <_read_r+0x1e>
 800ab98:	682b      	ldr	r3, [r5, #0]
 800ab9a:	b103      	cbz	r3, 800ab9e <_read_r+0x1e>
 800ab9c:	6023      	str	r3, [r4, #0]
 800ab9e:	bd38      	pop	{r3, r4, r5, pc}
 800aba0:	20000540 	.word	0x20000540

0800aba4 <_write_r>:
 800aba4:	b538      	push	{r3, r4, r5, lr}
 800aba6:	4d07      	ldr	r5, [pc, #28]	@ (800abc4 <_write_r+0x20>)
 800aba8:	4604      	mov	r4, r0
 800abaa:	4608      	mov	r0, r1
 800abac:	4611      	mov	r1, r2
 800abae:	2200      	movs	r2, #0
 800abb0:	602a      	str	r2, [r5, #0]
 800abb2:	461a      	mov	r2, r3
 800abb4:	f7f5 fff8 	bl	8000ba8 <_write>
 800abb8:	1c43      	adds	r3, r0, #1
 800abba:	d102      	bne.n	800abc2 <_write_r+0x1e>
 800abbc:	682b      	ldr	r3, [r5, #0]
 800abbe:	b103      	cbz	r3, 800abc2 <_write_r+0x1e>
 800abc0:	6023      	str	r3, [r4, #0]
 800abc2:	bd38      	pop	{r3, r4, r5, pc}
 800abc4:	20000540 	.word	0x20000540

0800abc8 <__errno>:
 800abc8:	4b01      	ldr	r3, [pc, #4]	@ (800abd0 <__errno+0x8>)
 800abca:	6818      	ldr	r0, [r3, #0]
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop
 800abd0:	20000048 	.word	0x20000048

0800abd4 <__libc_init_array>:
 800abd4:	b570      	push	{r4, r5, r6, lr}
 800abd6:	4d0d      	ldr	r5, [pc, #52]	@ (800ac0c <__libc_init_array+0x38>)
 800abd8:	4c0d      	ldr	r4, [pc, #52]	@ (800ac10 <__libc_init_array+0x3c>)
 800abda:	1b64      	subs	r4, r4, r5
 800abdc:	10a4      	asrs	r4, r4, #2
 800abde:	2600      	movs	r6, #0
 800abe0:	42a6      	cmp	r6, r4
 800abe2:	d109      	bne.n	800abf8 <__libc_init_array+0x24>
 800abe4:	4d0b      	ldr	r5, [pc, #44]	@ (800ac14 <__libc_init_array+0x40>)
 800abe6:	4c0c      	ldr	r4, [pc, #48]	@ (800ac18 <__libc_init_array+0x44>)
 800abe8:	f001 febe 	bl	800c968 <_init>
 800abec:	1b64      	subs	r4, r4, r5
 800abee:	10a4      	asrs	r4, r4, #2
 800abf0:	2600      	movs	r6, #0
 800abf2:	42a6      	cmp	r6, r4
 800abf4:	d105      	bne.n	800ac02 <__libc_init_array+0x2e>
 800abf6:	bd70      	pop	{r4, r5, r6, pc}
 800abf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800abfc:	4798      	blx	r3
 800abfe:	3601      	adds	r6, #1
 800ac00:	e7ee      	b.n	800abe0 <__libc_init_array+0xc>
 800ac02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac06:	4798      	blx	r3
 800ac08:	3601      	adds	r6, #1
 800ac0a:	e7f2      	b.n	800abf2 <__libc_init_array+0x1e>
 800ac0c:	0800cd98 	.word	0x0800cd98
 800ac10:	0800cd98 	.word	0x0800cd98
 800ac14:	0800cd98 	.word	0x0800cd98
 800ac18:	0800cd9c 	.word	0x0800cd9c

0800ac1c <__retarget_lock_init_recursive>:
 800ac1c:	4770      	bx	lr

0800ac1e <__retarget_lock_acquire_recursive>:
 800ac1e:	4770      	bx	lr

0800ac20 <__retarget_lock_release_recursive>:
 800ac20:	4770      	bx	lr

0800ac22 <memcpy>:
 800ac22:	440a      	add	r2, r1
 800ac24:	4291      	cmp	r1, r2
 800ac26:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac2a:	d100      	bne.n	800ac2e <memcpy+0xc>
 800ac2c:	4770      	bx	lr
 800ac2e:	b510      	push	{r4, lr}
 800ac30:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac34:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac38:	4291      	cmp	r1, r2
 800ac3a:	d1f9      	bne.n	800ac30 <memcpy+0xe>
 800ac3c:	bd10      	pop	{r4, pc}

0800ac3e <quorem>:
 800ac3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac42:	6903      	ldr	r3, [r0, #16]
 800ac44:	690c      	ldr	r4, [r1, #16]
 800ac46:	42a3      	cmp	r3, r4
 800ac48:	4607      	mov	r7, r0
 800ac4a:	db7e      	blt.n	800ad4a <quorem+0x10c>
 800ac4c:	3c01      	subs	r4, #1
 800ac4e:	f101 0814 	add.w	r8, r1, #20
 800ac52:	00a3      	lsls	r3, r4, #2
 800ac54:	f100 0514 	add.w	r5, r0, #20
 800ac58:	9300      	str	r3, [sp, #0]
 800ac5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac5e:	9301      	str	r3, [sp, #4]
 800ac60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ac64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ac70:	fbb2 f6f3 	udiv	r6, r2, r3
 800ac74:	d32e      	bcc.n	800acd4 <quorem+0x96>
 800ac76:	f04f 0a00 	mov.w	sl, #0
 800ac7a:	46c4      	mov	ip, r8
 800ac7c:	46ae      	mov	lr, r5
 800ac7e:	46d3      	mov	fp, sl
 800ac80:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ac84:	b298      	uxth	r0, r3
 800ac86:	fb06 a000 	mla	r0, r6, r0, sl
 800ac8a:	0c02      	lsrs	r2, r0, #16
 800ac8c:	0c1b      	lsrs	r3, r3, #16
 800ac8e:	fb06 2303 	mla	r3, r6, r3, r2
 800ac92:	f8de 2000 	ldr.w	r2, [lr]
 800ac96:	b280      	uxth	r0, r0
 800ac98:	b292      	uxth	r2, r2
 800ac9a:	1a12      	subs	r2, r2, r0
 800ac9c:	445a      	add	r2, fp
 800ac9e:	f8de 0000 	ldr.w	r0, [lr]
 800aca2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800acac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800acb0:	b292      	uxth	r2, r2
 800acb2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800acb6:	45e1      	cmp	r9, ip
 800acb8:	f84e 2b04 	str.w	r2, [lr], #4
 800acbc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800acc0:	d2de      	bcs.n	800ac80 <quorem+0x42>
 800acc2:	9b00      	ldr	r3, [sp, #0]
 800acc4:	58eb      	ldr	r3, [r5, r3]
 800acc6:	b92b      	cbnz	r3, 800acd4 <quorem+0x96>
 800acc8:	9b01      	ldr	r3, [sp, #4]
 800acca:	3b04      	subs	r3, #4
 800accc:	429d      	cmp	r5, r3
 800acce:	461a      	mov	r2, r3
 800acd0:	d32f      	bcc.n	800ad32 <quorem+0xf4>
 800acd2:	613c      	str	r4, [r7, #16]
 800acd4:	4638      	mov	r0, r7
 800acd6:	f001 f979 	bl	800bfcc <__mcmp>
 800acda:	2800      	cmp	r0, #0
 800acdc:	db25      	blt.n	800ad2a <quorem+0xec>
 800acde:	4629      	mov	r1, r5
 800ace0:	2000      	movs	r0, #0
 800ace2:	f858 2b04 	ldr.w	r2, [r8], #4
 800ace6:	f8d1 c000 	ldr.w	ip, [r1]
 800acea:	fa1f fe82 	uxth.w	lr, r2
 800acee:	fa1f f38c 	uxth.w	r3, ip
 800acf2:	eba3 030e 	sub.w	r3, r3, lr
 800acf6:	4403      	add	r3, r0
 800acf8:	0c12      	lsrs	r2, r2, #16
 800acfa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800acfe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad08:	45c1      	cmp	r9, r8
 800ad0a:	f841 3b04 	str.w	r3, [r1], #4
 800ad0e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ad12:	d2e6      	bcs.n	800ace2 <quorem+0xa4>
 800ad14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad1c:	b922      	cbnz	r2, 800ad28 <quorem+0xea>
 800ad1e:	3b04      	subs	r3, #4
 800ad20:	429d      	cmp	r5, r3
 800ad22:	461a      	mov	r2, r3
 800ad24:	d30b      	bcc.n	800ad3e <quorem+0x100>
 800ad26:	613c      	str	r4, [r7, #16]
 800ad28:	3601      	adds	r6, #1
 800ad2a:	4630      	mov	r0, r6
 800ad2c:	b003      	add	sp, #12
 800ad2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad32:	6812      	ldr	r2, [r2, #0]
 800ad34:	3b04      	subs	r3, #4
 800ad36:	2a00      	cmp	r2, #0
 800ad38:	d1cb      	bne.n	800acd2 <quorem+0x94>
 800ad3a:	3c01      	subs	r4, #1
 800ad3c:	e7c6      	b.n	800accc <quorem+0x8e>
 800ad3e:	6812      	ldr	r2, [r2, #0]
 800ad40:	3b04      	subs	r3, #4
 800ad42:	2a00      	cmp	r2, #0
 800ad44:	d1ef      	bne.n	800ad26 <quorem+0xe8>
 800ad46:	3c01      	subs	r4, #1
 800ad48:	e7ea      	b.n	800ad20 <quorem+0xe2>
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	e7ee      	b.n	800ad2c <quorem+0xee>
	...

0800ad50 <_dtoa_r>:
 800ad50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad54:	69c7      	ldr	r7, [r0, #28]
 800ad56:	b099      	sub	sp, #100	@ 0x64
 800ad58:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ad5c:	ec55 4b10 	vmov	r4, r5, d0
 800ad60:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ad62:	9109      	str	r1, [sp, #36]	@ 0x24
 800ad64:	4683      	mov	fp, r0
 800ad66:	920e      	str	r2, [sp, #56]	@ 0x38
 800ad68:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad6a:	b97f      	cbnz	r7, 800ad8c <_dtoa_r+0x3c>
 800ad6c:	2010      	movs	r0, #16
 800ad6e:	f000 fdfd 	bl	800b96c <malloc>
 800ad72:	4602      	mov	r2, r0
 800ad74:	f8cb 001c 	str.w	r0, [fp, #28]
 800ad78:	b920      	cbnz	r0, 800ad84 <_dtoa_r+0x34>
 800ad7a:	4ba7      	ldr	r3, [pc, #668]	@ (800b018 <_dtoa_r+0x2c8>)
 800ad7c:	21ef      	movs	r1, #239	@ 0xef
 800ad7e:	48a7      	ldr	r0, [pc, #668]	@ (800b01c <_dtoa_r+0x2cc>)
 800ad80:	f001 fd42 	bl	800c808 <__assert_func>
 800ad84:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ad88:	6007      	str	r7, [r0, #0]
 800ad8a:	60c7      	str	r7, [r0, #12]
 800ad8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ad90:	6819      	ldr	r1, [r3, #0]
 800ad92:	b159      	cbz	r1, 800adac <_dtoa_r+0x5c>
 800ad94:	685a      	ldr	r2, [r3, #4]
 800ad96:	604a      	str	r2, [r1, #4]
 800ad98:	2301      	movs	r3, #1
 800ad9a:	4093      	lsls	r3, r2
 800ad9c:	608b      	str	r3, [r1, #8]
 800ad9e:	4658      	mov	r0, fp
 800ada0:	f000 feda 	bl	800bb58 <_Bfree>
 800ada4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ada8:	2200      	movs	r2, #0
 800adaa:	601a      	str	r2, [r3, #0]
 800adac:	1e2b      	subs	r3, r5, #0
 800adae:	bfb9      	ittee	lt
 800adb0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800adb4:	9303      	strlt	r3, [sp, #12]
 800adb6:	2300      	movge	r3, #0
 800adb8:	6033      	strge	r3, [r6, #0]
 800adba:	9f03      	ldr	r7, [sp, #12]
 800adbc:	4b98      	ldr	r3, [pc, #608]	@ (800b020 <_dtoa_r+0x2d0>)
 800adbe:	bfbc      	itt	lt
 800adc0:	2201      	movlt	r2, #1
 800adc2:	6032      	strlt	r2, [r6, #0]
 800adc4:	43bb      	bics	r3, r7
 800adc6:	d112      	bne.n	800adee <_dtoa_r+0x9e>
 800adc8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800adca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800adce:	6013      	str	r3, [r2, #0]
 800add0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800add4:	4323      	orrs	r3, r4
 800add6:	f000 854d 	beq.w	800b874 <_dtoa_r+0xb24>
 800adda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800addc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b034 <_dtoa_r+0x2e4>
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f000 854f 	beq.w	800b884 <_dtoa_r+0xb34>
 800ade6:	f10a 0303 	add.w	r3, sl, #3
 800adea:	f000 bd49 	b.w	800b880 <_dtoa_r+0xb30>
 800adee:	ed9d 7b02 	vldr	d7, [sp, #8]
 800adf2:	2200      	movs	r2, #0
 800adf4:	ec51 0b17 	vmov	r0, r1, d7
 800adf8:	2300      	movs	r3, #0
 800adfa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800adfe:	f7f5 fe63 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae02:	4680      	mov	r8, r0
 800ae04:	b158      	cbz	r0, 800ae1e <_dtoa_r+0xce>
 800ae06:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ae08:	2301      	movs	r3, #1
 800ae0a:	6013      	str	r3, [r2, #0]
 800ae0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ae0e:	b113      	cbz	r3, 800ae16 <_dtoa_r+0xc6>
 800ae10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ae12:	4b84      	ldr	r3, [pc, #528]	@ (800b024 <_dtoa_r+0x2d4>)
 800ae14:	6013      	str	r3, [r2, #0]
 800ae16:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b038 <_dtoa_r+0x2e8>
 800ae1a:	f000 bd33 	b.w	800b884 <_dtoa_r+0xb34>
 800ae1e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ae22:	aa16      	add	r2, sp, #88	@ 0x58
 800ae24:	a917      	add	r1, sp, #92	@ 0x5c
 800ae26:	4658      	mov	r0, fp
 800ae28:	f001 f980 	bl	800c12c <__d2b>
 800ae2c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ae30:	4681      	mov	r9, r0
 800ae32:	2e00      	cmp	r6, #0
 800ae34:	d077      	beq.n	800af26 <_dtoa_r+0x1d6>
 800ae36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae38:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ae3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae44:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ae48:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ae4c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ae50:	4619      	mov	r1, r3
 800ae52:	2200      	movs	r2, #0
 800ae54:	4b74      	ldr	r3, [pc, #464]	@ (800b028 <_dtoa_r+0x2d8>)
 800ae56:	f7f5 fa17 	bl	8000288 <__aeabi_dsub>
 800ae5a:	a369      	add	r3, pc, #420	@ (adr r3, 800b000 <_dtoa_r+0x2b0>)
 800ae5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae60:	f7f5 fbca 	bl	80005f8 <__aeabi_dmul>
 800ae64:	a368      	add	r3, pc, #416	@ (adr r3, 800b008 <_dtoa_r+0x2b8>)
 800ae66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6a:	f7f5 fa0f 	bl	800028c <__adddf3>
 800ae6e:	4604      	mov	r4, r0
 800ae70:	4630      	mov	r0, r6
 800ae72:	460d      	mov	r5, r1
 800ae74:	f7f5 fb56 	bl	8000524 <__aeabi_i2d>
 800ae78:	a365      	add	r3, pc, #404	@ (adr r3, 800b010 <_dtoa_r+0x2c0>)
 800ae7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7e:	f7f5 fbbb 	bl	80005f8 <__aeabi_dmul>
 800ae82:	4602      	mov	r2, r0
 800ae84:	460b      	mov	r3, r1
 800ae86:	4620      	mov	r0, r4
 800ae88:	4629      	mov	r1, r5
 800ae8a:	f7f5 f9ff 	bl	800028c <__adddf3>
 800ae8e:	4604      	mov	r4, r0
 800ae90:	460d      	mov	r5, r1
 800ae92:	f7f5 fe61 	bl	8000b58 <__aeabi_d2iz>
 800ae96:	2200      	movs	r2, #0
 800ae98:	4607      	mov	r7, r0
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	4629      	mov	r1, r5
 800aea0:	f7f5 fe1c 	bl	8000adc <__aeabi_dcmplt>
 800aea4:	b140      	cbz	r0, 800aeb8 <_dtoa_r+0x168>
 800aea6:	4638      	mov	r0, r7
 800aea8:	f7f5 fb3c 	bl	8000524 <__aeabi_i2d>
 800aeac:	4622      	mov	r2, r4
 800aeae:	462b      	mov	r3, r5
 800aeb0:	f7f5 fe0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800aeb4:	b900      	cbnz	r0, 800aeb8 <_dtoa_r+0x168>
 800aeb6:	3f01      	subs	r7, #1
 800aeb8:	2f16      	cmp	r7, #22
 800aeba:	d851      	bhi.n	800af60 <_dtoa_r+0x210>
 800aebc:	4b5b      	ldr	r3, [pc, #364]	@ (800b02c <_dtoa_r+0x2dc>)
 800aebe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aeca:	f7f5 fe07 	bl	8000adc <__aeabi_dcmplt>
 800aece:	2800      	cmp	r0, #0
 800aed0:	d048      	beq.n	800af64 <_dtoa_r+0x214>
 800aed2:	3f01      	subs	r7, #1
 800aed4:	2300      	movs	r3, #0
 800aed6:	9312      	str	r3, [sp, #72]	@ 0x48
 800aed8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aeda:	1b9b      	subs	r3, r3, r6
 800aedc:	1e5a      	subs	r2, r3, #1
 800aede:	bf44      	itt	mi
 800aee0:	f1c3 0801 	rsbmi	r8, r3, #1
 800aee4:	2300      	movmi	r3, #0
 800aee6:	9208      	str	r2, [sp, #32]
 800aee8:	bf54      	ite	pl
 800aeea:	f04f 0800 	movpl.w	r8, #0
 800aeee:	9308      	strmi	r3, [sp, #32]
 800aef0:	2f00      	cmp	r7, #0
 800aef2:	db39      	blt.n	800af68 <_dtoa_r+0x218>
 800aef4:	9b08      	ldr	r3, [sp, #32]
 800aef6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800aef8:	443b      	add	r3, r7
 800aefa:	9308      	str	r3, [sp, #32]
 800aefc:	2300      	movs	r3, #0
 800aefe:	930a      	str	r3, [sp, #40]	@ 0x28
 800af00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af02:	2b09      	cmp	r3, #9
 800af04:	d864      	bhi.n	800afd0 <_dtoa_r+0x280>
 800af06:	2b05      	cmp	r3, #5
 800af08:	bfc4      	itt	gt
 800af0a:	3b04      	subgt	r3, #4
 800af0c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800af0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af10:	f1a3 0302 	sub.w	r3, r3, #2
 800af14:	bfcc      	ite	gt
 800af16:	2400      	movgt	r4, #0
 800af18:	2401      	movle	r4, #1
 800af1a:	2b03      	cmp	r3, #3
 800af1c:	d863      	bhi.n	800afe6 <_dtoa_r+0x296>
 800af1e:	e8df f003 	tbb	[pc, r3]
 800af22:	372a      	.short	0x372a
 800af24:	5535      	.short	0x5535
 800af26:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800af2a:	441e      	add	r6, r3
 800af2c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800af30:	2b20      	cmp	r3, #32
 800af32:	bfc1      	itttt	gt
 800af34:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800af38:	409f      	lslgt	r7, r3
 800af3a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800af3e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800af42:	bfd6      	itet	le
 800af44:	f1c3 0320 	rsble	r3, r3, #32
 800af48:	ea47 0003 	orrgt.w	r0, r7, r3
 800af4c:	fa04 f003 	lslle.w	r0, r4, r3
 800af50:	f7f5 fad8 	bl	8000504 <__aeabi_ui2d>
 800af54:	2201      	movs	r2, #1
 800af56:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800af5a:	3e01      	subs	r6, #1
 800af5c:	9214      	str	r2, [sp, #80]	@ 0x50
 800af5e:	e777      	b.n	800ae50 <_dtoa_r+0x100>
 800af60:	2301      	movs	r3, #1
 800af62:	e7b8      	b.n	800aed6 <_dtoa_r+0x186>
 800af64:	9012      	str	r0, [sp, #72]	@ 0x48
 800af66:	e7b7      	b.n	800aed8 <_dtoa_r+0x188>
 800af68:	427b      	negs	r3, r7
 800af6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800af6c:	2300      	movs	r3, #0
 800af6e:	eba8 0807 	sub.w	r8, r8, r7
 800af72:	930f      	str	r3, [sp, #60]	@ 0x3c
 800af74:	e7c4      	b.n	800af00 <_dtoa_r+0x1b0>
 800af76:	2300      	movs	r3, #0
 800af78:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	dc35      	bgt.n	800afec <_dtoa_r+0x29c>
 800af80:	2301      	movs	r3, #1
 800af82:	9300      	str	r3, [sp, #0]
 800af84:	9307      	str	r3, [sp, #28]
 800af86:	461a      	mov	r2, r3
 800af88:	920e      	str	r2, [sp, #56]	@ 0x38
 800af8a:	e00b      	b.n	800afa4 <_dtoa_r+0x254>
 800af8c:	2301      	movs	r3, #1
 800af8e:	e7f3      	b.n	800af78 <_dtoa_r+0x228>
 800af90:	2300      	movs	r3, #0
 800af92:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af96:	18fb      	adds	r3, r7, r3
 800af98:	9300      	str	r3, [sp, #0]
 800af9a:	3301      	adds	r3, #1
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	9307      	str	r3, [sp, #28]
 800afa0:	bfb8      	it	lt
 800afa2:	2301      	movlt	r3, #1
 800afa4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800afa8:	2100      	movs	r1, #0
 800afaa:	2204      	movs	r2, #4
 800afac:	f102 0514 	add.w	r5, r2, #20
 800afb0:	429d      	cmp	r5, r3
 800afb2:	d91f      	bls.n	800aff4 <_dtoa_r+0x2a4>
 800afb4:	6041      	str	r1, [r0, #4]
 800afb6:	4658      	mov	r0, fp
 800afb8:	f000 fd8e 	bl	800bad8 <_Balloc>
 800afbc:	4682      	mov	sl, r0
 800afbe:	2800      	cmp	r0, #0
 800afc0:	d13c      	bne.n	800b03c <_dtoa_r+0x2ec>
 800afc2:	4b1b      	ldr	r3, [pc, #108]	@ (800b030 <_dtoa_r+0x2e0>)
 800afc4:	4602      	mov	r2, r0
 800afc6:	f240 11af 	movw	r1, #431	@ 0x1af
 800afca:	e6d8      	b.n	800ad7e <_dtoa_r+0x2e>
 800afcc:	2301      	movs	r3, #1
 800afce:	e7e0      	b.n	800af92 <_dtoa_r+0x242>
 800afd0:	2401      	movs	r4, #1
 800afd2:	2300      	movs	r3, #0
 800afd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800afd6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800afd8:	f04f 33ff 	mov.w	r3, #4294967295
 800afdc:	9300      	str	r3, [sp, #0]
 800afde:	9307      	str	r3, [sp, #28]
 800afe0:	2200      	movs	r2, #0
 800afe2:	2312      	movs	r3, #18
 800afe4:	e7d0      	b.n	800af88 <_dtoa_r+0x238>
 800afe6:	2301      	movs	r3, #1
 800afe8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800afea:	e7f5      	b.n	800afd8 <_dtoa_r+0x288>
 800afec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afee:	9300      	str	r3, [sp, #0]
 800aff0:	9307      	str	r3, [sp, #28]
 800aff2:	e7d7      	b.n	800afa4 <_dtoa_r+0x254>
 800aff4:	3101      	adds	r1, #1
 800aff6:	0052      	lsls	r2, r2, #1
 800aff8:	e7d8      	b.n	800afac <_dtoa_r+0x25c>
 800affa:	bf00      	nop
 800affc:	f3af 8000 	nop.w
 800b000:	636f4361 	.word	0x636f4361
 800b004:	3fd287a7 	.word	0x3fd287a7
 800b008:	8b60c8b3 	.word	0x8b60c8b3
 800b00c:	3fc68a28 	.word	0x3fc68a28
 800b010:	509f79fb 	.word	0x509f79fb
 800b014:	3fd34413 	.word	0x3fd34413
 800b018:	0800ca5d 	.word	0x0800ca5d
 800b01c:	0800ca74 	.word	0x0800ca74
 800b020:	7ff00000 	.word	0x7ff00000
 800b024:	0800ca2d 	.word	0x0800ca2d
 800b028:	3ff80000 	.word	0x3ff80000
 800b02c:	0800cb70 	.word	0x0800cb70
 800b030:	0800cacc 	.word	0x0800cacc
 800b034:	0800ca59 	.word	0x0800ca59
 800b038:	0800ca2c 	.word	0x0800ca2c
 800b03c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b040:	6018      	str	r0, [r3, #0]
 800b042:	9b07      	ldr	r3, [sp, #28]
 800b044:	2b0e      	cmp	r3, #14
 800b046:	f200 80a4 	bhi.w	800b192 <_dtoa_r+0x442>
 800b04a:	2c00      	cmp	r4, #0
 800b04c:	f000 80a1 	beq.w	800b192 <_dtoa_r+0x442>
 800b050:	2f00      	cmp	r7, #0
 800b052:	dd33      	ble.n	800b0bc <_dtoa_r+0x36c>
 800b054:	4bad      	ldr	r3, [pc, #692]	@ (800b30c <_dtoa_r+0x5bc>)
 800b056:	f007 020f 	and.w	r2, r7, #15
 800b05a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b05e:	ed93 7b00 	vldr	d7, [r3]
 800b062:	05f8      	lsls	r0, r7, #23
 800b064:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b068:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b06c:	d516      	bpl.n	800b09c <_dtoa_r+0x34c>
 800b06e:	4ba8      	ldr	r3, [pc, #672]	@ (800b310 <_dtoa_r+0x5c0>)
 800b070:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b074:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b078:	f7f5 fbe8 	bl	800084c <__aeabi_ddiv>
 800b07c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b080:	f004 040f 	and.w	r4, r4, #15
 800b084:	2603      	movs	r6, #3
 800b086:	4da2      	ldr	r5, [pc, #648]	@ (800b310 <_dtoa_r+0x5c0>)
 800b088:	b954      	cbnz	r4, 800b0a0 <_dtoa_r+0x350>
 800b08a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b08e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b092:	f7f5 fbdb 	bl	800084c <__aeabi_ddiv>
 800b096:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b09a:	e028      	b.n	800b0ee <_dtoa_r+0x39e>
 800b09c:	2602      	movs	r6, #2
 800b09e:	e7f2      	b.n	800b086 <_dtoa_r+0x336>
 800b0a0:	07e1      	lsls	r1, r4, #31
 800b0a2:	d508      	bpl.n	800b0b6 <_dtoa_r+0x366>
 800b0a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b0ac:	f7f5 faa4 	bl	80005f8 <__aeabi_dmul>
 800b0b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0b4:	3601      	adds	r6, #1
 800b0b6:	1064      	asrs	r4, r4, #1
 800b0b8:	3508      	adds	r5, #8
 800b0ba:	e7e5      	b.n	800b088 <_dtoa_r+0x338>
 800b0bc:	f000 80d2 	beq.w	800b264 <_dtoa_r+0x514>
 800b0c0:	427c      	negs	r4, r7
 800b0c2:	4b92      	ldr	r3, [pc, #584]	@ (800b30c <_dtoa_r+0x5bc>)
 800b0c4:	4d92      	ldr	r5, [pc, #584]	@ (800b310 <_dtoa_r+0x5c0>)
 800b0c6:	f004 020f 	and.w	r2, r4, #15
 800b0ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b0d6:	f7f5 fa8f 	bl	80005f8 <__aeabi_dmul>
 800b0da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0de:	1124      	asrs	r4, r4, #4
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	2602      	movs	r6, #2
 800b0e4:	2c00      	cmp	r4, #0
 800b0e6:	f040 80b2 	bne.w	800b24e <_dtoa_r+0x4fe>
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d1d3      	bne.n	800b096 <_dtoa_r+0x346>
 800b0ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b0f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f000 80b7 	beq.w	800b268 <_dtoa_r+0x518>
 800b0fa:	4b86      	ldr	r3, [pc, #536]	@ (800b314 <_dtoa_r+0x5c4>)
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	4620      	mov	r0, r4
 800b100:	4629      	mov	r1, r5
 800b102:	f7f5 fceb 	bl	8000adc <__aeabi_dcmplt>
 800b106:	2800      	cmp	r0, #0
 800b108:	f000 80ae 	beq.w	800b268 <_dtoa_r+0x518>
 800b10c:	9b07      	ldr	r3, [sp, #28]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	f000 80aa 	beq.w	800b268 <_dtoa_r+0x518>
 800b114:	9b00      	ldr	r3, [sp, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	dd37      	ble.n	800b18a <_dtoa_r+0x43a>
 800b11a:	1e7b      	subs	r3, r7, #1
 800b11c:	9304      	str	r3, [sp, #16]
 800b11e:	4620      	mov	r0, r4
 800b120:	4b7d      	ldr	r3, [pc, #500]	@ (800b318 <_dtoa_r+0x5c8>)
 800b122:	2200      	movs	r2, #0
 800b124:	4629      	mov	r1, r5
 800b126:	f7f5 fa67 	bl	80005f8 <__aeabi_dmul>
 800b12a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b12e:	9c00      	ldr	r4, [sp, #0]
 800b130:	3601      	adds	r6, #1
 800b132:	4630      	mov	r0, r6
 800b134:	f7f5 f9f6 	bl	8000524 <__aeabi_i2d>
 800b138:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b13c:	f7f5 fa5c 	bl	80005f8 <__aeabi_dmul>
 800b140:	4b76      	ldr	r3, [pc, #472]	@ (800b31c <_dtoa_r+0x5cc>)
 800b142:	2200      	movs	r2, #0
 800b144:	f7f5 f8a2 	bl	800028c <__adddf3>
 800b148:	4605      	mov	r5, r0
 800b14a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b14e:	2c00      	cmp	r4, #0
 800b150:	f040 808d 	bne.w	800b26e <_dtoa_r+0x51e>
 800b154:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b158:	4b71      	ldr	r3, [pc, #452]	@ (800b320 <_dtoa_r+0x5d0>)
 800b15a:	2200      	movs	r2, #0
 800b15c:	f7f5 f894 	bl	8000288 <__aeabi_dsub>
 800b160:	4602      	mov	r2, r0
 800b162:	460b      	mov	r3, r1
 800b164:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b168:	462a      	mov	r2, r5
 800b16a:	4633      	mov	r3, r6
 800b16c:	f7f5 fcd4 	bl	8000b18 <__aeabi_dcmpgt>
 800b170:	2800      	cmp	r0, #0
 800b172:	f040 828b 	bne.w	800b68c <_dtoa_r+0x93c>
 800b176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b17a:	462a      	mov	r2, r5
 800b17c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b180:	f7f5 fcac 	bl	8000adc <__aeabi_dcmplt>
 800b184:	2800      	cmp	r0, #0
 800b186:	f040 8128 	bne.w	800b3da <_dtoa_r+0x68a>
 800b18a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b18e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b192:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b194:	2b00      	cmp	r3, #0
 800b196:	f2c0 815a 	blt.w	800b44e <_dtoa_r+0x6fe>
 800b19a:	2f0e      	cmp	r7, #14
 800b19c:	f300 8157 	bgt.w	800b44e <_dtoa_r+0x6fe>
 800b1a0:	4b5a      	ldr	r3, [pc, #360]	@ (800b30c <_dtoa_r+0x5bc>)
 800b1a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b1a6:	ed93 7b00 	vldr	d7, [r3]
 800b1aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	ed8d 7b00 	vstr	d7, [sp]
 800b1b2:	da03      	bge.n	800b1bc <_dtoa_r+0x46c>
 800b1b4:	9b07      	ldr	r3, [sp, #28]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	f340 8101 	ble.w	800b3be <_dtoa_r+0x66e>
 800b1bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b1c0:	4656      	mov	r6, sl
 800b1c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	4629      	mov	r1, r5
 800b1ca:	f7f5 fb3f 	bl	800084c <__aeabi_ddiv>
 800b1ce:	f7f5 fcc3 	bl	8000b58 <__aeabi_d2iz>
 800b1d2:	4680      	mov	r8, r0
 800b1d4:	f7f5 f9a6 	bl	8000524 <__aeabi_i2d>
 800b1d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1dc:	f7f5 fa0c 	bl	80005f8 <__aeabi_dmul>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	4629      	mov	r1, r5
 800b1e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b1ec:	f7f5 f84c 	bl	8000288 <__aeabi_dsub>
 800b1f0:	f806 4b01 	strb.w	r4, [r6], #1
 800b1f4:	9d07      	ldr	r5, [sp, #28]
 800b1f6:	eba6 040a 	sub.w	r4, r6, sl
 800b1fa:	42a5      	cmp	r5, r4
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	460b      	mov	r3, r1
 800b200:	f040 8117 	bne.w	800b432 <_dtoa_r+0x6e2>
 800b204:	f7f5 f842 	bl	800028c <__adddf3>
 800b208:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b20c:	4604      	mov	r4, r0
 800b20e:	460d      	mov	r5, r1
 800b210:	f7f5 fc82 	bl	8000b18 <__aeabi_dcmpgt>
 800b214:	2800      	cmp	r0, #0
 800b216:	f040 80f9 	bne.w	800b40c <_dtoa_r+0x6bc>
 800b21a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b21e:	4620      	mov	r0, r4
 800b220:	4629      	mov	r1, r5
 800b222:	f7f5 fc51 	bl	8000ac8 <__aeabi_dcmpeq>
 800b226:	b118      	cbz	r0, 800b230 <_dtoa_r+0x4e0>
 800b228:	f018 0f01 	tst.w	r8, #1
 800b22c:	f040 80ee 	bne.w	800b40c <_dtoa_r+0x6bc>
 800b230:	4649      	mov	r1, r9
 800b232:	4658      	mov	r0, fp
 800b234:	f000 fc90 	bl	800bb58 <_Bfree>
 800b238:	2300      	movs	r3, #0
 800b23a:	7033      	strb	r3, [r6, #0]
 800b23c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b23e:	3701      	adds	r7, #1
 800b240:	601f      	str	r7, [r3, #0]
 800b242:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b244:	2b00      	cmp	r3, #0
 800b246:	f000 831d 	beq.w	800b884 <_dtoa_r+0xb34>
 800b24a:	601e      	str	r6, [r3, #0]
 800b24c:	e31a      	b.n	800b884 <_dtoa_r+0xb34>
 800b24e:	07e2      	lsls	r2, r4, #31
 800b250:	d505      	bpl.n	800b25e <_dtoa_r+0x50e>
 800b252:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b256:	f7f5 f9cf 	bl	80005f8 <__aeabi_dmul>
 800b25a:	3601      	adds	r6, #1
 800b25c:	2301      	movs	r3, #1
 800b25e:	1064      	asrs	r4, r4, #1
 800b260:	3508      	adds	r5, #8
 800b262:	e73f      	b.n	800b0e4 <_dtoa_r+0x394>
 800b264:	2602      	movs	r6, #2
 800b266:	e742      	b.n	800b0ee <_dtoa_r+0x39e>
 800b268:	9c07      	ldr	r4, [sp, #28]
 800b26a:	9704      	str	r7, [sp, #16]
 800b26c:	e761      	b.n	800b132 <_dtoa_r+0x3e2>
 800b26e:	4b27      	ldr	r3, [pc, #156]	@ (800b30c <_dtoa_r+0x5bc>)
 800b270:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b272:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b276:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b27a:	4454      	add	r4, sl
 800b27c:	2900      	cmp	r1, #0
 800b27e:	d053      	beq.n	800b328 <_dtoa_r+0x5d8>
 800b280:	4928      	ldr	r1, [pc, #160]	@ (800b324 <_dtoa_r+0x5d4>)
 800b282:	2000      	movs	r0, #0
 800b284:	f7f5 fae2 	bl	800084c <__aeabi_ddiv>
 800b288:	4633      	mov	r3, r6
 800b28a:	462a      	mov	r2, r5
 800b28c:	f7f4 fffc 	bl	8000288 <__aeabi_dsub>
 800b290:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b294:	4656      	mov	r6, sl
 800b296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b29a:	f7f5 fc5d 	bl	8000b58 <__aeabi_d2iz>
 800b29e:	4605      	mov	r5, r0
 800b2a0:	f7f5 f940 	bl	8000524 <__aeabi_i2d>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2ac:	f7f4 ffec 	bl	8000288 <__aeabi_dsub>
 800b2b0:	3530      	adds	r5, #48	@ 0x30
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b2ba:	f806 5b01 	strb.w	r5, [r6], #1
 800b2be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b2c2:	f7f5 fc0b 	bl	8000adc <__aeabi_dcmplt>
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	d171      	bne.n	800b3ae <_dtoa_r+0x65e>
 800b2ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2ce:	4911      	ldr	r1, [pc, #68]	@ (800b314 <_dtoa_r+0x5c4>)
 800b2d0:	2000      	movs	r0, #0
 800b2d2:	f7f4 ffd9 	bl	8000288 <__aeabi_dsub>
 800b2d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b2da:	f7f5 fbff 	bl	8000adc <__aeabi_dcmplt>
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	f040 8095 	bne.w	800b40e <_dtoa_r+0x6be>
 800b2e4:	42a6      	cmp	r6, r4
 800b2e6:	f43f af50 	beq.w	800b18a <_dtoa_r+0x43a>
 800b2ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b2ee:	4b0a      	ldr	r3, [pc, #40]	@ (800b318 <_dtoa_r+0x5c8>)
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f7f5 f981 	bl	80005f8 <__aeabi_dmul>
 800b2f6:	4b08      	ldr	r3, [pc, #32]	@ (800b318 <_dtoa_r+0x5c8>)
 800b2f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b302:	f7f5 f979 	bl	80005f8 <__aeabi_dmul>
 800b306:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b30a:	e7c4      	b.n	800b296 <_dtoa_r+0x546>
 800b30c:	0800cb70 	.word	0x0800cb70
 800b310:	0800cb48 	.word	0x0800cb48
 800b314:	3ff00000 	.word	0x3ff00000
 800b318:	40240000 	.word	0x40240000
 800b31c:	401c0000 	.word	0x401c0000
 800b320:	40140000 	.word	0x40140000
 800b324:	3fe00000 	.word	0x3fe00000
 800b328:	4631      	mov	r1, r6
 800b32a:	4628      	mov	r0, r5
 800b32c:	f7f5 f964 	bl	80005f8 <__aeabi_dmul>
 800b330:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b334:	9415      	str	r4, [sp, #84]	@ 0x54
 800b336:	4656      	mov	r6, sl
 800b338:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b33c:	f7f5 fc0c 	bl	8000b58 <__aeabi_d2iz>
 800b340:	4605      	mov	r5, r0
 800b342:	f7f5 f8ef 	bl	8000524 <__aeabi_i2d>
 800b346:	4602      	mov	r2, r0
 800b348:	460b      	mov	r3, r1
 800b34a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b34e:	f7f4 ff9b 	bl	8000288 <__aeabi_dsub>
 800b352:	3530      	adds	r5, #48	@ 0x30
 800b354:	f806 5b01 	strb.w	r5, [r6], #1
 800b358:	4602      	mov	r2, r0
 800b35a:	460b      	mov	r3, r1
 800b35c:	42a6      	cmp	r6, r4
 800b35e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b362:	f04f 0200 	mov.w	r2, #0
 800b366:	d124      	bne.n	800b3b2 <_dtoa_r+0x662>
 800b368:	4bac      	ldr	r3, [pc, #688]	@ (800b61c <_dtoa_r+0x8cc>)
 800b36a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b36e:	f7f4 ff8d 	bl	800028c <__adddf3>
 800b372:	4602      	mov	r2, r0
 800b374:	460b      	mov	r3, r1
 800b376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b37a:	f7f5 fbcd 	bl	8000b18 <__aeabi_dcmpgt>
 800b37e:	2800      	cmp	r0, #0
 800b380:	d145      	bne.n	800b40e <_dtoa_r+0x6be>
 800b382:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b386:	49a5      	ldr	r1, [pc, #660]	@ (800b61c <_dtoa_r+0x8cc>)
 800b388:	2000      	movs	r0, #0
 800b38a:	f7f4 ff7d 	bl	8000288 <__aeabi_dsub>
 800b38e:	4602      	mov	r2, r0
 800b390:	460b      	mov	r3, r1
 800b392:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b396:	f7f5 fba1 	bl	8000adc <__aeabi_dcmplt>
 800b39a:	2800      	cmp	r0, #0
 800b39c:	f43f aef5 	beq.w	800b18a <_dtoa_r+0x43a>
 800b3a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b3a2:	1e73      	subs	r3, r6, #1
 800b3a4:	9315      	str	r3, [sp, #84]	@ 0x54
 800b3a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b3aa:	2b30      	cmp	r3, #48	@ 0x30
 800b3ac:	d0f8      	beq.n	800b3a0 <_dtoa_r+0x650>
 800b3ae:	9f04      	ldr	r7, [sp, #16]
 800b3b0:	e73e      	b.n	800b230 <_dtoa_r+0x4e0>
 800b3b2:	4b9b      	ldr	r3, [pc, #620]	@ (800b620 <_dtoa_r+0x8d0>)
 800b3b4:	f7f5 f920 	bl	80005f8 <__aeabi_dmul>
 800b3b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3bc:	e7bc      	b.n	800b338 <_dtoa_r+0x5e8>
 800b3be:	d10c      	bne.n	800b3da <_dtoa_r+0x68a>
 800b3c0:	4b98      	ldr	r3, [pc, #608]	@ (800b624 <_dtoa_r+0x8d4>)
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b3c8:	f7f5 f916 	bl	80005f8 <__aeabi_dmul>
 800b3cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3d0:	f7f5 fb98 	bl	8000b04 <__aeabi_dcmpge>
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	f000 8157 	beq.w	800b688 <_dtoa_r+0x938>
 800b3da:	2400      	movs	r4, #0
 800b3dc:	4625      	mov	r5, r4
 800b3de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3e0:	43db      	mvns	r3, r3
 800b3e2:	9304      	str	r3, [sp, #16]
 800b3e4:	4656      	mov	r6, sl
 800b3e6:	2700      	movs	r7, #0
 800b3e8:	4621      	mov	r1, r4
 800b3ea:	4658      	mov	r0, fp
 800b3ec:	f000 fbb4 	bl	800bb58 <_Bfree>
 800b3f0:	2d00      	cmp	r5, #0
 800b3f2:	d0dc      	beq.n	800b3ae <_dtoa_r+0x65e>
 800b3f4:	b12f      	cbz	r7, 800b402 <_dtoa_r+0x6b2>
 800b3f6:	42af      	cmp	r7, r5
 800b3f8:	d003      	beq.n	800b402 <_dtoa_r+0x6b2>
 800b3fa:	4639      	mov	r1, r7
 800b3fc:	4658      	mov	r0, fp
 800b3fe:	f000 fbab 	bl	800bb58 <_Bfree>
 800b402:	4629      	mov	r1, r5
 800b404:	4658      	mov	r0, fp
 800b406:	f000 fba7 	bl	800bb58 <_Bfree>
 800b40a:	e7d0      	b.n	800b3ae <_dtoa_r+0x65e>
 800b40c:	9704      	str	r7, [sp, #16]
 800b40e:	4633      	mov	r3, r6
 800b410:	461e      	mov	r6, r3
 800b412:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b416:	2a39      	cmp	r2, #57	@ 0x39
 800b418:	d107      	bne.n	800b42a <_dtoa_r+0x6da>
 800b41a:	459a      	cmp	sl, r3
 800b41c:	d1f8      	bne.n	800b410 <_dtoa_r+0x6c0>
 800b41e:	9a04      	ldr	r2, [sp, #16]
 800b420:	3201      	adds	r2, #1
 800b422:	9204      	str	r2, [sp, #16]
 800b424:	2230      	movs	r2, #48	@ 0x30
 800b426:	f88a 2000 	strb.w	r2, [sl]
 800b42a:	781a      	ldrb	r2, [r3, #0]
 800b42c:	3201      	adds	r2, #1
 800b42e:	701a      	strb	r2, [r3, #0]
 800b430:	e7bd      	b.n	800b3ae <_dtoa_r+0x65e>
 800b432:	4b7b      	ldr	r3, [pc, #492]	@ (800b620 <_dtoa_r+0x8d0>)
 800b434:	2200      	movs	r2, #0
 800b436:	f7f5 f8df 	bl	80005f8 <__aeabi_dmul>
 800b43a:	2200      	movs	r2, #0
 800b43c:	2300      	movs	r3, #0
 800b43e:	4604      	mov	r4, r0
 800b440:	460d      	mov	r5, r1
 800b442:	f7f5 fb41 	bl	8000ac8 <__aeabi_dcmpeq>
 800b446:	2800      	cmp	r0, #0
 800b448:	f43f aebb 	beq.w	800b1c2 <_dtoa_r+0x472>
 800b44c:	e6f0      	b.n	800b230 <_dtoa_r+0x4e0>
 800b44e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b450:	2a00      	cmp	r2, #0
 800b452:	f000 80db 	beq.w	800b60c <_dtoa_r+0x8bc>
 800b456:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b458:	2a01      	cmp	r2, #1
 800b45a:	f300 80bf 	bgt.w	800b5dc <_dtoa_r+0x88c>
 800b45e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b460:	2a00      	cmp	r2, #0
 800b462:	f000 80b7 	beq.w	800b5d4 <_dtoa_r+0x884>
 800b466:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b46a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b46c:	4646      	mov	r6, r8
 800b46e:	9a08      	ldr	r2, [sp, #32]
 800b470:	2101      	movs	r1, #1
 800b472:	441a      	add	r2, r3
 800b474:	4658      	mov	r0, fp
 800b476:	4498      	add	r8, r3
 800b478:	9208      	str	r2, [sp, #32]
 800b47a:	f000 fc21 	bl	800bcc0 <__i2b>
 800b47e:	4605      	mov	r5, r0
 800b480:	b15e      	cbz	r6, 800b49a <_dtoa_r+0x74a>
 800b482:	9b08      	ldr	r3, [sp, #32]
 800b484:	2b00      	cmp	r3, #0
 800b486:	dd08      	ble.n	800b49a <_dtoa_r+0x74a>
 800b488:	42b3      	cmp	r3, r6
 800b48a:	9a08      	ldr	r2, [sp, #32]
 800b48c:	bfa8      	it	ge
 800b48e:	4633      	movge	r3, r6
 800b490:	eba8 0803 	sub.w	r8, r8, r3
 800b494:	1af6      	subs	r6, r6, r3
 800b496:	1ad3      	subs	r3, r2, r3
 800b498:	9308      	str	r3, [sp, #32]
 800b49a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b49c:	b1f3      	cbz	r3, 800b4dc <_dtoa_r+0x78c>
 800b49e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	f000 80b7 	beq.w	800b614 <_dtoa_r+0x8c4>
 800b4a6:	b18c      	cbz	r4, 800b4cc <_dtoa_r+0x77c>
 800b4a8:	4629      	mov	r1, r5
 800b4aa:	4622      	mov	r2, r4
 800b4ac:	4658      	mov	r0, fp
 800b4ae:	f000 fcc7 	bl	800be40 <__pow5mult>
 800b4b2:	464a      	mov	r2, r9
 800b4b4:	4601      	mov	r1, r0
 800b4b6:	4605      	mov	r5, r0
 800b4b8:	4658      	mov	r0, fp
 800b4ba:	f000 fc17 	bl	800bcec <__multiply>
 800b4be:	4649      	mov	r1, r9
 800b4c0:	9004      	str	r0, [sp, #16]
 800b4c2:	4658      	mov	r0, fp
 800b4c4:	f000 fb48 	bl	800bb58 <_Bfree>
 800b4c8:	9b04      	ldr	r3, [sp, #16]
 800b4ca:	4699      	mov	r9, r3
 800b4cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4ce:	1b1a      	subs	r2, r3, r4
 800b4d0:	d004      	beq.n	800b4dc <_dtoa_r+0x78c>
 800b4d2:	4649      	mov	r1, r9
 800b4d4:	4658      	mov	r0, fp
 800b4d6:	f000 fcb3 	bl	800be40 <__pow5mult>
 800b4da:	4681      	mov	r9, r0
 800b4dc:	2101      	movs	r1, #1
 800b4de:	4658      	mov	r0, fp
 800b4e0:	f000 fbee 	bl	800bcc0 <__i2b>
 800b4e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4e6:	4604      	mov	r4, r0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	f000 81cf 	beq.w	800b88c <_dtoa_r+0xb3c>
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	4601      	mov	r1, r0
 800b4f2:	4658      	mov	r0, fp
 800b4f4:	f000 fca4 	bl	800be40 <__pow5mult>
 800b4f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	4604      	mov	r4, r0
 800b4fe:	f300 8095 	bgt.w	800b62c <_dtoa_r+0x8dc>
 800b502:	9b02      	ldr	r3, [sp, #8]
 800b504:	2b00      	cmp	r3, #0
 800b506:	f040 8087 	bne.w	800b618 <_dtoa_r+0x8c8>
 800b50a:	9b03      	ldr	r3, [sp, #12]
 800b50c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b510:	2b00      	cmp	r3, #0
 800b512:	f040 8089 	bne.w	800b628 <_dtoa_r+0x8d8>
 800b516:	9b03      	ldr	r3, [sp, #12]
 800b518:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b51c:	0d1b      	lsrs	r3, r3, #20
 800b51e:	051b      	lsls	r3, r3, #20
 800b520:	b12b      	cbz	r3, 800b52e <_dtoa_r+0x7de>
 800b522:	9b08      	ldr	r3, [sp, #32]
 800b524:	3301      	adds	r3, #1
 800b526:	9308      	str	r3, [sp, #32]
 800b528:	f108 0801 	add.w	r8, r8, #1
 800b52c:	2301      	movs	r3, #1
 800b52e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b530:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b532:	2b00      	cmp	r3, #0
 800b534:	f000 81b0 	beq.w	800b898 <_dtoa_r+0xb48>
 800b538:	6923      	ldr	r3, [r4, #16]
 800b53a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b53e:	6918      	ldr	r0, [r3, #16]
 800b540:	f000 fb72 	bl	800bc28 <__hi0bits>
 800b544:	f1c0 0020 	rsb	r0, r0, #32
 800b548:	9b08      	ldr	r3, [sp, #32]
 800b54a:	4418      	add	r0, r3
 800b54c:	f010 001f 	ands.w	r0, r0, #31
 800b550:	d077      	beq.n	800b642 <_dtoa_r+0x8f2>
 800b552:	f1c0 0320 	rsb	r3, r0, #32
 800b556:	2b04      	cmp	r3, #4
 800b558:	dd6b      	ble.n	800b632 <_dtoa_r+0x8e2>
 800b55a:	9b08      	ldr	r3, [sp, #32]
 800b55c:	f1c0 001c 	rsb	r0, r0, #28
 800b560:	4403      	add	r3, r0
 800b562:	4480      	add	r8, r0
 800b564:	4406      	add	r6, r0
 800b566:	9308      	str	r3, [sp, #32]
 800b568:	f1b8 0f00 	cmp.w	r8, #0
 800b56c:	dd05      	ble.n	800b57a <_dtoa_r+0x82a>
 800b56e:	4649      	mov	r1, r9
 800b570:	4642      	mov	r2, r8
 800b572:	4658      	mov	r0, fp
 800b574:	f000 fcbe 	bl	800bef4 <__lshift>
 800b578:	4681      	mov	r9, r0
 800b57a:	9b08      	ldr	r3, [sp, #32]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	dd05      	ble.n	800b58c <_dtoa_r+0x83c>
 800b580:	4621      	mov	r1, r4
 800b582:	461a      	mov	r2, r3
 800b584:	4658      	mov	r0, fp
 800b586:	f000 fcb5 	bl	800bef4 <__lshift>
 800b58a:	4604      	mov	r4, r0
 800b58c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d059      	beq.n	800b646 <_dtoa_r+0x8f6>
 800b592:	4621      	mov	r1, r4
 800b594:	4648      	mov	r0, r9
 800b596:	f000 fd19 	bl	800bfcc <__mcmp>
 800b59a:	2800      	cmp	r0, #0
 800b59c:	da53      	bge.n	800b646 <_dtoa_r+0x8f6>
 800b59e:	1e7b      	subs	r3, r7, #1
 800b5a0:	9304      	str	r3, [sp, #16]
 800b5a2:	4649      	mov	r1, r9
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	220a      	movs	r2, #10
 800b5a8:	4658      	mov	r0, fp
 800b5aa:	f000 faf7 	bl	800bb9c <__multadd>
 800b5ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5b0:	4681      	mov	r9, r0
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	f000 8172 	beq.w	800b89c <_dtoa_r+0xb4c>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	4629      	mov	r1, r5
 800b5bc:	220a      	movs	r2, #10
 800b5be:	4658      	mov	r0, fp
 800b5c0:	f000 faec 	bl	800bb9c <__multadd>
 800b5c4:	9b00      	ldr	r3, [sp, #0]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	4605      	mov	r5, r0
 800b5ca:	dc67      	bgt.n	800b69c <_dtoa_r+0x94c>
 800b5cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5ce:	2b02      	cmp	r3, #2
 800b5d0:	dc41      	bgt.n	800b656 <_dtoa_r+0x906>
 800b5d2:	e063      	b.n	800b69c <_dtoa_r+0x94c>
 800b5d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b5d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b5da:	e746      	b.n	800b46a <_dtoa_r+0x71a>
 800b5dc:	9b07      	ldr	r3, [sp, #28]
 800b5de:	1e5c      	subs	r4, r3, #1
 800b5e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5e2:	42a3      	cmp	r3, r4
 800b5e4:	bfbf      	itttt	lt
 800b5e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b5e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b5ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b5ec:	1ae3      	sublt	r3, r4, r3
 800b5ee:	bfb4      	ite	lt
 800b5f0:	18d2      	addlt	r2, r2, r3
 800b5f2:	1b1c      	subge	r4, r3, r4
 800b5f4:	9b07      	ldr	r3, [sp, #28]
 800b5f6:	bfbc      	itt	lt
 800b5f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b5fa:	2400      	movlt	r4, #0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	bfb5      	itete	lt
 800b600:	eba8 0603 	sublt.w	r6, r8, r3
 800b604:	9b07      	ldrge	r3, [sp, #28]
 800b606:	2300      	movlt	r3, #0
 800b608:	4646      	movge	r6, r8
 800b60a:	e730      	b.n	800b46e <_dtoa_r+0x71e>
 800b60c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b60e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b610:	4646      	mov	r6, r8
 800b612:	e735      	b.n	800b480 <_dtoa_r+0x730>
 800b614:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b616:	e75c      	b.n	800b4d2 <_dtoa_r+0x782>
 800b618:	2300      	movs	r3, #0
 800b61a:	e788      	b.n	800b52e <_dtoa_r+0x7de>
 800b61c:	3fe00000 	.word	0x3fe00000
 800b620:	40240000 	.word	0x40240000
 800b624:	40140000 	.word	0x40140000
 800b628:	9b02      	ldr	r3, [sp, #8]
 800b62a:	e780      	b.n	800b52e <_dtoa_r+0x7de>
 800b62c:	2300      	movs	r3, #0
 800b62e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b630:	e782      	b.n	800b538 <_dtoa_r+0x7e8>
 800b632:	d099      	beq.n	800b568 <_dtoa_r+0x818>
 800b634:	9a08      	ldr	r2, [sp, #32]
 800b636:	331c      	adds	r3, #28
 800b638:	441a      	add	r2, r3
 800b63a:	4498      	add	r8, r3
 800b63c:	441e      	add	r6, r3
 800b63e:	9208      	str	r2, [sp, #32]
 800b640:	e792      	b.n	800b568 <_dtoa_r+0x818>
 800b642:	4603      	mov	r3, r0
 800b644:	e7f6      	b.n	800b634 <_dtoa_r+0x8e4>
 800b646:	9b07      	ldr	r3, [sp, #28]
 800b648:	9704      	str	r7, [sp, #16]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	dc20      	bgt.n	800b690 <_dtoa_r+0x940>
 800b64e:	9300      	str	r3, [sp, #0]
 800b650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b652:	2b02      	cmp	r3, #2
 800b654:	dd1e      	ble.n	800b694 <_dtoa_r+0x944>
 800b656:	9b00      	ldr	r3, [sp, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	f47f aec0 	bne.w	800b3de <_dtoa_r+0x68e>
 800b65e:	4621      	mov	r1, r4
 800b660:	2205      	movs	r2, #5
 800b662:	4658      	mov	r0, fp
 800b664:	f000 fa9a 	bl	800bb9c <__multadd>
 800b668:	4601      	mov	r1, r0
 800b66a:	4604      	mov	r4, r0
 800b66c:	4648      	mov	r0, r9
 800b66e:	f000 fcad 	bl	800bfcc <__mcmp>
 800b672:	2800      	cmp	r0, #0
 800b674:	f77f aeb3 	ble.w	800b3de <_dtoa_r+0x68e>
 800b678:	4656      	mov	r6, sl
 800b67a:	2331      	movs	r3, #49	@ 0x31
 800b67c:	f806 3b01 	strb.w	r3, [r6], #1
 800b680:	9b04      	ldr	r3, [sp, #16]
 800b682:	3301      	adds	r3, #1
 800b684:	9304      	str	r3, [sp, #16]
 800b686:	e6ae      	b.n	800b3e6 <_dtoa_r+0x696>
 800b688:	9c07      	ldr	r4, [sp, #28]
 800b68a:	9704      	str	r7, [sp, #16]
 800b68c:	4625      	mov	r5, r4
 800b68e:	e7f3      	b.n	800b678 <_dtoa_r+0x928>
 800b690:	9b07      	ldr	r3, [sp, #28]
 800b692:	9300      	str	r3, [sp, #0]
 800b694:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b696:	2b00      	cmp	r3, #0
 800b698:	f000 8104 	beq.w	800b8a4 <_dtoa_r+0xb54>
 800b69c:	2e00      	cmp	r6, #0
 800b69e:	dd05      	ble.n	800b6ac <_dtoa_r+0x95c>
 800b6a0:	4629      	mov	r1, r5
 800b6a2:	4632      	mov	r2, r6
 800b6a4:	4658      	mov	r0, fp
 800b6a6:	f000 fc25 	bl	800bef4 <__lshift>
 800b6aa:	4605      	mov	r5, r0
 800b6ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d05a      	beq.n	800b768 <_dtoa_r+0xa18>
 800b6b2:	6869      	ldr	r1, [r5, #4]
 800b6b4:	4658      	mov	r0, fp
 800b6b6:	f000 fa0f 	bl	800bad8 <_Balloc>
 800b6ba:	4606      	mov	r6, r0
 800b6bc:	b928      	cbnz	r0, 800b6ca <_dtoa_r+0x97a>
 800b6be:	4b84      	ldr	r3, [pc, #528]	@ (800b8d0 <_dtoa_r+0xb80>)
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b6c6:	f7ff bb5a 	b.w	800ad7e <_dtoa_r+0x2e>
 800b6ca:	692a      	ldr	r2, [r5, #16]
 800b6cc:	3202      	adds	r2, #2
 800b6ce:	0092      	lsls	r2, r2, #2
 800b6d0:	f105 010c 	add.w	r1, r5, #12
 800b6d4:	300c      	adds	r0, #12
 800b6d6:	f7ff faa4 	bl	800ac22 <memcpy>
 800b6da:	2201      	movs	r2, #1
 800b6dc:	4631      	mov	r1, r6
 800b6de:	4658      	mov	r0, fp
 800b6e0:	f000 fc08 	bl	800bef4 <__lshift>
 800b6e4:	f10a 0301 	add.w	r3, sl, #1
 800b6e8:	9307      	str	r3, [sp, #28]
 800b6ea:	9b00      	ldr	r3, [sp, #0]
 800b6ec:	4453      	add	r3, sl
 800b6ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6f0:	9b02      	ldr	r3, [sp, #8]
 800b6f2:	f003 0301 	and.w	r3, r3, #1
 800b6f6:	462f      	mov	r7, r5
 800b6f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6fa:	4605      	mov	r5, r0
 800b6fc:	9b07      	ldr	r3, [sp, #28]
 800b6fe:	4621      	mov	r1, r4
 800b700:	3b01      	subs	r3, #1
 800b702:	4648      	mov	r0, r9
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	f7ff fa9a 	bl	800ac3e <quorem>
 800b70a:	4639      	mov	r1, r7
 800b70c:	9002      	str	r0, [sp, #8]
 800b70e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b712:	4648      	mov	r0, r9
 800b714:	f000 fc5a 	bl	800bfcc <__mcmp>
 800b718:	462a      	mov	r2, r5
 800b71a:	9008      	str	r0, [sp, #32]
 800b71c:	4621      	mov	r1, r4
 800b71e:	4658      	mov	r0, fp
 800b720:	f000 fc70 	bl	800c004 <__mdiff>
 800b724:	68c2      	ldr	r2, [r0, #12]
 800b726:	4606      	mov	r6, r0
 800b728:	bb02      	cbnz	r2, 800b76c <_dtoa_r+0xa1c>
 800b72a:	4601      	mov	r1, r0
 800b72c:	4648      	mov	r0, r9
 800b72e:	f000 fc4d 	bl	800bfcc <__mcmp>
 800b732:	4602      	mov	r2, r0
 800b734:	4631      	mov	r1, r6
 800b736:	4658      	mov	r0, fp
 800b738:	920e      	str	r2, [sp, #56]	@ 0x38
 800b73a:	f000 fa0d 	bl	800bb58 <_Bfree>
 800b73e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b740:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b742:	9e07      	ldr	r6, [sp, #28]
 800b744:	ea43 0102 	orr.w	r1, r3, r2
 800b748:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b74a:	4319      	orrs	r1, r3
 800b74c:	d110      	bne.n	800b770 <_dtoa_r+0xa20>
 800b74e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b752:	d029      	beq.n	800b7a8 <_dtoa_r+0xa58>
 800b754:	9b08      	ldr	r3, [sp, #32]
 800b756:	2b00      	cmp	r3, #0
 800b758:	dd02      	ble.n	800b760 <_dtoa_r+0xa10>
 800b75a:	9b02      	ldr	r3, [sp, #8]
 800b75c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b760:	9b00      	ldr	r3, [sp, #0]
 800b762:	f883 8000 	strb.w	r8, [r3]
 800b766:	e63f      	b.n	800b3e8 <_dtoa_r+0x698>
 800b768:	4628      	mov	r0, r5
 800b76a:	e7bb      	b.n	800b6e4 <_dtoa_r+0x994>
 800b76c:	2201      	movs	r2, #1
 800b76e:	e7e1      	b.n	800b734 <_dtoa_r+0x9e4>
 800b770:	9b08      	ldr	r3, [sp, #32]
 800b772:	2b00      	cmp	r3, #0
 800b774:	db04      	blt.n	800b780 <_dtoa_r+0xa30>
 800b776:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b778:	430b      	orrs	r3, r1
 800b77a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b77c:	430b      	orrs	r3, r1
 800b77e:	d120      	bne.n	800b7c2 <_dtoa_r+0xa72>
 800b780:	2a00      	cmp	r2, #0
 800b782:	dded      	ble.n	800b760 <_dtoa_r+0xa10>
 800b784:	4649      	mov	r1, r9
 800b786:	2201      	movs	r2, #1
 800b788:	4658      	mov	r0, fp
 800b78a:	f000 fbb3 	bl	800bef4 <__lshift>
 800b78e:	4621      	mov	r1, r4
 800b790:	4681      	mov	r9, r0
 800b792:	f000 fc1b 	bl	800bfcc <__mcmp>
 800b796:	2800      	cmp	r0, #0
 800b798:	dc03      	bgt.n	800b7a2 <_dtoa_r+0xa52>
 800b79a:	d1e1      	bne.n	800b760 <_dtoa_r+0xa10>
 800b79c:	f018 0f01 	tst.w	r8, #1
 800b7a0:	d0de      	beq.n	800b760 <_dtoa_r+0xa10>
 800b7a2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b7a6:	d1d8      	bne.n	800b75a <_dtoa_r+0xa0a>
 800b7a8:	9a00      	ldr	r2, [sp, #0]
 800b7aa:	2339      	movs	r3, #57	@ 0x39
 800b7ac:	7013      	strb	r3, [r2, #0]
 800b7ae:	4633      	mov	r3, r6
 800b7b0:	461e      	mov	r6, r3
 800b7b2:	3b01      	subs	r3, #1
 800b7b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b7b8:	2a39      	cmp	r2, #57	@ 0x39
 800b7ba:	d052      	beq.n	800b862 <_dtoa_r+0xb12>
 800b7bc:	3201      	adds	r2, #1
 800b7be:	701a      	strb	r2, [r3, #0]
 800b7c0:	e612      	b.n	800b3e8 <_dtoa_r+0x698>
 800b7c2:	2a00      	cmp	r2, #0
 800b7c4:	dd07      	ble.n	800b7d6 <_dtoa_r+0xa86>
 800b7c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b7ca:	d0ed      	beq.n	800b7a8 <_dtoa_r+0xa58>
 800b7cc:	9a00      	ldr	r2, [sp, #0]
 800b7ce:	f108 0301 	add.w	r3, r8, #1
 800b7d2:	7013      	strb	r3, [r2, #0]
 800b7d4:	e608      	b.n	800b3e8 <_dtoa_r+0x698>
 800b7d6:	9b07      	ldr	r3, [sp, #28]
 800b7d8:	9a07      	ldr	r2, [sp, #28]
 800b7da:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b7de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d028      	beq.n	800b836 <_dtoa_r+0xae6>
 800b7e4:	4649      	mov	r1, r9
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	220a      	movs	r2, #10
 800b7ea:	4658      	mov	r0, fp
 800b7ec:	f000 f9d6 	bl	800bb9c <__multadd>
 800b7f0:	42af      	cmp	r7, r5
 800b7f2:	4681      	mov	r9, r0
 800b7f4:	f04f 0300 	mov.w	r3, #0
 800b7f8:	f04f 020a 	mov.w	r2, #10
 800b7fc:	4639      	mov	r1, r7
 800b7fe:	4658      	mov	r0, fp
 800b800:	d107      	bne.n	800b812 <_dtoa_r+0xac2>
 800b802:	f000 f9cb 	bl	800bb9c <__multadd>
 800b806:	4607      	mov	r7, r0
 800b808:	4605      	mov	r5, r0
 800b80a:	9b07      	ldr	r3, [sp, #28]
 800b80c:	3301      	adds	r3, #1
 800b80e:	9307      	str	r3, [sp, #28]
 800b810:	e774      	b.n	800b6fc <_dtoa_r+0x9ac>
 800b812:	f000 f9c3 	bl	800bb9c <__multadd>
 800b816:	4629      	mov	r1, r5
 800b818:	4607      	mov	r7, r0
 800b81a:	2300      	movs	r3, #0
 800b81c:	220a      	movs	r2, #10
 800b81e:	4658      	mov	r0, fp
 800b820:	f000 f9bc 	bl	800bb9c <__multadd>
 800b824:	4605      	mov	r5, r0
 800b826:	e7f0      	b.n	800b80a <_dtoa_r+0xaba>
 800b828:	9b00      	ldr	r3, [sp, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	bfcc      	ite	gt
 800b82e:	461e      	movgt	r6, r3
 800b830:	2601      	movle	r6, #1
 800b832:	4456      	add	r6, sl
 800b834:	2700      	movs	r7, #0
 800b836:	4649      	mov	r1, r9
 800b838:	2201      	movs	r2, #1
 800b83a:	4658      	mov	r0, fp
 800b83c:	f000 fb5a 	bl	800bef4 <__lshift>
 800b840:	4621      	mov	r1, r4
 800b842:	4681      	mov	r9, r0
 800b844:	f000 fbc2 	bl	800bfcc <__mcmp>
 800b848:	2800      	cmp	r0, #0
 800b84a:	dcb0      	bgt.n	800b7ae <_dtoa_r+0xa5e>
 800b84c:	d102      	bne.n	800b854 <_dtoa_r+0xb04>
 800b84e:	f018 0f01 	tst.w	r8, #1
 800b852:	d1ac      	bne.n	800b7ae <_dtoa_r+0xa5e>
 800b854:	4633      	mov	r3, r6
 800b856:	461e      	mov	r6, r3
 800b858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b85c:	2a30      	cmp	r2, #48	@ 0x30
 800b85e:	d0fa      	beq.n	800b856 <_dtoa_r+0xb06>
 800b860:	e5c2      	b.n	800b3e8 <_dtoa_r+0x698>
 800b862:	459a      	cmp	sl, r3
 800b864:	d1a4      	bne.n	800b7b0 <_dtoa_r+0xa60>
 800b866:	9b04      	ldr	r3, [sp, #16]
 800b868:	3301      	adds	r3, #1
 800b86a:	9304      	str	r3, [sp, #16]
 800b86c:	2331      	movs	r3, #49	@ 0x31
 800b86e:	f88a 3000 	strb.w	r3, [sl]
 800b872:	e5b9      	b.n	800b3e8 <_dtoa_r+0x698>
 800b874:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b876:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b8d4 <_dtoa_r+0xb84>
 800b87a:	b11b      	cbz	r3, 800b884 <_dtoa_r+0xb34>
 800b87c:	f10a 0308 	add.w	r3, sl, #8
 800b880:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b882:	6013      	str	r3, [r2, #0]
 800b884:	4650      	mov	r0, sl
 800b886:	b019      	add	sp, #100	@ 0x64
 800b888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b88c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b88e:	2b01      	cmp	r3, #1
 800b890:	f77f ae37 	ble.w	800b502 <_dtoa_r+0x7b2>
 800b894:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b896:	930a      	str	r3, [sp, #40]	@ 0x28
 800b898:	2001      	movs	r0, #1
 800b89a:	e655      	b.n	800b548 <_dtoa_r+0x7f8>
 800b89c:	9b00      	ldr	r3, [sp, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	f77f aed6 	ble.w	800b650 <_dtoa_r+0x900>
 800b8a4:	4656      	mov	r6, sl
 800b8a6:	4621      	mov	r1, r4
 800b8a8:	4648      	mov	r0, r9
 800b8aa:	f7ff f9c8 	bl	800ac3e <quorem>
 800b8ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b8b2:	f806 8b01 	strb.w	r8, [r6], #1
 800b8b6:	9b00      	ldr	r3, [sp, #0]
 800b8b8:	eba6 020a 	sub.w	r2, r6, sl
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	ddb3      	ble.n	800b828 <_dtoa_r+0xad8>
 800b8c0:	4649      	mov	r1, r9
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	220a      	movs	r2, #10
 800b8c6:	4658      	mov	r0, fp
 800b8c8:	f000 f968 	bl	800bb9c <__multadd>
 800b8cc:	4681      	mov	r9, r0
 800b8ce:	e7ea      	b.n	800b8a6 <_dtoa_r+0xb56>
 800b8d0:	0800cacc 	.word	0x0800cacc
 800b8d4:	0800ca50 	.word	0x0800ca50

0800b8d8 <_free_r>:
 800b8d8:	b538      	push	{r3, r4, r5, lr}
 800b8da:	4605      	mov	r5, r0
 800b8dc:	2900      	cmp	r1, #0
 800b8de:	d041      	beq.n	800b964 <_free_r+0x8c>
 800b8e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8e4:	1f0c      	subs	r4, r1, #4
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	bfb8      	it	lt
 800b8ea:	18e4      	addlt	r4, r4, r3
 800b8ec:	f000 f8e8 	bl	800bac0 <__malloc_lock>
 800b8f0:	4a1d      	ldr	r2, [pc, #116]	@ (800b968 <_free_r+0x90>)
 800b8f2:	6813      	ldr	r3, [r2, #0]
 800b8f4:	b933      	cbnz	r3, 800b904 <_free_r+0x2c>
 800b8f6:	6063      	str	r3, [r4, #4]
 800b8f8:	6014      	str	r4, [r2, #0]
 800b8fa:	4628      	mov	r0, r5
 800b8fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b900:	f000 b8e4 	b.w	800bacc <__malloc_unlock>
 800b904:	42a3      	cmp	r3, r4
 800b906:	d908      	bls.n	800b91a <_free_r+0x42>
 800b908:	6820      	ldr	r0, [r4, #0]
 800b90a:	1821      	adds	r1, r4, r0
 800b90c:	428b      	cmp	r3, r1
 800b90e:	bf01      	itttt	eq
 800b910:	6819      	ldreq	r1, [r3, #0]
 800b912:	685b      	ldreq	r3, [r3, #4]
 800b914:	1809      	addeq	r1, r1, r0
 800b916:	6021      	streq	r1, [r4, #0]
 800b918:	e7ed      	b.n	800b8f6 <_free_r+0x1e>
 800b91a:	461a      	mov	r2, r3
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	b10b      	cbz	r3, 800b924 <_free_r+0x4c>
 800b920:	42a3      	cmp	r3, r4
 800b922:	d9fa      	bls.n	800b91a <_free_r+0x42>
 800b924:	6811      	ldr	r1, [r2, #0]
 800b926:	1850      	adds	r0, r2, r1
 800b928:	42a0      	cmp	r0, r4
 800b92a:	d10b      	bne.n	800b944 <_free_r+0x6c>
 800b92c:	6820      	ldr	r0, [r4, #0]
 800b92e:	4401      	add	r1, r0
 800b930:	1850      	adds	r0, r2, r1
 800b932:	4283      	cmp	r3, r0
 800b934:	6011      	str	r1, [r2, #0]
 800b936:	d1e0      	bne.n	800b8fa <_free_r+0x22>
 800b938:	6818      	ldr	r0, [r3, #0]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	6053      	str	r3, [r2, #4]
 800b93e:	4408      	add	r0, r1
 800b940:	6010      	str	r0, [r2, #0]
 800b942:	e7da      	b.n	800b8fa <_free_r+0x22>
 800b944:	d902      	bls.n	800b94c <_free_r+0x74>
 800b946:	230c      	movs	r3, #12
 800b948:	602b      	str	r3, [r5, #0]
 800b94a:	e7d6      	b.n	800b8fa <_free_r+0x22>
 800b94c:	6820      	ldr	r0, [r4, #0]
 800b94e:	1821      	adds	r1, r4, r0
 800b950:	428b      	cmp	r3, r1
 800b952:	bf04      	itt	eq
 800b954:	6819      	ldreq	r1, [r3, #0]
 800b956:	685b      	ldreq	r3, [r3, #4]
 800b958:	6063      	str	r3, [r4, #4]
 800b95a:	bf04      	itt	eq
 800b95c:	1809      	addeq	r1, r1, r0
 800b95e:	6021      	streq	r1, [r4, #0]
 800b960:	6054      	str	r4, [r2, #4]
 800b962:	e7ca      	b.n	800b8fa <_free_r+0x22>
 800b964:	bd38      	pop	{r3, r4, r5, pc}
 800b966:	bf00      	nop
 800b968:	2000054c 	.word	0x2000054c

0800b96c <malloc>:
 800b96c:	4b02      	ldr	r3, [pc, #8]	@ (800b978 <malloc+0xc>)
 800b96e:	4601      	mov	r1, r0
 800b970:	6818      	ldr	r0, [r3, #0]
 800b972:	f000 b825 	b.w	800b9c0 <_malloc_r>
 800b976:	bf00      	nop
 800b978:	20000048 	.word	0x20000048

0800b97c <sbrk_aligned>:
 800b97c:	b570      	push	{r4, r5, r6, lr}
 800b97e:	4e0f      	ldr	r6, [pc, #60]	@ (800b9bc <sbrk_aligned+0x40>)
 800b980:	460c      	mov	r4, r1
 800b982:	6831      	ldr	r1, [r6, #0]
 800b984:	4605      	mov	r5, r0
 800b986:	b911      	cbnz	r1, 800b98e <sbrk_aligned+0x12>
 800b988:	f000 ff2e 	bl	800c7e8 <_sbrk_r>
 800b98c:	6030      	str	r0, [r6, #0]
 800b98e:	4621      	mov	r1, r4
 800b990:	4628      	mov	r0, r5
 800b992:	f000 ff29 	bl	800c7e8 <_sbrk_r>
 800b996:	1c43      	adds	r3, r0, #1
 800b998:	d103      	bne.n	800b9a2 <sbrk_aligned+0x26>
 800b99a:	f04f 34ff 	mov.w	r4, #4294967295
 800b99e:	4620      	mov	r0, r4
 800b9a0:	bd70      	pop	{r4, r5, r6, pc}
 800b9a2:	1cc4      	adds	r4, r0, #3
 800b9a4:	f024 0403 	bic.w	r4, r4, #3
 800b9a8:	42a0      	cmp	r0, r4
 800b9aa:	d0f8      	beq.n	800b99e <sbrk_aligned+0x22>
 800b9ac:	1a21      	subs	r1, r4, r0
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	f000 ff1a 	bl	800c7e8 <_sbrk_r>
 800b9b4:	3001      	adds	r0, #1
 800b9b6:	d1f2      	bne.n	800b99e <sbrk_aligned+0x22>
 800b9b8:	e7ef      	b.n	800b99a <sbrk_aligned+0x1e>
 800b9ba:	bf00      	nop
 800b9bc:	20000548 	.word	0x20000548

0800b9c0 <_malloc_r>:
 800b9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9c4:	1ccd      	adds	r5, r1, #3
 800b9c6:	f025 0503 	bic.w	r5, r5, #3
 800b9ca:	3508      	adds	r5, #8
 800b9cc:	2d0c      	cmp	r5, #12
 800b9ce:	bf38      	it	cc
 800b9d0:	250c      	movcc	r5, #12
 800b9d2:	2d00      	cmp	r5, #0
 800b9d4:	4606      	mov	r6, r0
 800b9d6:	db01      	blt.n	800b9dc <_malloc_r+0x1c>
 800b9d8:	42a9      	cmp	r1, r5
 800b9da:	d904      	bls.n	800b9e6 <_malloc_r+0x26>
 800b9dc:	230c      	movs	r3, #12
 800b9de:	6033      	str	r3, [r6, #0]
 800b9e0:	2000      	movs	r0, #0
 800b9e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800babc <_malloc_r+0xfc>
 800b9ea:	f000 f869 	bl	800bac0 <__malloc_lock>
 800b9ee:	f8d8 3000 	ldr.w	r3, [r8]
 800b9f2:	461c      	mov	r4, r3
 800b9f4:	bb44      	cbnz	r4, 800ba48 <_malloc_r+0x88>
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	f7ff ffbf 	bl	800b97c <sbrk_aligned>
 800b9fe:	1c43      	adds	r3, r0, #1
 800ba00:	4604      	mov	r4, r0
 800ba02:	d158      	bne.n	800bab6 <_malloc_r+0xf6>
 800ba04:	f8d8 4000 	ldr.w	r4, [r8]
 800ba08:	4627      	mov	r7, r4
 800ba0a:	2f00      	cmp	r7, #0
 800ba0c:	d143      	bne.n	800ba96 <_malloc_r+0xd6>
 800ba0e:	2c00      	cmp	r4, #0
 800ba10:	d04b      	beq.n	800baaa <_malloc_r+0xea>
 800ba12:	6823      	ldr	r3, [r4, #0]
 800ba14:	4639      	mov	r1, r7
 800ba16:	4630      	mov	r0, r6
 800ba18:	eb04 0903 	add.w	r9, r4, r3
 800ba1c:	f000 fee4 	bl	800c7e8 <_sbrk_r>
 800ba20:	4581      	cmp	r9, r0
 800ba22:	d142      	bne.n	800baaa <_malloc_r+0xea>
 800ba24:	6821      	ldr	r1, [r4, #0]
 800ba26:	1a6d      	subs	r5, r5, r1
 800ba28:	4629      	mov	r1, r5
 800ba2a:	4630      	mov	r0, r6
 800ba2c:	f7ff ffa6 	bl	800b97c <sbrk_aligned>
 800ba30:	3001      	adds	r0, #1
 800ba32:	d03a      	beq.n	800baaa <_malloc_r+0xea>
 800ba34:	6823      	ldr	r3, [r4, #0]
 800ba36:	442b      	add	r3, r5
 800ba38:	6023      	str	r3, [r4, #0]
 800ba3a:	f8d8 3000 	ldr.w	r3, [r8]
 800ba3e:	685a      	ldr	r2, [r3, #4]
 800ba40:	bb62      	cbnz	r2, 800ba9c <_malloc_r+0xdc>
 800ba42:	f8c8 7000 	str.w	r7, [r8]
 800ba46:	e00f      	b.n	800ba68 <_malloc_r+0xa8>
 800ba48:	6822      	ldr	r2, [r4, #0]
 800ba4a:	1b52      	subs	r2, r2, r5
 800ba4c:	d420      	bmi.n	800ba90 <_malloc_r+0xd0>
 800ba4e:	2a0b      	cmp	r2, #11
 800ba50:	d917      	bls.n	800ba82 <_malloc_r+0xc2>
 800ba52:	1961      	adds	r1, r4, r5
 800ba54:	42a3      	cmp	r3, r4
 800ba56:	6025      	str	r5, [r4, #0]
 800ba58:	bf18      	it	ne
 800ba5a:	6059      	strne	r1, [r3, #4]
 800ba5c:	6863      	ldr	r3, [r4, #4]
 800ba5e:	bf08      	it	eq
 800ba60:	f8c8 1000 	streq.w	r1, [r8]
 800ba64:	5162      	str	r2, [r4, r5]
 800ba66:	604b      	str	r3, [r1, #4]
 800ba68:	4630      	mov	r0, r6
 800ba6a:	f000 f82f 	bl	800bacc <__malloc_unlock>
 800ba6e:	f104 000b 	add.w	r0, r4, #11
 800ba72:	1d23      	adds	r3, r4, #4
 800ba74:	f020 0007 	bic.w	r0, r0, #7
 800ba78:	1ac2      	subs	r2, r0, r3
 800ba7a:	bf1c      	itt	ne
 800ba7c:	1a1b      	subne	r3, r3, r0
 800ba7e:	50a3      	strne	r3, [r4, r2]
 800ba80:	e7af      	b.n	800b9e2 <_malloc_r+0x22>
 800ba82:	6862      	ldr	r2, [r4, #4]
 800ba84:	42a3      	cmp	r3, r4
 800ba86:	bf0c      	ite	eq
 800ba88:	f8c8 2000 	streq.w	r2, [r8]
 800ba8c:	605a      	strne	r2, [r3, #4]
 800ba8e:	e7eb      	b.n	800ba68 <_malloc_r+0xa8>
 800ba90:	4623      	mov	r3, r4
 800ba92:	6864      	ldr	r4, [r4, #4]
 800ba94:	e7ae      	b.n	800b9f4 <_malloc_r+0x34>
 800ba96:	463c      	mov	r4, r7
 800ba98:	687f      	ldr	r7, [r7, #4]
 800ba9a:	e7b6      	b.n	800ba0a <_malloc_r+0x4a>
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	42a3      	cmp	r3, r4
 800baa2:	d1fb      	bne.n	800ba9c <_malloc_r+0xdc>
 800baa4:	2300      	movs	r3, #0
 800baa6:	6053      	str	r3, [r2, #4]
 800baa8:	e7de      	b.n	800ba68 <_malloc_r+0xa8>
 800baaa:	230c      	movs	r3, #12
 800baac:	6033      	str	r3, [r6, #0]
 800baae:	4630      	mov	r0, r6
 800bab0:	f000 f80c 	bl	800bacc <__malloc_unlock>
 800bab4:	e794      	b.n	800b9e0 <_malloc_r+0x20>
 800bab6:	6005      	str	r5, [r0, #0]
 800bab8:	e7d6      	b.n	800ba68 <_malloc_r+0xa8>
 800baba:	bf00      	nop
 800babc:	2000054c 	.word	0x2000054c

0800bac0 <__malloc_lock>:
 800bac0:	4801      	ldr	r0, [pc, #4]	@ (800bac8 <__malloc_lock+0x8>)
 800bac2:	f7ff b8ac 	b.w	800ac1e <__retarget_lock_acquire_recursive>
 800bac6:	bf00      	nop
 800bac8:	20000544 	.word	0x20000544

0800bacc <__malloc_unlock>:
 800bacc:	4801      	ldr	r0, [pc, #4]	@ (800bad4 <__malloc_unlock+0x8>)
 800bace:	f7ff b8a7 	b.w	800ac20 <__retarget_lock_release_recursive>
 800bad2:	bf00      	nop
 800bad4:	20000544 	.word	0x20000544

0800bad8 <_Balloc>:
 800bad8:	b570      	push	{r4, r5, r6, lr}
 800bada:	69c6      	ldr	r6, [r0, #28]
 800badc:	4604      	mov	r4, r0
 800bade:	460d      	mov	r5, r1
 800bae0:	b976      	cbnz	r6, 800bb00 <_Balloc+0x28>
 800bae2:	2010      	movs	r0, #16
 800bae4:	f7ff ff42 	bl	800b96c <malloc>
 800bae8:	4602      	mov	r2, r0
 800baea:	61e0      	str	r0, [r4, #28]
 800baec:	b920      	cbnz	r0, 800baf8 <_Balloc+0x20>
 800baee:	4b18      	ldr	r3, [pc, #96]	@ (800bb50 <_Balloc+0x78>)
 800baf0:	4818      	ldr	r0, [pc, #96]	@ (800bb54 <_Balloc+0x7c>)
 800baf2:	216b      	movs	r1, #107	@ 0x6b
 800baf4:	f000 fe88 	bl	800c808 <__assert_func>
 800baf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bafc:	6006      	str	r6, [r0, #0]
 800bafe:	60c6      	str	r6, [r0, #12]
 800bb00:	69e6      	ldr	r6, [r4, #28]
 800bb02:	68f3      	ldr	r3, [r6, #12]
 800bb04:	b183      	cbz	r3, 800bb28 <_Balloc+0x50>
 800bb06:	69e3      	ldr	r3, [r4, #28]
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb0e:	b9b8      	cbnz	r0, 800bb40 <_Balloc+0x68>
 800bb10:	2101      	movs	r1, #1
 800bb12:	fa01 f605 	lsl.w	r6, r1, r5
 800bb16:	1d72      	adds	r2, r6, #5
 800bb18:	0092      	lsls	r2, r2, #2
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	f000 fe92 	bl	800c844 <_calloc_r>
 800bb20:	b160      	cbz	r0, 800bb3c <_Balloc+0x64>
 800bb22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb26:	e00e      	b.n	800bb46 <_Balloc+0x6e>
 800bb28:	2221      	movs	r2, #33	@ 0x21
 800bb2a:	2104      	movs	r1, #4
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	f000 fe89 	bl	800c844 <_calloc_r>
 800bb32:	69e3      	ldr	r3, [r4, #28]
 800bb34:	60f0      	str	r0, [r6, #12]
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1e4      	bne.n	800bb06 <_Balloc+0x2e>
 800bb3c:	2000      	movs	r0, #0
 800bb3e:	bd70      	pop	{r4, r5, r6, pc}
 800bb40:	6802      	ldr	r2, [r0, #0]
 800bb42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb46:	2300      	movs	r3, #0
 800bb48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb4c:	e7f7      	b.n	800bb3e <_Balloc+0x66>
 800bb4e:	bf00      	nop
 800bb50:	0800ca5d 	.word	0x0800ca5d
 800bb54:	0800cadd 	.word	0x0800cadd

0800bb58 <_Bfree>:
 800bb58:	b570      	push	{r4, r5, r6, lr}
 800bb5a:	69c6      	ldr	r6, [r0, #28]
 800bb5c:	4605      	mov	r5, r0
 800bb5e:	460c      	mov	r4, r1
 800bb60:	b976      	cbnz	r6, 800bb80 <_Bfree+0x28>
 800bb62:	2010      	movs	r0, #16
 800bb64:	f7ff ff02 	bl	800b96c <malloc>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	61e8      	str	r0, [r5, #28]
 800bb6c:	b920      	cbnz	r0, 800bb78 <_Bfree+0x20>
 800bb6e:	4b09      	ldr	r3, [pc, #36]	@ (800bb94 <_Bfree+0x3c>)
 800bb70:	4809      	ldr	r0, [pc, #36]	@ (800bb98 <_Bfree+0x40>)
 800bb72:	218f      	movs	r1, #143	@ 0x8f
 800bb74:	f000 fe48 	bl	800c808 <__assert_func>
 800bb78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb7c:	6006      	str	r6, [r0, #0]
 800bb7e:	60c6      	str	r6, [r0, #12]
 800bb80:	b13c      	cbz	r4, 800bb92 <_Bfree+0x3a>
 800bb82:	69eb      	ldr	r3, [r5, #28]
 800bb84:	6862      	ldr	r2, [r4, #4]
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb8c:	6021      	str	r1, [r4, #0]
 800bb8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb92:	bd70      	pop	{r4, r5, r6, pc}
 800bb94:	0800ca5d 	.word	0x0800ca5d
 800bb98:	0800cadd 	.word	0x0800cadd

0800bb9c <__multadd>:
 800bb9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba0:	690d      	ldr	r5, [r1, #16]
 800bba2:	4607      	mov	r7, r0
 800bba4:	460c      	mov	r4, r1
 800bba6:	461e      	mov	r6, r3
 800bba8:	f101 0c14 	add.w	ip, r1, #20
 800bbac:	2000      	movs	r0, #0
 800bbae:	f8dc 3000 	ldr.w	r3, [ip]
 800bbb2:	b299      	uxth	r1, r3
 800bbb4:	fb02 6101 	mla	r1, r2, r1, r6
 800bbb8:	0c1e      	lsrs	r6, r3, #16
 800bbba:	0c0b      	lsrs	r3, r1, #16
 800bbbc:	fb02 3306 	mla	r3, r2, r6, r3
 800bbc0:	b289      	uxth	r1, r1
 800bbc2:	3001      	adds	r0, #1
 800bbc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bbc8:	4285      	cmp	r5, r0
 800bbca:	f84c 1b04 	str.w	r1, [ip], #4
 800bbce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bbd2:	dcec      	bgt.n	800bbae <__multadd+0x12>
 800bbd4:	b30e      	cbz	r6, 800bc1a <__multadd+0x7e>
 800bbd6:	68a3      	ldr	r3, [r4, #8]
 800bbd8:	42ab      	cmp	r3, r5
 800bbda:	dc19      	bgt.n	800bc10 <__multadd+0x74>
 800bbdc:	6861      	ldr	r1, [r4, #4]
 800bbde:	4638      	mov	r0, r7
 800bbe0:	3101      	adds	r1, #1
 800bbe2:	f7ff ff79 	bl	800bad8 <_Balloc>
 800bbe6:	4680      	mov	r8, r0
 800bbe8:	b928      	cbnz	r0, 800bbf6 <__multadd+0x5a>
 800bbea:	4602      	mov	r2, r0
 800bbec:	4b0c      	ldr	r3, [pc, #48]	@ (800bc20 <__multadd+0x84>)
 800bbee:	480d      	ldr	r0, [pc, #52]	@ (800bc24 <__multadd+0x88>)
 800bbf0:	21ba      	movs	r1, #186	@ 0xba
 800bbf2:	f000 fe09 	bl	800c808 <__assert_func>
 800bbf6:	6922      	ldr	r2, [r4, #16]
 800bbf8:	3202      	adds	r2, #2
 800bbfa:	f104 010c 	add.w	r1, r4, #12
 800bbfe:	0092      	lsls	r2, r2, #2
 800bc00:	300c      	adds	r0, #12
 800bc02:	f7ff f80e 	bl	800ac22 <memcpy>
 800bc06:	4621      	mov	r1, r4
 800bc08:	4638      	mov	r0, r7
 800bc0a:	f7ff ffa5 	bl	800bb58 <_Bfree>
 800bc0e:	4644      	mov	r4, r8
 800bc10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc14:	3501      	adds	r5, #1
 800bc16:	615e      	str	r6, [r3, #20]
 800bc18:	6125      	str	r5, [r4, #16]
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc20:	0800cacc 	.word	0x0800cacc
 800bc24:	0800cadd 	.word	0x0800cadd

0800bc28 <__hi0bits>:
 800bc28:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	bf36      	itet	cc
 800bc30:	0403      	lslcc	r3, r0, #16
 800bc32:	2000      	movcs	r0, #0
 800bc34:	2010      	movcc	r0, #16
 800bc36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bc3a:	bf3c      	itt	cc
 800bc3c:	021b      	lslcc	r3, r3, #8
 800bc3e:	3008      	addcc	r0, #8
 800bc40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc44:	bf3c      	itt	cc
 800bc46:	011b      	lslcc	r3, r3, #4
 800bc48:	3004      	addcc	r0, #4
 800bc4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc4e:	bf3c      	itt	cc
 800bc50:	009b      	lslcc	r3, r3, #2
 800bc52:	3002      	addcc	r0, #2
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	db05      	blt.n	800bc64 <__hi0bits+0x3c>
 800bc58:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bc5c:	f100 0001 	add.w	r0, r0, #1
 800bc60:	bf08      	it	eq
 800bc62:	2020      	moveq	r0, #32
 800bc64:	4770      	bx	lr

0800bc66 <__lo0bits>:
 800bc66:	6803      	ldr	r3, [r0, #0]
 800bc68:	4602      	mov	r2, r0
 800bc6a:	f013 0007 	ands.w	r0, r3, #7
 800bc6e:	d00b      	beq.n	800bc88 <__lo0bits+0x22>
 800bc70:	07d9      	lsls	r1, r3, #31
 800bc72:	d421      	bmi.n	800bcb8 <__lo0bits+0x52>
 800bc74:	0798      	lsls	r0, r3, #30
 800bc76:	bf49      	itett	mi
 800bc78:	085b      	lsrmi	r3, r3, #1
 800bc7a:	089b      	lsrpl	r3, r3, #2
 800bc7c:	2001      	movmi	r0, #1
 800bc7e:	6013      	strmi	r3, [r2, #0]
 800bc80:	bf5c      	itt	pl
 800bc82:	6013      	strpl	r3, [r2, #0]
 800bc84:	2002      	movpl	r0, #2
 800bc86:	4770      	bx	lr
 800bc88:	b299      	uxth	r1, r3
 800bc8a:	b909      	cbnz	r1, 800bc90 <__lo0bits+0x2a>
 800bc8c:	0c1b      	lsrs	r3, r3, #16
 800bc8e:	2010      	movs	r0, #16
 800bc90:	b2d9      	uxtb	r1, r3
 800bc92:	b909      	cbnz	r1, 800bc98 <__lo0bits+0x32>
 800bc94:	3008      	adds	r0, #8
 800bc96:	0a1b      	lsrs	r3, r3, #8
 800bc98:	0719      	lsls	r1, r3, #28
 800bc9a:	bf04      	itt	eq
 800bc9c:	091b      	lsreq	r3, r3, #4
 800bc9e:	3004      	addeq	r0, #4
 800bca0:	0799      	lsls	r1, r3, #30
 800bca2:	bf04      	itt	eq
 800bca4:	089b      	lsreq	r3, r3, #2
 800bca6:	3002      	addeq	r0, #2
 800bca8:	07d9      	lsls	r1, r3, #31
 800bcaa:	d403      	bmi.n	800bcb4 <__lo0bits+0x4e>
 800bcac:	085b      	lsrs	r3, r3, #1
 800bcae:	f100 0001 	add.w	r0, r0, #1
 800bcb2:	d003      	beq.n	800bcbc <__lo0bits+0x56>
 800bcb4:	6013      	str	r3, [r2, #0]
 800bcb6:	4770      	bx	lr
 800bcb8:	2000      	movs	r0, #0
 800bcba:	4770      	bx	lr
 800bcbc:	2020      	movs	r0, #32
 800bcbe:	4770      	bx	lr

0800bcc0 <__i2b>:
 800bcc0:	b510      	push	{r4, lr}
 800bcc2:	460c      	mov	r4, r1
 800bcc4:	2101      	movs	r1, #1
 800bcc6:	f7ff ff07 	bl	800bad8 <_Balloc>
 800bcca:	4602      	mov	r2, r0
 800bccc:	b928      	cbnz	r0, 800bcda <__i2b+0x1a>
 800bcce:	4b05      	ldr	r3, [pc, #20]	@ (800bce4 <__i2b+0x24>)
 800bcd0:	4805      	ldr	r0, [pc, #20]	@ (800bce8 <__i2b+0x28>)
 800bcd2:	f240 1145 	movw	r1, #325	@ 0x145
 800bcd6:	f000 fd97 	bl	800c808 <__assert_func>
 800bcda:	2301      	movs	r3, #1
 800bcdc:	6144      	str	r4, [r0, #20]
 800bcde:	6103      	str	r3, [r0, #16]
 800bce0:	bd10      	pop	{r4, pc}
 800bce2:	bf00      	nop
 800bce4:	0800cacc 	.word	0x0800cacc
 800bce8:	0800cadd 	.word	0x0800cadd

0800bcec <__multiply>:
 800bcec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf0:	4614      	mov	r4, r2
 800bcf2:	690a      	ldr	r2, [r1, #16]
 800bcf4:	6923      	ldr	r3, [r4, #16]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	bfa8      	it	ge
 800bcfa:	4623      	movge	r3, r4
 800bcfc:	460f      	mov	r7, r1
 800bcfe:	bfa4      	itt	ge
 800bd00:	460c      	movge	r4, r1
 800bd02:	461f      	movge	r7, r3
 800bd04:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bd08:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bd0c:	68a3      	ldr	r3, [r4, #8]
 800bd0e:	6861      	ldr	r1, [r4, #4]
 800bd10:	eb0a 0609 	add.w	r6, sl, r9
 800bd14:	42b3      	cmp	r3, r6
 800bd16:	b085      	sub	sp, #20
 800bd18:	bfb8      	it	lt
 800bd1a:	3101      	addlt	r1, #1
 800bd1c:	f7ff fedc 	bl	800bad8 <_Balloc>
 800bd20:	b930      	cbnz	r0, 800bd30 <__multiply+0x44>
 800bd22:	4602      	mov	r2, r0
 800bd24:	4b44      	ldr	r3, [pc, #272]	@ (800be38 <__multiply+0x14c>)
 800bd26:	4845      	ldr	r0, [pc, #276]	@ (800be3c <__multiply+0x150>)
 800bd28:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bd2c:	f000 fd6c 	bl	800c808 <__assert_func>
 800bd30:	f100 0514 	add.w	r5, r0, #20
 800bd34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd38:	462b      	mov	r3, r5
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	4543      	cmp	r3, r8
 800bd3e:	d321      	bcc.n	800bd84 <__multiply+0x98>
 800bd40:	f107 0114 	add.w	r1, r7, #20
 800bd44:	f104 0214 	add.w	r2, r4, #20
 800bd48:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bd4c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bd50:	9302      	str	r3, [sp, #8]
 800bd52:	1b13      	subs	r3, r2, r4
 800bd54:	3b15      	subs	r3, #21
 800bd56:	f023 0303 	bic.w	r3, r3, #3
 800bd5a:	3304      	adds	r3, #4
 800bd5c:	f104 0715 	add.w	r7, r4, #21
 800bd60:	42ba      	cmp	r2, r7
 800bd62:	bf38      	it	cc
 800bd64:	2304      	movcc	r3, #4
 800bd66:	9301      	str	r3, [sp, #4]
 800bd68:	9b02      	ldr	r3, [sp, #8]
 800bd6a:	9103      	str	r1, [sp, #12]
 800bd6c:	428b      	cmp	r3, r1
 800bd6e:	d80c      	bhi.n	800bd8a <__multiply+0x9e>
 800bd70:	2e00      	cmp	r6, #0
 800bd72:	dd03      	ble.n	800bd7c <__multiply+0x90>
 800bd74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d05b      	beq.n	800be34 <__multiply+0x148>
 800bd7c:	6106      	str	r6, [r0, #16]
 800bd7e:	b005      	add	sp, #20
 800bd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd84:	f843 2b04 	str.w	r2, [r3], #4
 800bd88:	e7d8      	b.n	800bd3c <__multiply+0x50>
 800bd8a:	f8b1 a000 	ldrh.w	sl, [r1]
 800bd8e:	f1ba 0f00 	cmp.w	sl, #0
 800bd92:	d024      	beq.n	800bdde <__multiply+0xf2>
 800bd94:	f104 0e14 	add.w	lr, r4, #20
 800bd98:	46a9      	mov	r9, r5
 800bd9a:	f04f 0c00 	mov.w	ip, #0
 800bd9e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bda2:	f8d9 3000 	ldr.w	r3, [r9]
 800bda6:	fa1f fb87 	uxth.w	fp, r7
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	fb0a 330b 	mla	r3, sl, fp, r3
 800bdb0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bdb4:	f8d9 7000 	ldr.w	r7, [r9]
 800bdb8:	4463      	add	r3, ip
 800bdba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bdbe:	fb0a c70b 	mla	r7, sl, fp, ip
 800bdc2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bdcc:	4572      	cmp	r2, lr
 800bdce:	f849 3b04 	str.w	r3, [r9], #4
 800bdd2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bdd6:	d8e2      	bhi.n	800bd9e <__multiply+0xb2>
 800bdd8:	9b01      	ldr	r3, [sp, #4]
 800bdda:	f845 c003 	str.w	ip, [r5, r3]
 800bdde:	9b03      	ldr	r3, [sp, #12]
 800bde0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bde4:	3104      	adds	r1, #4
 800bde6:	f1b9 0f00 	cmp.w	r9, #0
 800bdea:	d021      	beq.n	800be30 <__multiply+0x144>
 800bdec:	682b      	ldr	r3, [r5, #0]
 800bdee:	f104 0c14 	add.w	ip, r4, #20
 800bdf2:	46ae      	mov	lr, r5
 800bdf4:	f04f 0a00 	mov.w	sl, #0
 800bdf8:	f8bc b000 	ldrh.w	fp, [ip]
 800bdfc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800be00:	fb09 770b 	mla	r7, r9, fp, r7
 800be04:	4457      	add	r7, sl
 800be06:	b29b      	uxth	r3, r3
 800be08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800be0c:	f84e 3b04 	str.w	r3, [lr], #4
 800be10:	f85c 3b04 	ldr.w	r3, [ip], #4
 800be14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800be18:	f8be 3000 	ldrh.w	r3, [lr]
 800be1c:	fb09 330a 	mla	r3, r9, sl, r3
 800be20:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800be24:	4562      	cmp	r2, ip
 800be26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800be2a:	d8e5      	bhi.n	800bdf8 <__multiply+0x10c>
 800be2c:	9f01      	ldr	r7, [sp, #4]
 800be2e:	51eb      	str	r3, [r5, r7]
 800be30:	3504      	adds	r5, #4
 800be32:	e799      	b.n	800bd68 <__multiply+0x7c>
 800be34:	3e01      	subs	r6, #1
 800be36:	e79b      	b.n	800bd70 <__multiply+0x84>
 800be38:	0800cacc 	.word	0x0800cacc
 800be3c:	0800cadd 	.word	0x0800cadd

0800be40 <__pow5mult>:
 800be40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be44:	4615      	mov	r5, r2
 800be46:	f012 0203 	ands.w	r2, r2, #3
 800be4a:	4607      	mov	r7, r0
 800be4c:	460e      	mov	r6, r1
 800be4e:	d007      	beq.n	800be60 <__pow5mult+0x20>
 800be50:	4c25      	ldr	r4, [pc, #148]	@ (800bee8 <__pow5mult+0xa8>)
 800be52:	3a01      	subs	r2, #1
 800be54:	2300      	movs	r3, #0
 800be56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be5a:	f7ff fe9f 	bl	800bb9c <__multadd>
 800be5e:	4606      	mov	r6, r0
 800be60:	10ad      	asrs	r5, r5, #2
 800be62:	d03d      	beq.n	800bee0 <__pow5mult+0xa0>
 800be64:	69fc      	ldr	r4, [r7, #28]
 800be66:	b97c      	cbnz	r4, 800be88 <__pow5mult+0x48>
 800be68:	2010      	movs	r0, #16
 800be6a:	f7ff fd7f 	bl	800b96c <malloc>
 800be6e:	4602      	mov	r2, r0
 800be70:	61f8      	str	r0, [r7, #28]
 800be72:	b928      	cbnz	r0, 800be80 <__pow5mult+0x40>
 800be74:	4b1d      	ldr	r3, [pc, #116]	@ (800beec <__pow5mult+0xac>)
 800be76:	481e      	ldr	r0, [pc, #120]	@ (800bef0 <__pow5mult+0xb0>)
 800be78:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800be7c:	f000 fcc4 	bl	800c808 <__assert_func>
 800be80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be84:	6004      	str	r4, [r0, #0]
 800be86:	60c4      	str	r4, [r0, #12]
 800be88:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800be8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be90:	b94c      	cbnz	r4, 800bea6 <__pow5mult+0x66>
 800be92:	f240 2171 	movw	r1, #625	@ 0x271
 800be96:	4638      	mov	r0, r7
 800be98:	f7ff ff12 	bl	800bcc0 <__i2b>
 800be9c:	2300      	movs	r3, #0
 800be9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bea2:	4604      	mov	r4, r0
 800bea4:	6003      	str	r3, [r0, #0]
 800bea6:	f04f 0900 	mov.w	r9, #0
 800beaa:	07eb      	lsls	r3, r5, #31
 800beac:	d50a      	bpl.n	800bec4 <__pow5mult+0x84>
 800beae:	4631      	mov	r1, r6
 800beb0:	4622      	mov	r2, r4
 800beb2:	4638      	mov	r0, r7
 800beb4:	f7ff ff1a 	bl	800bcec <__multiply>
 800beb8:	4631      	mov	r1, r6
 800beba:	4680      	mov	r8, r0
 800bebc:	4638      	mov	r0, r7
 800bebe:	f7ff fe4b 	bl	800bb58 <_Bfree>
 800bec2:	4646      	mov	r6, r8
 800bec4:	106d      	asrs	r5, r5, #1
 800bec6:	d00b      	beq.n	800bee0 <__pow5mult+0xa0>
 800bec8:	6820      	ldr	r0, [r4, #0]
 800beca:	b938      	cbnz	r0, 800bedc <__pow5mult+0x9c>
 800becc:	4622      	mov	r2, r4
 800bece:	4621      	mov	r1, r4
 800bed0:	4638      	mov	r0, r7
 800bed2:	f7ff ff0b 	bl	800bcec <__multiply>
 800bed6:	6020      	str	r0, [r4, #0]
 800bed8:	f8c0 9000 	str.w	r9, [r0]
 800bedc:	4604      	mov	r4, r0
 800bede:	e7e4      	b.n	800beaa <__pow5mult+0x6a>
 800bee0:	4630      	mov	r0, r6
 800bee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bee6:	bf00      	nop
 800bee8:	0800cb38 	.word	0x0800cb38
 800beec:	0800ca5d 	.word	0x0800ca5d
 800bef0:	0800cadd 	.word	0x0800cadd

0800bef4 <__lshift>:
 800bef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bef8:	460c      	mov	r4, r1
 800befa:	6849      	ldr	r1, [r1, #4]
 800befc:	6923      	ldr	r3, [r4, #16]
 800befe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf02:	68a3      	ldr	r3, [r4, #8]
 800bf04:	4607      	mov	r7, r0
 800bf06:	4691      	mov	r9, r2
 800bf08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf0c:	f108 0601 	add.w	r6, r8, #1
 800bf10:	42b3      	cmp	r3, r6
 800bf12:	db0b      	blt.n	800bf2c <__lshift+0x38>
 800bf14:	4638      	mov	r0, r7
 800bf16:	f7ff fddf 	bl	800bad8 <_Balloc>
 800bf1a:	4605      	mov	r5, r0
 800bf1c:	b948      	cbnz	r0, 800bf32 <__lshift+0x3e>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	4b28      	ldr	r3, [pc, #160]	@ (800bfc4 <__lshift+0xd0>)
 800bf22:	4829      	ldr	r0, [pc, #164]	@ (800bfc8 <__lshift+0xd4>)
 800bf24:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bf28:	f000 fc6e 	bl	800c808 <__assert_func>
 800bf2c:	3101      	adds	r1, #1
 800bf2e:	005b      	lsls	r3, r3, #1
 800bf30:	e7ee      	b.n	800bf10 <__lshift+0x1c>
 800bf32:	2300      	movs	r3, #0
 800bf34:	f100 0114 	add.w	r1, r0, #20
 800bf38:	f100 0210 	add.w	r2, r0, #16
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	4553      	cmp	r3, sl
 800bf40:	db33      	blt.n	800bfaa <__lshift+0xb6>
 800bf42:	6920      	ldr	r0, [r4, #16]
 800bf44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf48:	f104 0314 	add.w	r3, r4, #20
 800bf4c:	f019 091f 	ands.w	r9, r9, #31
 800bf50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf58:	d02b      	beq.n	800bfb2 <__lshift+0xbe>
 800bf5a:	f1c9 0e20 	rsb	lr, r9, #32
 800bf5e:	468a      	mov	sl, r1
 800bf60:	2200      	movs	r2, #0
 800bf62:	6818      	ldr	r0, [r3, #0]
 800bf64:	fa00 f009 	lsl.w	r0, r0, r9
 800bf68:	4310      	orrs	r0, r2
 800bf6a:	f84a 0b04 	str.w	r0, [sl], #4
 800bf6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf72:	459c      	cmp	ip, r3
 800bf74:	fa22 f20e 	lsr.w	r2, r2, lr
 800bf78:	d8f3      	bhi.n	800bf62 <__lshift+0x6e>
 800bf7a:	ebac 0304 	sub.w	r3, ip, r4
 800bf7e:	3b15      	subs	r3, #21
 800bf80:	f023 0303 	bic.w	r3, r3, #3
 800bf84:	3304      	adds	r3, #4
 800bf86:	f104 0015 	add.w	r0, r4, #21
 800bf8a:	4584      	cmp	ip, r0
 800bf8c:	bf38      	it	cc
 800bf8e:	2304      	movcc	r3, #4
 800bf90:	50ca      	str	r2, [r1, r3]
 800bf92:	b10a      	cbz	r2, 800bf98 <__lshift+0xa4>
 800bf94:	f108 0602 	add.w	r6, r8, #2
 800bf98:	3e01      	subs	r6, #1
 800bf9a:	4638      	mov	r0, r7
 800bf9c:	612e      	str	r6, [r5, #16]
 800bf9e:	4621      	mov	r1, r4
 800bfa0:	f7ff fdda 	bl	800bb58 <_Bfree>
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800bfae:	3301      	adds	r3, #1
 800bfb0:	e7c5      	b.n	800bf3e <__lshift+0x4a>
 800bfb2:	3904      	subs	r1, #4
 800bfb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfb8:	f841 2f04 	str.w	r2, [r1, #4]!
 800bfbc:	459c      	cmp	ip, r3
 800bfbe:	d8f9      	bhi.n	800bfb4 <__lshift+0xc0>
 800bfc0:	e7ea      	b.n	800bf98 <__lshift+0xa4>
 800bfc2:	bf00      	nop
 800bfc4:	0800cacc 	.word	0x0800cacc
 800bfc8:	0800cadd 	.word	0x0800cadd

0800bfcc <__mcmp>:
 800bfcc:	690a      	ldr	r2, [r1, #16]
 800bfce:	4603      	mov	r3, r0
 800bfd0:	6900      	ldr	r0, [r0, #16]
 800bfd2:	1a80      	subs	r0, r0, r2
 800bfd4:	b530      	push	{r4, r5, lr}
 800bfd6:	d10e      	bne.n	800bff6 <__mcmp+0x2a>
 800bfd8:	3314      	adds	r3, #20
 800bfda:	3114      	adds	r1, #20
 800bfdc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bfe0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bfe4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bfe8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bfec:	4295      	cmp	r5, r2
 800bfee:	d003      	beq.n	800bff8 <__mcmp+0x2c>
 800bff0:	d205      	bcs.n	800bffe <__mcmp+0x32>
 800bff2:	f04f 30ff 	mov.w	r0, #4294967295
 800bff6:	bd30      	pop	{r4, r5, pc}
 800bff8:	42a3      	cmp	r3, r4
 800bffa:	d3f3      	bcc.n	800bfe4 <__mcmp+0x18>
 800bffc:	e7fb      	b.n	800bff6 <__mcmp+0x2a>
 800bffe:	2001      	movs	r0, #1
 800c000:	e7f9      	b.n	800bff6 <__mcmp+0x2a>
	...

0800c004 <__mdiff>:
 800c004:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c008:	4689      	mov	r9, r1
 800c00a:	4606      	mov	r6, r0
 800c00c:	4611      	mov	r1, r2
 800c00e:	4648      	mov	r0, r9
 800c010:	4614      	mov	r4, r2
 800c012:	f7ff ffdb 	bl	800bfcc <__mcmp>
 800c016:	1e05      	subs	r5, r0, #0
 800c018:	d112      	bne.n	800c040 <__mdiff+0x3c>
 800c01a:	4629      	mov	r1, r5
 800c01c:	4630      	mov	r0, r6
 800c01e:	f7ff fd5b 	bl	800bad8 <_Balloc>
 800c022:	4602      	mov	r2, r0
 800c024:	b928      	cbnz	r0, 800c032 <__mdiff+0x2e>
 800c026:	4b3f      	ldr	r3, [pc, #252]	@ (800c124 <__mdiff+0x120>)
 800c028:	f240 2137 	movw	r1, #567	@ 0x237
 800c02c:	483e      	ldr	r0, [pc, #248]	@ (800c128 <__mdiff+0x124>)
 800c02e:	f000 fbeb 	bl	800c808 <__assert_func>
 800c032:	2301      	movs	r3, #1
 800c034:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c038:	4610      	mov	r0, r2
 800c03a:	b003      	add	sp, #12
 800c03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c040:	bfbc      	itt	lt
 800c042:	464b      	movlt	r3, r9
 800c044:	46a1      	movlt	r9, r4
 800c046:	4630      	mov	r0, r6
 800c048:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c04c:	bfba      	itte	lt
 800c04e:	461c      	movlt	r4, r3
 800c050:	2501      	movlt	r5, #1
 800c052:	2500      	movge	r5, #0
 800c054:	f7ff fd40 	bl	800bad8 <_Balloc>
 800c058:	4602      	mov	r2, r0
 800c05a:	b918      	cbnz	r0, 800c064 <__mdiff+0x60>
 800c05c:	4b31      	ldr	r3, [pc, #196]	@ (800c124 <__mdiff+0x120>)
 800c05e:	f240 2145 	movw	r1, #581	@ 0x245
 800c062:	e7e3      	b.n	800c02c <__mdiff+0x28>
 800c064:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c068:	6926      	ldr	r6, [r4, #16]
 800c06a:	60c5      	str	r5, [r0, #12]
 800c06c:	f109 0310 	add.w	r3, r9, #16
 800c070:	f109 0514 	add.w	r5, r9, #20
 800c074:	f104 0e14 	add.w	lr, r4, #20
 800c078:	f100 0b14 	add.w	fp, r0, #20
 800c07c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c080:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c084:	9301      	str	r3, [sp, #4]
 800c086:	46d9      	mov	r9, fp
 800c088:	f04f 0c00 	mov.w	ip, #0
 800c08c:	9b01      	ldr	r3, [sp, #4]
 800c08e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c092:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c096:	9301      	str	r3, [sp, #4]
 800c098:	fa1f f38a 	uxth.w	r3, sl
 800c09c:	4619      	mov	r1, r3
 800c09e:	b283      	uxth	r3, r0
 800c0a0:	1acb      	subs	r3, r1, r3
 800c0a2:	0c00      	lsrs	r0, r0, #16
 800c0a4:	4463      	add	r3, ip
 800c0a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c0aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c0b4:	4576      	cmp	r6, lr
 800c0b6:	f849 3b04 	str.w	r3, [r9], #4
 800c0ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c0be:	d8e5      	bhi.n	800c08c <__mdiff+0x88>
 800c0c0:	1b33      	subs	r3, r6, r4
 800c0c2:	3b15      	subs	r3, #21
 800c0c4:	f023 0303 	bic.w	r3, r3, #3
 800c0c8:	3415      	adds	r4, #21
 800c0ca:	3304      	adds	r3, #4
 800c0cc:	42a6      	cmp	r6, r4
 800c0ce:	bf38      	it	cc
 800c0d0:	2304      	movcc	r3, #4
 800c0d2:	441d      	add	r5, r3
 800c0d4:	445b      	add	r3, fp
 800c0d6:	461e      	mov	r6, r3
 800c0d8:	462c      	mov	r4, r5
 800c0da:	4544      	cmp	r4, r8
 800c0dc:	d30e      	bcc.n	800c0fc <__mdiff+0xf8>
 800c0de:	f108 0103 	add.w	r1, r8, #3
 800c0e2:	1b49      	subs	r1, r1, r5
 800c0e4:	f021 0103 	bic.w	r1, r1, #3
 800c0e8:	3d03      	subs	r5, #3
 800c0ea:	45a8      	cmp	r8, r5
 800c0ec:	bf38      	it	cc
 800c0ee:	2100      	movcc	r1, #0
 800c0f0:	440b      	add	r3, r1
 800c0f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c0f6:	b191      	cbz	r1, 800c11e <__mdiff+0x11a>
 800c0f8:	6117      	str	r7, [r2, #16]
 800c0fa:	e79d      	b.n	800c038 <__mdiff+0x34>
 800c0fc:	f854 1b04 	ldr.w	r1, [r4], #4
 800c100:	46e6      	mov	lr, ip
 800c102:	0c08      	lsrs	r0, r1, #16
 800c104:	fa1c fc81 	uxtah	ip, ip, r1
 800c108:	4471      	add	r1, lr
 800c10a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c10e:	b289      	uxth	r1, r1
 800c110:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c114:	f846 1b04 	str.w	r1, [r6], #4
 800c118:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c11c:	e7dd      	b.n	800c0da <__mdiff+0xd6>
 800c11e:	3f01      	subs	r7, #1
 800c120:	e7e7      	b.n	800c0f2 <__mdiff+0xee>
 800c122:	bf00      	nop
 800c124:	0800cacc 	.word	0x0800cacc
 800c128:	0800cadd 	.word	0x0800cadd

0800c12c <__d2b>:
 800c12c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c130:	460f      	mov	r7, r1
 800c132:	2101      	movs	r1, #1
 800c134:	ec59 8b10 	vmov	r8, r9, d0
 800c138:	4616      	mov	r6, r2
 800c13a:	f7ff fccd 	bl	800bad8 <_Balloc>
 800c13e:	4604      	mov	r4, r0
 800c140:	b930      	cbnz	r0, 800c150 <__d2b+0x24>
 800c142:	4602      	mov	r2, r0
 800c144:	4b23      	ldr	r3, [pc, #140]	@ (800c1d4 <__d2b+0xa8>)
 800c146:	4824      	ldr	r0, [pc, #144]	@ (800c1d8 <__d2b+0xac>)
 800c148:	f240 310f 	movw	r1, #783	@ 0x30f
 800c14c:	f000 fb5c 	bl	800c808 <__assert_func>
 800c150:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c154:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c158:	b10d      	cbz	r5, 800c15e <__d2b+0x32>
 800c15a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c15e:	9301      	str	r3, [sp, #4]
 800c160:	f1b8 0300 	subs.w	r3, r8, #0
 800c164:	d023      	beq.n	800c1ae <__d2b+0x82>
 800c166:	4668      	mov	r0, sp
 800c168:	9300      	str	r3, [sp, #0]
 800c16a:	f7ff fd7c 	bl	800bc66 <__lo0bits>
 800c16e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c172:	b1d0      	cbz	r0, 800c1aa <__d2b+0x7e>
 800c174:	f1c0 0320 	rsb	r3, r0, #32
 800c178:	fa02 f303 	lsl.w	r3, r2, r3
 800c17c:	430b      	orrs	r3, r1
 800c17e:	40c2      	lsrs	r2, r0
 800c180:	6163      	str	r3, [r4, #20]
 800c182:	9201      	str	r2, [sp, #4]
 800c184:	9b01      	ldr	r3, [sp, #4]
 800c186:	61a3      	str	r3, [r4, #24]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	bf0c      	ite	eq
 800c18c:	2201      	moveq	r2, #1
 800c18e:	2202      	movne	r2, #2
 800c190:	6122      	str	r2, [r4, #16]
 800c192:	b1a5      	cbz	r5, 800c1be <__d2b+0x92>
 800c194:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c198:	4405      	add	r5, r0
 800c19a:	603d      	str	r5, [r7, #0]
 800c19c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c1a0:	6030      	str	r0, [r6, #0]
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	b003      	add	sp, #12
 800c1a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1aa:	6161      	str	r1, [r4, #20]
 800c1ac:	e7ea      	b.n	800c184 <__d2b+0x58>
 800c1ae:	a801      	add	r0, sp, #4
 800c1b0:	f7ff fd59 	bl	800bc66 <__lo0bits>
 800c1b4:	9b01      	ldr	r3, [sp, #4]
 800c1b6:	6163      	str	r3, [r4, #20]
 800c1b8:	3020      	adds	r0, #32
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	e7e8      	b.n	800c190 <__d2b+0x64>
 800c1be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c1c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c1c6:	6038      	str	r0, [r7, #0]
 800c1c8:	6918      	ldr	r0, [r3, #16]
 800c1ca:	f7ff fd2d 	bl	800bc28 <__hi0bits>
 800c1ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c1d2:	e7e5      	b.n	800c1a0 <__d2b+0x74>
 800c1d4:	0800cacc 	.word	0x0800cacc
 800c1d8:	0800cadd 	.word	0x0800cadd

0800c1dc <__sfputc_r>:
 800c1dc:	6893      	ldr	r3, [r2, #8]
 800c1de:	3b01      	subs	r3, #1
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	b410      	push	{r4}
 800c1e4:	6093      	str	r3, [r2, #8]
 800c1e6:	da08      	bge.n	800c1fa <__sfputc_r+0x1e>
 800c1e8:	6994      	ldr	r4, [r2, #24]
 800c1ea:	42a3      	cmp	r3, r4
 800c1ec:	db01      	blt.n	800c1f2 <__sfputc_r+0x16>
 800c1ee:	290a      	cmp	r1, #10
 800c1f0:	d103      	bne.n	800c1fa <__sfputc_r+0x1e>
 800c1f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1f6:	f000 ba41 	b.w	800c67c <__swbuf_r>
 800c1fa:	6813      	ldr	r3, [r2, #0]
 800c1fc:	1c58      	adds	r0, r3, #1
 800c1fe:	6010      	str	r0, [r2, #0]
 800c200:	7019      	strb	r1, [r3, #0]
 800c202:	4608      	mov	r0, r1
 800c204:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c208:	4770      	bx	lr

0800c20a <__sfputs_r>:
 800c20a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c20c:	4606      	mov	r6, r0
 800c20e:	460f      	mov	r7, r1
 800c210:	4614      	mov	r4, r2
 800c212:	18d5      	adds	r5, r2, r3
 800c214:	42ac      	cmp	r4, r5
 800c216:	d101      	bne.n	800c21c <__sfputs_r+0x12>
 800c218:	2000      	movs	r0, #0
 800c21a:	e007      	b.n	800c22c <__sfputs_r+0x22>
 800c21c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c220:	463a      	mov	r2, r7
 800c222:	4630      	mov	r0, r6
 800c224:	f7ff ffda 	bl	800c1dc <__sfputc_r>
 800c228:	1c43      	adds	r3, r0, #1
 800c22a:	d1f3      	bne.n	800c214 <__sfputs_r+0xa>
 800c22c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c230 <_vfiprintf_r>:
 800c230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c234:	460d      	mov	r5, r1
 800c236:	b09d      	sub	sp, #116	@ 0x74
 800c238:	4614      	mov	r4, r2
 800c23a:	4698      	mov	r8, r3
 800c23c:	4606      	mov	r6, r0
 800c23e:	b118      	cbz	r0, 800c248 <_vfiprintf_r+0x18>
 800c240:	6a03      	ldr	r3, [r0, #32]
 800c242:	b90b      	cbnz	r3, 800c248 <_vfiprintf_r+0x18>
 800c244:	f7fe fb14 	bl	800a870 <__sinit>
 800c248:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c24a:	07d9      	lsls	r1, r3, #31
 800c24c:	d405      	bmi.n	800c25a <_vfiprintf_r+0x2a>
 800c24e:	89ab      	ldrh	r3, [r5, #12]
 800c250:	059a      	lsls	r2, r3, #22
 800c252:	d402      	bmi.n	800c25a <_vfiprintf_r+0x2a>
 800c254:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c256:	f7fe fce2 	bl	800ac1e <__retarget_lock_acquire_recursive>
 800c25a:	89ab      	ldrh	r3, [r5, #12]
 800c25c:	071b      	lsls	r3, r3, #28
 800c25e:	d501      	bpl.n	800c264 <_vfiprintf_r+0x34>
 800c260:	692b      	ldr	r3, [r5, #16]
 800c262:	b99b      	cbnz	r3, 800c28c <_vfiprintf_r+0x5c>
 800c264:	4629      	mov	r1, r5
 800c266:	4630      	mov	r0, r6
 800c268:	f000 fa46 	bl	800c6f8 <__swsetup_r>
 800c26c:	b170      	cbz	r0, 800c28c <_vfiprintf_r+0x5c>
 800c26e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c270:	07dc      	lsls	r4, r3, #31
 800c272:	d504      	bpl.n	800c27e <_vfiprintf_r+0x4e>
 800c274:	f04f 30ff 	mov.w	r0, #4294967295
 800c278:	b01d      	add	sp, #116	@ 0x74
 800c27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c27e:	89ab      	ldrh	r3, [r5, #12]
 800c280:	0598      	lsls	r0, r3, #22
 800c282:	d4f7      	bmi.n	800c274 <_vfiprintf_r+0x44>
 800c284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c286:	f7fe fccb 	bl	800ac20 <__retarget_lock_release_recursive>
 800c28a:	e7f3      	b.n	800c274 <_vfiprintf_r+0x44>
 800c28c:	2300      	movs	r3, #0
 800c28e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c290:	2320      	movs	r3, #32
 800c292:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c296:	f8cd 800c 	str.w	r8, [sp, #12]
 800c29a:	2330      	movs	r3, #48	@ 0x30
 800c29c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c44c <_vfiprintf_r+0x21c>
 800c2a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2a4:	f04f 0901 	mov.w	r9, #1
 800c2a8:	4623      	mov	r3, r4
 800c2aa:	469a      	mov	sl, r3
 800c2ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2b0:	b10a      	cbz	r2, 800c2b6 <_vfiprintf_r+0x86>
 800c2b2:	2a25      	cmp	r2, #37	@ 0x25
 800c2b4:	d1f9      	bne.n	800c2aa <_vfiprintf_r+0x7a>
 800c2b6:	ebba 0b04 	subs.w	fp, sl, r4
 800c2ba:	d00b      	beq.n	800c2d4 <_vfiprintf_r+0xa4>
 800c2bc:	465b      	mov	r3, fp
 800c2be:	4622      	mov	r2, r4
 800c2c0:	4629      	mov	r1, r5
 800c2c2:	4630      	mov	r0, r6
 800c2c4:	f7ff ffa1 	bl	800c20a <__sfputs_r>
 800c2c8:	3001      	adds	r0, #1
 800c2ca:	f000 80a7 	beq.w	800c41c <_vfiprintf_r+0x1ec>
 800c2ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2d0:	445a      	add	r2, fp
 800c2d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800c2d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	f000 809f 	beq.w	800c41c <_vfiprintf_r+0x1ec>
 800c2de:	2300      	movs	r3, #0
 800c2e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c2e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2e8:	f10a 0a01 	add.w	sl, sl, #1
 800c2ec:	9304      	str	r3, [sp, #16]
 800c2ee:	9307      	str	r3, [sp, #28]
 800c2f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c2f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800c2f6:	4654      	mov	r4, sl
 800c2f8:	2205      	movs	r2, #5
 800c2fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2fe:	4853      	ldr	r0, [pc, #332]	@ (800c44c <_vfiprintf_r+0x21c>)
 800c300:	f7f3 ff66 	bl	80001d0 <memchr>
 800c304:	9a04      	ldr	r2, [sp, #16]
 800c306:	b9d8      	cbnz	r0, 800c340 <_vfiprintf_r+0x110>
 800c308:	06d1      	lsls	r1, r2, #27
 800c30a:	bf44      	itt	mi
 800c30c:	2320      	movmi	r3, #32
 800c30e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c312:	0713      	lsls	r3, r2, #28
 800c314:	bf44      	itt	mi
 800c316:	232b      	movmi	r3, #43	@ 0x2b
 800c318:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c31c:	f89a 3000 	ldrb.w	r3, [sl]
 800c320:	2b2a      	cmp	r3, #42	@ 0x2a
 800c322:	d015      	beq.n	800c350 <_vfiprintf_r+0x120>
 800c324:	9a07      	ldr	r2, [sp, #28]
 800c326:	4654      	mov	r4, sl
 800c328:	2000      	movs	r0, #0
 800c32a:	f04f 0c0a 	mov.w	ip, #10
 800c32e:	4621      	mov	r1, r4
 800c330:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c334:	3b30      	subs	r3, #48	@ 0x30
 800c336:	2b09      	cmp	r3, #9
 800c338:	d94b      	bls.n	800c3d2 <_vfiprintf_r+0x1a2>
 800c33a:	b1b0      	cbz	r0, 800c36a <_vfiprintf_r+0x13a>
 800c33c:	9207      	str	r2, [sp, #28]
 800c33e:	e014      	b.n	800c36a <_vfiprintf_r+0x13a>
 800c340:	eba0 0308 	sub.w	r3, r0, r8
 800c344:	fa09 f303 	lsl.w	r3, r9, r3
 800c348:	4313      	orrs	r3, r2
 800c34a:	9304      	str	r3, [sp, #16]
 800c34c:	46a2      	mov	sl, r4
 800c34e:	e7d2      	b.n	800c2f6 <_vfiprintf_r+0xc6>
 800c350:	9b03      	ldr	r3, [sp, #12]
 800c352:	1d19      	adds	r1, r3, #4
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	9103      	str	r1, [sp, #12]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	bfbb      	ittet	lt
 800c35c:	425b      	neglt	r3, r3
 800c35e:	f042 0202 	orrlt.w	r2, r2, #2
 800c362:	9307      	strge	r3, [sp, #28]
 800c364:	9307      	strlt	r3, [sp, #28]
 800c366:	bfb8      	it	lt
 800c368:	9204      	strlt	r2, [sp, #16]
 800c36a:	7823      	ldrb	r3, [r4, #0]
 800c36c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c36e:	d10a      	bne.n	800c386 <_vfiprintf_r+0x156>
 800c370:	7863      	ldrb	r3, [r4, #1]
 800c372:	2b2a      	cmp	r3, #42	@ 0x2a
 800c374:	d132      	bne.n	800c3dc <_vfiprintf_r+0x1ac>
 800c376:	9b03      	ldr	r3, [sp, #12]
 800c378:	1d1a      	adds	r2, r3, #4
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	9203      	str	r2, [sp, #12]
 800c37e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c382:	3402      	adds	r4, #2
 800c384:	9305      	str	r3, [sp, #20]
 800c386:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c45c <_vfiprintf_r+0x22c>
 800c38a:	7821      	ldrb	r1, [r4, #0]
 800c38c:	2203      	movs	r2, #3
 800c38e:	4650      	mov	r0, sl
 800c390:	f7f3 ff1e 	bl	80001d0 <memchr>
 800c394:	b138      	cbz	r0, 800c3a6 <_vfiprintf_r+0x176>
 800c396:	9b04      	ldr	r3, [sp, #16]
 800c398:	eba0 000a 	sub.w	r0, r0, sl
 800c39c:	2240      	movs	r2, #64	@ 0x40
 800c39e:	4082      	lsls	r2, r0
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	3401      	adds	r4, #1
 800c3a4:	9304      	str	r3, [sp, #16]
 800c3a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3aa:	4829      	ldr	r0, [pc, #164]	@ (800c450 <_vfiprintf_r+0x220>)
 800c3ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c3b0:	2206      	movs	r2, #6
 800c3b2:	f7f3 ff0d 	bl	80001d0 <memchr>
 800c3b6:	2800      	cmp	r0, #0
 800c3b8:	d03f      	beq.n	800c43a <_vfiprintf_r+0x20a>
 800c3ba:	4b26      	ldr	r3, [pc, #152]	@ (800c454 <_vfiprintf_r+0x224>)
 800c3bc:	bb1b      	cbnz	r3, 800c406 <_vfiprintf_r+0x1d6>
 800c3be:	9b03      	ldr	r3, [sp, #12]
 800c3c0:	3307      	adds	r3, #7
 800c3c2:	f023 0307 	bic.w	r3, r3, #7
 800c3c6:	3308      	adds	r3, #8
 800c3c8:	9303      	str	r3, [sp, #12]
 800c3ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3cc:	443b      	add	r3, r7
 800c3ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3d0:	e76a      	b.n	800c2a8 <_vfiprintf_r+0x78>
 800c3d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	2001      	movs	r0, #1
 800c3da:	e7a8      	b.n	800c32e <_vfiprintf_r+0xfe>
 800c3dc:	2300      	movs	r3, #0
 800c3de:	3401      	adds	r4, #1
 800c3e0:	9305      	str	r3, [sp, #20]
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	f04f 0c0a 	mov.w	ip, #10
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3ee:	3a30      	subs	r2, #48	@ 0x30
 800c3f0:	2a09      	cmp	r2, #9
 800c3f2:	d903      	bls.n	800c3fc <_vfiprintf_r+0x1cc>
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d0c6      	beq.n	800c386 <_vfiprintf_r+0x156>
 800c3f8:	9105      	str	r1, [sp, #20]
 800c3fa:	e7c4      	b.n	800c386 <_vfiprintf_r+0x156>
 800c3fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c400:	4604      	mov	r4, r0
 800c402:	2301      	movs	r3, #1
 800c404:	e7f0      	b.n	800c3e8 <_vfiprintf_r+0x1b8>
 800c406:	ab03      	add	r3, sp, #12
 800c408:	9300      	str	r3, [sp, #0]
 800c40a:	462a      	mov	r2, r5
 800c40c:	4b12      	ldr	r3, [pc, #72]	@ (800c458 <_vfiprintf_r+0x228>)
 800c40e:	a904      	add	r1, sp, #16
 800c410:	4630      	mov	r0, r6
 800c412:	f7fd fde9 	bl	8009fe8 <_printf_float>
 800c416:	4607      	mov	r7, r0
 800c418:	1c78      	adds	r0, r7, #1
 800c41a:	d1d6      	bne.n	800c3ca <_vfiprintf_r+0x19a>
 800c41c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c41e:	07d9      	lsls	r1, r3, #31
 800c420:	d405      	bmi.n	800c42e <_vfiprintf_r+0x1fe>
 800c422:	89ab      	ldrh	r3, [r5, #12]
 800c424:	059a      	lsls	r2, r3, #22
 800c426:	d402      	bmi.n	800c42e <_vfiprintf_r+0x1fe>
 800c428:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c42a:	f7fe fbf9 	bl	800ac20 <__retarget_lock_release_recursive>
 800c42e:	89ab      	ldrh	r3, [r5, #12]
 800c430:	065b      	lsls	r3, r3, #25
 800c432:	f53f af1f 	bmi.w	800c274 <_vfiprintf_r+0x44>
 800c436:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c438:	e71e      	b.n	800c278 <_vfiprintf_r+0x48>
 800c43a:	ab03      	add	r3, sp, #12
 800c43c:	9300      	str	r3, [sp, #0]
 800c43e:	462a      	mov	r2, r5
 800c440:	4b05      	ldr	r3, [pc, #20]	@ (800c458 <_vfiprintf_r+0x228>)
 800c442:	a904      	add	r1, sp, #16
 800c444:	4630      	mov	r0, r6
 800c446:	f7fe f867 	bl	800a518 <_printf_i>
 800c44a:	e7e4      	b.n	800c416 <_vfiprintf_r+0x1e6>
 800c44c:	0800cc38 	.word	0x0800cc38
 800c450:	0800cc42 	.word	0x0800cc42
 800c454:	08009fe9 	.word	0x08009fe9
 800c458:	0800c20b 	.word	0x0800c20b
 800c45c:	0800cc3e 	.word	0x0800cc3e

0800c460 <__sflush_r>:
 800c460:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c468:	0716      	lsls	r6, r2, #28
 800c46a:	4605      	mov	r5, r0
 800c46c:	460c      	mov	r4, r1
 800c46e:	d454      	bmi.n	800c51a <__sflush_r+0xba>
 800c470:	684b      	ldr	r3, [r1, #4]
 800c472:	2b00      	cmp	r3, #0
 800c474:	dc02      	bgt.n	800c47c <__sflush_r+0x1c>
 800c476:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c478:	2b00      	cmp	r3, #0
 800c47a:	dd48      	ble.n	800c50e <__sflush_r+0xae>
 800c47c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c47e:	2e00      	cmp	r6, #0
 800c480:	d045      	beq.n	800c50e <__sflush_r+0xae>
 800c482:	2300      	movs	r3, #0
 800c484:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c488:	682f      	ldr	r7, [r5, #0]
 800c48a:	6a21      	ldr	r1, [r4, #32]
 800c48c:	602b      	str	r3, [r5, #0]
 800c48e:	d030      	beq.n	800c4f2 <__sflush_r+0x92>
 800c490:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c492:	89a3      	ldrh	r3, [r4, #12]
 800c494:	0759      	lsls	r1, r3, #29
 800c496:	d505      	bpl.n	800c4a4 <__sflush_r+0x44>
 800c498:	6863      	ldr	r3, [r4, #4]
 800c49a:	1ad2      	subs	r2, r2, r3
 800c49c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c49e:	b10b      	cbz	r3, 800c4a4 <__sflush_r+0x44>
 800c4a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c4a2:	1ad2      	subs	r2, r2, r3
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c4a8:	6a21      	ldr	r1, [r4, #32]
 800c4aa:	4628      	mov	r0, r5
 800c4ac:	47b0      	blx	r6
 800c4ae:	1c43      	adds	r3, r0, #1
 800c4b0:	89a3      	ldrh	r3, [r4, #12]
 800c4b2:	d106      	bne.n	800c4c2 <__sflush_r+0x62>
 800c4b4:	6829      	ldr	r1, [r5, #0]
 800c4b6:	291d      	cmp	r1, #29
 800c4b8:	d82b      	bhi.n	800c512 <__sflush_r+0xb2>
 800c4ba:	4a2a      	ldr	r2, [pc, #168]	@ (800c564 <__sflush_r+0x104>)
 800c4bc:	410a      	asrs	r2, r1
 800c4be:	07d6      	lsls	r6, r2, #31
 800c4c0:	d427      	bmi.n	800c512 <__sflush_r+0xb2>
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	6062      	str	r2, [r4, #4]
 800c4c6:	04d9      	lsls	r1, r3, #19
 800c4c8:	6922      	ldr	r2, [r4, #16]
 800c4ca:	6022      	str	r2, [r4, #0]
 800c4cc:	d504      	bpl.n	800c4d8 <__sflush_r+0x78>
 800c4ce:	1c42      	adds	r2, r0, #1
 800c4d0:	d101      	bne.n	800c4d6 <__sflush_r+0x76>
 800c4d2:	682b      	ldr	r3, [r5, #0]
 800c4d4:	b903      	cbnz	r3, 800c4d8 <__sflush_r+0x78>
 800c4d6:	6560      	str	r0, [r4, #84]	@ 0x54
 800c4d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c4da:	602f      	str	r7, [r5, #0]
 800c4dc:	b1b9      	cbz	r1, 800c50e <__sflush_r+0xae>
 800c4de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c4e2:	4299      	cmp	r1, r3
 800c4e4:	d002      	beq.n	800c4ec <__sflush_r+0x8c>
 800c4e6:	4628      	mov	r0, r5
 800c4e8:	f7ff f9f6 	bl	800b8d8 <_free_r>
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	6363      	str	r3, [r4, #52]	@ 0x34
 800c4f0:	e00d      	b.n	800c50e <__sflush_r+0xae>
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	4628      	mov	r0, r5
 800c4f6:	47b0      	blx	r6
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	1c50      	adds	r0, r2, #1
 800c4fc:	d1c9      	bne.n	800c492 <__sflush_r+0x32>
 800c4fe:	682b      	ldr	r3, [r5, #0]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d0c6      	beq.n	800c492 <__sflush_r+0x32>
 800c504:	2b1d      	cmp	r3, #29
 800c506:	d001      	beq.n	800c50c <__sflush_r+0xac>
 800c508:	2b16      	cmp	r3, #22
 800c50a:	d11e      	bne.n	800c54a <__sflush_r+0xea>
 800c50c:	602f      	str	r7, [r5, #0]
 800c50e:	2000      	movs	r0, #0
 800c510:	e022      	b.n	800c558 <__sflush_r+0xf8>
 800c512:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c516:	b21b      	sxth	r3, r3
 800c518:	e01b      	b.n	800c552 <__sflush_r+0xf2>
 800c51a:	690f      	ldr	r7, [r1, #16]
 800c51c:	2f00      	cmp	r7, #0
 800c51e:	d0f6      	beq.n	800c50e <__sflush_r+0xae>
 800c520:	0793      	lsls	r3, r2, #30
 800c522:	680e      	ldr	r6, [r1, #0]
 800c524:	bf08      	it	eq
 800c526:	694b      	ldreq	r3, [r1, #20]
 800c528:	600f      	str	r7, [r1, #0]
 800c52a:	bf18      	it	ne
 800c52c:	2300      	movne	r3, #0
 800c52e:	eba6 0807 	sub.w	r8, r6, r7
 800c532:	608b      	str	r3, [r1, #8]
 800c534:	f1b8 0f00 	cmp.w	r8, #0
 800c538:	dde9      	ble.n	800c50e <__sflush_r+0xae>
 800c53a:	6a21      	ldr	r1, [r4, #32]
 800c53c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c53e:	4643      	mov	r3, r8
 800c540:	463a      	mov	r2, r7
 800c542:	4628      	mov	r0, r5
 800c544:	47b0      	blx	r6
 800c546:	2800      	cmp	r0, #0
 800c548:	dc08      	bgt.n	800c55c <__sflush_r+0xfc>
 800c54a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c54e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c552:	81a3      	strh	r3, [r4, #12]
 800c554:	f04f 30ff 	mov.w	r0, #4294967295
 800c558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c55c:	4407      	add	r7, r0
 800c55e:	eba8 0800 	sub.w	r8, r8, r0
 800c562:	e7e7      	b.n	800c534 <__sflush_r+0xd4>
 800c564:	dfbffffe 	.word	0xdfbffffe

0800c568 <_fflush_r>:
 800c568:	b538      	push	{r3, r4, r5, lr}
 800c56a:	690b      	ldr	r3, [r1, #16]
 800c56c:	4605      	mov	r5, r0
 800c56e:	460c      	mov	r4, r1
 800c570:	b913      	cbnz	r3, 800c578 <_fflush_r+0x10>
 800c572:	2500      	movs	r5, #0
 800c574:	4628      	mov	r0, r5
 800c576:	bd38      	pop	{r3, r4, r5, pc}
 800c578:	b118      	cbz	r0, 800c582 <_fflush_r+0x1a>
 800c57a:	6a03      	ldr	r3, [r0, #32]
 800c57c:	b90b      	cbnz	r3, 800c582 <_fflush_r+0x1a>
 800c57e:	f7fe f977 	bl	800a870 <__sinit>
 800c582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d0f3      	beq.n	800c572 <_fflush_r+0xa>
 800c58a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c58c:	07d0      	lsls	r0, r2, #31
 800c58e:	d404      	bmi.n	800c59a <_fflush_r+0x32>
 800c590:	0599      	lsls	r1, r3, #22
 800c592:	d402      	bmi.n	800c59a <_fflush_r+0x32>
 800c594:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c596:	f7fe fb42 	bl	800ac1e <__retarget_lock_acquire_recursive>
 800c59a:	4628      	mov	r0, r5
 800c59c:	4621      	mov	r1, r4
 800c59e:	f7ff ff5f 	bl	800c460 <__sflush_r>
 800c5a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c5a4:	07da      	lsls	r2, r3, #31
 800c5a6:	4605      	mov	r5, r0
 800c5a8:	d4e4      	bmi.n	800c574 <_fflush_r+0xc>
 800c5aa:	89a3      	ldrh	r3, [r4, #12]
 800c5ac:	059b      	lsls	r3, r3, #22
 800c5ae:	d4e1      	bmi.n	800c574 <_fflush_r+0xc>
 800c5b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5b2:	f7fe fb35 	bl	800ac20 <__retarget_lock_release_recursive>
 800c5b6:	e7dd      	b.n	800c574 <_fflush_r+0xc>

0800c5b8 <__swhatbuf_r>:
 800c5b8:	b570      	push	{r4, r5, r6, lr}
 800c5ba:	460c      	mov	r4, r1
 800c5bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5c0:	2900      	cmp	r1, #0
 800c5c2:	b096      	sub	sp, #88	@ 0x58
 800c5c4:	4615      	mov	r5, r2
 800c5c6:	461e      	mov	r6, r3
 800c5c8:	da0d      	bge.n	800c5e6 <__swhatbuf_r+0x2e>
 800c5ca:	89a3      	ldrh	r3, [r4, #12]
 800c5cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c5d0:	f04f 0100 	mov.w	r1, #0
 800c5d4:	bf14      	ite	ne
 800c5d6:	2340      	movne	r3, #64	@ 0x40
 800c5d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c5dc:	2000      	movs	r0, #0
 800c5de:	6031      	str	r1, [r6, #0]
 800c5e0:	602b      	str	r3, [r5, #0]
 800c5e2:	b016      	add	sp, #88	@ 0x58
 800c5e4:	bd70      	pop	{r4, r5, r6, pc}
 800c5e6:	466a      	mov	r2, sp
 800c5e8:	f000 f8dc 	bl	800c7a4 <_fstat_r>
 800c5ec:	2800      	cmp	r0, #0
 800c5ee:	dbec      	blt.n	800c5ca <__swhatbuf_r+0x12>
 800c5f0:	9901      	ldr	r1, [sp, #4]
 800c5f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c5f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c5fa:	4259      	negs	r1, r3
 800c5fc:	4159      	adcs	r1, r3
 800c5fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c602:	e7eb      	b.n	800c5dc <__swhatbuf_r+0x24>

0800c604 <__smakebuf_r>:
 800c604:	898b      	ldrh	r3, [r1, #12]
 800c606:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c608:	079d      	lsls	r5, r3, #30
 800c60a:	4606      	mov	r6, r0
 800c60c:	460c      	mov	r4, r1
 800c60e:	d507      	bpl.n	800c620 <__smakebuf_r+0x1c>
 800c610:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c614:	6023      	str	r3, [r4, #0]
 800c616:	6123      	str	r3, [r4, #16]
 800c618:	2301      	movs	r3, #1
 800c61a:	6163      	str	r3, [r4, #20]
 800c61c:	b003      	add	sp, #12
 800c61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c620:	ab01      	add	r3, sp, #4
 800c622:	466a      	mov	r2, sp
 800c624:	f7ff ffc8 	bl	800c5b8 <__swhatbuf_r>
 800c628:	9f00      	ldr	r7, [sp, #0]
 800c62a:	4605      	mov	r5, r0
 800c62c:	4639      	mov	r1, r7
 800c62e:	4630      	mov	r0, r6
 800c630:	f7ff f9c6 	bl	800b9c0 <_malloc_r>
 800c634:	b948      	cbnz	r0, 800c64a <__smakebuf_r+0x46>
 800c636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c63a:	059a      	lsls	r2, r3, #22
 800c63c:	d4ee      	bmi.n	800c61c <__smakebuf_r+0x18>
 800c63e:	f023 0303 	bic.w	r3, r3, #3
 800c642:	f043 0302 	orr.w	r3, r3, #2
 800c646:	81a3      	strh	r3, [r4, #12]
 800c648:	e7e2      	b.n	800c610 <__smakebuf_r+0xc>
 800c64a:	89a3      	ldrh	r3, [r4, #12]
 800c64c:	6020      	str	r0, [r4, #0]
 800c64e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c652:	81a3      	strh	r3, [r4, #12]
 800c654:	9b01      	ldr	r3, [sp, #4]
 800c656:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c65a:	b15b      	cbz	r3, 800c674 <__smakebuf_r+0x70>
 800c65c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c660:	4630      	mov	r0, r6
 800c662:	f000 f8b1 	bl	800c7c8 <_isatty_r>
 800c666:	b128      	cbz	r0, 800c674 <__smakebuf_r+0x70>
 800c668:	89a3      	ldrh	r3, [r4, #12]
 800c66a:	f023 0303 	bic.w	r3, r3, #3
 800c66e:	f043 0301 	orr.w	r3, r3, #1
 800c672:	81a3      	strh	r3, [r4, #12]
 800c674:	89a3      	ldrh	r3, [r4, #12]
 800c676:	431d      	orrs	r5, r3
 800c678:	81a5      	strh	r5, [r4, #12]
 800c67a:	e7cf      	b.n	800c61c <__smakebuf_r+0x18>

0800c67c <__swbuf_r>:
 800c67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c67e:	460e      	mov	r6, r1
 800c680:	4614      	mov	r4, r2
 800c682:	4605      	mov	r5, r0
 800c684:	b118      	cbz	r0, 800c68e <__swbuf_r+0x12>
 800c686:	6a03      	ldr	r3, [r0, #32]
 800c688:	b90b      	cbnz	r3, 800c68e <__swbuf_r+0x12>
 800c68a:	f7fe f8f1 	bl	800a870 <__sinit>
 800c68e:	69a3      	ldr	r3, [r4, #24]
 800c690:	60a3      	str	r3, [r4, #8]
 800c692:	89a3      	ldrh	r3, [r4, #12]
 800c694:	071a      	lsls	r2, r3, #28
 800c696:	d501      	bpl.n	800c69c <__swbuf_r+0x20>
 800c698:	6923      	ldr	r3, [r4, #16]
 800c69a:	b943      	cbnz	r3, 800c6ae <__swbuf_r+0x32>
 800c69c:	4621      	mov	r1, r4
 800c69e:	4628      	mov	r0, r5
 800c6a0:	f000 f82a 	bl	800c6f8 <__swsetup_r>
 800c6a4:	b118      	cbz	r0, 800c6ae <__swbuf_r+0x32>
 800c6a6:	f04f 37ff 	mov.w	r7, #4294967295
 800c6aa:	4638      	mov	r0, r7
 800c6ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6ae:	6823      	ldr	r3, [r4, #0]
 800c6b0:	6922      	ldr	r2, [r4, #16]
 800c6b2:	1a98      	subs	r0, r3, r2
 800c6b4:	6963      	ldr	r3, [r4, #20]
 800c6b6:	b2f6      	uxtb	r6, r6
 800c6b8:	4283      	cmp	r3, r0
 800c6ba:	4637      	mov	r7, r6
 800c6bc:	dc05      	bgt.n	800c6ca <__swbuf_r+0x4e>
 800c6be:	4621      	mov	r1, r4
 800c6c0:	4628      	mov	r0, r5
 800c6c2:	f7ff ff51 	bl	800c568 <_fflush_r>
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	d1ed      	bne.n	800c6a6 <__swbuf_r+0x2a>
 800c6ca:	68a3      	ldr	r3, [r4, #8]
 800c6cc:	3b01      	subs	r3, #1
 800c6ce:	60a3      	str	r3, [r4, #8]
 800c6d0:	6823      	ldr	r3, [r4, #0]
 800c6d2:	1c5a      	adds	r2, r3, #1
 800c6d4:	6022      	str	r2, [r4, #0]
 800c6d6:	701e      	strb	r6, [r3, #0]
 800c6d8:	6962      	ldr	r2, [r4, #20]
 800c6da:	1c43      	adds	r3, r0, #1
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d004      	beq.n	800c6ea <__swbuf_r+0x6e>
 800c6e0:	89a3      	ldrh	r3, [r4, #12]
 800c6e2:	07db      	lsls	r3, r3, #31
 800c6e4:	d5e1      	bpl.n	800c6aa <__swbuf_r+0x2e>
 800c6e6:	2e0a      	cmp	r6, #10
 800c6e8:	d1df      	bne.n	800c6aa <__swbuf_r+0x2e>
 800c6ea:	4621      	mov	r1, r4
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	f7ff ff3b 	bl	800c568 <_fflush_r>
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	d0d9      	beq.n	800c6aa <__swbuf_r+0x2e>
 800c6f6:	e7d6      	b.n	800c6a6 <__swbuf_r+0x2a>

0800c6f8 <__swsetup_r>:
 800c6f8:	b538      	push	{r3, r4, r5, lr}
 800c6fa:	4b29      	ldr	r3, [pc, #164]	@ (800c7a0 <__swsetup_r+0xa8>)
 800c6fc:	4605      	mov	r5, r0
 800c6fe:	6818      	ldr	r0, [r3, #0]
 800c700:	460c      	mov	r4, r1
 800c702:	b118      	cbz	r0, 800c70c <__swsetup_r+0x14>
 800c704:	6a03      	ldr	r3, [r0, #32]
 800c706:	b90b      	cbnz	r3, 800c70c <__swsetup_r+0x14>
 800c708:	f7fe f8b2 	bl	800a870 <__sinit>
 800c70c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c710:	0719      	lsls	r1, r3, #28
 800c712:	d422      	bmi.n	800c75a <__swsetup_r+0x62>
 800c714:	06da      	lsls	r2, r3, #27
 800c716:	d407      	bmi.n	800c728 <__swsetup_r+0x30>
 800c718:	2209      	movs	r2, #9
 800c71a:	602a      	str	r2, [r5, #0]
 800c71c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c720:	81a3      	strh	r3, [r4, #12]
 800c722:	f04f 30ff 	mov.w	r0, #4294967295
 800c726:	e033      	b.n	800c790 <__swsetup_r+0x98>
 800c728:	0758      	lsls	r0, r3, #29
 800c72a:	d512      	bpl.n	800c752 <__swsetup_r+0x5a>
 800c72c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c72e:	b141      	cbz	r1, 800c742 <__swsetup_r+0x4a>
 800c730:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c734:	4299      	cmp	r1, r3
 800c736:	d002      	beq.n	800c73e <__swsetup_r+0x46>
 800c738:	4628      	mov	r0, r5
 800c73a:	f7ff f8cd 	bl	800b8d8 <_free_r>
 800c73e:	2300      	movs	r3, #0
 800c740:	6363      	str	r3, [r4, #52]	@ 0x34
 800c742:	89a3      	ldrh	r3, [r4, #12]
 800c744:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c748:	81a3      	strh	r3, [r4, #12]
 800c74a:	2300      	movs	r3, #0
 800c74c:	6063      	str	r3, [r4, #4]
 800c74e:	6923      	ldr	r3, [r4, #16]
 800c750:	6023      	str	r3, [r4, #0]
 800c752:	89a3      	ldrh	r3, [r4, #12]
 800c754:	f043 0308 	orr.w	r3, r3, #8
 800c758:	81a3      	strh	r3, [r4, #12]
 800c75a:	6923      	ldr	r3, [r4, #16]
 800c75c:	b94b      	cbnz	r3, 800c772 <__swsetup_r+0x7a>
 800c75e:	89a3      	ldrh	r3, [r4, #12]
 800c760:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c768:	d003      	beq.n	800c772 <__swsetup_r+0x7a>
 800c76a:	4621      	mov	r1, r4
 800c76c:	4628      	mov	r0, r5
 800c76e:	f7ff ff49 	bl	800c604 <__smakebuf_r>
 800c772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c776:	f013 0201 	ands.w	r2, r3, #1
 800c77a:	d00a      	beq.n	800c792 <__swsetup_r+0x9a>
 800c77c:	2200      	movs	r2, #0
 800c77e:	60a2      	str	r2, [r4, #8]
 800c780:	6962      	ldr	r2, [r4, #20]
 800c782:	4252      	negs	r2, r2
 800c784:	61a2      	str	r2, [r4, #24]
 800c786:	6922      	ldr	r2, [r4, #16]
 800c788:	b942      	cbnz	r2, 800c79c <__swsetup_r+0xa4>
 800c78a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c78e:	d1c5      	bne.n	800c71c <__swsetup_r+0x24>
 800c790:	bd38      	pop	{r3, r4, r5, pc}
 800c792:	0799      	lsls	r1, r3, #30
 800c794:	bf58      	it	pl
 800c796:	6962      	ldrpl	r2, [r4, #20]
 800c798:	60a2      	str	r2, [r4, #8]
 800c79a:	e7f4      	b.n	800c786 <__swsetup_r+0x8e>
 800c79c:	2000      	movs	r0, #0
 800c79e:	e7f7      	b.n	800c790 <__swsetup_r+0x98>
 800c7a0:	20000048 	.word	0x20000048

0800c7a4 <_fstat_r>:
 800c7a4:	b538      	push	{r3, r4, r5, lr}
 800c7a6:	4d07      	ldr	r5, [pc, #28]	@ (800c7c4 <_fstat_r+0x20>)
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	4604      	mov	r4, r0
 800c7ac:	4608      	mov	r0, r1
 800c7ae:	4611      	mov	r1, r2
 800c7b0:	602b      	str	r3, [r5, #0]
 800c7b2:	f7f4 fec0 	bl	8001536 <_fstat>
 800c7b6:	1c43      	adds	r3, r0, #1
 800c7b8:	d102      	bne.n	800c7c0 <_fstat_r+0x1c>
 800c7ba:	682b      	ldr	r3, [r5, #0]
 800c7bc:	b103      	cbz	r3, 800c7c0 <_fstat_r+0x1c>
 800c7be:	6023      	str	r3, [r4, #0]
 800c7c0:	bd38      	pop	{r3, r4, r5, pc}
 800c7c2:	bf00      	nop
 800c7c4:	20000540 	.word	0x20000540

0800c7c8 <_isatty_r>:
 800c7c8:	b538      	push	{r3, r4, r5, lr}
 800c7ca:	4d06      	ldr	r5, [pc, #24]	@ (800c7e4 <_isatty_r+0x1c>)
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	4604      	mov	r4, r0
 800c7d0:	4608      	mov	r0, r1
 800c7d2:	602b      	str	r3, [r5, #0]
 800c7d4:	f7f4 febf 	bl	8001556 <_isatty>
 800c7d8:	1c43      	adds	r3, r0, #1
 800c7da:	d102      	bne.n	800c7e2 <_isatty_r+0x1a>
 800c7dc:	682b      	ldr	r3, [r5, #0]
 800c7de:	b103      	cbz	r3, 800c7e2 <_isatty_r+0x1a>
 800c7e0:	6023      	str	r3, [r4, #0]
 800c7e2:	bd38      	pop	{r3, r4, r5, pc}
 800c7e4:	20000540 	.word	0x20000540

0800c7e8 <_sbrk_r>:
 800c7e8:	b538      	push	{r3, r4, r5, lr}
 800c7ea:	4d06      	ldr	r5, [pc, #24]	@ (800c804 <_sbrk_r+0x1c>)
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	4604      	mov	r4, r0
 800c7f0:	4608      	mov	r0, r1
 800c7f2:	602b      	str	r3, [r5, #0]
 800c7f4:	f7f4 fec8 	bl	8001588 <_sbrk>
 800c7f8:	1c43      	adds	r3, r0, #1
 800c7fa:	d102      	bne.n	800c802 <_sbrk_r+0x1a>
 800c7fc:	682b      	ldr	r3, [r5, #0]
 800c7fe:	b103      	cbz	r3, 800c802 <_sbrk_r+0x1a>
 800c800:	6023      	str	r3, [r4, #0]
 800c802:	bd38      	pop	{r3, r4, r5, pc}
 800c804:	20000540 	.word	0x20000540

0800c808 <__assert_func>:
 800c808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c80a:	4614      	mov	r4, r2
 800c80c:	461a      	mov	r2, r3
 800c80e:	4b09      	ldr	r3, [pc, #36]	@ (800c834 <__assert_func+0x2c>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	4605      	mov	r5, r0
 800c814:	68d8      	ldr	r0, [r3, #12]
 800c816:	b954      	cbnz	r4, 800c82e <__assert_func+0x26>
 800c818:	4b07      	ldr	r3, [pc, #28]	@ (800c838 <__assert_func+0x30>)
 800c81a:	461c      	mov	r4, r3
 800c81c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c820:	9100      	str	r1, [sp, #0]
 800c822:	462b      	mov	r3, r5
 800c824:	4905      	ldr	r1, [pc, #20]	@ (800c83c <__assert_func+0x34>)
 800c826:	f000 f841 	bl	800c8ac <fiprintf>
 800c82a:	f000 f851 	bl	800c8d0 <abort>
 800c82e:	4b04      	ldr	r3, [pc, #16]	@ (800c840 <__assert_func+0x38>)
 800c830:	e7f4      	b.n	800c81c <__assert_func+0x14>
 800c832:	bf00      	nop
 800c834:	20000048 	.word	0x20000048
 800c838:	0800cc8e 	.word	0x0800cc8e
 800c83c:	0800cc60 	.word	0x0800cc60
 800c840:	0800cc53 	.word	0x0800cc53

0800c844 <_calloc_r>:
 800c844:	b570      	push	{r4, r5, r6, lr}
 800c846:	fba1 5402 	umull	r5, r4, r1, r2
 800c84a:	b93c      	cbnz	r4, 800c85c <_calloc_r+0x18>
 800c84c:	4629      	mov	r1, r5
 800c84e:	f7ff f8b7 	bl	800b9c0 <_malloc_r>
 800c852:	4606      	mov	r6, r0
 800c854:	b928      	cbnz	r0, 800c862 <_calloc_r+0x1e>
 800c856:	2600      	movs	r6, #0
 800c858:	4630      	mov	r0, r6
 800c85a:	bd70      	pop	{r4, r5, r6, pc}
 800c85c:	220c      	movs	r2, #12
 800c85e:	6002      	str	r2, [r0, #0]
 800c860:	e7f9      	b.n	800c856 <_calloc_r+0x12>
 800c862:	462a      	mov	r2, r5
 800c864:	4621      	mov	r1, r4
 800c866:	f7fe f94a 	bl	800aafe <memset>
 800c86a:	e7f5      	b.n	800c858 <_calloc_r+0x14>

0800c86c <__ascii_mbtowc>:
 800c86c:	b082      	sub	sp, #8
 800c86e:	b901      	cbnz	r1, 800c872 <__ascii_mbtowc+0x6>
 800c870:	a901      	add	r1, sp, #4
 800c872:	b142      	cbz	r2, 800c886 <__ascii_mbtowc+0x1a>
 800c874:	b14b      	cbz	r3, 800c88a <__ascii_mbtowc+0x1e>
 800c876:	7813      	ldrb	r3, [r2, #0]
 800c878:	600b      	str	r3, [r1, #0]
 800c87a:	7812      	ldrb	r2, [r2, #0]
 800c87c:	1e10      	subs	r0, r2, #0
 800c87e:	bf18      	it	ne
 800c880:	2001      	movne	r0, #1
 800c882:	b002      	add	sp, #8
 800c884:	4770      	bx	lr
 800c886:	4610      	mov	r0, r2
 800c888:	e7fb      	b.n	800c882 <__ascii_mbtowc+0x16>
 800c88a:	f06f 0001 	mvn.w	r0, #1
 800c88e:	e7f8      	b.n	800c882 <__ascii_mbtowc+0x16>

0800c890 <__ascii_wctomb>:
 800c890:	4603      	mov	r3, r0
 800c892:	4608      	mov	r0, r1
 800c894:	b141      	cbz	r1, 800c8a8 <__ascii_wctomb+0x18>
 800c896:	2aff      	cmp	r2, #255	@ 0xff
 800c898:	d904      	bls.n	800c8a4 <__ascii_wctomb+0x14>
 800c89a:	228a      	movs	r2, #138	@ 0x8a
 800c89c:	601a      	str	r2, [r3, #0]
 800c89e:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a2:	4770      	bx	lr
 800c8a4:	700a      	strb	r2, [r1, #0]
 800c8a6:	2001      	movs	r0, #1
 800c8a8:	4770      	bx	lr
	...

0800c8ac <fiprintf>:
 800c8ac:	b40e      	push	{r1, r2, r3}
 800c8ae:	b503      	push	{r0, r1, lr}
 800c8b0:	4601      	mov	r1, r0
 800c8b2:	ab03      	add	r3, sp, #12
 800c8b4:	4805      	ldr	r0, [pc, #20]	@ (800c8cc <fiprintf+0x20>)
 800c8b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8ba:	6800      	ldr	r0, [r0, #0]
 800c8bc:	9301      	str	r3, [sp, #4]
 800c8be:	f7ff fcb7 	bl	800c230 <_vfiprintf_r>
 800c8c2:	b002      	add	sp, #8
 800c8c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8c8:	b003      	add	sp, #12
 800c8ca:	4770      	bx	lr
 800c8cc:	20000048 	.word	0x20000048

0800c8d0 <abort>:
 800c8d0:	b508      	push	{r3, lr}
 800c8d2:	2006      	movs	r0, #6
 800c8d4:	f000 f82c 	bl	800c930 <raise>
 800c8d8:	2001      	movs	r0, #1
 800c8da:	f7f4 fdf8 	bl	80014ce <_exit>

0800c8de <_raise_r>:
 800c8de:	291f      	cmp	r1, #31
 800c8e0:	b538      	push	{r3, r4, r5, lr}
 800c8e2:	4605      	mov	r5, r0
 800c8e4:	460c      	mov	r4, r1
 800c8e6:	d904      	bls.n	800c8f2 <_raise_r+0x14>
 800c8e8:	2316      	movs	r3, #22
 800c8ea:	6003      	str	r3, [r0, #0]
 800c8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c8f0:	bd38      	pop	{r3, r4, r5, pc}
 800c8f2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c8f4:	b112      	cbz	r2, 800c8fc <_raise_r+0x1e>
 800c8f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c8fa:	b94b      	cbnz	r3, 800c910 <_raise_r+0x32>
 800c8fc:	4628      	mov	r0, r5
 800c8fe:	f000 f831 	bl	800c964 <_getpid_r>
 800c902:	4622      	mov	r2, r4
 800c904:	4601      	mov	r1, r0
 800c906:	4628      	mov	r0, r5
 800c908:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c90c:	f000 b818 	b.w	800c940 <_kill_r>
 800c910:	2b01      	cmp	r3, #1
 800c912:	d00a      	beq.n	800c92a <_raise_r+0x4c>
 800c914:	1c59      	adds	r1, r3, #1
 800c916:	d103      	bne.n	800c920 <_raise_r+0x42>
 800c918:	2316      	movs	r3, #22
 800c91a:	6003      	str	r3, [r0, #0]
 800c91c:	2001      	movs	r0, #1
 800c91e:	e7e7      	b.n	800c8f0 <_raise_r+0x12>
 800c920:	2100      	movs	r1, #0
 800c922:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c926:	4620      	mov	r0, r4
 800c928:	4798      	blx	r3
 800c92a:	2000      	movs	r0, #0
 800c92c:	e7e0      	b.n	800c8f0 <_raise_r+0x12>
	...

0800c930 <raise>:
 800c930:	4b02      	ldr	r3, [pc, #8]	@ (800c93c <raise+0xc>)
 800c932:	4601      	mov	r1, r0
 800c934:	6818      	ldr	r0, [r3, #0]
 800c936:	f7ff bfd2 	b.w	800c8de <_raise_r>
 800c93a:	bf00      	nop
 800c93c:	20000048 	.word	0x20000048

0800c940 <_kill_r>:
 800c940:	b538      	push	{r3, r4, r5, lr}
 800c942:	4d07      	ldr	r5, [pc, #28]	@ (800c960 <_kill_r+0x20>)
 800c944:	2300      	movs	r3, #0
 800c946:	4604      	mov	r4, r0
 800c948:	4608      	mov	r0, r1
 800c94a:	4611      	mov	r1, r2
 800c94c:	602b      	str	r3, [r5, #0]
 800c94e:	f7f4 fdae 	bl	80014ae <_kill>
 800c952:	1c43      	adds	r3, r0, #1
 800c954:	d102      	bne.n	800c95c <_kill_r+0x1c>
 800c956:	682b      	ldr	r3, [r5, #0]
 800c958:	b103      	cbz	r3, 800c95c <_kill_r+0x1c>
 800c95a:	6023      	str	r3, [r4, #0]
 800c95c:	bd38      	pop	{r3, r4, r5, pc}
 800c95e:	bf00      	nop
 800c960:	20000540 	.word	0x20000540

0800c964 <_getpid_r>:
 800c964:	f7f4 bd9b 	b.w	800149e <_getpid>

0800c968 <_init>:
 800c968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c96a:	bf00      	nop
 800c96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c96e:	bc08      	pop	{r3}
 800c970:	469e      	mov	lr, r3
 800c972:	4770      	bx	lr

0800c974 <_fini>:
 800c974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c976:	bf00      	nop
 800c978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c97a:	bc08      	pop	{r3}
 800c97c:	469e      	mov	lr, r3
 800c97e:	4770      	bx	lr
